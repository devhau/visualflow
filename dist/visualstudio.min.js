/**
   * @license
   * author: Nguyen Van Hau
   * visualstudio.js v0.0.1-beta
   * Released under the MIT license.
   */
var visualstudio=function(){"use strict";const e="vs-left",t="vs-top",s="vs-view",n="vs-bottom",o="vs-right";class i{event;elNode=document.createElement("div");constructor(e,t){this.event=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_title">${e}</div>\n    <div class="vs-boxinfo_content"></div>`,t&&t(this.elNode.querySelector(".vs-boxinfo_content"))}}class r extends i{event;constructor(e,t){super(e,t),this.event=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{e.innerHTML="xin chào"}))}}class c extends i{event;constructor(e,t){super(e,t),this.event=t,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(e=>{e.innerHTML="xin chào"}))}}class a extends i{event;constructor(e,t){super(e,t),this.event=t,this.elNode.innerHTML="ViewDock",this.elNode.classList.add("vs-view")}}class d{container;event;$dockManager={};constructor(e,t){this.container=e,this.event=t}reset(){this.$dockManager={},this.addDock(e,r),this.addDock(o,c),this.addDock(o,r),this.addDock(s,a),this.addDock(t,i),this.addDock(n,i),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this)}))}))}}class v{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,n=s.indexOf(t);n>-1&&s.splice(n,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}return class{container;$properties={};$control={};$dockManager;events;onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t=null){this.container=e,this.events=new v,this.$properties.project={...t?.properties||{},name:{defautl:""},x:{defautl:0},y:{default:0},zoom:{default:0}},this.$control=t?.control||{},Object.keys(this.$control).forEach((e=>{this.$properties[`node_${e}`]={...this.$control[e].properties||{},key:{defautl:e},name:{defautl:""},x:{defautl:0},y:{default:0}}})),this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new d(this.container,this),this.$dockManager.reset()}getControlNodeByKey(e){return{...this.$control[e],properties:this.getPropertyByKey(e)}}getPropertyByKey(e){return this.$properties[e]}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsc3R1ZGlvLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvcmUvQ29uc3RhbnQudHMiLCIuLi9zcmMvZG9jay9Eb2NrQmFzZS50cyIsIi4uL3NyYy9kb2NrL0NvbnRyb2xEb2NrLnRzIiwiLi4vc3JjL2RvY2svUHJvcGVydHlEb2NrLnRzIiwiLi4vc3JjL2RvY2svVmlld0RvY2sudHMiLCIuLi9zcmMvZG9jay9Eb2NrTWFuYWdlci50cyIsIi4uL3NyYy9jb3JlL0V2ZW50Rmxvdy50cyIsIi4uL3NyYy9WaXN1YWxTdHVkaW8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEV2ZW50RW51bSA9IHtcbiAgaW5pdDogXCJpbml0XCIsXG4gIGRhdGFDaGFuZ2U6IFwiZGF0YUNoYW5nZVwiLFxuICBzZWxlY3ROb2RlOiBcInNlbGVjdE5vZGVcIixcbiAgY2hhbmdlOiBcImNoYW5nZVwiLFxuICBkaXNwb3NlOiBcImRpc3Bvc2VcIlxufVxuXG5leHBvcnQgY29uc3QgRG9ja0VudW0gPSB7XG4gIGxlZnQ6IFwidnMtbGVmdFwiLFxuICB0b3A6IFwidnMtdG9wXCIsXG4gIHZpZXc6IFwidnMtdmlld1wiLFxuICBib3R0b206IFwidnMtYm90dG9tXCIsXG4gIHJpZ2h0OiBcInZzLXJpZ2h0XCIsXG59XG4iLCJpbXBvcnQgeyBJRXZlbnQgfSBmcm9tIFwiLi4vY29yZS9CYXNlRmxvd1wiO1xuXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIGV2ZW50OiBJRXZlbnQpIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICdEb2NrQmFzZSc7XG4gIH1cbiAgcHVibGljIEJveEluZm8odGl0bGU6IHN0cmluZywgJGNhbGxiYWNrKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLWJveGluZm8nKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cInZzLWJveGluZm9fdGl0bGVcIj4ke3RpdGxlfTwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX2NvbnRlbnRcIj48L2Rpdj5gO1xuICAgIGlmICgkY2FsbGJhY2spIHtcbiAgICAgICRjYWxsYmFjayh0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudnMtYm94aW5mb19jb250ZW50JykpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbnRyb2xEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIGV2ZW50OiBJRXZlbnQpIHtcbiAgICBzdXBlcihjb250YWluZXIsIGV2ZW50KTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1jb250cm9sJyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdDb250cm9sJywgKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBub2RlLmlubmVySFRNTCA9IFwieGluIGNow6BvXCI7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElFdmVudCB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eURvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgZXZlbnQ6IElFdmVudCkge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgZXZlbnQpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9wZXJ0eScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbm9kZS5pbm5lckhUTUw9XCJ4aW4gY2jDoG9cIjtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXdEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIGV2ZW50OiBJRXZlbnQpIHtcbiAgICBzdXBlcihjb250YWluZXIsIGV2ZW50KTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSAnVmlld0RvY2snO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXZpZXcnKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IERvY2tFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IENvbnRyb2xEb2NrIH0gZnJvbSBcIi4vQ29udHJvbERvY2tcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcbmltcG9ydCB7IFByb3BlcnR5RG9jayB9IGZyb20gXCIuL1Byb3BlcnR5RG9ja1wiO1xuaW1wb3J0IHsgVmlld0RvY2sgfSBmcm9tIFwiLi9WaWV3RG9ja1wiO1xuXG5leHBvcnQgY2xhc3MgRG9ja01hbmFnZXIge1xuICBwcml2YXRlICRkb2NrTWFuYWdlcjogYW55ID0ge307XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBldmVudDogSUV2ZW50KSB7XG4gIH1cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyID0ge307XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmxlZnQsIENvbnRyb2xEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ucmlnaHQsIFByb3BlcnR5RG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnJpZ2h0LCBDb250cm9sRG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnZpZXcsIFZpZXdEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0udG9wLCBEb2NrQmFzZSk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmJvdHRvbSwgRG9ja0Jhc2UpO1xuICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgfVxuICBwdWJsaWMgYWRkRG9jaygka2V5OiBzdHJpbmcsICR2aWV3OiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldKVxuICAgICAgdGhpcy4kZG9ja01hbmFnZXJbJGtleV0gPSBbXTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlclska2V5XSA9IFsuLi50aGlzLiRkb2NrTWFuYWdlclska2V5XSwgJHZpZXddO1xuICB9XG5cbiAgcHVibGljIFJlbmRlclVJKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1sZWZ0IHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy10b3AgdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtdmlldyB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy1ib3R0b20gdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidnMtcmlnaHQgdnMtZG9ja1wiPjwvZGl2PlxuICAgIGA7XG4gICAgT2JqZWN0LmtleXModGhpcy4kZG9ja01hbmFnZXIpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBsZXQgcXVlcnlTZWxlY3RvciA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYC4ke2tleX1gKTtcbiAgICAgIGlmIChxdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuJGRvY2tNYW5hZ2VyW2tleV0uZm9yRWFjaCgoJGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgIG5ldyAkaXRlbShxdWVyeVNlbGVjdG9yLCB0aGlzKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyB7XG4gIHByaXZhdGUgZXZlbnRzOiBhbnkgPSB7fTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkgeyB9XG4gIHB1YmxpYyBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB0aGlzLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgLyogRXZlbnRzICovXG4gIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgY2FsbGJhY2t9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZSBldmVudCBpcyBub3QgYSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGV2ZW50IG5hbWUgbXVzdCBiZSBhIHN0cmluZywgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgZXZlbnR9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0ge1xuICAgICAgICBsaXN0ZW5lcnM6IFtdXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5saXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xuXG4gICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVyc1xuICAgIGNvbnN0IGxpc3RlbmVySW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaylcbiAgICBjb25zdCBoYXNMaXN0ZW5lciA9IGxpc3RlbmVySW5kZXggPiAtMVxuICAgIGlmIChoYXNMaXN0ZW5lcikgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LCAxKVxuICB9XG5cbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gY29uc29sZS5lcnJvcihgVGhpcyBldmVudDogJHtldmVudH0gZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiB7XG4gICAgICBsaXN0ZW5lcihkZXRhaWxzKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSUNvbnRyb2xOb2RlLCBJRXZlbnQgfSBmcm9tICcuL2NvcmUvQmFzZUZsb3cnO1xuaW1wb3J0IHsgRG9ja01hbmFnZXIgfSBmcm9tICcuL2RvY2svRG9ja01hbmFnZXInO1xuaW1wb3J0IHsgRXZlbnRGbG93IH0gZnJvbSAnLi9jb3JlL0V2ZW50Rmxvdyc7XG5leHBvcnQgY2xhc3MgVmlzdWFsU3R1ZGlvIGltcGxlbWVudHMgSUNvbnRyb2xOb2RlLCBJRXZlbnQge1xuICBwcml2YXRlICRwcm9wZXJ0aWVzOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSAkY29udHJvbDogYW55ID0ge307XG4gIHByaXZhdGUgJGRvY2tNYW5hZ2VyOiBEb2NrTWFuYWdlcjtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdztcbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgb3B0aW9uOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgLy9zZXQgcHJvamVjdFxuICAgIHRoaXMuJHByb3BlcnRpZXNbJ3Byb2plY3QnXSA9IHtcbiAgICAgIC4uLihvcHRpb24/LnByb3BlcnRpZXMgfHwge30pLFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdXRsOiBcIlwiXG4gICAgICB9LFxuICAgICAgeDoge1xuICAgICAgICBkZWZhdXRsOiAwXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgem9vbToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBzZXQgY29udHJvbFxuICAgIHRoaXMuJGNvbnRyb2wgPSBvcHRpb24/LmNvbnRyb2wgfHwge307XG4gICAgT2JqZWN0LmtleXModGhpcy4kY29udHJvbCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuJHByb3BlcnRpZXNbYG5vZGVfJHtrZXl9YF0gPSB7XG4gICAgICAgIC4uLih0aGlzLiRjb250cm9sW2tleV0ucHJvcGVydGllcyB8fCB7fSksXG4gICAgICAgIGtleToge1xuICAgICAgICAgIGRlZmF1dGw6IGtleVxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgZGVmYXV0bDogXCJcIlxuICAgICAgICB9LFxuICAgICAgICB4OiB7XG4gICAgICAgICAgZGVmYXV0bDogMFxuICAgICAgICB9LFxuICAgICAgICB5OiB7XG4gICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCd2cy1jb250YWluZXInKTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd2cy1jb250YWluZXInKTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlciA9IG5ldyBEb2NrTWFuYWdlcih0aGlzLmNvbnRhaW5lciwgdGhpcyk7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIucmVzZXQoKTtcbiAgfVxuICBnZXRDb250cm9sTm9kZUJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuJGNvbnRyb2xba2V5XSxcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMuZ2V0UHJvcGVydHlCeUtleShrZXkpXG4gICAgfVxuICB9XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvcGVydGllc1trZXldO1xuICB9XG59XG4iXSwibmFtZXMiOlsiRG9ja0VudW0iLCJEb2NrQmFzZSIsImV2ZW50IiwiZWxOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJ0aGlzIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJCb3hJbmZvIiwidGl0bGUiLCIkY2FsbGJhY2siLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJxdWVyeVNlbGVjdG9yIiwiQ29udHJvbERvY2siLCJzdXBlciIsIm5vZGUiLCJQcm9wZXJ0eURvY2siLCJWaWV3RG9jayIsIkRvY2tNYW5hZ2VyIiwiJGRvY2tNYW5hZ2VyIiwicmVzZXQiLCJhZGREb2NrIiwiUmVuZGVyVUkiLCIka2V5IiwiJHZpZXciLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsIiRpdGVtIiwiRXZlbnRGbG93IiwiZXZlbnRzIiwib25TYWZlIiwiY2FsbGJhY2siLCJyZW1vdmVMaXN0ZW5lciIsIm9uIiwiY29uc29sZSIsImVycm9yIiwidW5kZWZpbmVkIiwibGlzdGVuZXJzIiwicHVzaCIsImxpc3RlbmVySW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJkZXRhaWxzIiwibGlzdGVuZXIiLCIkcHJvcGVydGllcyIsIiRjb250cm9sIiwib3B0aW9uIiwicHJvcGVydGllcyIsIm5hbWUiLCJkZWZhdXRsIiwieCIsInkiLCJkZWZhdWx0Iiwiem9vbSIsImNvbnRyb2wiLCJnZXRDb250cm9sTm9kZUJ5S2V5IiwiZ2V0UHJvcGVydHlCeUtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O3lDQVFPLE1BQU1BLEVBQ0wsVUFES0EsRUFFTixTQUZNQSxFQUdMLFVBSEtBLEVBSUgsWUFKR0EsRUFLSixpQkNYSUMsRUFFMENDLE1BRDlDQyxPQUFzQkMsU0FBU0MsY0FBYyxPQUNwREMsWUFBbUJDLEVBQWtDTCxHQUFBTSxLQUFLTixNQUFMQSxFQUNuREssRUFBVUUsWUFBWUQsS0FBS0wsUUFDM0JLLEtBQUtMLE9BQU9PLFVBQVksV0FFbkJDLFFBQVFDLEVBQWVDLEdBQzVCTCxLQUFLTCxPQUFPVyxVQUFVQyxPQUFPLGNBQzdCUCxLQUFLTCxPQUFPVyxVQUFVRSxJQUFJLGNBQzFCUixLQUFLTCxPQUFPTyxVQUFZLGlDQUFpQ0Usc0RBRXJEQyxHQUNGQSxFQUFVTCxLQUFLTCxPQUFPYyxjQUFjLHlCQ1hwQyxNQUFPQyxVQUFvQmpCLEVBQ3NCQyxNQUFyREksWUFBbUJDLEVBQWtDTCxHQUNuRGlCLE1BQU1aLEVBQVdMLEdBRGtDTSxLQUFLTixNQUFMQSxFQUVuRE0sS0FBS0wsT0FBT1csVUFBVUUsSUFBSSxjQUMxQlIsS0FBS0csUUFBUSxXQUFZUyxJQUN2QkEsRUFBS1YsVUFBWSxlQ0xqQixNQUFPVyxVQUFxQnBCLEVBQ3FCQyxNQUFyREksWUFBbUJDLEVBQWtDTCxHQUNuRGlCLE1BQU1aLEVBQVdMLEdBRGtDTSxLQUFLTixNQUFMQSxFQUVuRE0sS0FBS0wsT0FBT1csVUFBVUUsSUFBSSxlQUMxQlIsS0FBS0csUUFBUSxZQUFhUyxJQUN4QkEsRUFBS1YsVUFBVSxlQ0xmLE1BQU9ZLFVBQWlCckIsRUFDeUJDLE1BQXJESSxZQUFtQkMsRUFBa0NMLEdB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
