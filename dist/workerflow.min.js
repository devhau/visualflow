/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{node;data={};nodes=[];Event={dataChange:"dataChange",change:"change"};constructor(e){this.node=e}InitData(e=null,t=-1){-1!==t&&(this.node.properties=t),this.load(e),this.BindEvent(this.node),this.UpdateUI()}RemoveEventAll(){for(let e of this.nodes)e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))}));this.nodes=[]}RemoveEvent(e){let t=this.nodes.indexOf(e);t>-1&&(e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))})),this.nodes.slice(t,1))}BindEvent(e){this.RemoveEvent(e),this.nodes=[...this.nodes,e],e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{"SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${this.data[e.getAttribute("node:model")]}`:e.value=this.data[e.getAttribute("node:model")]})),setTimeout((()=>{e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.addEventListener("keyup",this.changeInput.bind(this))}),300)}))}SetValue(e,t,s=null){for(let i of this.nodes)i.elNode.querySelectorAll(`[node\\:model="${e}"]`).forEach((e=>{e!=s&&("SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${t}`:e.value=t)})),i.dispatch(this.Event.dataChange,{key:e,value:t,elUpdate:s}),i.dispatch(this.Event.change,{key:e,value:t,elUpdate:s})}Set(e,t,s=null){this.data[e]=t,setTimeout((()=>{this.SetValue(e,t,s)}))}Get(e){return this.data[e]}changeInput(e){this.Set(e.target.getAttribute("node:model"),e.target.value,e.target)}UpdateUI(){setTimeout((()=>{for(let e of this.nodes)e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{"SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${this.data[e.getAttribute("node:model")]}`:e.value=this.data[e.getAttribute("node:model")]}))}),300)}load(e){this.data={};for(let t of Object.keys(this.node.properties))this.data[t]=e?.[t]??this.node.properties[t]?.default??""}toJson(){let e={};for(let t of Object.keys(this.node.properties))e[t]=this.Get(t);return e}}class t{parent;events={};constructor(e){this.parent=e}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){let s=this.parent;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,s)}))}}class s{events;Id;properties={};data=new e(this);elNode=document.createElement("div");on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(){this.events=new t(this)}}class i extends s{parent;constructor(e){super(),this.parent=e}}class o extends i{constructor(e){if(super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-control__list")||this.elNode,this.elNode){this.elNode.innerHTML="",Object.keys(e.option.control).forEach((t=>{let s=document.createElement("div");s.setAttribute("draggable","true"),s.setAttribute("data-node",t),s.classList.add("workerflow-control__item"),s.innerHTML=e.option.control[t].name,s.addEventListener("dragstart",this.dragStart.bind(this)),s.addEventListener("dragend",this.dragend.bind(this)),this.elNode.appendChild(s)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class n extends i{lastData;constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-property__list")||this.elNode,this.elNode.innerHTML=""}PropertyInfo(e){this.lastData&&this.lastData===e||(this.lastData&&this.lastData.RemoveEvent(this),this.lastData=e,this.RenderUI())}RenderUI(){if(this.elNode.innerHTML="",this.lastData){for(let e of Object.keys(this.lastData.node.properties)){let t=document.createElement("input");t.setAttribute("node:model",e),this.elNode.appendChild(t)}this.lastData.BindEvent(this)}}}class a extends i{modules;constructor(e,t={}){super(e),this.modules=t,this.elNode=this.parent.elNode.querySelector(".workerflow-items")||this.elNode,this.elNode&&(this.elNode.innerHTML=""),this.elNode.addEventListener("mousedown",this.ClickTab.bind(this))}ClickTab(e){if(e.target.classList.contains("workerflow-item")){let t=e.target.getAttribute("data-project");this.LoadProjectById(t)}}LoadProjectById(e){this.elNode.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elNode.querySelector(`[data-project="${e}"]`)?.classList.add("active"),this.parent.View?.load(this.modules[e])}NewProject(){let e={id:this.parent.getUuid(),name:`project-${this.parent.getTime()}`,x:0,y:0,zoom:1,nodes:[]};this.LoadProject(e)}LoadProject(e){if(this.elNode.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elNode.querySelector(`[data-project="${e.id}"]`))this.elNode.querySelector(`[data-project="${e.id}"]`)?.classList.add("active");else{let t=document.createElement("div");t.classList.add("workerflow-item"),t.classList.add("active"),t.innerHTML=e.name,t.setAttribute("data-project",e.id),this.elNode.appendChild(t)}this.modules[e.id]=e,this.parent.View?.load(this.modules[e.id])}}class d{parent;fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t,s=null,i=0){this.parent=e,this.fromNode=t,this.toNode=s,this.outputIndex=i,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.parent.SelectLine(this)}createCurvature(e,t,s,i,o,n){let a=e,d=t,h=s,r=i,l=o;switch(n){case"open":if(e>=s)var c=a+Math.abs(h-a)*l,p=h-Math.abs(h-a)*(-1*l);else c=a+Math.abs(h-a)*l,p=h-Math.abs(h-a)*l;return" M "+a+" "+d+" C "+c+" "+d+" "+p+" "+r+" "+h+"  "+r;case"close":if(e>=s)c=a+Math.abs(h-a)*(-1*l),p=h-Math.abs(h-a)*l;else c=a+Math.abs(h-a)*l,p=h-Math.abs(h-a)*l;return" M "+a+" "+d+" C "+c+" "+d+" "+p+" "+r+" "+h+"  "+r;case"other":if(e>=s)c=a+Math.abs(h-a)*(-1*l),p=h-Math.abs(h-a)*(-1*l);else c=a+Math.abs(h-a)*l,p=h-Math.abs(h-a)*l;return" M "+a+" "+d+" C "+c+" "+d+" "+p+" "+r+" "+h+"  "+r;default:return" M "+a+" "+d+" C "+(c=a+Math.abs(h-a)*l)+" "+d+" "+(p=h-Math.abs(h-a)*l)+" "+r+" "+h+"  "+r}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){if(null==this.fromNode.elNode)return;let s=this.fromNode.getX()+this.fromNode.elNode.clientWidth+5,i=this.fromNode.getY()+(this.fromNode.output()>1?21*(this.outputIndex-1)+15:2+this.fromNode.elNode.clientHeight/2);var o=this.createCurvature(s,i,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode&&this.toNode.elNode){let e=this.toNode.getX()-5,t=this.toNode.getY()+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}const h=eval;class r extends i{elNodeInputs=null;elNodeOutputs=null;elNodeContent=null;getY(){return+this.data.Get(this.properties.y.key)}getX(){return+this.data.Get(this.properties.x.key)}arrLine=[];option;node;properties={x:{key:"x",default:0},y:{key:"y",default:0}};flgScript=!1;Event={ReUI:"ReUI",change:"change",updatePosition:"updatePosition",selected:"Selected",dataChange:"dataChange"};toJson(){return{line:this.arrLine.filter((e=>e.fromNode===this)).map((e=>({fromNode:e.fromNode.Id,toNode:e.toNode?.Id,ouputIndex:e.outputIndex}))),data:this.data.toJson()}}load(e){return this.data.RemoveEventAll(),this.data.BindEvent(this),this.Id=e?.id??this.parent.parent.getUuid(),this.node=e?.node,this.option=this.parent.getOption(this.node),this.data.load(e?.data),this.updatePosition(this.data.Get(this.properties.x.key),e?.y,!0),this.initOption(),this}output(){return this.option?.output??0}delete(e=!0){this.arrLine.forEach((e=>e.delete(this))),this.elNode?.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode?.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode?.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(this.Event.change,{})}AddLine(e){this.arrLine=[...this.arrLine,e],this.dispatch(this.Event.change,{})}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.dispatch(this.Event.change,{}),this.arrLine}constructor(e,t=null){super(e),this.option=t,this.on(this.Event.change,((e,t)=>{this.parent.dispatch(this.parent.Event.change,{...e,targetNode:t})})),this.ReUI()}ReUIT(){let e=this;setTimeout((()=>{e.ReUI()}))}ReUI(){if(this.elNode&&this.elNode.remove(),this.data.RemoveEvent(this),this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${this.Id}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="outputs dot"></div>',this.elNode.setAttribute("data-node",this.Id),this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode),this.data){let e=this.data.toJson();this.data.load(e),this.data.UpdateUI()}this.initOption(),this.dispatch(this.Event.ReUI,{})}checkInput(){return!(0===this.option?.input)}initOption(){if(this.elNodeContent&&this.option&&this.elNodeOutputs){if(this.elNodeContent.innerHTML=this.option.html,void 0!==this.option.output){this.elNodeOutputs.innerHTML="";for(let e=1;e<=this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",e.toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs?.appendChild(t)}}0===this.option.input&&this.elNodeInputs&&(this.elNodeInputs.innerHTML="")}let e=this;setTimeout((()=>{e.RunScript(e,e.elNode)}),100)}RunScript(e,t){this.option&&this.option.script&&!this.flgScript&&(this.flgScript=!0,h("(node,el)=>{"+this.option.script.toString()+"}")(e,t),this.flgScript=!0)}checkKey(e){return this.option&&this.option.key==e}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this),this.dispatch(this.Event.selected,{})}updatePosition(e,t,s=!1){this.elNode&&(s?(e!==this.getX()&&this.data.Set(this.properties.x.key,e),t!==this.getY()&&this.data.Set(this.properties.y.key,t)):(this.data.Set(this.properties.y.key,this.elNode.offsetTop-t),this.data.Set(this.properties.x.key,this.elNode.offsetLeft-e)),this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.update()})),this.dispatch(this.Event.updatePosition,{x:this.getX(),y:this.getY()}),this.dispatch(this.Event.change,{}))}}var l;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(l||(l={}));class c extends i{elCanvas;flgDrap=!1;flgMove=!1;moveType=l.None;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;nodes=[];lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;tagIngore=["input","button","a","textarea"];properties={name:{key:"name"},zoom:{key:"zoom",default:1},canvas_x:{key:"canvas_x",default:0},canvas_y:{key:"canvas_y",default:0}};Event={change:"change",selected:"Selected",updateView:"updateView"};constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-desgin .workerflow-view")||this.elNode,this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,this.addEvent(),this.Reset(),this.data.InitData(null,this.properties),this.on(this.data.Event.dataChange,(e=>{this.updateView()})),this.updateView()}getOption(e){return this.parent.getOption(e)}dropEnd(e){e.preventDefault();let t="";t="touchend"===e.type?this.parent.dataNodeSelect:e.dataTransfer.getData("node");let s=this.getOption(t);if(s&&s.onlyNode&&this.nodes.filter((e=>e.checkKey(t))).length>0)return;let i=this.AddNode(s),o=0,n=0;"touchmove"===e.type?(o=e.touches[0].clientX,n=e.touches[0].clientY):(o=e.clientX,n=e.clientY);let a=this.CalcX(this.elCanvas.getBoundingClientRect().x-o),d=this.CalcY(this.elCanvas.getBoundingClientRect().y-n);i.updatePosition(a,d)}toJson(){let e=this.nodes.map((e=>e.toJson()));return{id:this.Id,data:this.data.toJson(),nodes:e}}load(e){this.Reset(),e||(e={}),e.Id||(e.Id=this.parent.getUuid()),e[this.properties.name.key]||(e[this.properties.name.key]=`project-${e.Id}`),this.Id=e.Id,this.data.load(e.data),this.data.UpdateUI(),this.nodes=(e.nodes??[]).map((e=>new r(this,"").load(e))),(e.nodes??[]).forEach((e=>{(e.line??[]).forEach((e=>{let t=this.getNodeById(e.fromNode),s=this.getNodeById(e.toNode),i=e.ouputIndex??0;t&&s&&this.AddLine(t,s,i)}))})),this.updateView()}Reset(){this.nodes.forEach((e=>e.delete(!1))),this.nodes=[],this.data.Set(this.properties.canvas_x.key,0),this.data.Set(this.properties.canvas_y.key,0),this.updateView()}getNodeById(e){return this.nodes?.filter((t=>t.Id==e))[0]}updateView(){this.elCanvas.style.transform="translate("+this.data.Get(this.properties.canvas_x.key)+"px, "+this.data.Get(this.properties.canvas_y.key)+"px) scale("+this.data.Get(this.properties.zoom.key)+")",this.dispatch(this.Event.updateView,{x:this.data.Get(this.properties.canvas_x.key),y:this.data.Get(this.properties.canvas_y.key),zoom:this.data.Get(this.properties.zoom.key)})}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.data.Get(this.properties.zoom.key)))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.data.Get(this.properties.zoom.key)))}dragover(e){e.preventDefault()}UnSelectLine(){this.SelectLine(null)}UnSelectDot(){this.SelectDot(null)}UnSelectNode(){this.SelectNode(null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){null==e?this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null):(this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active"))}flgSelectNode=!1;SelectNode(e){null==e?(this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null),this.flgSelectNode||this.parent.PropertyInfo(this.data)):(this.flgSelectNode=!0,this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active"),this.parent.PropertyInfo(this.nodeSelected.data),this.flgSelectNode=!1)}SelectDot(e){null==e?this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null):(this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active"))}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=new r(this,e);return t.load({}),this.nodes=[...this.nodes,t],t}AddLine(e,t,s=0){if(e!=t&&!(e.arrLine.filter((e=>e.toNode===t&&e.outputIndex==s&&e!=this.tempLine)).length>0))return new d(this,e,t,s)}addEvent(){this.elNode?.addEventListener("mouseup",this.EndMove.bind(this)),this.elNode?.addEventListener("mouseleave",this.EndMove.bind(this)),this.elNode?.addEventListener("mousemove",this.Move.bind(this)),this.elNode?.addEventListener("mousedown",this.StartMove.bind(this)),this.elNode?.addEventListener("touchend",this.EndMove.bind(this)),this.elNode?.addEventListener("touchmove",this.Move.bind(this)),this.elNode?.addEventListener("touchstart",this.StartMove.bind(this)),this.elNode?.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elNode?.addEventListener("drop",this.dropEnd.bind(this)),this.elNode?.addEventListener("dragover",this.dragover.bind(this)),this.elNode?.addEventListener("wheel",this.zoom_enter.bind(this)),this.elNode?.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.data.Set(this.properties.canvas_x.key,this.data.Get(this.properties.canvas_x.key)/this.zoom_last_value*this.data.Get(this.properties.zoom.key)),this.data.Set(this.properties.canvas_y.key,this.data.Get(this.properties.canvas_y.key)/this.zoom_last_value*this.data.Get(this.properties.zoom.key)),this.zoom_last_value=this.data.Get(this.properties.zoom.key),this.updateView()}zoom_in(){this.data.Get(this.properties.zoom.key)<this.zoom_max&&(this.data.Set(this.properties.zoom.key,this.data.Get(this.properties.zoom.key)+this.zoom_value),this.zoom_refresh())}zoom_out(){this.data.Get(this.properties.zoom.key)>this.zoom_min&&(this.data.Set(this.properties.zoom.key,this.data.Get(this.properties.zoom.key)-this.zoom_value),this.zoom_refresh())}zoom_reset(){1!=this.data.Get(this.properties.zoom.key)&&(this.data.Set(this.properties.zoom.key,this.properties.zoom.default),this.zoom_refresh())}StartMove(e){if(!this.tagIngore.includes(e.target.tagName.toLowerCase())){if(this.timeFastClick=this.parent.getTime(),this.moveType==l.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=l.Line,this.tempLine=new d(this,this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=l.Node;else this.moveType=l.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case l.Canvas:{let e=+this.data.Get(this.properties.canvas_x.key)+this.CalcX(-(this.pos_x-t)),i=+this.data.Get(this.properties.canvas_y.key)+this.CalcY(-(this.pos_y-s));this.elCanvas.style.transform="translate("+e+"px, "+i+"px) scale("+this.data.Get(this.properties.zoom.key)+")";break}case l.Node:{let e=this.CalcX(this.pos_x-t),i=this.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.nodeSelected?.updatePosition(e,i);break}case l.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),i=this.CalcY(this.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-i),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.getTime()-this.timeFastClick<300||!this.flgDrap&&!this.flgMove)return this.moveType=l.None,this.flgDrap=!1,void(this.flgMove=!1);this.UnSelect(),this.tempLine&&this.moveType==l.Line&&(this.tempLine.toNode&&this.tempLine.toNode.checkInput()&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,s=0;"touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===l.Canvas&&(this.data.Set(this.properties.canvas_x.key,+this.data.Get(this.properties.canvas_x.key)+this.CalcX(-(this.pos_x-t))),this.data.Set(this.properties.canvas_y.key,+this.data.Get(this.properties.canvas_y.key)+this.CalcY(-(this.pos_y-s)))),this.pos_x=t,this.pos_y=s,this.moveType=l.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class extends s{View;Control;Property;Tab;modules={};dataNodeSelect=null;option;checkParent(e,t){if(e&&t){if(e==t)return!0;let s=e;for(;null!=(s=s.parentElement);)if(t==s)return!0}return!1}constructor(e,t=null){super(),this.elNode=e,this.elNode.classList.add("workerflow"),this.option=t||{control:{}},this.elNode.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    <div class="workerflow-property">\n      <h2 class="workerflow-property__header">Properties</h2>\n      <div class="workerflow-property__list">\n      </div>\n    </div>\n    ',this.View=new c(this),this.Tab=new a(this),this.Control=new o(this),this.Property=new n(this),0==Object.keys(this.modules).length&&this.new()}new(){this.Tab?.NewProject()}load(e){this.Tab?.LoadProject(e)}PropertyInfo(e){this.Property?.PropertyInfo(e)}getOption(e){if(!e)return;let t=this.option.control[e];return t||(t=Object.values(this.option.control)[0]),t.key=e,t}toJson(){return this.View?.toJson()}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
