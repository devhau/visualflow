/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{fromNode;toNode;elConnection;elPath;curvature=.5;constructor(e,t){this.fromNode=e,this.toNode=t,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.fromNode.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode.AddLine(this)}createCurvature(e,t,s,i,o,n){let d=e,h=t,l=s,a=i,r=o;switch(n){case"open":if(e>=s)var c=d+Math.abs(l-d)*r,p=l-Math.abs(l-d)*(-1*r);else c=d+Math.abs(l-d)*r,p=l-Math.abs(l-d)*r;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+a+" "+l+"  "+a;case"close":if(e>=s)c=d+Math.abs(l-d)*(-1*r),p=l-Math.abs(l-d)*r;else c=d+Math.abs(l-d)*r,p=l-Math.abs(l-d)*r;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+a+" "+l+"  "+a;case"other":if(e>=s)c=d+Math.abs(l-d)*(-1*r),p=l-Math.abs(l-d)*(-1*r);else c=d+Math.abs(l-d)*r,p=l-Math.abs(l-d)*r;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+a+" "+l+"  "+a;default:return" M "+d+" "+h+" C "+(c=d+Math.abs(l-d)*r)+" "+h+" "+(p=l-Math.abs(l-d)*r)+" "+a+" "+l+"  "+a}}updateTo(e,t){let s=this.fromNode.pos_x+this.fromNode.elNode.clientWidth+5,i=this.fromNode.pos_y+this.fromNode.elNode.clientHeight/2;var o=this.createCurvature(s,i,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){let e=this.toNode.pos_x-5,t=this.toNode.pos_y+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}class t{parent;elNode;elNodeInputs;elNodeOutputs;elNodeContent;nodeId;pos_x=0;pos_y=0;arrLine=[];AddLine(e){this.arrLine=[...this.arrLine,e]}constructor(e,t,s=null){this.parent=e,this.nodeId=t,console.log(this.nodeId),this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${t}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="dot"></div>',this.elNode.setAttribute("data-node",t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode)}StartSelected(e){this.parent.SelectNode(this)}updatePosition(e,t){this.elNode&&(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t,this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})))}}class s{elView;elCanvas=null;parent;nodes=[];flgDrap=!1;flgDrapMove=!1;zoom=1;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;canvas_x=0;canvas_y=0;pos_x=0;pos_x_start=0;pos_y=0;pos_y_start=0;mouse_x=0;mouse_y=0;nodeSelected=null;dotSelected=null;constructor(t){this.parent=t,this.elView=this.parent.container?.querySelector(".workerflow-desgin .workerflow-view"),this.elView&&(this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elView.appendChild(this.elCanvas),this.elView.tabIndex=0,this.addEvent(),this.AddNode(),this.AddNode(),this.AddNode(),new e(this.nodes[0],this.nodes[1]),new e(this.nodes[1],this.nodes[2]))}UnSelectNode(){this.nodeSelected&&this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null}SelectNode(e){this.UnSelectNode(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}UnSelectDot(){this.dotSelected&&this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null}SelectDot(e){this.UnSelectDot(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}AddNode(){this.nodes=[...this.nodes,new t(this,this.parent.getUuid())]}addEvent(){this.elView&&(this.elView.addEventListener("mouseup",this.EndMove.bind(this)),this.elView.addEventListener("mouseleave",this.EndMove.bind(this)),this.elView.addEventListener("mousemove",this.Move.bind(this)),this.elView.addEventListener("mousedown",this.StartMove.bind(this)),this.elView.addEventListener("touchend",this.EndMove.bind(this)),this.elView.addEventListener("touchmove",this.Move.bind(this)),this.elView.addEventListener("touchstart",this.StartMove.bind(this)),this.elView.addEventListener("contextmenu",this.contextmenu.bind(this)))}StartMove(e){this.flgDrap=!0,this.flgDrapMove=!1,this.nodeSelected&&this.nodeSelected.elNode!==e.target&&this.nodeSelected.elNode!==e.target.parents(".workerflow-node")&&this.UnSelectNode(),console.log(this.nodeSelected),"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_x_start=e.touches[0].clientX,this.pos_y=e.touches[0].clientY,this.pos_y_start=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_x_start=e.clientX,this.pos_y=e.clientY,this.pos_y_start=e.clientY)}Move(e){if(!this.flgDrap||!this.elCanvas)return;this.flgDrapMove=!0;let t=0,s=0;if("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.nodeSelected){let e=(this.pos_x-t)*this.elCanvas.clientWidth/(this.elCanvas.clientWidth*this.zoom),i=(this.pos_y-s)*this.elCanvas.clientHeight/(this.elCanvas.clientHeight*this.zoom);this.pos_x=t,this.pos_y=s,this.nodeSelected.updatePosition(e,i)}else{let e=this.canvas_x+-(this.pos_x-t),i=this.canvas_y+-(this.pos_y-s);this.elCanvas.style.transform="translate("+e+"px, "+i+"px) scale("+this.zoom+")"}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){this.flgDrap=!1;let t=0,s=0;"touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.canvas_x=this.canvas_x+-(this.pos_x-t),this.canvas_y=this.canvas_y+-(this.pos_y-s),this.pos_x=t,this.pos_y=s,this.flgDrapMove&&this.UnSelectNode()}contextmenu(e){e.preventDefault()}}return class{container;View;events={};constructor(e){this.container=e,this.container.classList.add("workerflow"),this.container.innerHTML='\n    <div class="workerflow-control">\n      <div class="workerflow-control__item" draggable="true">Node 1</div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n        <div class="workerflow-item">Thông tin mới</div>\n        <div class="workerflow-item">Thông tin mới123</div>\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    ',this.View=new s(this)}getUuid(){let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){let s=this;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,s)}))}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
