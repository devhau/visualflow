/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{node;data={};nodes=[];Event={dataChange:"dataChange",change:"change"};constructor(e){this.node=e}InitData(e=null,t=-1){-1!==t&&(this.node.properties=t),this.nodes=[this.node],this.load(e),this.BindEvent(this.node),this.UpdateUI()}RemoveEventAll(){for(let e of this.nodes)e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))}));this.nodes=[]}RemoveEvent(e){let t=this.nodes.indexOf(e);t>-1&&(this.nodes[t].elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))})),e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))})),this.nodes.splice(t))}BindEvent(e){this.RemoveEvent(e),this.nodes=[...this.nodes,e],e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{"SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${this.data[e.getAttribute("node:model")]}`:e.value=this.data[e.getAttribute("node:model")]})),e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.addEventListener("keyup",this.changeInput.bind(this))}))}SetValue(e,t,i=null){-1==this.nodes.indexOf(this.node)&&(this.node.elNode.querySelectorAll(`[node\\:model="${e}"]`).forEach((e=>{e!=i&&("SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${t}`:e.value=t)})),this.node.dispatch(this.Event.dataChange,{key:e,value:t,elUpdate:i}),this.node.dispatch(this.Event.change,{key:e,value:t,elUpdate:i}));for(let s of this.nodes)s.elNode.querySelectorAll(`[node\\:model="${e}"]`).forEach((e=>{e!=i&&("SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${t}`:e.value=t)})),s.dispatch(this.Event.dataChange,{key:e,value:t,elUpdate:i}),s.dispatch(this.Event.change,{key:e,value:t,elUpdate:i})}Set(e,t,i=null){this.data[e]=t,setTimeout((()=>{this.SetValue(e,t,i)}),100)}Get(e){return this.data[e]}changeInput(e){this.Set(e.target.getAttribute("node:model"),e.target.value,e.target)}UpdateUI(){setTimeout((()=>{for(let e of this.nodes)e.elNode.querySelectorAll("[node\\:model]").forEach((e=>{"SPAN"==e.tagName||"DIV"==e.tagName?e.innerHTML=`${this.data[e.getAttribute("node:model")]}`:e.value=this.data[e.getAttribute("node:model")]}))}),100)}load(e){this.data={};for(let t of Object.keys(this.node.properties))this.data[t]=e?.[t]??this.node.properties[t]?.default??""}toJson(){let e={};for(let t of Object.keys(this.node.properties))e[t]=this.Get(t);return e}}class t{parent;events={};constructor(e){this.parent=e}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){let i=this.parent;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,i)}))}}class i{events;Id;properties={};data=new e(this);elNode=document.createElement("div");on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(){this.events=new t(this)}}class s extends i{parent;constructor(e){super(),this.parent=e}}class o extends s{constructor(e){if(super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-control__list")||this.elNode,this.elNode){this.elNode.innerHTML="",Object.keys(e.option.control).forEach((t=>{let i=document.createElement("div");i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.classList.add("workerflow-control__item"),i.innerHTML=e.option.control[t].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elNode.appendChild(i)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class n extends s{lastData;constructor(e){super(e),this.Id=this.parent.getUuid(),this.elNode=this.parent.elNode.querySelector(".workerflow-property__list")||this.elNode,this.elNode.innerHTML=""}PropertyInfo(e){this.lastData&&this.lastData===e||(this.lastData&&this.lastData.RemoveEvent(this),this.lastData=e,this.RenderUI())}RenderUI(){if(this.elNode.innerHTML="",this.lastData){for(let e of Object.keys(this.lastData.node.properties)){let t=document.createElement("div");t.classList.add("workerflow-property__item");let i=document.createElement("span");i.innerHTML=e;let s=document.createElement("input");s.setAttribute("node:model",e),t.appendChild(i),t.appendChild(s),this.elNode.appendChild(t)}this.lastData?.BindEvent(this)}}}class d extends s{dataItem;ItemId;constructor(e,t){super(e),this.dataItem=t,this.Id=this.parent.parent.getUuid(),this.ItemId=t.Id,this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-item"),this.elNode.setAttribute("data-project",this.ItemId);let i=document.createElement("span");i.setAttribute("node:model","name"),i.innerHTML=t.name,this.elNode.appendChild(i),this.parent.elNode.appendChild(this.elNode),this.elNode.addEventListener("click",this.ClickTab.bind(this))}ClickTab(e){this.parent.LoadProjectById(this.ItemId)}SetData(e){this.dataItem=e}Active(e=!0){e?(this.elNode.classList.add("active"),this.parent.parent.View?.load(this.dataItem),this.parent.parent.View?.data.BindEvent(this)):(this.elNode.classList.remove("active"),this.parent.parent.View?.data.RemoveEvent(this))}}class h extends s{tabs=[];tabActive;constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-items")||this.elNode,this.elNode&&(this.elNode.innerHTML="")}LoadProjectById(e){if(!e)return;let t=this.tabs?.filter((t=>t.ItemId==e))?.[0],i=this.parent.modules[e];if(i){if(t||(t=new d(this,i),this.tabs=[...this.tabs,t]),t&&this.tabActive){if(this.tabActive==t)return;this.UpdateData(),this.tabActive.Active(!1),this.tabActive=void 0}this.tabActive=t,this.tabActive.SetData(i),this.tabActive.Active(!0)}}UpdateData(){this.tabActive&&(this.parent.modules[this.tabActive.ItemId]=this.parent.View?.toJson())}NewProject(){const e={Id:this.parent.getUuid(),data:{name:`project-${this.parent.getTime()}`,x:0,y:0,zoom:1},nodes:[]};this.LoadProject(e)}LoadProject(e){this.parent.modules[e.Id]=e,this.LoadProjectById(e.Id)}}class a{parent;fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t,i=null,s=0){this.parent=e,this.fromNode=t,this.toNode=i,this.outputIndex=s,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.parent.SelectLine(this)}createCurvature(e,t,i,s,o,n){let d=e,h=t,a=i,l=s,r=o;switch(n){case"open":if(e>=i)var p=d+Math.abs(a-d)*r,c=a-Math.abs(a-d)*(-1*r);else p=d+Math.abs(a-d)*r,c=a-Math.abs(a-d)*r;return" M "+d+" "+h+" C "+p+" "+h+" "+c+" "+l+" "+a+"  "+l;case"close":if(e>=i)p=d+Math.abs(a-d)*(-1*r),c=a-Math.abs(a-d)*r;else p=d+Math.abs(a-d)*r,c=a-Math.abs(a-d)*r;return" M "+d+" "+h+" C "+p+" "+h+" "+c+" "+l+" "+a+"  "+l;case"other":if(e>=i)p=d+Math.abs(a-d)*(-1*r),c=a-Math.abs(a-d)*(-1*r);else p=d+Math.abs(a-d)*r,c=a-Math.abs(a-d)*r;return" M "+d+" "+h+" C "+p+" "+h+" "+c+" "+l+" "+a+"  "+l;default:return" M "+d+" "+h+" C "+(p=d+Math.abs(a-d)*r)+" "+h+" "+(c=a-Math.abs(a-d)*r)+" "+l+" "+a+"  "+l}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){if(null==this.fromNode.elNode)return;let{x:i,y:s}=this.fromNode.getDotOutput(this.outputIndex);var o=this.createCurvature(i,s,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode&&this.toNode.elNode){let e=this.toNode.getX()-5,t=this.toNode.getY()+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}const l=eval;class r extends s{elNodeInputs=null;elNodeOutputs=null;elNodeContent=null;getY(){return+this.data.Get(this.propertieDefault.y.key)}getX(){return+this.data.Get(this.propertieDefault.x.key)}getDotInput(e=1){let t=this.elNodeOutputs?.querySelector(`.dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft-10,y:e}}return{}}getDotOutput(e=0){let t=this.elNodeOutputs?.querySelector(`.dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}arrLine=[];option;node;propertieDefault={x:{key:"x",default:0},y:{key:"y",default:0}};properties={};flgScript=!1;Event={ReUI:"ReUI",change:"change",updatePosition:"updatePosition",selected:"Selected",dataChange:"dataChange"};setOption(e=null,t={}){this.option=e||{},this.option.properties||(this.option.properties={}),this.node=this.option.node,this.Id=t?.Id??this.parent.parent.getUuid(),this.properties={...this.propertieDefault,...this.option.properties},this.data.InitData(t?.data)}constructor(e,t=null){super(e),this.setOption(t,{}),t&&this.ReUI(),this.on(this.Event.change,((e,t)=>{this.parent.dispatch(this.parent.Event.change,{...e,targetNode:t})}))}toJson(){let e=this.arrLine.filter((e=>e.fromNode===this)).map((e=>({fromNode:e.fromNode.Id,toNode:e.toNode?.Id,ouputIndex:e.outputIndex})));return{Id:this.Id,node:this.node,line:e,data:this.data.toJson()}}load(e){this.data.RemoveEventAll();let t=this.parent.getOption(e?.node);return this.setOption(t,e),this.ReUI(),this}output(){return this.option?.output??0}delete(e=!0){this.arrLine.forEach((e=>e.delete(this))),this.data.RemoveEvent(this),this.elNode?.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode?.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode?.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(this.Event.change,{})}AddLine(e){this.arrLine=[...this.arrLine,e],this.dispatch(this.Event.change,{})}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.dispatch(this.Event.change,{}),this.arrLine}ReUI(){if(this.elNode&&(this.data.RemoveEvent(this),this.elNode.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.remove()),this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="outputs dot" node="0"></div>',this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${this.Id}`,this.elNode.setAttribute("data-node",this.Id),this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode),this.data){let e=this.data.toJson();this.data.load(e),this.data.UpdateUI()}this.initOption(),this.on(this.data.Event.dataChange,(()=>{this.UpdateUI()})),this.dispatch(this.Event.ReUI,{})}checkInput(){return!(0===this.option?.input)}initOption(){if(this.elNodeContent&&this.option&&this.elNodeOutputs){if(this.elNodeContent.innerHTML=this.option.html,void 0!==this.option.output){this.elNodeOutputs.innerHTML="";for(let e=0;e<this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",(300+e).toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs?.appendChild(t)}}0===this.option.input&&this.elNodeInputs&&(this.elNodeInputs.innerHTML="")}let e=this;setTimeout((()=>{e.RunScript(e,e.elNode)}),100)}RunScript(e,t){this.option&&this.option.script&&!this.flgScript&&(this.flgScript=!0,l("(node,el)=>{"+this.option.script.toString()+"}")(e,t),this.flgScript=!0)}checkNode(e){return this.option&&this.option.node==e}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this),this.dispatch(this.Event.selected,{})}updatePosition(e,t,i=!1){this.elNode&&(i?(e!==this.getX()&&this.data.Set(this.propertieDefault.x.key,e),t!==this.getY()&&this.data.Set(this.propertieDefault.y.key,t)):(this.data.Set(this.propertieDefault.y.key,this.elNode.offsetTop-t),this.data.Set(this.propertieDefault.x.key,this.elNode.offsetLeft-e)),this.dispatch(this.Event.updatePosition,{x:this.getX(),y:this.getY()}),this.dispatch(this.Event.change,{}),this.UpdateUI())}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.update()}))}}var p;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(p||(p={}));class c extends s{elCanvas;flgDrap=!1;flgMove=!1;moveType=p.None;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;nodes=[];lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;tagIngore=["input","button","a","textarea"];getX(){return+this.data.Get(this.properties.x.key)}getY(){return+this.data.Get(this.properties.y.key)}getZoom(){return+this.data.Get(this.properties.zoom.key)}properties={name:{key:"name"},zoom:{key:"zoom",default:1,type:"number"},x:{key:"x",default:0,type:"number"},y:{key:"y",default:0,type:"number"}};Event={change:"change",selected:"Selected",updateView:"updateView"};constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-desgin .workerflow-view")||this.elNode,this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,this.addEvent(),this.Reset(),this.data.InitData(null,this.properties),this.on(this.data.Event.dataChange,(e=>{this.updateView()})),this.updateView()}getOption(e){return this.parent.getOption(e)}dropEnd(e){e.preventDefault(),0==Object.keys(this.parent.modules).length&&this.parent.new();let t="";t="touchend"===e.type?this.parent.dataNodeSelect:e.dataTransfer.getData("node");let i=this.getOption(t);if(i&&i.onlyNode&&this.nodes.filter((e=>e.checkNode(t))).length>0)return;let s=this.AddNode(i),o=0,n=0;"touchmove"===e.type?(o=e.touches[0].clientX,n=e.touches[0].clientY):(o=e.clientX,n=e.clientY);let d=this.CalcX(this.elCanvas.getBoundingClientRect().x-o),h=this.CalcY(this.elCanvas.getBoundingClientRect().y-n);s.updatePosition(d,h)}toJson(){let e=this.nodes.map((e=>e.toJson()));return{Id:this.Id,data:this.data.toJson(),nodes:e}}load(e){this.Reset(),e||(e={}),e.Id||(e.Id=this.parent.getUuid()),e.data||(e.data={}),e.data[this.properties.name.key]||(e.data[this.properties.name.key]=`project-${this.parent.getTime()}`),this.Id=e.Id,this.data.load(e.data),this.data.UpdateUI(),this.nodes=(e.nodes??[]).map((e=>new r(this,"").load(e))),(e.nodes??[]).forEach((e=>{(e.line??[]).forEach((e=>{let t=this.getNodeById(e.fromNode),i=this.getNodeById(e.toNode),s=e.ouputIndex??0;t&&i&&this.AddLine(t,i,s)}))})),this.updateView()}Reset(){this.nodes.forEach((e=>e.delete(!1))),this.nodes=[],this.data.Set(this.properties.x.key,0),this.data.Set(this.properties.y.key,0),this.updateView()}getNodeById(e){return this.nodes?.filter((t=>t.Id==e))[0]}updateView(){this.elCanvas.style.transform="translate("+this.getX()+"px, "+this.getY()+"px) scale("+this.getZoom()+")",this.dispatch(this.Event.updateView,{x:this.getX(),y:this.getY(),zoom:this.getZoom()})}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}dragover(e){e.preventDefault()}UnSelectLine(){this.SelectLine(null)}UnSelectDot(){this.SelectDot(null)}UnSelectNode(){this.SelectNode(null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){null==e?this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null):(this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active"))}flgSelectNode=!1;SelectNode(e){null==e?(this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null),this.flgSelectNode||this.parent.PropertyInfo(this.data)):(this.flgSelectNode=!0,this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active"),this.parent.PropertyInfo(this.nodeSelected.data),this.flgSelectNode=!1)}SelectDot(e){null==e?this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null):(this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active"))}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=new r(this,e);return this.nodes=[...this.nodes,t],t}AddLine(e,t,i=0){if(e!=t&&!(e.arrLine.filter((e=>e.toNode===t&&e.outputIndex==i&&e!=this.tempLine)).length>0))return new a(this,e,t,i)}addEvent(){this.elNode?.addEventListener("mouseup",this.EndMove.bind(this)),this.elNode?.addEventListener("mouseleave",this.EndMove.bind(this)),this.elNode?.addEventListener("mousemove",this.Move.bind(this)),this.elNode?.addEventListener("mousedown",this.StartMove.bind(this)),this.elNode?.addEventListener("touchend",this.EndMove.bind(this)),this.elNode?.addEventListener("touchmove",this.Move.bind(this)),this.elNode?.addEventListener("touchstart",this.StartMove.bind(this)),this.elNode?.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elNode?.addEventListener("drop",this.dropEnd.bind(this)),this.elNode?.addEventListener("dragover",this.dragover.bind(this)),this.elNode?.addEventListener("wheel",this.zoom_enter.bind(this)),this.elNode?.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.data.Set(this.properties.x.key,this.getX()/this.zoom_last_value*this.getZoom()),this.data.Set(this.properties.y.key,this.getY()/this.zoom_last_value*this.getZoom()),this.zoom_last_value=this.getZoom(),this.updateView()}zoom_in(){this.getZoom()<this.zoom_max&&(this.data.Set(this.properties.zoom.key,this.getZoom()+this.zoom_value),this.zoom_refresh())}zoom_out(){this.getZoom()>this.zoom_min&&(this.data.Set(this.properties.zoom.key,this.getZoom()-this.zoom_value),this.zoom_refresh())}zoom_reset(){1!=this.getZoom()&&(this.data.Set(this.properties.zoom.key,this.properties.zoom.default),this.zoom_refresh())}StartMove(e){if(!this.tagIngore.includes(e.target.tagName.toLowerCase())&&(this.timeFastClick=this.parent.getTime(),!e.target.classList.contains("main-path"))){if(this.moveType==p.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=p.Line,this.tempLine=new a(this,this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=p.Node;else this.moveType=p.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,i=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.moveType){case p.Canvas:{let e=this.getX()+this.CalcX(-(this.pos_x-t)),s=this.getY()+this.CalcY(-(this.pos_y-i));this.elCanvas.style.transform="translate("+e+"px, "+s+"px) scale("+this.getZoom()+")";break}case p.Node:{let e=this.CalcX(this.pos_x-t),s=this.CalcY(this.pos_y-i);this.pos_x=t,this.pos_y=i,this.nodeSelected?.updatePosition(e,s);break}case p.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),s=this.CalcY(this.elCanvas.getBoundingClientRect().y-i);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-s),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){if(!this.flgDrap)return;if(this.parent.getTime()-this.timeFastClick<300||!this.flgMove)return this.moveType===p.Canvas&&this.flgDrap&&this.UnSelect(),this.moveType=p.None,this.flgDrap=!1,void(this.flgMove=!1);this.tempLine&&this.moveType==p.Line&&(this.tempLine.toNode&&this.tempLine.toNode.checkInput()&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,i=0;"touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.moveType===p.Canvas&&(this.data.Set(this.properties.x.key,this.getX()+this.CalcX(-(this.pos_x-t))),this.data.Set(this.properties.y.key,this.getY()+this.CalcY(-(this.pos_y-i)))),this.pos_x=t,this.pos_y=i,this.moveType=p.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class extends i{View;Control;Property;Tab;modules={};dataNodeSelect=null;option;checkParent(e,t){if(e&&t){if(e==t)return!0;let i=e;for(;null!=(i=i.parentElement);)if(t==i)return!0}return!1}constructor(e,t=null){super(),this.elNode=e,this.elNode.classList.add("workerflow"),this.option=t||{control:{}},this.elNode.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    <div class="workerflow-property">\n      <h2 class="workerflow-property__header">Properties</h2>\n      <div class="workerflow-property__list">\n      </div>\n    </div>\n    ',this.View=new c(this),this.Tab=new h(this),this.Control=new o(this),this.Property=new n(this)}new(){this.Tab?.NewProject()}openProject(e){this.modules=e;let t=Object.keys(this.modules)[0];t&&this.load(this.modules[t])}load(e){this.Tab?.LoadProject(e)}PropertyInfo(e){this.Property?.PropertyInfo(e)}getOption(e){if(!e)return;let t=this.option.control[e];return t||(t=Object.values(this.option.control)[0]),t.node=e,t}toJson(){return this.Tab?.UpdateData(),this.modules}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
