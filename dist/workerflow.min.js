/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{parent;events={};constructor(e){this.parent=e}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){let s=this.parent;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,s)}))}}class t{events;elNode=document.createElement("div");on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(){this.events=new e(this)}}class s extends t{parent;constructor(e){super(),this.parent=e}}class i extends s{constructor(e){if(super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-control__list")||this.elNode,this.elNode){this.elNode.innerHTML="",Object.keys(e.option.control).forEach((t=>{let s=document.createElement("div");s.setAttribute("draggable","true"),s.setAttribute("data-node",t),s.classList.add("workerflow-control__item"),s.innerHTML=e.option.control[t].name,s.addEventListener("dragstart",this.dragStart.bind(this)),s.addEventListener("dragend",this.dragend.bind(this)),this.elNode.appendChild(s)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class o extends s{constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-property__list")||this.elNode,this.elNode.innerHTML=""}PropertyInfo(e,t){}}class n extends s{modules;constructor(e,t={}){super(e),this.modules=t,this.elNode=this.parent.elNode.querySelector(".workerflow-items")||this.elNode,this.elNode&&(this.elNode.innerHTML=""),this.elNode.addEventListener("mousedown",this.ClickTab.bind(this))}ClickTab(e){if(e.target.classList.contains("workerflow-item")){let t=e.target.getAttribute("data-project");this.LoadProjectById(t)}}LoadProjectById(e){this.elNode.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elNode.querySelector(`[data-project="${e}"]`)?.classList.add("active"),this.parent.View?.load(this.modules[e])}NewProject(){let e={id:this.parent.getUuid(),name:`project-${this.parent.getTime()}`,x:0,y:0,zoom:1,nodes:[]};this.LoadProject(e)}LoadProject(e){if(this.elNode.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elNode.querySelector(`[data-project="${e.id}"]`))this.elNode.querySelector(`[data-project="${e.id}"]`)?.classList.add("active");else{let t=document.createElement("div");t.classList.add("workerflow-item"),t.classList.add("active"),t.innerHTML=e.name,t.setAttribute("data-project",e.id),this.elNode.appendChild(t)}this.modules[e.id]=e,this.parent.View?.load(this.modules[e.id])}}class d{node;data={};Event={dataChange:"dataChange",change:"change"};constructor(e){this.node=e,setTimeout((()=>{this.node.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.addEventListener("keyup",this.changeInput.bind(this))}))}),300)}RemoveEvent(){this.node.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))}))}Set(e,t,s=null){this.data[e]=t,setTimeout((()=>{this.node.elNode.querySelectorAll(`[node\\:model="${e}"]`).forEach((e=>{e!=s&&(e.value=t)}),300),this.node.dispatch(this.Event.dataChange,{key:e,value:t,obj:s}),this.node.dispatch(this.Event.change,{key:e,value:t,obj:s})}))}Get(e){return this.data[e]}changeInput(e){this.Set(e.target.getAttribute("node:model"),e.target.value,e.target)}load(e){this.data=e||{},setTimeout((()=>{this.node.elNode.querySelectorAll("[node\\:model]").forEach((e=>{e.value=this.data[e.getAttribute("node:model")]??null}),300)}))}toJson(){return this.data}}class h{parent;fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t,s=null,i=0){this.parent=e,this.fromNode=t,this.toNode=s,this.outputIndex=i,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.parent.SelectLine(this)}createCurvature(e,t,s,i,o,n){let d=e,h=t,a=s,r=i,l=o;switch(n){case"open":if(e>=s)var c=d+Math.abs(a-d)*l,p=a-Math.abs(a-d)*(-1*l);else c=d+Math.abs(a-d)*l,p=a-Math.abs(a-d)*l;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+a+"  "+r;case"close":if(e>=s)c=d+Math.abs(a-d)*(-1*l),p=a-Math.abs(a-d)*l;else c=d+Math.abs(a-d)*l,p=a-Math.abs(a-d)*l;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+a+"  "+r;case"other":if(e>=s)c=d+Math.abs(a-d)*(-1*l),p=a-Math.abs(a-d)*(-1*l);else c=d+Math.abs(a-d)*l,p=a-Math.abs(a-d)*l;return" M "+d+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+a+"  "+r;default:return" M "+d+" "+h+" C "+(c=d+Math.abs(a-d)*l)+" "+h+" "+(p=a-Math.abs(a-d)*l)+" "+r+" "+a+"  "+r}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){if(null==this.fromNode.elNode)return;let s=this.fromNode.pos_x+this.fromNode.elNode.clientWidth+5,i=this.fromNode.pos_y+(this.fromNode.output()>1?21*(this.outputIndex-1)+15:2+this.fromNode.elNode.clientHeight/2);var o=this.createCurvature(s,i,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode&&this.toNode.elNode){let e=this.toNode.pos_x-5,t=this.toNode.pos_y+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}const a=eval;class r extends s{elNodeInputs=null;elNodeOutputs=null;elNodeContent=null;nodeId;pos_x=0;pos_y=0;arrLine=[];option;data=null;flgScript=!1;Event={ReUI:"ReUI",change:"change",updatePosition:"updatePosition",selected:"Selected",dataChange:"dataChange"};toJson(){let e=this.arrLine.filter((e=>e.fromNode===this)).map((e=>({fromNode:e.fromNode.nodeId,toNode:e.toNode?.nodeId,ouputIndex:e.outputIndex})));return{id:this.nodeId,node:this.option.key,line:e,data:this.data?.toJson(),x:this.pos_x,y:this.pos_y}}load(e){return this.nodeId=e?.id??this.nodeId,this.option=this.parent.getOption(e?.node),this.data?.load(e?.data),this.updatePosition(e?.x,e?.y,!0),this.initOption(),this}output(){return this.option?.output??0}delete(e=!0){this.arrLine.forEach((e=>e.delete(this))),this.elNode?.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode?.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode?.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(this.Event.change,{})}AddLine(e){this.arrLine=[...this.arrLine,e],this.dispatch(this.Event.change,{})}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.dispatch(this.Event.change,{}),this.arrLine}constructor(e,t,s=null){super(e),this.option=s,this.nodeId=t,this.on(this.Event.change,((e,t)=>{this.parent.dispatch(this.parent.Event.change,{...e,targetNode:t})})),this.ReUI()}ReUIT(){let e=this;setTimeout((()=>{e.ReUI()}))}ReUI(){if(this.elNode&&this.elNode.remove(),this.data&&this.data.RemoveEvent(),this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${this.nodeId}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="outputs dot"></div>',this.elNode.setAttribute("data-node",this.nodeId),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode),this.data){let e=this.data.toJson();this.data=new d(this),this.data.load(e)}else this.data=new d(this);this.initOption(),this.dispatch(this.Event.ReUI,{})}checkInput(){return!(0===this.option?.input)}initOption(){if(this.elNodeContent&&this.option&&this.elNodeOutputs){if(this.elNodeContent.innerHTML=this.option.html,void 0!==this.option.output){this.elNodeOutputs.innerHTML="";for(let e=1;e<=this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",e.toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs?.appendChild(t)}}0===this.option.input&&this.elNodeInputs&&(this.elNodeInputs.innerHTML="")}let e=this;setTimeout((()=>{e.RunScript(e,e.elNode)}),100)}RunScript(e,t){this.option&&this.option.script&&!this.flgScript&&(this.flgScript=!0,a("(node,el)=>{"+this.option.script.toString()+"}")(e,t),this.flgScript=!0)}checkKey(e){return this.option&&this.option.key==e}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this),this.dispatch(this.Event.selected,{})}updatePosition(e,t,s=!1){this.elNode&&(s?(this.pos_x=e,this.pos_y=t):(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})),this.dispatch(this.Event.updatePosition,{x:this.pos_x,y:this.pos_y}),this.dispatch(this.Event.change,{}))}}var l;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(l||(l={}));class c extends s{elCanvas;flgDrap=!1;flgMove=!1;moveType=l.None;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;nodes=[];lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;data=new d(this);tagIngore=["input","button","a","textarea"];Properties={id:{key:"id"},name:{key:"name"},zoom:{key:"zoom",default:1},canvas_x:{key:"canvas_x",default:0},canvas_y:{key:"canvas_y",default:0}};Event={change:"change",selected:"Selected",updateView:"updateView"};constructor(e){super(e),this.elNode=this.parent.elNode.querySelector(".workerflow-desgin .workerflow-view")||this.elNode,this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,this.addEvent(),this.Reset(),this.updateView()}getOption(e){return this.parent.getOption(e)}dropEnd(e){e.preventDefault();let t="";t="touchend"===e.type?this.parent.dataNodeSelect:e.dataTransfer.getData("node");let s=this.getOption(t);if(s&&s.onlyNode&&this.nodes.filter((e=>e.checkKey(t))).length>0)return;let i=this.AddNode(s),o=0,n=0;"touchmove"===e.type?(o=e.touches[0].clientX,n=e.touches[0].clientY):(o=e.clientX,n=e.clientY);let d=this.CalcX(this.elCanvas.getBoundingClientRect().x-o),h=this.CalcY(this.elCanvas.getBoundingClientRect().y-n);i.updatePosition(d,h)}toJson(){let e=this.nodes.map((e=>e.toJson())),t={};for(let e of Object.keys(this.Properties))t[e]=this.data.Get(e);return{...t,nodes:e}}load(e){this.Reset(),e||(e={}),e[this.Properties.id.key]||(e[this.Properties.id.key]=this.parent.getUuid()),e[this.Properties.name.key]||(e[this.Properties.name.key]=`project-${e[this.Properties.id.key]}`);for(let t of Object.keys(this.Properties))this.data.Set(t,e[t]??this.Properties[t].default);this.nodes=(e.nodes??[]).map((e=>new r(this,"").load(e))),(e.nodes??[]).forEach((e=>{(e.line??[]).forEach((e=>{let t=this.getNodeById(e.fromNode),s=this.getNodeById(e.toNode),i=e.ouputIndex??0;t&&s&&this.AddLine(t,s,i)}))})),this.updateView()}Reset(){this.nodes.forEach((e=>e.delete(!1))),this.nodes=[],this.data.Set(this.Properties.canvas_x.key,0),this.data.Set(this.Properties.canvas_y.key,0),this.updateView()}getNodeById(e){return this.nodes?.filter((t=>t.nodeId==e))[0]}updateView(){this.elCanvas.style.transform="translate("+this.data.Get(this.Properties.canvas_x.key)+"px, "+this.data.Get(this.Properties.canvas_y.key)+"px) scale("+this.data.Get(this.Properties.zoom.key)+")",this.dispatch(this.Event.updateView,{x:this.data.Get(this.Properties.canvas_x.key),y:this.data.Get(this.Properties.canvas_y.key),zoom:this.data.Get(this.Properties.zoom.key)})}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.data.Get(this.Properties.zoom.key)))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.data.Get(this.Properties.zoom.key)))}dragover(e){e.preventDefault()}UnSelectLine(){this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null)}UnSelectDot(){this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null)}UnSelectNode(){this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active")}SelectNode(e){this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}SelectDot(e){this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=e?e.id:this.parent.getUuid(),s=new r(this,t??this.parent.getUuid(),e);return this.nodes=[...this.nodes,s],s}AddLine(e,t,s=0){if(e!=t&&!(e.arrLine.filter((e=>e.toNode===t&&e.outputIndex==s&&e!=this.tempLine)).length>0))return new h(this,e,t,s)}addEvent(){this.elNode?.addEventListener("mouseup",this.EndMove.bind(this)),this.elNode?.addEventListener("mouseleave",this.EndMove.bind(this)),this.elNode?.addEventListener("mousemove",this.Move.bind(this)),this.elNode?.addEventListener("mousedown",this.StartMove.bind(this)),this.elNode?.addEventListener("touchend",this.EndMove.bind(this)),this.elNode?.addEventListener("touchmove",this.Move.bind(this)),this.elNode?.addEventListener("touchstart",this.StartMove.bind(this)),this.elNode?.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elNode?.addEventListener("drop",this.dropEnd.bind(this)),this.elNode?.addEventListener("dragover",this.dragover.bind(this)),this.elNode?.addEventListener("wheel",this.zoom_enter.bind(this)),this.elNode?.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.data.Set(this.Properties.canvas_x.key,this.data.Get(this.Properties.canvas_x.key)/this.zoom_last_value*this.data.Get(this.Properties.zoom.key)),this.data.Set(this.Properties.canvas_y.key,this.data.Get(this.Properties.canvas_y.key)/this.zoom_last_value*this.data.Get(this.Properties.zoom.key)),this.zoom_last_value=this.data.Get(this.Properties.zoom.key),this.updateView()}zoom_in(){this.data.Get(this.Properties.zoom.key)<this.zoom_max&&(this.data.Set(this.Properties.zoom.key,this.data.Get(this.Properties.zoom.key)+this.zoom_value),this.zoom_refresh())}zoom_out(){this.data.Get(this.Properties.zoom.key)>this.zoom_min&&(this.data.Set(this.Properties.zoom.key,this.data.Get(this.Properties.zoom.key)-this.zoom_value),this.zoom_refresh())}zoom_reset(){1!=this.data.Get(this.Properties.zoom.key)&&(this.data.Set(this.Properties.zoom.key,this.Properties.zoom.default),this.zoom_refresh())}StartMove(e){if(!this.tagIngore.includes(e.target.tagName.toLowerCase())){if(this.timeFastClick=this.parent.getTime(),this.moveType==l.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=l.Line,this.tempLine=new h(this,this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=l.Node;else this.moveType=l.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case l.Canvas:{let e=this.data.Get(this.Properties.canvas_x.key)+this.CalcX(-(this.pos_x-t)),i=this.data.Get(this.Properties.canvas_y.key)+this.CalcY(-(this.pos_y-s));this.elCanvas.style.transform="translate("+e+"px, "+i+"px) scale("+this.data.Get(this.Properties.zoom.key)+")";break}case l.Node:{let e=this.CalcX(this.pos_x-t),i=this.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.nodeSelected?.updatePosition(e,i);break}case l.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),i=this.CalcY(this.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-i),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.getTime()-this.timeFastClick<300||!this.flgDrap&&!this.flgMove)return this.moveType=l.None,this.flgDrap=!1,void(this.flgMove=!1);this.UnSelect(),this.tempLine&&this.moveType==l.Line&&(this.tempLine.toNode&&this.tempLine.toNode.checkInput()&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,s=0;"touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===l.Canvas&&(this.data.Set(this.Properties.canvas_x.key,this.data.Get(this.Properties.canvas_x.key)+this.CalcX(-(this.pos_x-t))),this.data.Set(this.Properties.canvas_y.key,this.data.Get(this.Properties.canvas_y.key)+this.CalcY(-(this.pos_y-s)))),this.pos_x=t,this.pos_y=s,this.moveType=l.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class extends t{View;Control;Property;Tab;modules={};dataNodeSelect=null;option;checkParent(e,t){if(e&&t){if(e==t)return!0;let s=e;for(;null!=(s=s.parentElement);)if(t==s)return!0}return!1}constructor(e,t=null){super(),this.elNode=e,this.elNode.classList.add("workerflow"),this.option=t||{control:{}},this.elNode.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    <div class="workerflow-property">\n      <h2 class="workerflow-property__header">Properties</h2>\n      <div class="workerflow-property__list">\n      </div>\n    </div>\n    ',this.View=new c(this),this.Tab=new n(this),this.Control=new i(this),this.Property=new o(this),0==Object.keys(this.modules).length&&this.new()}new(){this.tab?.NewProject()}load(e){this.tab?.LoadProject(e)}getOption(e){if(!e)return;let t=this.option.control[e];return t||(t=Object.values(this.option.control)[0]),t.key=e,t}toJson(){return this.View?.toJson()}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
