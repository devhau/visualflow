/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{elControl;parent;constructor(e){if(this.parent=e,this.elControl=e.container?.querySelector(".workerflow-control__list"),this.elControl){this.elControl.innerHTML="",Object.keys(e.option.control).forEach((t=>{let i=document.createElement("div");i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.classList.add("workerflow-control__item"),i.innerHTML=e.option.control[t].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elControl?.appendChild(i)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class t{parent;elNode;elNodeInputs;elNodeOutputs;elNodeContent;nodeId;pos_x=0;pos_y=0;arrLine=[];AddLine(e){this.arrLine=[...this.arrLine,e]}constructor(e,t,i=null){this.parent=e,this.nodeId=t,this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${t}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="dot"></div>',this.elNode.setAttribute("data-node",t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode)}StartSelected(e){this.parent.SelectNode(this)}updatePosition(e,t){this.elNode&&(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t,this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})))}}class i{elView;elCanvas=null;parent;nodes=[];flgDrap=!1;flgDrapMove=!1;zoom=1;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;canvas_x=0;canvas_y=0;pos_x=0;pos_x_start=0;pos_y=0;pos_y_start=0;mouse_x=0;mouse_y=0;nodeSelected=null;dotSelected=null;constructor(e){this.parent=e,this.elView=this.parent.container?.querySelector(".workerflow-desgin .workerflow-view"),this.elView&&(this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elView.appendChild(this.elCanvas),this.elView.tabIndex=0,this.addEvent(),this.elView.addEventListener("drop",this.dropEnd.bind(this)),this.elView.addEventListener("dragover",this.dragover.bind(this)))}dropEnd(e){if(!this.elCanvas||!this.elView)return;"touchend"===e.type||(e.preventDefault(),e.dataTransfer.getData("node"));let t=this.AddNode(),i=0,s=0;"touchmove"===e.type?(i=e.touches[0].clientX,s=e.touches[0].clientY):(i=e.clientX,s=e.clientY),i=i*(this.elView.clientWidth/(this.elView.clientWidth*this.zoom))-this.elView.getBoundingClientRect().x*(this.elView.clientWidth/(this.elView.clientWidth*this.zoom)),s=s*(this.elView.clientHeight/(this.elView.clientHeight*this.zoom))-this.elView.getBoundingClientRect().y*(this.elView.clientHeight/(this.elView.clientHeight*this.zoom)),t.updatePosition(i,s),console.log(e)}dragover(e){e.preventDefault()}UnSelectNode(){this.nodeSelected&&this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null}SelectNode(e){this.UnSelectNode(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}UnSelectDot(){this.dotSelected&&this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null}SelectDot(e){this.UnSelectDot(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}AddNode(){let e=new t(this,this.parent.getUuid());return this.nodes=[...this.nodes,e],e}addEvent(){this.elView&&(this.elView.addEventListener("mouseup",this.EndMove.bind(this)),this.elView.addEventListener("mouseleave",this.EndMove.bind(this)),this.elView.addEventListener("mousemove",this.Move.bind(this)),this.elView.addEventListener("mousedown",this.StartMove.bind(this)),this.elView.addEventListener("touchend",this.EndMove.bind(this)),this.elView.addEventListener("touchmove",this.Move.bind(this)),this.elView.addEventListener("touchstart",this.StartMove.bind(this)),this.elView.addEventListener("contextmenu",this.contextmenu.bind(this)))}StartMove(e){console.log(e),this.nodeSelected&&this.nodeSelected.elNode!==e.target&&this.nodeSelected.elNode!==e.target.parents(".workerflow-node")&&this.UnSelectNode(),"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_x_start=e.touches[0].clientX,this.pos_y=e.touches[0].clientY,this.pos_y_start=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_x_start=e.clientX,this.pos_y=e.clientY,this.pos_y_start=e.clientY),this.flgDrap=!0,this.flgDrapMove=!1}Move(e){if(!this.flgDrap)return;if(!this.elCanvas||!this.elView)return;this.flgDrapMove=!0;let t=0,i=0;if("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.nodeSelected){let e=(this.pos_x-t)*this.elCanvas.clientWidth/(this.elCanvas.clientWidth*this.zoom),s=(this.pos_y-i)*this.elCanvas.clientHeight/(this.elCanvas.clientHeight*this.zoom);this.pos_x=t,this.pos_y=i,this.nodeSelected.updatePosition(e,s)}else{let e=this.canvas_x+-(this.pos_x-t),s=this.canvas_y+-(this.pos_y-i);this.elCanvas.style.transform="translate("+e+"px, "+s+"px) scale("+this.zoom+")"}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){this.flgDrapMove&&this.UnSelectNode(),this.flgDrapMove=!1,this.flgDrap=!1;let t=0,i=0;"touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.canvas_x=this.canvas_x+-(this.pos_x-t),this.canvas_y=this.canvas_y+-(this.pos_y-i),this.pos_x=t,this.pos_y=i}contextmenu(e){e.preventDefault()}}return class{container;View;Control;dataNodeSelect=null;events={};option;constructor(t,s=null){this.container=t,this.container.classList.add("workerflow"),this.option=s||{control:{Node1:{name:'<i class="fab fa-aws"></i><span> AWS</span>',html:"<div>Xin chào</div>"},Node2:{name:"Node2",html:"<div>Xin chào</div>"},Node3:{name:"Node3",html:"<div>Xin chào</div>"},Node4:{name:"Node4",html:"<div>Xin chào</div>"}}},this.container.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      <div draggable="true">Node 1</div>\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n        <div class="workerflow-item">Thông tin mới</div>\n        <div class="workerflow-item">Thông tin mới123</div>\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    ',this.View=new i(this),this.Control=new e(this)}getUuid(){let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){let i=this;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,i)}))}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
