/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{elControl;parent;constructor(e){if(this.parent=e,this.elControl=e.container?.querySelector(".workerflow-control__list"),this.elControl){this.elControl.innerHTML="",Object.keys(e.option.control).forEach((t=>{let i=document.createElement("div");i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.classList.add("workerflow-control__item"),i.innerHTML=e.option.control[t].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elControl?.appendChild(i)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class t{fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t=null,i=0){this.fromNode=e,this.toNode=t,this.outputIndex=i,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.fromNode.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.fromNode.parent.SelectLine(this)}createCurvature(e,t,i,s,o,n){let h=e,d=t,l=i,a=s,r=o;switch(n){case"open":if(e>=i)var c=h+Math.abs(l-h)*r,u=l-Math.abs(l-h)*(-1*r);else c=h+Math.abs(l-h)*r,u=l-Math.abs(l-h)*r;return" M "+h+" "+d+" C "+c+" "+d+" "+u+" "+a+" "+l+"  "+a;case"close":if(e>=i)c=h+Math.abs(l-h)*(-1*r),u=l-Math.abs(l-h)*r;else c=h+Math.abs(l-h)*r,u=l-Math.abs(l-h)*r;return" M "+h+" "+d+" C "+c+" "+d+" "+u+" "+a+" "+l+"  "+a;case"other":if(e>=i)c=h+Math.abs(l-h)*(-1*r),u=l-Math.abs(l-h)*(-1*r);else c=h+Math.abs(l-h)*r,u=l-Math.abs(l-h)*r;return" M "+h+" "+d+" C "+c+" "+d+" "+u+" "+a+" "+l+"  "+a;default:return" M "+h+" "+d+" C "+(c=h+Math.abs(l-h)*r)+" "+d+" "+(u=l-Math.abs(l-h)*r)+" "+a+" "+l+"  "+a}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){let i=this.fromNode.pos_x+this.fromNode.elNode.clientWidth+5,s=this.fromNode.pos_y+(this.outputIndex>0?21*(this.outputIndex-1)+15:this.fromNode.elNode.clientHeight/2);var o=this.createCurvature(i,s,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode){let e=this.toNode.pos_x-5,t=this.toNode.pos_y+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}class i{parent;elNode;elNodeInputs;elNodeOutputs;elNodeContent;nodeId;pos_x=0;pos_y=0;arrLine=[];option;delete(){this.arrLine.forEach((e=>e.delete(this))),this.elNode.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.remove(),this.arrLine=[],this.parent.RemoveNode(this)}AddLine(e){this.arrLine=[...this.arrLine,e]}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}constructor(e,t,i=null){if(this.option=i,this.parent=e,this.nodeId=t,this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${t}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML="",this.elNode.setAttribute("data-node",t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.option&&(this.elNodeContent.innerHTML=this.option.html,this.elNodeOutputs.innerHTML="",this.option.output))for(let e=1;e<=this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",e.toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs.appendChild(t)}this.parent.elCanvas?.appendChild(this.elNode)}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this)}updatePosition(e,t,i=!1){this.elNode&&(i?(this.pos_x=e,this.pos_y=t):(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})))}}var s;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(s||(s={}));class o{elView;elCanvas;parent;nodes=[];flgDrap=!1;flgMove=!1;moveType=s.None;zoom=1;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;canvas_x=0;canvas_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;constructor(e){this.parent=e,this.elView=this.parent.container?.querySelector(".workerflow-desgin .workerflow-view")||document.createElement("div"),this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elView.appendChild(this.elCanvas),this.elView.tabIndex=0,this.addEvent(),this.updateView()}dropEnd(e){let t="";if("touchend"===e.type?t=this.parent.dataNodeSelect:(e.preventDefault(),t=e.dataTransfer.getData("node")),!t)return;let i=this.AddNode(this.parent.option.control[t]),s=0,o=0;"touchmove"===e.type?(s=e.touches[0].clientX,o=e.touches[0].clientY):(s=e.clientX,o=e.clientY);let n=this.CalcX(this.elCanvas.getBoundingClientRect().x-s),h=this.CalcY(this.elCanvas.getBoundingClientRect().y-o);i.updatePosition(n,h)}updateView(){this.elCanvas.style.transform="translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")"}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elView.clientWidth*this.zoom))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elView.clientHeight*this.zoom))}dragover(e){e.preventDefault()}UnSelectLine(){this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null)}UnSelectDot(){this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null)}UnSelectNode(){this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active")}SelectNode(e){this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}SelectDot(e){this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=e?e.id:this.parent.getUuid(),s=new i(this,t??this.parent.getUuid(),e);return this.nodes=[...this.nodes,s],s}AddLine(e,i,s=0){return new t(e,i,s)}addEvent(){this.elView.addEventListener("mouseup",this.EndMove.bind(this)),this.elView.addEventListener("mouseleave",this.EndMove.bind(this)),this.elView.addEventListener("mousemove",this.Move.bind(this)),this.elView.addEventListener("mousedown",this.StartMove.bind(this)),this.elView.addEventListener("touchend",this.EndMove.bind(this)),this.elView.addEventListener("touchmove",this.Move.bind(this)),this.elView.addEventListener("touchstart",this.StartMove.bind(this)),this.elView.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elView.addEventListener("drop",this.dropEnd.bind(this)),this.elView.addEventListener("dragover",this.dragover.bind(this)),this.elView.addEventListener("wheel",this.zoom_enter.bind(this)),this.elView.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.canvas_x=this.canvas_x/this.zoom_last_value*this.zoom,this.canvas_y=this.canvas_y/this.zoom_last_value*this.zoom,this.zoom_last_value=this.zoom,this.updateView()}zoom_in(){this.zoom<this.zoom_max&&(this.zoom+=this.zoom_value,this.zoom_refresh())}zoom_out(){this.zoom>this.zoom_min&&(this.zoom-=this.zoom_value,this.zoom_refresh())}zoom_reset(){1!=this.zoom&&(this.zoom=1,this.zoom_refresh())}StartMove(e){if(this.timeFastClick=this.parent.getTime(),this.moveType==s.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=s.Line,this.tempLine=new t(this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=s.Node;else this.moveType=s.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,i=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.moveType){case s.Canvas:{let e=this.canvas_x+this.CalcX(-(this.pos_x-t)),s=this.canvas_y+this.CalcY(-(this.pos_y-i));this.elCanvas.style.transform="translate("+e+"px, "+s+"px) scale("+this.zoom+")";break}case s.Node:{let e=this.CalcX(this.pos_x-t),s=this.CalcY(this.pos_y-i);this.pos_x=t,this.pos_y=i,this.nodeSelected?.updatePosition(e,s);break}case s.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),s=this.CalcY(this.elCanvas.getBoundingClientRect().y-i);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-s),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){if(this.parent.getTime()-this.timeFastClick<300||!this.flgDrap&&!this.flgMove)return this.moveType=s.None,this.flgDrap=!1,void(this.flgMove=!1);this.UnSelect(),this.tempLine&&this.moveType==s.Line&&(this.tempLine.toNode&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,i=0;"touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.moveType===s.Canvas&&(this.canvas_x=this.canvas_x+this.CalcX(-(this.pos_x-t)),this.canvas_y=this.canvas_y+this.CalcY(-(this.pos_y-i))),this.pos_x=t,this.pos_y=i,this.moveType=s.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class{container;View;Control;dataNodeSelect=null;events={};option;checkParent(e,t){if(e&&t){if(e==t)return!0;let i=e;for(;null!=(i=i.parentElement);)if(t==i)return!0}return!1}constructor(t,i=null){this.container=t,this.container.classList.add("workerflow"),this.option=i||{control:{Node1:{name:'<i class="fab fa-aws"></i><span> AWS</span>',html:"<div>Xin chào 1</div>",output:0},Node2:{name:"Node2",html:"<div>Xin chào 2</div>",output:1},Node3:{name:"Node3",html:"<div>Xin chào 3</div>",output:3},Node4:{name:"Node4",html:"<div>Xin chào 4</div>",output:10}}},this.container.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      <div draggable="true">Node 1</div>\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n        <div class="workerflow-item">Thông tin mới</div>\n        <div class="workerflow-item">Thông tin mới123</div>\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    ',this.View=new o(this),this.Control=new e(this)}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){let i=this;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,i)}))}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL0NvbnRyb2xGbG93LnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvTGluZUZsb3cudHMiLCIuLi9zcmMvY29tcG9uZW50cy9Ob2RlRmxvdy50cyIsIi4uL3NyYy9jb21wb25lbnRzL1ZpZXdGbG93LnRzIiwiLi4vc3JjL1dvcmtlckZsb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ya2VyRmxvdyB9IGZyb20gXCIuLi9Xb3JrZXJGbG93XCI7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sRmxvdyB7XG4gIHByaXZhdGUgZWxDb250cm9sOiBIVE1MRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgcGFyZW50OiBXb3JrZXJGbG93O1xuICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50OiBXb3JrZXJGbG93KSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5lbENvbnRyb2wgPSBwYXJlbnQuY29udGFpbmVyPy5xdWVyeVNlbGVjdG9yKCcud29ya2VyZmxvdy1jb250cm9sX19saXN0Jyk7XG4gICAgaWYgKHRoaXMuZWxDb250cm9sKSB7XG4gICAgICB0aGlzLmVsQ29udHJvbC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhwYXJlbnQub3B0aW9uLmNvbnRyb2wpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCBOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIE5vZGUuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICBOb2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJywga2V5KTtcbiAgICAgICAgTm9kZS5jbGFzc0xpc3QuYWRkKFwid29ya2VyZmxvdy1jb250cm9sX19pdGVtXCIpO1xuICAgICAgICBOb2RlLmlubmVySFRNTCA9IHBhcmVudC5vcHRpb24uY29udHJvbFtrZXldLm5hbWU7XG4gICAgICAgIE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5kcmFnU3RhcnQuYmluZCh0aGlzKSlcbiAgICAgICAgTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgdGhpcy5kcmFnZW5kLmJpbmQodGhpcykpXG4gICAgICAgIHRoaXMuZWxDb250cm9sPy5hcHBlbmRDaGlsZChOb2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZHJhZ2VuZChlOiBhbnkpIHtcbiAgICB0aGlzLnBhcmVudC5kYXRhTm9kZVNlbGVjdCA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZHJhZ1N0YXJ0KGU6IGFueSkge1xuICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBhcmVudC5kYXRhTm9kZVNlbGVjdCA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIud29ya2VyZmxvdy1jb250cm9sX19pdGVtXCIpLmdldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyZW50LmRhdGFOb2RlU2VsZWN0ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnKTtcbiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJub2RlXCIsIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJykpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTm9kZUZsb3cgfSBmcm9tIFwiLi9Ob2RlRmxvd1wiO1xuXG5leHBvcnQgY2xhc3MgTGluZUZsb3cge1xuICBwdWJsaWMgZWxDb25uZWN0aW9uOiBTVkdFbGVtZW50IHwgbnVsbDtcbiAgcHVibGljIGVsUGF0aDogU1ZHUGF0aEVsZW1lbnQ7XG4gIHByaXZhdGUgY3VydmF0dXJlOiBudW1iZXIgPSAwLjU7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZnJvbU5vZGU6IE5vZGVGbG93LCBwdWJsaWMgdG9Ob2RlOiBOb2RlRmxvdyB8IG51bGwgPSBudWxsLCBwdWJsaWMgb3V0cHV0SW5kZXg6IG51bWJlciA9IDApIHtcbiAgICB0aGlzLmVsQ29ubmVjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKTtcbiAgICB0aGlzLmVsUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInBhdGhcIik7XG4gICAgdGhpcy5lbFBhdGguY2xhc3NMaXN0LmFkZChcIm1haW4tcGF0aFwiKTtcbiAgICB0aGlzLmVsUGF0aC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICcnKTtcbiAgICB0aGlzLmVsQ29ubmVjdGlvbi5jbGFzc0xpc3QuYWRkKFwiY29ubmVjdGlvblwiKTtcbiAgICB0aGlzLmVsQ29ubmVjdGlvbi5hcHBlbmRDaGlsZCh0aGlzLmVsUGF0aCk7XG4gICAgdGhpcy5mcm9tTm9kZS5wYXJlbnQuZWxDYW52YXM/LmFwcGVuZENoaWxkKHRoaXMuZWxDb25uZWN0aW9uKTtcbiAgICB0aGlzLmZyb21Ob2RlLkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy50b05vZGU/LkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuICBwdWJsaWMgU3RhcnRTZWxlY3RlZChlOiBhbnkpIHtcbiAgICB0aGlzLmZyb21Ob2RlLnBhcmVudC5TZWxlY3RMaW5lKHRoaXMpO1xuICB9XG4gIHByaXZhdGUgY3JlYXRlQ3VydmF0dXJlKHN0YXJ0X3Bvc194OiBudW1iZXIsIHN0YXJ0X3Bvc195OiBudW1iZXIsIGVuZF9wb3NfeDogbnVtYmVyLCBlbmRfcG9zX3k6IG51bWJlciwgY3VydmF0dXJlX3ZhbHVlOiBudW1iZXIsIHR5cGU6IHN0cmluZykge1xuICAgIGxldCBsaW5lX3ggPSBzdGFydF9wb3NfeDtcbiAgICBsZXQgbGluZV95ID0gc3RhcnRfcG9zX3k7XG4gICAgbGV0IHggPSBlbmRfcG9zX3g7XG4gICAgbGV0IHkgPSBlbmRfcG9zX3k7XG4gICAgbGV0IGN1cnZhdHVyZSA9IGN1cnZhdHVyZV92YWx1ZTtcbiAgICAvL3R5cGUgb3BlbmNsb3NlIG9wZW4gY2xvc2Ugb3RoZXJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcblxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvdGhlcic6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuXG4gICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcblxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBkZWxldGUobm9kZVRoaXM6IGFueSA9IG51bGwpIHtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoPy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIGlmICh0aGlzLmZyb21Ob2RlICE9IG5vZGVUaGlzKVxuICAgICAgdGhpcy5mcm9tTm9kZS5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIGlmICh0aGlzLnRvTm9kZSAhPSBub2RlVGhpcylcbiAgICAgIHRoaXMudG9Ob2RlPy5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIHRoaXMuZWxDb25uZWN0aW9uPy5yZW1vdmUoKTtcbiAgICB0aGlzLmVsQ29ubmVjdGlvbiA9IG51bGw7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRvKHRvX3g6IG51bWJlciwgdG9feTogbnVtYmVyKSB7XG4gICAgbGV0IGZyb21feCA9IHRoaXMuZnJvbU5vZGUucG9zX3ggKyB0aGlzLmZyb21Ob2RlLmVsTm9kZS5jbGllbnRXaWR0aCArIDU7XG4gICAgbGV0IGZyb21feSA9IHRoaXMuZnJvbU5vZGUucG9zX3kgKyAodGhpcy5vdXRwdXRJbmRleCA+IDAgPyAoKCh0aGlzLm91dHB1dEluZGV4IC0gMSkgKiAyMSkgKyAxNSkgOiAodGhpcy5mcm9tTm9kZS5lbE5vZGUuY2xpZW50SGVpZ2h0IC8gMikpO1xuICAgIHZhciBsaW5lQ3VydmUgPSB0aGlzLmNyZWF0ZUN1cnZhdHVyZShmcm9tX3gsIGZyb21feSwgdG9feCwgdG9feSwgdGhpcy5jdXJ2YXR1cmUsICdvcGVuY2xvc2UnKTtcbiAgICB0aGlzLmVsUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsIGxpbmVDdXJ2ZSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZSgpIHtcbiAgICAvL1Bvc3Rpb24gb3V0cHV0XG4gICAgaWYgKHRoaXMudG9Ob2RlKSB7XG4gICAgICBsZXQgdG9feCA9IHRoaXMudG9Ob2RlLnBvc194IC0gNTtcbiAgICAgIGxldCB0b195ID0gdGhpcy50b05vZGUucG9zX3kgKyB0aGlzLnRvTm9kZS5lbE5vZGUuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgIHRoaXMudXBkYXRlVG8odG9feCwgdG9feSk7XG4gICAgfVxuXG4gIH1cbn1cbiIsImltcG9ydCB7IExpbmVGbG93IH0gZnJvbSBcIi4vTGluZUZsb3dcIjtcbmltcG9ydCB7IFZpZXdGbG93IH0gZnJvbSBcIi4vVmlld0Zsb3dcIjtcblxuZXhwb3J0IGNsYXNzIE5vZGVGbG93IHtcbiAgcHVibGljIHBhcmVudDogVmlld0Zsb3c7XG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50O1xuICBwdWJsaWMgZWxOb2RlSW5wdXRzOiBIVE1MRWxlbWVudCB8IG51bGwgfCBudWxsO1xuICBwdWJsaWMgZWxOb2RlT3V0cHV0czogSFRNTEVsZW1lbnQgfCBudWxsIHwgbnVsbDtcbiAgcHVibGljIGVsTm9kZUNvbnRlbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCB8IG51bGw7XG4gIHB1YmxpYyBub2RlSWQ6IHN0cmluZztcbiAgcHVibGljIHBvc194OiBudW1iZXIgPSAwO1xuICBwdWJsaWMgcG9zX3k6IG51bWJlciA9IDA7XG4gIHB1YmxpYyBhcnJMaW5lOiBMaW5lRmxvd1tdID0gW107XG4gIHByaXZhdGUgb3B0aW9uOiBhbnk7XG4gIHB1YmxpYyBkZWxldGUoKSB7XG4gICAgdGhpcy5hcnJMaW5lLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0uZGVsZXRlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLk5vZGVPdmVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLk5vZGVMZWF2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmUoKTtcbiAgICB0aGlzLmFyckxpbmUgPSBbXTtcbiAgICB0aGlzLnBhcmVudC5SZW1vdmVOb2RlKHRoaXMpO1xuICB9XG4gIHB1YmxpYyBBZGRMaW5lKGxpbmU6IExpbmVGbG93KSB7XG4gICAgdGhpcy5hcnJMaW5lID0gWy4uLnRoaXMuYXJyTGluZSwgbGluZV07XG4gIH1cbiAgcHVibGljIFJlbW92ZUxpbmUobGluZTogTGluZUZsb3cpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmFyckxpbmUuaW5kZXhPZihsaW5lKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5hcnJMaW5lLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFyckxpbmU7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogVmlld0Zsb3csIGlkOiBzdHJpbmcsIG9wdGlvbjogYW55ID0gbnVsbCkge1xuICAgIHRoaXMub3B0aW9uID0gb3B0aW9uO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMubm9kZUlkID0gaWQ7XG4gICAgdGhpcy5lbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKFwid29ya2VyZmxvdy1ub2RlXCIpO1xuICAgIHRoaXMuZWxOb2RlLmlkID0gYG5vZGUtJHtpZH1gO1xuICAgIHRoaXMuZWxOb2RlSW5wdXRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbE5vZGVJbnB1dHMuY2xhc3NMaXN0LmFkZCgnd29ya2VyZmxvdy1ub2RlX2lucHV0cycpO1xuICAgIHRoaXMuZWxOb2RlSW5wdXRzLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwiaW5wdXRzIGRvdFwiPjwvZGl2PmA7XG4gICAgdGhpcy5lbE5vZGVDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbE5vZGVDb250ZW50LmNsYXNzTGlzdC5hZGQoJ3dvcmtlcmZsb3ctbm9kZV9jb250ZW50Jyk7XG4gICAgdGhpcy5lbE5vZGVPdXRwdXRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbE5vZGVPdXRwdXRzLmNsYXNzTGlzdC5hZGQoJ3dvcmtlcmZsb3ctbm9kZV9vdXRwdXRzJyk7XG4gICAgdGhpcy5lbE5vZGVPdXRwdXRzLmlubmVySFRNTCA9IGBgO1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJywgaWQpO1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgdG9wOiAke3RoaXMucG9zX3l9cHg7IGxlZnQ6ICR7dGhpcy5wb3NfeH1weDtgKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLk5vZGVPdmVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLk5vZGVMZWF2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZUlucHV0cyk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGVDb250ZW50KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZU91dHB1dHMpXG4gICAgaWYgKHRoaXMub3B0aW9uKSB7XG4gICAgICB0aGlzLmVsTm9kZUNvbnRlbnQuaW5uZXJIVE1MID0gdGhpcy5vcHRpb24uaHRtbDtcbiAgICAgIHRoaXMuZWxOb2RlT3V0cHV0cy5pbm5lckhUTUwgPSAnJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbi5vdXRwdXQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDE7IGluZGV4IDw9IHRoaXMub3B0aW9uLm91dHB1dDsgaW5kZXgrKykge1xuICAgICAgICAgIGxldCBvdXRwdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBvdXRwdXQuc2V0QXR0cmlidXRlKCdub2RlJywgKGluZGV4KS50b1N0cmluZygpKTtcbiAgICAgICAgICBvdXRwdXQuY2xhc3NMaXN0LmFkZChcImRvdFwiKTtcbiAgICAgICAgICBvdXRwdXQuY2xhc3NMaXN0LmFkZChcIm91dHB1dF9cIiArIChpbmRleCkpO1xuICAgICAgICAgIHRoaXMuZWxOb2RlT3V0cHV0cy5hcHBlbmRDaGlsZChvdXRwdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucGFyZW50LmVsQ2FudmFzPy5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gIH1cbiAgcHVibGljIE5vZGVPdmVyKGU6IGFueSkge1xuICAgIHRoaXMucGFyZW50Lm5vZGVPdmVyID0gdGhpcztcbiAgfVxuICBwdWJsaWMgTm9kZUxlYXZlKGU6IGFueSkge1xuICAgIHRoaXMucGFyZW50Lm5vZGVPdmVyID0gbnVsbDtcbiAgfVxuICBwdWJsaWMgU3RhcnRTZWxlY3RlZChlOiBhbnkpIHtcbiAgICB0aGlzLnBhcmVudC5TZWxlY3ROb2RlKHRoaXMpO1xuICB9XG4gIHB1YmxpYyB1cGRhdGVQb3NpdGlvbih4OiBhbnksIHk6IGFueSwgaUNoZWNrID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5lbE5vZGUpIHtcbiAgICAgIGlmIChpQ2hlY2spIHtcbiAgICAgICAgdGhpcy5wb3NfeCA9IHg7XG4gICAgICAgIHRoaXMucG9zX3kgPSB5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wb3NfeCA9ICh0aGlzLmVsTm9kZS5vZmZzZXRMZWZ0IC0geCk7XG4gICAgICAgIHRoaXMucG9zX3kgPSAodGhpcy5lbE5vZGUub2Zmc2V0VG9wIC0geSk7XG4gICAgICB9XG4gICAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHRvcDogJHt0aGlzLnBvc195fXB4OyBsZWZ0OiAke3RoaXMucG9zX3h9cHg7YCk7XG4gICAgICB0aGlzLmFyckxpbmUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpdGVtLnVwZGF0ZSgpO1xuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFdvcmtlckZsb3cgfSBmcm9tIFwiLi4vV29ya2VyRmxvd1wiO1xuaW1wb3J0IHsgTGluZUZsb3cgfSBmcm9tIFwiLi9MaW5lRmxvd1wiO1xuaW1wb3J0IHsgTm9kZUZsb3cgfSBmcm9tIFwiLi9Ob2RlRmxvd1wiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgVmlld0Zsb3cge1xuICBwcml2YXRlIGVsVmlldzogSFRNTEVsZW1lbnQ7XG4gIHB1YmxpYyBlbENhbnZhczogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgcGFyZW50OiBXb3JrZXJGbG93O1xuICBwcml2YXRlIG5vZGVzOiBOb2RlRmxvd1tdID0gW107XG4gIHB1YmxpYyBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBmbGdNb3ZlOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSB6b29tOiBudW1iZXIgPSAxO1xuICBwcml2YXRlIHpvb21fbWF4OiBudW1iZXIgPSAxLjY7XG4gIHByaXZhdGUgem9vbV9taW46IG51bWJlciA9IDAuNTtcbiAgcHJpdmF0ZSB6b29tX3ZhbHVlOiBudW1iZXIgPSAwLjE7XG4gIHByaXZhdGUgem9vbV9sYXN0X3ZhbHVlOiBudW1iZXIgPSAxO1xuICBwcml2YXRlIGNhbnZhc194OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGNhbnZhc195OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIHBvc194OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIHBvc195OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIG1vdXNlX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBsaW5lU2VsZWN0ZWQ6IExpbmVGbG93IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgbm9kZVNlbGVjdGVkOiBOb2RlRmxvdyB8IG51bGwgPSBudWxsO1xuICBwdWJsaWMgbm9kZU92ZXI6IE5vZGVGbG93IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgZG90U2VsZWN0ZWQ6IE5vZGVGbG93IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmVGbG93IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgdGltZUZhc3RDbGljazogbnVtYmVyID0gMDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogV29ya2VyRmxvdykge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZWxWaWV3ID0gdGhpcy5wYXJlbnQuY29udGFpbmVyPy5xdWVyeVNlbGVjdG9yKCcud29ya2VyZmxvdy1kZXNnaW4gLndvcmtlcmZsb3ctdmlldycpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsQ2FudmFzLmNsYXNzTGlzdC5hZGQoXCJ3b3JrZXJmbG93LWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsVmlldy5hcHBlbmRDaGlsZCh0aGlzLmVsQ2FudmFzKTtcbiAgICB0aGlzLmVsVmlldy50YWJJbmRleCA9IDA7XG4gICAgdGhpcy5hZGRFdmVudCgpO1xuICAgIHRoaXMudXBkYXRlVmlldygpO1xuICB9XG4gIHByaXZhdGUgZHJvcEVuZChldjogYW55KSB7XG4gICAgbGV0IGtleU5vZGU6IHN0cmluZyB8IG51bGwgPSAnJztcbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gdGhpcy5wYXJlbnQuZGF0YU5vZGVTZWxlY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgbm9kZSA9IHRoaXMuQWRkTm9kZSh0aGlzLnBhcmVudC5vcHRpb24uY29udHJvbFtrZXlOb2RlXSk7XG4gICAgbGV0IGVfcG9zX3ggPSAwO1xuICAgIGxldCBlX3Bvc195ID0gMDtcbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIikge1xuICAgICAgZV9wb3NfeCA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVfcG9zX3ggPSBldi5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LmNsaWVudFk7XG4gICAgfVxuICAgIGxldCB4ID0gdGhpcy5DYWxjWCh0aGlzLmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICBsZXQgeSA9IHRoaXMuQ2FsY1kodGhpcy5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBub2RlLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB1cGRhdGVWaWV3KCkge1xuICAgIHRoaXMuZWxDYW52YXMuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLmNhbnZhc194ICsgXCJweCwgXCIgKyB0aGlzLmNhbnZhc195ICsgXCJweCkgc2NhbGUoXCIgKyB0aGlzLnpvb20gKyBcIilcIjtcbiAgfVxuICBwcml2YXRlIENhbGNYKG51bWJlcjogYW55KSB7XG4gICAgcmV0dXJuIG51bWJlciAqICh0aGlzLmVsQ2FudmFzLmNsaWVudFdpZHRoIC8gKHRoaXMuZWxWaWV3LmNsaWVudFdpZHRoICogdGhpcy56b29tKSk7XG4gIH1cbiAgcHJpdmF0ZSBDYWxjWShudW1iZXI6IGFueSkge1xuICAgIHJldHVybiBudW1iZXIgKiAodGhpcy5lbENhbnZhcy5jbGllbnRIZWlnaHQgLyAodGhpcy5lbFZpZXcuY2xpZW50SGVpZ2h0ICogdGhpcy56b29tKSk7XG4gIH1cbiAgcHJpdmF0ZSBkcmFnb3ZlcihlOiBhbnkpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgcHVibGljIFVuU2VsZWN0TGluZSgpIHtcbiAgICBpZiAodGhpcy5saW5lU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMubGluZVNlbGVjdGVkLmVsUGF0aD8uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICB0aGlzLmxpbmVTZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBVblNlbGVjdERvdCgpIHtcbiAgICBpZiAodGhpcy5kb3RTZWxlY3RlZCkge1xuICAgICAgdGhpcy5kb3RTZWxlY3RlZC5lbE5vZGU/LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgdGhpcy5kb3RTZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBVblNlbGVjdE5vZGUoKSB7XG4gICAgaWYgKHRoaXMubm9kZVNlbGVjdGVkKSB7XG4gICAgICB0aGlzLm5vZGVTZWxlY3RlZC5lbE5vZGU/LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgdGhpcy5ub2RlU2VsZWN0ZWQgPSBudWxsO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgVW5TZWxlY3QoKSB7XG4gICAgdGhpcy5VblNlbGVjdExpbmUoKTtcbiAgICB0aGlzLlVuU2VsZWN0Tm9kZSgpO1xuICAgIHRoaXMuVW5TZWxlY3REb3QoKTtcbiAgfVxuICBwdWJsaWMgU2VsZWN0TGluZShub2RlOiBMaW5lRmxvdykge1xuICAgIHRoaXMuVW5TZWxlY3QoKTtcbiAgICB0aGlzLmxpbmVTZWxlY3RlZCA9IG5vZGU7XG4gICAgdGhpcy5saW5lU2VsZWN0ZWQuZWxQYXRoLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICB9XG4gIHB1YmxpYyBTZWxlY3ROb2RlKG5vZGU6IE5vZGVGbG93KSB7XG4gICAgdGhpcy5VblNlbGVjdCgpO1xuICAgIHRoaXMubm9kZVNlbGVjdGVkID0gbm9kZTtcbiAgICB0aGlzLm5vZGVTZWxlY3RlZC5lbE5vZGU/LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICB9XG4gIHB1YmxpYyBTZWxlY3REb3Qobm9kZTogTm9kZUZsb3cpIHtcbiAgICB0aGlzLlVuU2VsZWN0KCk7XG4gICAgdGhpcy5kb3RTZWxlY3RlZCA9IG5vZGU7XG4gICAgdGhpcy5kb3RTZWxlY3RlZC5lbE5vZGU/LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICB9XG4gIHB1YmxpYyBSZW1vdmVOb2RlKG5vZGU6IE5vZGVGbG93KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5ub2Rlcy5pbmRleE9mKG5vZGUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlKG9wdGlvbjogYW55ID0gbnVsbCk6IE5vZGVGbG93IHtcbiAgICBsZXQgTm9kZUlkID0gb3B0aW9uID8gb3B0aW9uLmlkIDogdGhpcy5wYXJlbnQuZ2V0VXVpZCgpO1xuICAgIGxldCBub2RlID0gbmV3IE5vZGVGbG93KHRoaXMsIE5vZGVJZCA/PyB0aGlzLnBhcmVudC5nZXRVdWlkKCksIG9wdGlvbik7XG4gICAgdGhpcy5ub2RlcyA9IFsuLi50aGlzLm5vZGVzLCBub2RlXTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBwdWJsaWMgQWRkTGluZShmcm9tTm9kZTogTm9kZUZsb3csIHRvTm9kZTogTm9kZUZsb3csIG91dHB1dEluZGV4OiBudW1iZXIgPSAwKSB7XG4gICAgcmV0dXJuIG5ldyBMaW5lRmxvdyhmcm9tTm9kZSwgdG9Ob2RlLCBvdXRwdXRJbmRleCk7XG4gIH1cbiAgcHVibGljIGFkZEV2ZW50KCkge1xuICAgIC8qIE1vdXNlIGFuZCBUb3VjaCBBY3Rpb25zICovXG4gICAgdGhpcy5lbFZpZXcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsVmlldy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5FbmRNb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsVmlldy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMuZWxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5FbmRNb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsVmlldy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5lbFZpZXcuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLmNvbnRleHRtZW51LmJpbmQodGhpcykpO1xuXG4gICAgLyogRHJvcCBEcmFwICovXG4gICAgdGhpcy5lbFZpZXcuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuZHJvcEVuZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsVmlldy5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuZHJhZ292ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogWm9vbSBNb3VzZSAqL1xuICAgIHRoaXMuZWxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcy56b29tX2VudGVyLmJpbmQodGhpcykpO1xuICAgIC8qIERlbGV0ZSAqL1xuICAgIHRoaXMuZWxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cbiAgcHVibGljIGtleWRvd24oZTogYW55KSB7XG4gICAgaWYgKGUua2V5ID09PSAnRGVsZXRlJyB8fCAoZS5rZXkgPT09ICdCYWNrc3BhY2UnICYmIGUubWV0YUtleSkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKHRoaXMubm9kZVNlbGVjdGVkICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5ub2RlU2VsZWN0ZWQuZGVsZXRlKCk7XG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGVkID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmxpbmVTZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMubGluZVNlbGVjdGVkLmRlbGV0ZSgpO1xuICAgICAgICB0aGlzLmxpbmVTZWxlY3RlZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy56b29tX291dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gWm9vbSBJblxuICAgICAgICB0aGlzLnpvb21faW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21fcmVmcmVzaCgpIHtcbiAgICB0aGlzLmNhbnZhc194ID0gKHRoaXMuY2FudmFzX3ggLyB0aGlzLnpvb21fbGFzdF92YWx1ZSkgKiB0aGlzLnpvb207XG4gICAgdGhpcy5jYW52YXNfeSA9ICh0aGlzLmNhbnZhc195IC8gdGhpcy56b29tX2xhc3RfdmFsdWUpICogdGhpcy56b29tO1xuICAgIHRoaXMuem9vbV9sYXN0X3ZhbHVlID0gdGhpcy56b29tO1xuICAgIHRoaXMudXBkYXRlVmlldygpO1xuICB9XG4gIHB1YmxpYyB6b29tX2luKCkge1xuICAgIGlmICh0aGlzLnpvb20gPCB0aGlzLnpvb21fbWF4KSB7XG4gICAgICB0aGlzLnpvb20gKz0gdGhpcy56b29tX3ZhbHVlO1xuICAgICAgdGhpcy56b29tX3JlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21fb3V0KCkge1xuICAgIGlmICh0aGlzLnpvb20gPiB0aGlzLnpvb21fbWluKSB7XG4gICAgICB0aGlzLnpvb20gLT0gdGhpcy56b29tX3ZhbHVlO1xuICAgICAgdGhpcy56b29tX3JlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21fcmVzZXQoKSB7XG4gICAgaWYgKHRoaXMuem9vbSAhPSAxKSB7XG4gICAgICB0aGlzLnpvb20gPSAxO1xuICAgICAgdGhpcy56b29tX3JlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgU3RhcnRNb3ZlKGU6IGFueSkge1xuICAgIHRoaXMudGltZUZhc3RDbGljayA9IHRoaXMucGFyZW50LmdldFRpbWUoKTtcbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PSBNb3ZlVHlwZS5Ob25lKSB7XG4gICAgICBpZiAodGhpcy5ub2RlU2VsZWN0ZWQgJiYgdGhpcy5wYXJlbnQuY2hlY2tQYXJlbnQoZS50YXJnZXQsIHRoaXMubm9kZVNlbGVjdGVkLmVsTm9kZSkpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZG90JykpIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tQYXJlbnQoZS50YXJnZXQsIHRoaXMubm9kZVNlbGVjdGVkLmVsTm9kZUlucHV0cykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkxpbmU7XG4gICAgICAgICAgdGhpcy50ZW1wTGluZSA9IG5ldyBMaW5lRmxvdyh0aGlzLm5vZGVTZWxlY3RlZCwgbnVsbCk7XG4gICAgICAgICAgdGhpcy50ZW1wTGluZS5vdXRwdXRJbmRleCA9ICsoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdub2RlJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuQ2FudmFzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS50eXBlID09PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgdGhpcy5wb3NfeCA9IGUudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvc194ID0gZS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGUuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5mbGdEcmFwID0gdHJ1ZTtcbiAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgfVxuICBwdWJsaWMgTW92ZShlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuZmxnRHJhcCkgcmV0dXJuO1xuICAgIHRoaXMuZmxnTW92ZSA9IHRydWU7XG4gICAgbGV0IGVfcG9zX3ggPSAwO1xuICAgIGxldCBlX3Bvc195ID0gMDtcbiAgICBpZiAoZS50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZS50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVfcG9zX3ggPSBlLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZS5jbGllbnRZO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMubW92ZVR5cGUpIHtcbiAgICAgIGNhc2UgTW92ZVR5cGUuQ2FudmFzOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLmNhbnZhc194ICsgdGhpcy5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgICAgICBsZXQgeSA9IHRoaXMuY2FudmFzX3kgKyB0aGlzLkNhbGNZKC0odGhpcy5wb3NfeSAtIGVfcG9zX3kpKVxuICAgICAgICAgIHRoaXMuZWxDYW52YXMuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCkgc2NhbGUoXCIgKyB0aGlzLnpvb20gKyBcIilcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5Ob2RlOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLkNhbGNYKHRoaXMucG9zX3ggLSBlX3Bvc194KTtcbiAgICAgICAgICBsZXQgeSA9IHRoaXMuQ2FsY1kodGhpcy5wb3NfeSAtIGVfcG9zX3kpO1xuICAgICAgICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgICAgICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgICAgICAgIHRoaXMubm9kZVNlbGVjdGVkPy51cGRhdGVQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5MaW5lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHRoaXMudGVtcExpbmUpIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5DYWxjWCh0aGlzLmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICAgICAgICAgIGxldCB5ID0gdGhpcy5DYWxjWSh0aGlzLmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnkgLSBlX3Bvc195KTtcbiAgICAgICAgICAgIHRoaXMudGVtcExpbmUudXBkYXRlVG8odGhpcy5lbENhbnZhcy5vZmZzZXRMZWZ0IC0geCwgdGhpcy5lbENhbnZhcy5vZmZzZXRUb3AgLSB5KTtcbiAgICAgICAgICAgIHRoaXMudGVtcExpbmUudG9Ob2RlID0gdGhpcy5ub2RlT3ZlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZS50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICB0aGlzLm1vdXNlX3ggPSBlX3Bvc194O1xuICAgICAgdGhpcy5tb3VzZV95ID0gZV9wb3NfeTtcbiAgICB9XG4gIH1cbiAgcHVibGljIEVuZE1vdmUoZTogYW55KSB7XG4gICAgLy9maXggRmFzdCBDbGlja1xuICAgIGlmICgoKHRoaXMucGFyZW50LmdldFRpbWUoKSAtIHRoaXMudGltZUZhc3RDbGljaykgPCAzMDApIHx8ICF0aGlzLmZsZ0RyYXAgJiYgIXRoaXMuZmxnTW92ZSkge1xuICAgICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vbmU7XG4gICAgICB0aGlzLmZsZ0RyYXAgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmxnTW92ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuVW5TZWxlY3QoKTtcbiAgICBpZiAodGhpcy50ZW1wTGluZSAmJiB0aGlzLm1vdmVUeXBlID09IE1vdmVUeXBlLkxpbmUpIHtcbiAgICAgIGlmICh0aGlzLnRlbXBMaW5lLnRvTm9kZSkge1xuICAgICAgICB0aGlzLkFkZExpbmUodGhpcy50ZW1wTGluZS5mcm9tTm9kZSwgdGhpcy50ZW1wTGluZS50b05vZGUsIHRoaXMudGVtcExpbmUub3V0cHV0SW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy50ZW1wTGluZS5kZWxldGUoKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBudWxsO1xuICAgIH1cbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hlbmRcIikge1xuICAgICAgZV9wb3NfeCA9IHRoaXMubW91c2VfeDtcbiAgICAgIGVfcG9zX3kgPSB0aGlzLm1vdXNlX3k7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVfcG9zX3ggPSBlLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZS5jbGllbnRZO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc194ID0gdGhpcy5jYW52YXNfeCArIHRoaXMuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpO1xuICAgICAgdGhpcy5jYW52YXNfeSA9IHRoaXMuY2FudmFzX3kgKyB0aGlzLkNhbGNZKC0odGhpcy5wb3NfeSAtIGVfcG9zX3kpKTtcbiAgICB9XG4gICAgdGhpcy5wb3NfeCA9IGVfcG9zX3g7XG4gICAgdGhpcy5wb3NfeSA9IGVfcG9zX3k7XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vbmU7XG4gICAgdGhpcy5mbGdEcmFwID0gZmFsc2U7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHVibGljIGNvbnRleHRtZW51KGU6IGFueSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29udHJvbEZsb3cgfSBmcm9tIFwiLi9jb21wb25lbnRzL0NvbnRyb2xGbG93XCI7XG5pbXBvcnQgeyBWaWV3RmxvdyB9IGZyb20gXCIuL2NvbXBvbmVudHMvVmlld0Zsb3dcIjtcblxuZXhwb3J0IGNsYXNzIFdvcmtlckZsb3cge1xuXG4gIHB1YmxpYyBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgcHVibGljIFZpZXc6IFZpZXdGbG93IHwgbnVsbDtcbiAgcHVibGljIENvbnRyb2w6IENvbnRyb2xGbG93IHwgbnVsbDtcbiAgcHVibGljIGRhdGFOb2RlU2VsZWN0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xuICBwdWJsaWMgb3B0aW9uOiBhbnk7XG5cbiAgcHVibGljIGNoZWNrUGFyZW50KG5vZGU6IGFueSwgbm9kZUNoZWNrOiBhbnkpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlQ2hlY2spIHtcbiAgICAgIGlmIChub2RlID09IG5vZGVDaGVjaykgcmV0dXJuIHRydWU7XG4gICAgICBsZXQgcGFyZW50OiBhbnkgPSBub2RlO1xuICAgICAgd2hpbGUgKChwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudCkgIT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZUNoZWNrID09IHBhcmVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgb3B0aW9uOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcIndvcmtlcmZsb3dcIik7XG4gICAgdGhpcy5vcHRpb24gPSBvcHRpb24gfHwge1xuICAgICAgY29udHJvbDoge1xuICAgICAgICBOb2RlMToge1xuICAgICAgICAgIG5hbWU6ICc8aSBjbGFzcz1cImZhYiBmYS1hd3NcIj48L2k+PHNwYW4+IEFXUzwvc3Bhbj4nLFxuICAgICAgICAgIGh0bWw6IFwiPGRpdj5YaW4gY2jDoG8gMTwvZGl2PlwiLFxuICAgICAgICAgIG91dHB1dDogMFxuICAgICAgICB9LFxuICAgICAgICBOb2RlMjoge1xuICAgICAgICAgIG5hbWU6IFwiTm9kZTJcIixcbiAgICAgICAgICBodG1sOiBcIjxkaXY+WGluIGNow6BvIDI8L2Rpdj5cIixcbiAgICAgICAgICBvdXRwdXQ6IDFcbiAgICAgICAgfSxcbiAgICAgICAgTm9kZTM6IHtcbiAgICAgICAgICBuYW1lOiBcIk5vZGUzXCIsXG4gICAgICAgICAgaHRtbDogXCI8ZGl2PlhpbiBjaMOgbyAzPC9kaXY+XCIsXG5cbiAgICAgICAgICBvdXRwdXQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAgTm9kZTQ6IHtcbiAgICAgICAgICBuYW1lOiBcIk5vZGU0XCIsXG4gICAgICAgICAgaHRtbDogXCI8ZGl2PlhpbiBjaMOgbyA0PC9kaXY+XCIsXG4gICAgICAgICAgb3V0cHV0OiAxMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgPGRpdiBjbGFzcz1cIndvcmtlcmZsb3ctY29udHJvbFwiPlxuICAgICAgPGgyIGNsYXNzPVwid29ya2VyZmxvdy1jb250cm9sX19oZWFkZXJcIj5Ob2RlIENvbnRyb2w8L2gyPlxuICAgICAgPGRpdiBjbGFzcz1cIndvcmtlcmZsb3ctY29udHJvbF9fbGlzdFwiPlxuICAgICAgPGRpdiBkcmFnZ2FibGU9XCJ0cnVlXCI+Tm9kZSAxPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwid29ya2VyZmxvdy1kZXNnaW5cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ3b3JrZXJmbG93LWl0ZW1zXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3b3JrZXJmbG93LWl0ZW1cIj5UaMO0bmcgdGluIG3hu5tpPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3b3JrZXJmbG93LWl0ZW1cIj5UaMO0bmcgdGluIG3hu5tpMTIzPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ3b3JrZXJmbG93LXZpZXdcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGA7XG4gICAgdGhpcy5WaWV3ID0gbmV3IFZpZXdGbG93KHRoaXMpO1xuICAgIHRoaXMuQ29udHJvbCA9IG5ldyBDb250cm9sRmxvdyh0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0VGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gIH1cbiAgcHVibGljIGdldFV1aWQoKTogc3RyaW5nIHtcbiAgICAvLyBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dFxuICAgIGxldCBzOiBhbnkgPSBbXTtcbiAgICBsZXQgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XG4gICAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XG4gICAgfVxuICAgIHNbMTRdID0gXCI0XCI7ICAvLyBiaXRzIDEyLTE1IG9mIHRoZSB0aW1lX2hpX2FuZF92ZXJzaW9uIGZpZWxkIHRvIDAwMTBcbiAgICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHNbMTldICYgMHgzKSB8IDB4OCwgMSk7ICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxuICAgIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcblxuICAgIGxldCB1dWlkID0gcy5qb2luKFwiXCIpO1xuICAgIHJldHVybiB1dWlkO1xuICB9XG4gIC8qIEV2ZW50cyAqL1xuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgY2FsbGJhY2t9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoZSBldmVudCBpcyBub3QgYSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGV2ZW50IG5hbWUgbXVzdCBiZSBhIHN0cmluZywgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgZXZlbnR9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0ge1xuICAgICAgICBsaXN0ZW5lcnM6IFtdXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5saXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXG5cbiAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50XSkgcmV0dXJuIGZhbHNlXG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzXG4gICAgY29uc3QgbGlzdGVuZXJJbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKVxuICAgIGNvbnN0IGhhc0xpc3RlbmVyID0gbGlzdGVuZXJJbmRleCA+IC0xXG4gICAgaWYgKGhhc0xpc3RlbmVyKSBsaXN0ZW5lcnMuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpXG4gIH1cblxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXG4gICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBjb25zb2xlLmVycm9yKGBUaGlzIGV2ZW50OiAke2V2ZW50fSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IHtcbiAgICAgIGxpc3RlbmVyKGRldGFpbHMsIHNlbGYpO1xuICAgIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiQ29udHJvbEZsb3ciLCJlbENvbnRyb2wiLCJwYXJlbnQiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJjb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiT2JqZWN0Iiwia2V5cyIsIm9wdGlvbiIsImNvbnRyb2wiLCJmb3JFYWNoIiwia2V5IiwiTm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsIm5hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZHJhZ1N0YXJ0IiwiYmluZCIsImRyYWdlbmQiLCJhcHBlbmRDaGlsZCIsImUiLCJkYXRhTm9kZVNlbGVjdCIsInR5cGUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsIkxpbmVGbG93IiwiZnJvbU5vZGUiLCJ0b05vZGUiLCJvdXRwdXRJbmRleCIsImVsQ29ubmVjdGlvbiIsImVsUGF0aCIsImN1cnZhdHVyZSIsImNyZWF0ZUVsZW1lbnROUyIsIlN0YXJ0U2VsZWN0ZWQiLCJzZXRBdHRyaWJ1dGVOUyIsImVsQ2FudmFzIiwiQWRkTGluZSIsInVwZGF0ZSIsIlNlbGVjdExpbmUiLCJjcmVhdGVDdXJ2YXR1cmUiLCJzdGFydF9wb3NfeCIsInN0YXJ0X3Bvc195IiwiZW5kX3Bvc194IiwiZW5kX3Bvc195IiwiY3VydmF0dXJlX3ZhbHVlIiwibGluZV94IiwibGluZV95IiwieCIsInkiLCJoeDEiLCJNYXRoIiwiYWJzIiwiaHgyIiwiZGVsZXRlIiwibm9kZVRoaXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUmVtb3ZlTGluZSIsInJlbW92ZSIsInVwZGF0ZVRvIiwidG9feCIsInRvX3kiLCJmcm9tX3giLCJwb3NfeCIsImVsTm9kZSIsImNsaWVudFdpZHRoIiwiZnJvbV95IiwicG9zX3kiLCJjbGllbnRIZWlnaHQiLCJsaW5lQ3VydmUiLCJOb2RlRmxvdyIsImVsTm9kZUlucHV0cyIsImVsTm9kZU91dHB1dHMiLCJlbE5vZGVDb250ZW50Iiwibm9kZUlkIiwiYXJyTGluZSIsIml0ZW0iLCJOb2RlT3ZlciIsIk5vZGVMZWF2ZSIsIlJlbW92ZU5vZGUiLCJsaW5lIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiaWQiLCJodG1sIiwib3V0cHV0IiwidG9TdHJpbmciLCJub2RlT3ZlciIsIlNlbGVjdE5vZGUiLCJ1cGRhdGVQb3NpdGlvbiIsImlDaGVjayIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJNb3ZlVHlwZSIsIlZpZXdGbG93IiwiZWxWaWV3Iiwibm9kZXMiLCJmbGdEcmFwIiwiZmxnTW92ZSIsIm1vdmVUeXBlIiwiTm9uZSIsInpvb20iLCJ6b29tX21heCIsInpvb21fbWluIiwiem9vbV92YWx1ZSIsInpvb21fbGFzdF92YWx1ZSIsImNhbnZhc194IiwiY2FudmFzX3kiLCJtb3VzZV94IiwibW91c2VfeSIsImxpbmVTZWxlY3RlZCIsIm5vZGVTZWxlY3RlZCIsImRvdFNlbGVjdGVkIiwidGVtcExpbmUiLCJ0aW1lRmFzdENsaWNrIiwidGFiSW5kZXgiLCJhZGRFdmVudCIsInVwZGF0ZVZpZXciLCJkcm9wRW5kIiwiZXYiLCJrZXlOb2RlIiwicHJldmVudERlZmF1bHQiLCJnZXREYXRhIiwibm9kZSIsIkFkZE5vZGUiLCJlX3Bvc194IiwiZV9wb3NfeSIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsIkNhbGNYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiQ2FsY1kiLCJzdHlsZSIsInRyYW5zZm9ybSIsIm51bWJlciIsImRyYWdvdmVyIiwiVW5TZWxlY3RMaW5lIiwiVW5TZWxlY3REb3QiLCJVblNlbGVjdE5vZGUiLCJVblNlbGVjdCIsIlNlbGVjdERvdCIsIk5vZGVJZCIsImdldFV1aWQiLCJFbmRNb3ZlIiwiTW92ZSIsIlN0YXJ0TW92ZSIsImNvbnRleHRtZW51Iiwiem9vbV9lbnRlciIsImtleWRvd24iLCJtZXRhS2V5IiwiZXZlbnQiLCJjdHJsS2V5IiwiZGVsdGFZIiwiem9vbV9vdXQiLCJ6b29tX2luIiwiem9vbV9yZWZyZXNoIiwiem9vbV9yZXNldCIsImdldFRpbWUiLCJjaGVja1BhcmVudCIsImNvbnRhaW5zIiwiTGluZSIsIkNhbnZhcyIsIlZpZXciLCJDb250cm9sIiwiZXZlbnRzIiwibm9kZUNoZWNrIiwicGFyZW50RWxlbWVudCIsIk5vZGUxIiwiTm9kZTIiLCJOb2RlMyIsIk5vZGU0IiwiRGF0ZSIsInMiLCJoZXhEaWdpdHMiLCJpIiwic3Vic3RyIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwib24iLCJjYWxsYmFjayIsImNvbnNvbGUiLCJlcnJvciIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsInB1c2giLCJyZW1vdmVMaXN0ZW5lciIsImxpc3RlbmVySW5kZXgiLCJkaXNwYXRjaCIsImRldGFpbHMiLCJzZWxmIiwibGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs2Q0FFYUEsRUFDSEMsVUFDQUMsT0FDUkMsWUFBbUJELEdBR2pCLEdBRkFFLEtBQUtGLE9BQVNBLEVBQ2RFLEtBQUtILFVBQVlDLEVBQU9HLFdBQVdDLGNBQWMsNkJBQzdDRixLQUFLSCxVQUFXLENBQ2xCRyxLQUFLSCxVQUFVTSxVQUFZLEdBQ2hCQyxPQUFPQyxLQUFLUCxFQUFPUSxPQUFPQyxTQUNoQ0MsU0FBUUMsSUFDWCxJQUFJQyxFQUFPQyxTQUFTQyxjQUFjLE9BQ2xDRixFQUFLRyxhQUFhLFlBQWEsUUFDL0JILEVBQUtHLGFBQWEsWUFBYUosR0FDL0JDLEVBQUtJLFVBQVVDLElBQUksNEJBQ25CTCxFQUFLUCxVQUFZTCxFQUFPUSxPQUFPQyxRQUFRRSxHQUFLTyxLQUM1Q04sRUFBS08saUJBQWlCLFlBQWFqQixLQUFLa0IsVUFBVUMsS0FBS25CLE9BQ3ZEVSxFQUFLTyxpQkFBaUIsVUFBV2pCLEtBQUtvQixRQUFRRCxLQUFLbkIsT0FDbkRBLEtBQUtILFdBQVd3QixZQUFZWCxPQUkzQlUsUUFBUUUsR0FDYnRCLEtBQUtGLE9BQU95QixlQUFpQixLQUd4QkwsVUFBVUksR0FDQSxlQUFYQSxFQUFFRSxLQUNKeEIsS0FBS0YsT0FBT3lCLGVBQWlCRCxFQUFFRyxPQUFPQyxRQUFRLDZCQUE2QkMsYUFBYSxjQUV4RjNCLEtBQUtGLE9BQU95QixlQUFpQkQsRUFBRUcsT0FBT0UsYUFBYSxhQUNuREwsRUFBRU0sYUFBYUMsUUFB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
