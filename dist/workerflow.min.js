/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{elControl;parent;constructor(e){if(this.parent=e,this.elControl=e.container?.querySelector(".workerflow-control__list"),this.elControl){this.elControl.innerHTML="",Object.keys(e.option.control).forEach((t=>{let i=document.createElement("div");i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.classList.add("workerflow-control__item"),i.innerHTML=e.option.control[t].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elControl?.appendChild(i)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class t{parent;fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t,i=null,s=0){this.parent=e,this.fromNode=t,this.toNode=i,this.outputIndex=s,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.parent.SelectLine(this)}createCurvature(e,t,i,s,o,n){let h=e,l=t,d=i,a=s,r=o;switch(n){case"open":if(e>=i)var c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*(-1*r);else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+l+" C "+c+" "+l+" "+u+" "+a+" "+d+"  "+a;case"close":if(e>=i)c=h+Math.abs(d-h)*(-1*r),u=d-Math.abs(d-h)*r;else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+l+" C "+c+" "+l+" "+u+" "+a+" "+d+"  "+a;case"other":if(e>=i)c=h+Math.abs(d-h)*(-1*r),u=d-Math.abs(d-h)*(-1*r);else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+l+" C "+c+" "+l+" "+u+" "+a+" "+d+"  "+a;default:return" M "+h+" "+l+" C "+(c=h+Math.abs(d-h)*r)+" "+l+" "+(u=d-Math.abs(d-h)*r)+" "+a+" "+d+"  "+a}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){let i=this.fromNode.pos_x+this.fromNode.elNode.clientWidth+5,s=this.fromNode.pos_y+(this.fromNode.output()>1?21*(this.outputIndex-1)+15:2+this.fromNode.elNode.clientHeight/2);var o=this.createCurvature(i,s,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode){let e=this.toNode.pos_x-5,t=this.toNode.pos_y+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}const i=eval;class s{parent;elNode;elNodeInputs;elNodeOutputs;elNodeContent;nodeId;pos_x=0;pos_y=0;arrLine=[];option;data={};output(){return this.option?.output??0}delete(){this.arrLine.forEach((e=>e.delete(this))),this.elNode.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.remove(),this.arrLine=[],this.parent.RemoveNode(this)}AddLine(e){this.arrLine=[...this.arrLine,e]}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}constructor(e,t,i=null){if(this.option=i,this.parent=e,this.nodeId=t,this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${t}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML="",this.elNode.setAttribute("data-node",t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.option&&(this.elNodeContent.innerHTML=this.option.html,this.elNodeOutputs.innerHTML="",this.option.output))for(let e=1;e<=this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",e.toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs.appendChild(t)}this.parent.elCanvas?.appendChild(this.elNode),setTimeout((()=>{this.RunScript(this,this.elNode)}),100)}RunScript(e,t){this.option&&this.option.script&&i("(node,el)=>{"+this.option.script.toString()+"}")(e,t)}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this)}updatePosition(e,t,i=!1){this.elNode&&(i?(this.pos_x=e,this.pos_y=t):(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})))}}var o;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(o||(o={}));class n{elView;elCanvas;parent;nodes=[];flgDrap=!1;flgMove=!1;moveType=o.None;zoom=1;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;canvas_x=0;canvas_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;constructor(e){this.parent=e,this.elView=this.parent.container?.querySelector(".workerflow-desgin .workerflow-view")||document.createElement("div"),this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elView.appendChild(this.elCanvas),this.elView.tabIndex=0,this.addEvent(),this.updateView()}dropEnd(e){let t="";if("touchend"===e.type?t=this.parent.dataNodeSelect:(e.preventDefault(),t=e.dataTransfer.getData("node")),!t)return;let i=this.AddNode(this.parent.option.control[t]),s=0,o=0;"touchmove"===e.type?(s=e.touches[0].clientX,o=e.touches[0].clientY):(s=e.clientX,o=e.clientY);let n=this.CalcX(this.elCanvas.getBoundingClientRect().x-s),h=this.CalcY(this.elCanvas.getBoundingClientRect().y-o);i.updatePosition(n,h)}updateView(){this.elCanvas.style.transform="translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")"}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elView.clientWidth*this.zoom))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elView.clientHeight*this.zoom))}dragover(e){e.preventDefault()}UnSelectLine(){this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null)}UnSelectDot(){this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null)}UnSelectNode(){this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active")}SelectNode(e){this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}SelectDot(e){this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=e?e.id:this.parent.getUuid(),i=new s(this,t??this.parent.getUuid(),e);return this.nodes=[...this.nodes,i],i}AddLine(e,i,s=0){if(e!=i&&!(e.arrLine.filter((e=>e.toNode===i&&e.outputIndex==s&&e!=this.tempLine)).length>0))return new t(this,e,i,s)}addEvent(){this.elView.addEventListener("mouseup",this.EndMove.bind(this)),this.elView.addEventListener("mouseleave",this.EndMove.bind(this)),this.elView.addEventListener("mousemove",this.Move.bind(this)),this.elView.addEventListener("mousedown",this.StartMove.bind(this)),this.elView.addEventListener("touchend",this.EndMove.bind(this)),this.elView.addEventListener("touchmove",this.Move.bind(this)),this.elView.addEventListener("touchstart",this.StartMove.bind(this)),this.elView.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elView.addEventListener("drop",this.dropEnd.bind(this)),this.elView.addEventListener("dragover",this.dragover.bind(this)),this.elView.addEventListener("wheel",this.zoom_enter.bind(this)),this.elView.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.canvas_x=this.canvas_x/this.zoom_last_value*this.zoom,this.canvas_y=this.canvas_y/this.zoom_last_value*this.zoom,this.zoom_last_value=this.zoom,this.updateView()}zoom_in(){this.zoom<this.zoom_max&&(this.zoom+=this.zoom_value,this.zoom_refresh())}zoom_out(){this.zoom>this.zoom_min&&(this.zoom-=this.zoom_value,this.zoom_refresh())}zoom_reset(){1!=this.zoom&&(this.zoom=1,this.zoom_refresh())}StartMove(e){if(this.timeFastClick=this.parent.getTime(),this.moveType==o.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=o.Line,this.tempLine=new t(this,this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=o.Node;else this.moveType=o.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,i=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.moveType){case o.Canvas:{let e=this.canvas_x+this.CalcX(-(this.pos_x-t)),s=this.canvas_y+this.CalcY(-(this.pos_y-i));this.elCanvas.style.transform="translate("+e+"px, "+s+"px) scale("+this.zoom+")";break}case o.Node:{let e=this.CalcX(this.pos_x-t),s=this.CalcY(this.pos_y-i);this.pos_x=t,this.pos_y=i,this.nodeSelected?.updatePosition(e,s);break}case o.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),s=this.CalcY(this.elCanvas.getBoundingClientRect().y-i);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-s),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){if(this.parent.getTime()-this.timeFastClick<300||!this.flgDrap&&!this.flgMove)return this.moveType=o.None,this.flgDrap=!1,void(this.flgMove=!1);this.UnSelect(),this.tempLine&&this.moveType==o.Line&&(this.tempLine.toNode&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,i=0;"touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.moveType===o.Canvas&&(this.canvas_x=this.canvas_x+this.CalcX(-(this.pos_x-t)),this.canvas_y=this.canvas_y+this.CalcY(-(this.pos_y-i))),this.pos_x=t,this.pos_y=i,this.moveType=o.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class{container;View;Control;dataNodeSelect=null;events={};option;checkParent(e,t){if(e&&t){if(e==t)return!0;let i=e;for(;null!=(i=i.parentElement);)if(t==i)return!0}return!1}constructor(t,i=null){this.container=t,this.container.classList.add("workerflow"),this.option=i||{control:{}},this.container.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      <div draggable="true">Node 1</div>\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n        <div class="workerflow-item">Thông tin mới</div>\n        <div class="workerflow-item">Thông tin mới123</div>\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    ',this.View=new n(this),this.Control=new e(this)}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){let i=this;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,i)}))}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
