/**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */
var workerflow=function(){"use strict";class e{elControl;parent;constructor(e){if(this.parent=e,this.elControl=e.container?.querySelector(".workerflow-control__list"),this.elControl){this.elControl.innerHTML="",Object.keys(e.option.control).forEach((t=>{let i=document.createElement("div");i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.classList.add("workerflow-control__item"),i.innerHTML=e.option.control[t].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elControl?.appendChild(i)}))}}dragend(e){this.parent.dataNodeSelect=null}dragStart(e){"touchstart"===e.type?this.parent.dataNodeSelect=e.target.closest(".workerflow-control__item").getAttribute("data-node"):(this.parent.dataNodeSelect=e.target.getAttribute("data-node"),e.dataTransfer.setData("node",e.target.getAttribute("data-node")))}}class t{parent;events={};constructor(e){this.parent=e}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){let i=this.parent;if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t,i)}))}}class i{parent;modules;elTab;constructor(e,t={}){this.parent=e,this.modules=t,this.modules||(this.modules={}),this.elTab=e.container?.querySelector(".workerflow-items"),this.elTab&&(this.elTab.innerHTML=""),this.elTab?.addEventListener("mousedown",this.ClickTab.bind(this))}ClickTab(e){if(e.target.classList.contains("workerflow-item")){let t=e.target.getAttribute("data-project");this.LoadProjectById(t)}}LoadProjectById(e){this.elTab?.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elTab?.querySelector(`[data-project="${e}"]`)?.classList.add("active"),this.parent.View?.load(this.modules[e])}NewProject(){let e={id:this.parent.getUuid(),name:`project-${this.parent.getTime()}`,x:0,y:0,zoom:1,nodes:[]};this.LoadProject(e)}LoadProject(e){if(this.elTab?.querySelectorAll(".active").forEach((e=>{this.modules[e.getAttribute("data-project")?.toString()||""]=this.parent.View?.toJson(),e.classList.remove("active")})),this.elTab?.querySelector(`[data-project="${e.id}"]`))this.elTab?.querySelector(`[data-project="${e.id}"]`)?.classList.add("active");else{let t=document.createElement("div");t.classList.add("workerflow-item"),t.classList.add("active"),t.innerHTML=e.name,t.setAttribute("data-project",e.id),this.elTab?.appendChild(t)}this.modules[e.id]=e,this.parent.View?.load(this.modules[e.id])}}class s{parent;fromNode;toNode;outputIndex;elConnection;elPath;curvature=.5;constructor(e,t,i=null,s=0){this.parent=e,this.fromNode=t,this.toNode=i,this.outputIndex=s,this.elConnection=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.elPath=document.createElementNS("http://www.w3.org/2000/svg","path"),this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elConnection.classList.add("connection"),this.elConnection.appendChild(this.elPath),this.parent.elCanvas?.appendChild(this.elConnection),this.fromNode.AddLine(this),this.toNode?.AddLine(this),this.update()}StartSelected(e){this.parent.SelectLine(this)}createCurvature(e,t,i,s,o,n){let h=e,a=t,d=i,l=s,r=o;switch(n){case"open":if(e>=i)var c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*(-1*r);else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+a+" C "+c+" "+a+" "+u+" "+l+" "+d+"  "+l;case"close":if(e>=i)c=h+Math.abs(d-h)*(-1*r),u=d-Math.abs(d-h)*r;else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+a+" C "+c+" "+a+" "+u+" "+l+" "+d+"  "+l;case"other":if(e>=i)c=h+Math.abs(d-h)*(-1*r),u=d-Math.abs(d-h)*(-1*r);else c=h+Math.abs(d-h)*r,u=d-Math.abs(d-h)*r;return" M "+h+" "+a+" C "+c+" "+a+" "+u+" "+l+" "+d+"  "+l;default:return" M "+h+" "+a+" C "+(c=h+Math.abs(d-h)*r)+" "+a+" "+(u=d-Math.abs(d-h)*r)+" "+l+" "+d+"  "+l}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.fromNode!=e&&this.fromNode.RemoveLine(this),this.toNode!=e&&this.toNode?.RemoveLine(this),this.elConnection?.remove(),this.elConnection=null}updateTo(e,t){if(null==this.fromNode.elNode)return;let i=this.fromNode.pos_x+this.fromNode.elNode.clientWidth+5,s=this.fromNode.pos_y+(this.fromNode.output()>1?21*(this.outputIndex-1)+15:2+this.fromNode.elNode.clientHeight/2);var o=this.createCurvature(i,s,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",o)}update(){if(this.toNode&&this.toNode.elNode){let e=this.toNode.pos_x-5,t=this.toNode.pos_y+this.toNode.elNode.clientHeight/2;this.updateTo(e,t)}}}class o{node;data={};constructor(e){this.node=e,setTimeout((()=>{this.node.elNode?.querySelectorAll("[node\\:model]").forEach((e=>{e.addEventListener("keyup",this.changeInput.bind(this))}))}),300)}RemoveEvent(){this.node.elNode?.querySelectorAll("[node\\:model]").forEach((e=>{e.removeEventListener("keyup",this.changeInput.bind(this))}))}Set(e,t,i=null){this.data[e]=t,setTimeout((()=>{this.node.elNode?.querySelectorAll(`[node\\:model="${e}"]`).forEach((e=>{e!=i&&(e.value=t)}),300),this.node.dispatch(this.node.Event.dataChange,{key:e,value:t,obj:i}),this.node.dispatch(this.node.Event.change,{key:e,value:t,obj:i})}))}Get(e){return this.data[e]}changeInput(e){this.Set(e.target.getAttribute("node:model"),e.target.value,e.target)}load(e){this.data=e||{},setTimeout((()=>{this.node.elNode?.querySelectorAll("[node\\:model]").forEach((e=>{e.value=this.data[e.getAttribute("node:model")]??null}),300)}))}toJson(){return this.data}}const n=eval;class h{parent;elNode=null;elNodeInputs=null;elNodeOutputs=null;elNodeContent=null;nodeId;pos_x=0;pos_y=0;arrLine=[];option;data=null;flgScript=!1;Event={ReUI:"ReUI",change:"change",updatePosition:"updatePosition",selected:"Selected",dataChange:"dataChange"};events;on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}toJson(){let e=this.arrLine.filter((e=>e.fromNode===this)).map((e=>({fromNode:e.fromNode.nodeId,toNode:e.toNode?.nodeId,ouputIndex:e.outputIndex})));return{id:this.nodeId,node:this.option.key,line:e,data:this.data?.toJson(),x:this.pos_x,y:this.pos_y}}load(e){return this.nodeId=e?.id??this.nodeId,this.option=this.parent.getOption(e?.node),this.data?.load(e?.data),this.updatePosition(e?.x,e?.y,!0),this.initOption(),this}output(){return this.option?.output??0}delete(e=!0){this.arrLine.forEach((e=>e.delete(this))),this.elNode?.removeEventListener("mouseover",this.NodeOver.bind(this)),this.elNode?.removeEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elNode?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.elNode?.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(this.Event.change,{})}AddLine(e){this.arrLine=[...this.arrLine,e],this.dispatch(this.Event.change,{})}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.dispatch(this.Event.change,{}),this.arrLine}constructor(e,i,s=null){this.events=new t(this),this.option=s,this.parent=e,this.nodeId=i,this.on(this.Event.change,((e,t)=>{this.parent.dispatch(this.parent.Event.change,{...e,targetNode:t})})),this.ReUI()}ReUIT(){let e=this;setTimeout((()=>{e.ReUI()}))}ReUI(){if(this.elNode&&this.elNode.remove(),this.data&&this.data.RemoveEvent(),this.elNode=document.createElement("div"),this.elNode.classList.add("workerflow-node"),this.elNode.id=`node-${this.nodeId}`,this.elNodeInputs=document.createElement("div"),this.elNodeInputs.classList.add("workerflow-node_inputs"),this.elNodeInputs.innerHTML='<div class="inputs dot"></div>',this.elNodeContent=document.createElement("div"),this.elNodeContent.classList.add("workerflow-node_content"),this.elNodeOutputs=document.createElement("div"),this.elNodeOutputs.classList.add("workerflow-node_outputs"),this.elNodeOutputs.innerHTML='<div class="outputs dot"></div>',this.elNode.setAttribute("data-node",this.nodeId),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.elNode.addEventListener("mouseover",this.NodeOver.bind(this)),this.elNode.addEventListener("mouseleave",this.NodeLeave.bind(this)),this.elNode.addEventListener("mousedown",this.StartSelected.bind(this)),this.elNode.addEventListener("touchstart",this.StartSelected.bind(this)),this.elNode.appendChild(this.elNodeInputs),this.elNode.appendChild(this.elNodeContent),this.elNode.appendChild(this.elNodeOutputs),this.parent.elCanvas?.appendChild(this.elNode),this.data){let e=this.data.toJson();this.data=new o(this),this.data.load(e)}else this.data=new o(this);this.initOption(),this.dispatch(this.Event.ReUI,{})}checkInput(){return!(0===this.option?.input)}initOption(){if(this.elNodeContent&&this.option&&this.elNodeOutputs){if(this.elNodeContent.innerHTML=this.option.html,void 0!==this.option.output){this.elNodeOutputs.innerHTML="";for(let e=1;e<=this.option.output;e++){let t=document.createElement("div");t.setAttribute("node",e.toString()),t.classList.add("dot"),t.classList.add("output_"+e),this.elNodeOutputs?.appendChild(t)}}0===this.option.input&&this.elNodeInputs&&(this.elNodeInputs.innerHTML="")}let e=this;setTimeout((()=>{e.RunScript(e,e.elNode)}),100)}RunScript(e,t){this.option&&this.option.script&&!this.flgScript&&(this.flgScript=!0,n("(node,el)=>{"+this.option.script.toString()+"}")(e,t))}checkKey(e){return this.option&&this.option.key==e}NodeOver(e){this.parent.nodeOver=this}NodeLeave(e){this.parent.nodeOver=null}StartSelected(e){this.parent.SelectNode(this),this.dispatch(this.Event.selected,{})}updatePosition(e,t,i=!1){this.elNode&&(i?(this.pos_x=e,this.pos_y=t):(this.pos_x=this.elNode.offsetLeft-e,this.pos_y=this.elNode.offsetTop-t),this.elNode.setAttribute("style",`top: ${this.pos_y}px; left: ${this.pos_x}px;`),this.arrLine.forEach((e=>{e.update()})),this.dispatch(this.Event.updatePosition,{x:this.pos_x,y:this.pos_y}),this.dispatch(this.Event.change,{}))}}var a;!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(a||(a={}));class d{elView;elCanvas;parent;nodes=[];flgDrap=!1;flgMove=!1;moveType=a.None;zoom=1;zoom_max=1.6;zoom_min=.5;zoom_value=.1;zoom_last_value=1;canvas_x=0;canvas_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;lineSelected=null;nodeSelected=null;nodeOver=null;dotSelected=null;tempLine=null;timeFastClick=0;projectId="";projectName="";tagIngore=["input","button","a","textarea"];Event={change:"change",selected:"Selected",updateView:"updateView"};events;on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e){this.parent=e,this.events=new t(this),this.elView=this.parent.container?.querySelector(".workerflow-desgin .workerflow-view")||document.createElement("div"),this.elCanvas=document.createElement("div"),this.elCanvas.classList.add("workerflow-canvas"),this.elView.appendChild(this.elCanvas),this.elView.tabIndex=0,this.addEvent(),this.Reset(),this.updateView()}getOption(e){if(!e)return;let t=this.parent.option.control[e];return t||(t=Object.values(this.parent.option.control)[0]),t.key=e,t}dropEnd(e){let t="";"touchend"===e.type?t=this.parent.dataNodeSelect:(e.preventDefault(),t=e.dataTransfer.getData("node"));let i=this.getOption(t);if(i&&i.onlyNode&&this.nodes.filter((e=>e.checkKey(t))).length>0)return;let s=this.AddNode(i),o=0,n=0;"touchmove"===e.type?(o=e.touches[0].clientX,n=e.touches[0].clientY):(o=e.clientX,n=e.clientY);let h=this.CalcX(this.elCanvas.getBoundingClientRect().x-o),a=this.CalcY(this.elCanvas.getBoundingClientRect().y-n);s.updatePosition(h,a)}toJson(){let e=this.nodes.map((e=>e.toJson()));return{id:this.projectId,name:this.projectName,x:this.canvas_x,y:this.canvas_y,zoom:this.zoom,nodes:e}}load(e){this.Reset(),this.projectId=e?.id??this.parent.getUuid(),this.projectName=e?.name??`project-${this.parent.getTime()}`,this.canvas_x=e?.x??0,this.canvas_y=e?.y??0,this.zoom=e?.zoom??1,this.nodes=(e?.nodes??[]).map((e=>new h(this,"").load(e))),(e?.nodes??[]).forEach((e=>{(e.line??[]).forEach((e=>{let t=this.getNodeById(e.fromNode),i=this.getNodeById(e.toNode),s=e.ouputIndex??0;t&&i&&this.AddLine(t,i,s)}))})),this.updateView()}Reset(){this.nodes.forEach((e=>e.delete(!1))),this.nodes=[],this.projectId=this.parent.getUuid(),this.projectName=`project-${this.parent.getTime()}`,this.canvas_x=0,this.canvas_y=0,this.zoom=1,this.updateView()}getNodeById(e){return this.nodes?.filter((t=>t.nodeId==e))[0]}updateView(){this.elCanvas.style.transform="translate("+this.canvas_x+"px, "+this.canvas_y+"px) scale("+this.zoom+")",this.dispatch(this.Event.updateView,{x:this.canvas_x,y:this.canvas_y,zoom:this.zoom})}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elView.clientWidth*this.zoom))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elView.clientHeight*this.zoom))}dragover(e){e.preventDefault()}UnSelectLine(){this.lineSelected&&(this.lineSelected.elPath?.classList.remove("active"),this.lineSelected=null)}UnSelectDot(){this.dotSelected&&(this.dotSelected.elNode?.classList.remove("active"),this.dotSelected=null)}UnSelectNode(){this.nodeSelected&&(this.nodeSelected.elNode?.classList.remove("active"),this.nodeSelected=null)}UnSelect(){this.UnSelectLine(),this.UnSelectNode(),this.UnSelectDot()}SelectLine(e){this.UnSelect(),this.lineSelected=e,this.lineSelected.elPath.classList.add("active")}SelectNode(e){this.UnSelect(),this.nodeSelected=e,this.nodeSelected.elNode?.classList.add("active")}SelectDot(e){this.UnSelect(),this.dotSelected=e,this.dotSelected.elNode?.classList.add("active")}RemoveNode(e){var t=this.nodes.indexOf(e);return t>-1&&this.nodes.splice(t,1),this.nodes}AddNode(e=null){let t=e?e.id:this.parent.getUuid(),i=new h(this,t??this.parent.getUuid(),e);return this.nodes=[...this.nodes,i],i}AddLine(e,t,i=0){if(e!=t&&!(e.arrLine.filter((e=>e.toNode===t&&e.outputIndex==i&&e!=this.tempLine)).length>0))return new s(this,e,t,i)}addEvent(){this.elView.addEventListener("mouseup",this.EndMove.bind(this)),this.elView.addEventListener("mouseleave",this.EndMove.bind(this)),this.elView.addEventListener("mousemove",this.Move.bind(this)),this.elView.addEventListener("mousedown",this.StartMove.bind(this)),this.elView.addEventListener("touchend",this.EndMove.bind(this)),this.elView.addEventListener("touchmove",this.Move.bind(this)),this.elView.addEventListener("touchstart",this.StartMove.bind(this)),this.elView.addEventListener("contextmenu",this.contextmenu.bind(this)),this.elView.addEventListener("drop",this.dropEnd.bind(this)),this.elView.addEventListener("dragover",this.dragover.bind(this)),this.elView.addEventListener("wheel",this.zoom_enter.bind(this)),this.elView.addEventListener("keydown",this.keydown.bind(this))}keydown(e){("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),null!=this.nodeSelected&&(this.nodeSelected.delete(),this.nodeSelected=null),null!=this.lineSelected&&(this.lineSelected.delete(),this.lineSelected=null))}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(){this.canvas_x=this.canvas_x/this.zoom_last_value*this.zoom,this.canvas_y=this.canvas_y/this.zoom_last_value*this.zoom,this.zoom_last_value=this.zoom,this.updateView()}zoom_in(){this.zoom<this.zoom_max&&(this.zoom+=this.zoom_value,this.zoom_refresh())}zoom_out(){this.zoom>this.zoom_min&&(this.zoom-=this.zoom_value,this.zoom_refresh())}zoom_reset(){1!=this.zoom&&(this.zoom=1,this.zoom_refresh())}StartMove(e){if(!this.tagIngore.includes(e.target.tagName.toLowerCase())){if(this.timeFastClick=this.parent.getTime(),this.moveType==a.None)if(this.nodeSelected&&this.parent.checkParent(e.target,this.nodeSelected.elNode))if(e.target.classList.contains("dot")){if(this.parent.checkParent(e.target,this.nodeSelected.elNodeInputs))return;this.moveType=a.Line,this.tempLine=new s(this,this.nodeSelected,null),this.tempLine.outputIndex=+e.target.getAttribute("node")}else this.moveType=a.Node;else this.moveType=a.Canvas;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.flgDrap=!0,this.flgMove=!1}}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,i=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.moveType){case a.Canvas:{let e=this.canvas_x+this.CalcX(-(this.pos_x-t)),s=this.canvas_y+this.CalcY(-(this.pos_y-i));this.elCanvas.style.transform="translate("+e+"px, "+s+"px) scale("+this.zoom+")";break}case a.Node:{let e=this.CalcX(this.pos_x-t),s=this.CalcY(this.pos_y-i);this.pos_x=t,this.pos_y=i,this.nodeSelected?.updatePosition(e,s);break}case a.Line:if(this.tempLine){let e=this.CalcX(this.elCanvas.getBoundingClientRect().x-t),s=this.CalcY(this.elCanvas.getBoundingClientRect().y-i);this.tempLine.updateTo(this.elCanvas.offsetLeft-e,this.elCanvas.offsetTop-s),this.tempLine.toNode=this.nodeOver}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){if(this.parent.getTime()-this.timeFastClick<300||!this.flgDrap&&!this.flgMove)return this.moveType=a.None,this.flgDrap=!1,void(this.flgMove=!1);this.UnSelect(),this.tempLine&&this.moveType==a.Line&&(this.tempLine.toNode&&this.tempLine.toNode.checkInput()&&this.AddLine(this.tempLine.fromNode,this.tempLine.toNode,this.tempLine.outputIndex),this.tempLine.delete(),this.tempLine=null);let t=0,i=0;"touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.moveType===a.Canvas&&(this.canvas_x=this.canvas_x+this.CalcX(-(this.pos_x-t)),this.canvas_y=this.canvas_y+this.CalcY(-(this.pos_y-i))),this.pos_x=t,this.pos_y=i,this.moveType=a.None,this.flgDrap=!1,this.flgMove=!1}contextmenu(e){e.preventDefault()}}return class{container;View;Control;tab;dataNodeSelect=null;option;events;on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}checkParent(e,t){if(e&&t){if(e==t)return!0;let i=e;for(;null!=(i=i.parentElement);)if(t==i)return!0}return!1}constructor(s,o=null){this.container=s,this.container.classList.add("workerflow"),this.option=o||{control:{}},this.container.innerHTML='\n    <div class="workerflow-control">\n      <h2 class="workerflow-control__header">Node Control</h2>\n      <div class="workerflow-control__list">\n      <div draggable="true">Node 1</div>\n      </div>\n    </div>\n    <div class="workerflow-desgin">\n      <div class="workerflow-items">\n        <div class="workerflow-item">Thông tin mới</div>\n        <div class="workerflow-item">Thông tin mới123</div>\n      </div>\n      <div class="workerflow-view">\n      </div>\n    </div>\n    ',this.View=new d(this),this.tab=new i(this,[]),this.Control=new e(this),this.events=new t(this)}new(){this.tab?.NewProject()}load(e){this.tab?.LoadProject(e)}toJson(){return this.View?.toJson()}getTime(){return(new Date).getTime()}getUuid(){let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
