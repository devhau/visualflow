
  /**
   * @license
   * author: Nguyen Van Hau
   * workerflow.js v0.0.1
   * Released under the MIT license.
   */

var workerflow = (function () {
    'use strict';

    class NodeFlow {
        parent;
        elNode;
        elNodeInputs;
        elNodeOutputs;
        elNodeContent;
        nodeId;
        pos_x = 0;
        pos_y = 0;
        constructor(parent, id, option = null) {
            this.parent = parent;
            this.nodeId = id;
            console.log(this.nodeId);
            this.elNode = document.createElement('div');
            this.elNode.classList.add("workerflow-node");
            this.elNode.id = `node-${id}`;
            this.elNodeInputs = document.createElement('div');
            this.elNodeInputs.classList.add('workerflow-node_inputs');
            this.elNodeInputs.innerHTML = `<div class="dot"></div>`;
            this.elNodeContent = document.createElement('div');
            this.elNodeContent.classList.add('workerflow-node_content');
            this.elNodeOutputs = document.createElement('div');
            this.elNodeOutputs.classList.add('workerflow-node_outputs');
            this.elNodeOutputs.innerHTML = `<div class="dot"></div>`;
            this.elNode.setAttribute('data-node', id);
            this.elNode.setAttribute('style', `top: ${this.pos_y}px; left: ${this.pos_x}px;`);
            this.elNode.addEventListener('mousedown', this.StartSelected.bind(this));
            this.elNode.addEventListener('touchstart', this.StartSelected.bind(this));
            this.elNode.appendChild(this.elNodeInputs);
            this.elNode.appendChild(this.elNodeContent);
            this.elNode.appendChild(this.elNodeOutputs);
            this.parent.elCanvas?.appendChild(this.elNode);
        }
        StartSelected(e) {
            this.parent.SelectNode(this);
        }
        updatePosition(x, y) {
            if (this.elNode) {
                this.pos_x = (this.elNode.offsetLeft - x);
                this.pos_y = (this.elNode.offsetTop - y);
                this.elNode.setAttribute('style', `top: ${this.pos_y}px; left: ${this.pos_x}px;`);
            }
        }
    }

    class ViewFlow {
        elView;
        elCanvas = null;
        parent;
        nodes = [];
        flgDrap = false;
        flgDrapMove = false;
        zoom = 1;
        zoom_max = 1.6;
        zoom_min = 0.5;
        zoom_value = 0.1;
        zoom_last_value = 1;
        canvas_x = 0;
        canvas_y = 0;
        pos_x = 0;
        pos_x_start = 0;
        pos_y = 0;
        pos_y_start = 0;
        mouse_x = 0;
        mouse_y = 0;
        nodeSelected = null;
        constructor(parent) {
            this.parent = parent;
            this.elView = this.parent.container?.querySelector('.workerflow-desgin .workerflow-view');
            if (this.elView) {
                this.elCanvas = document.createElement('div');
                this.elCanvas.classList.add("workerflow-canvas");
                this.elView.appendChild(this.elCanvas);
                this.elView.tabIndex = 0;
                this.addEvent();
                this.AddNode();
                this.AddNode();
                this.AddNode();
            }
        }
        UnSelectNode() {
            if (this.nodeSelected) {
                this.nodeSelected.elNode?.classList.remove('active');
            }
            this.nodeSelected = null;
        }
        SelectNode(node) {
            this.UnSelectNode();
            this.nodeSelected = node;
            this.nodeSelected.elNode?.classList.add('active');
        }
        AddNode() {
            this.nodes = [...this.nodes, new NodeFlow(this, this.parent.getUuid())];
        }
        addEvent() {
            if (!this.elView)
                return;
            /* Mouse and Touch Actions */
            this.elView.addEventListener('mouseup', this.EndMove.bind(this));
            this.elView.addEventListener('mouseleave', this.EndMove.bind(this));
            this.elView.addEventListener('mousemove', this.Move.bind(this));
            this.elView.addEventListener('mousedown', this.StartMove.bind(this));
            this.elView.addEventListener('touchend', this.EndMove.bind(this));
            this.elView.addEventListener('touchmove', this.Move.bind(this));
            this.elView.addEventListener('touchstart', this.StartMove.bind(this));
            /* Context Menu */
            this.elView.addEventListener('contextmenu', this.contextmenu.bind(this));
        }
        StartMove(e) {
            this.flgDrap = true;
            this.flgDrapMove = false;
            if (this.nodeSelected && this.nodeSelected.elNode !== e.target) {
                this.UnSelectNode();
            }
            if (e.type === "touchstart") {
                this.pos_x = e.touches[0].clientX;
                this.pos_x_start = e.touches[0].clientX;
                this.pos_y = e.touches[0].clientY;
                this.pos_y_start = e.touches[0].clientY;
            }
            else {
                this.pos_x = e.clientX;
                this.pos_x_start = e.clientX;
                this.pos_y = e.clientY;
                this.pos_y_start = e.clientY;
            }
        }
        Move(e) {
            if (!this.flgDrap || !this.elCanvas)
                return;
            this.flgDrapMove = true;
            let e_pos_x = 0;
            let e_pos_y = 0;
            if (e.type === "touchmove") {
                e_pos_x = e.touches[0].clientX;
                e_pos_y = e.touches[0].clientY;
            }
            else {
                e_pos_x = e.clientX;
                e_pos_y = e.clientY;
            }
            if (!this.nodeSelected) {
                let x = this.canvas_x + (-(this.pos_x - e_pos_x));
                let y = this.canvas_y + (-(this.pos_y - e_pos_y));
                this.elCanvas.style.transform = "translate(" + x + "px, " + y + "px) scale(" + this.zoom + ")";
            }
            else {
                var x = (this.pos_x - e_pos_x) * this.elCanvas.clientWidth / (this.elCanvas.clientWidth * this.zoom);
                var y = (this.pos_y - e_pos_y) * this.elCanvas.clientHeight / (this.elCanvas.clientHeight * this.zoom);
                this.pos_x = e_pos_x;
                this.pos_y = e_pos_y;
                this.nodeSelected.updatePosition(x, y);
            }
            if (e.type === "touchmove") {
                this.mouse_x = e_pos_x;
                this.mouse_y = e_pos_y;
            }
        }
        EndMove(e) {
            this.flgDrap = false;
            let e_pos_x = 0;
            let e_pos_y = 0;
            if (e.type === "touchend") {
                e_pos_x = this.mouse_x;
                e_pos_y = this.mouse_y;
            }
            else {
                e_pos_x = e.clientX;
                e_pos_y = e.clientY;
            }
            this.canvas_x = this.canvas_x + (-(this.pos_x - e_pos_x));
            this.canvas_y = this.canvas_y + (-(this.pos_y - e_pos_y));
            this.pos_x = e_pos_x;
            this.pos_y = e_pos_y;
            if (this.flgDrapMove) {
                this.UnSelectNode();
            }
        }
        contextmenu(e) {
            e.preventDefault();
        }
    }

    class WorkerFlow {
        container;
        View;
        events = {};
        constructor(container) {
            this.container = container;
            this.container.classList.add("workerflow");
            this.container.innerHTML = `
    <div class="workerflow-control">
      <div class="workerflow-control__item" draggable="true">Node 1</div>
    </div>
    <div class="workerflow-desgin">
      <div class="workerflow-items">
        <div class="workerflow-item">Thông tin mới</div>
        <div class="workerflow-item">Thông tin mới123</div>
      </div>
      <div class="workerflow-view">
      </div>
    </div>
    `;
            this.View = new ViewFlow(this);
        }
        getUuid() {
            // http://www.ietf.org/rfc/rfc4122.txt
            let s = [];
            let hexDigits = "0123456789abcdef";
            for (let i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";
            let uuid = s.join("");
            return uuid;
        }
        /* Events */
        on(event, callback) {
            // Check if the callback is not a function
            if (typeof callback !== 'function') {
                console.error(`The listener callback must be a function, the given type is ${typeof callback}`);
                return false;
            }
            // Check if the event is not a string
            if (typeof event !== 'string') {
                console.error(`The event name must be a string, the given type is ${typeof event}`);
                return false;
            }
            // Check if this event not exists
            if (this.events[event] === undefined) {
                this.events[event] = {
                    listeners: []
                };
            }
            this.events[event].listeners.push(callback);
        }
        removeListener(event, callback) {
            // Check if this event not exists
            if (!this.events[event])
                return false;
            const listeners = this.events[event].listeners;
            const listenerIndex = listeners.indexOf(callback);
            const hasListener = listenerIndex > -1;
            if (hasListener)
                listeners.splice(listenerIndex, 1);
        }
        dispatch(event, details) {
            let self = this;
            // Check if this event not exists
            if (this.events[event] === undefined) {
                // console.error(`This event: ${event} does not exist`);
                return false;
            }
            this.events[event].listeners.forEach((listener) => {
                listener(details, self);
            });
        }
    }

    return WorkerFlow;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
