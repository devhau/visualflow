
  /**
   * @license
   * author: Nguyen Van Hau
   * visualstudio.js v0.0.1-beta
   * Released under the MIT license.
   */

var visualstudio = (function () {
    'use strict';

    const DockEnum = {
        left: "vs-left",
        top: "vs-top",
        view: "vs-view",
        bottom: "vs-bottom",
        right: "vs-right",
    };

    class DockBase {
        event;
        elNode = document.createElement('div');
        constructor(container, event) {
            this.event = event;
            container.appendChild(this.elNode);
            this.elNode.innerHTML = 'DockBase';
        }
        BoxInfo(title, $callback) {
            this.elNode.classList.remove('vs-boxinfo');
            this.elNode.classList.add('vs-boxinfo');
            this.elNode.innerHTML = `<div class="vs-boxinfo_title">${title}</div>
    <div class="vs-boxinfo_content"></div>`;
            if ($callback) {
                $callback(this.elNode.querySelector('.vs-boxinfo_content'));
            }
        }
    }

    class ControlDock extends DockBase {
        event;
        constructor(container, event) {
            super(container, event);
            this.event = event;
            this.elNode.classList.add('vs-control');
            this.BoxInfo('Control', (node) => {
                node.innerHTML = "xin chào";
            });
        }
    }

    class PropertyDock extends DockBase {
        event;
        constructor(container, event) {
            super(container, event);
            this.event = event;
            this.elNode.classList.add('vs-property');
            this.BoxInfo('Property', (node) => {
                node.innerHTML = "xin chào";
            });
        }
    }

    class ViewDock extends DockBase {
        event;
        constructor(container, event) {
            super(container, event);
            this.event = event;
            this.elNode.innerHTML = 'ViewDock';
            this.elNode.classList.add('vs-view');
        }
    }

    class DockManager {
        container;
        event;
        $dockManager = {};
        constructor(container, event) {
            this.container = container;
            this.event = event;
        }
        reset() {
            this.$dockManager = {};
            this.addDock(DockEnum.left, ControlDock);
            this.addDock(DockEnum.right, PropertyDock);
            this.addDock(DockEnum.right, ControlDock);
            this.addDock(DockEnum.view, ViewDock);
            this.addDock(DockEnum.top, DockBase);
            this.addDock(DockEnum.bottom, DockBase);
            this.RenderUI();
        }
        addDock($key, $view) {
            if (!this.$dockManager[$key])
                this.$dockManager[$key] = [];
            this.$dockManager[$key] = [...this.$dockManager[$key], $view];
        }
        RenderUI() {
            this.container.innerHTML = `
      <div class="vs-left vs-dock"></div>
      <div class="vs-content">
        <div class="vs-top vs-dock"></div>
        <div class="vs-view vs-dock"></div>
        <div class="vs-bottom vs-dock"></div>
      </div>
      <div class="vs-right vs-dock"></div>
    `;
            Object.keys(this.$dockManager).forEach((key) => {
                let querySelector = this.container.querySelector(`.${key}`);
                if (querySelector) {
                    this.$dockManager[key].forEach(($item) => {
                        new $item(querySelector, this);
                    });
                }
            });
        }
    }

    class EventFlow {
        events = {};
        constructor() { }
        onSafe(event, callback) {
            this.removeListener(event, callback);
            this.on(event, callback);
        }
        /* Events */
        on(event, callback) {
            // Check if the callback is not a function
            if (typeof callback !== 'function') {
                console.error(`The listener callback must be a function, the given type is ${typeof callback}`);
                return false;
            }
            // Check if the event is not a string
            if (typeof event !== 'string') {
                console.error(`The event name must be a string, the given type is ${typeof event}`);
                return false;
            }
            // Check if this event not exists
            if (this.events[event] === undefined) {
                this.events[event] = {
                    listeners: []
                };
            }
            this.events[event].listeners.push(callback);
        }
        removeListener(event, callback) {
            // Check if this event not exists
            if (!this.events[event])
                return false;
            const listeners = this.events[event].listeners;
            const listenerIndex = listeners.indexOf(callback);
            const hasListener = listenerIndex > -1;
            if (hasListener)
                listeners.splice(listenerIndex, 1);
        }
        dispatch(event, details) {
            // Check if this event not exists
            if (this.events[event] === undefined) {
                // console.error(`This event: ${event} does not exist`);
                return false;
            }
            this.events[event].listeners.forEach((listener) => {
                listener(details);
            });
        }
    }

    class VisualStudio {
        container;
        $properties = {};
        $control = {};
        $dockManager;
        events;
        onSafe(event, callback) {
            this.events.onSafe(event, callback);
        }
        on(event, callback) {
            this.events.on(event, callback);
        }
        removeListener(event, callback) {
            this.events.removeListener(event, callback);
        }
        dispatch(event, details) {
            this.events.dispatch(event, details);
        }
        constructor(container, option = null) {
            this.container = container;
            this.events = new EventFlow();
            //set project
            this.$properties['project'] = {
                ...(option?.properties || {}),
                name: {
                    defautl: ""
                },
                x: {
                    defautl: 0
                },
                y: {
                    default: 0
                },
                zoom: {
                    default: 0
                }
            };
            // set control
            this.$control = option?.control || {};
            Object.keys(this.$control).forEach((key) => {
                this.$properties[`node_${key}`] = {
                    ...(this.$control[key].properties || {}),
                    key: {
                        defautl: key
                    },
                    name: {
                        defautl: ""
                    },
                    x: {
                        defautl: 0
                    },
                    y: {
                        default: 0
                    },
                };
            });
            this.container.classList.remove('vs-container');
            this.container.classList.add('vs-container');
            this.$dockManager = new DockManager(this.container, this);
            this.$dockManager.reset();
        }
        getControlNodeByKey(key) {
            return {
                ...this.$control[key],
                properties: this.getPropertyByKey(key)
            };
        }
        getPropertyByKey(key) {
            return this.$properties[key];
        }
    }

    return VisualStudio;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
