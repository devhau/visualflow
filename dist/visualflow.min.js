/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.3
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"};class i{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class n{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new i,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,a){a?(this.dispatch(`${e.dataChange}_${t}_${a}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:a}),this.dispatch(`${e.dataChange}_${t}_${a}`,{key:t,keyChild:s,value:i,sender:n,index:a})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof n&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof n&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,a=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof n&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof n&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,a&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof n){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.data[t]instanceof n||!this.data[t].key||(this.data[t]=new n(this.property,this.data[t])),!Array.isArray(this.data[t])||!this.property||this.data[t][0]instanceof n||(this.data[t]=this.data[t].map((e=>e instanceof n||!e.key?e:new n(this.property,e)))),this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof n&&(e[t]=e[t].toJson()),Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof n&&(e[t]=e[t].map((e=>e.toJson())));return e}delete(){this.events=new i,this.data={}}}class a{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new n;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new i}}class o extends a{parent;constructor(e){super(),this.parent=e}}const r=()=>new Date,d=()=>r().getTime(),h=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,l=e=>e&&e instanceof Function,p=["SPAN","DIV","P","TEXTAREA"];class c{el;data;main;keyName;elNode;property;constructor(e,t,s,i=null){if(this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName)e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.el.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode));else if(this.keyName=e?.getAttribute("node:model"),this.keyName){this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el;let t=document.createElement("span");t.classList.add("node-editor"),e.parentElement?.insertBefore(t,e),e.parentElement?.removeChild(e),t.appendChild(this.elNode)}this.keyName&&this.bindData()}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.property&&this.property.select&&l(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let s=document.createElement("option");return s.value=e,s.text=t,s}));for(let t of e)this.elNode.appendChild(t)}this.property&&l(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(e){this.elNode&&(p.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t.elNode!==this.elNode&&this.setNodeValue(e)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&this.data.Set(this.keyName,this.elNode.value,this)}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new c(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new c(e,t,s)))}}const u="root";class m extends i{name="";value;initalValue;scope=u}var v,g=Object.freeze({__proto__:null,FlowCore:a,BaseFlow:o,DockEnum:t,EventEnum:e,PropertyEnum:s,DataFlow:n,DataView:c,EventFlow:i,compareSort:h,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:d,LOG:(e,...t)=>console.log(e,t),getDate:r,isFunction:l,Variable:m});class f{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class y extends f{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{let t=this.main.getControlAll();Object.keys(t).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${t[s].icon} <span>${t[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),e.appendChild(i)}))}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class N{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new n;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,a=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),a?this.data=a:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,a){let o=e,r=t,d=s,h=i,l=n;switch(a){case"open":if(e>=s)var p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*(-1*l);else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(e>=s)p=o+Math.abs(d-o)*(-1*l),c=d-Math.abs(d-o)*l;else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(e>=s)p=o+Math.abs(d-o)*(-1*l),c=d-Math.abs(d-o)*(-1*l);else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+o+" "+r+" C "+(p=o+Math.abs(d-o)*l)+" "+r+" "+(c=d-Math.abs(d-o)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new N(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(v||(v={}));class C{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=v.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),a=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,a)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=d(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=v.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=v.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==v.Node&&e.target.classList.contains("node-dot")){this.moveType=v.Line;let s=e.target.getAttribute("node");this.tempLine=new N(t,s),this.tempLine.temp=!0}this.moveType==v.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case v.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i);break}case v.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case v.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let a=e.target.closest("[node-id]"),o=a?.getAttribute("node-id"),r=o?this.parent.GetNodeById(o):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=a?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(d()-this.timeFastClick<100||!this.flgMove)return this.moveType=v.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===v.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=v.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class b{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(e){this.parent=e,this.elNode=e.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let e=this.parent.GetGroupName(),t=e.length-1;if(t<0)return;let s=document.createElement("span");s.innerHTML="Root",s.addEventListener("click",(e=>this.parent.BackGroup("Root"))),this.elPathGroup.appendChild(s),this.btnBack.removeAttribute("style");for(let s=t;s>=0;s--){let t=document.createElement("span");t.innerHTML=`>>${e[s].text}`,t.setAttribute("group",e[s].id),t.addEventListener("click",(t=>this.parent.BackGroup(e[s].id))),this.elPathGroup.appendChild(t)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_in())),e.innerHTML="+";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_out())),t.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(e),i.appendChild(t),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}class L extends o{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof n?this.data=i:(this.data.InitData(i,this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),l(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=c.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new N(this,i,t,s,e).UpdateUI()}))}}const k=1.6,E=.6,G=.1,$=1;class x extends a{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");return this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new n(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData)),this.groupData.onSafe(e.dataChange,this.UpdateUI.bind(this)),this.groupData}group=[];GetGroupName(){return this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")})))}BackGroup(t=null){let s=1;t&&(s=this.group.indexOf(t),s<0&&(s=0)),s?this.group.splice(0,s):this.group=[],this.RenderUI(),this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}openGroup(t){this.group=[t,...this.group],this.toolbar.renderPathGroup(),this.RenderUI(),this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new L(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,this.on(e.dataChange,this.RenderUI.bind(this)),new C(this),this.toolbar=new b(this)}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof L||(e.sender&&e.sender instanceof x?this.UpdateUI():(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()})),this.UpdateUI(),this.toolbar.renderPathGroup()))}Open(t){if(t==this.data)return this.toolbar.renderPathGroup(),void this.RenderUI();this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNode&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?$:this.getZoom()+G*e;k>=t&&t>=E&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class _{elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML="\n      <table>\n        <thead>\n          <tr>\n            <td>Name</td>\n            <td>Scope</td>\n            <td>InitalValue</td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ",this.variables)for(let e of this.variables)new I(e,this)}}class I{variable;elNode=document.createElement("tr");nameInput=document.createElement("input");scopeInput=document.createElement("select");initValueInput=document.createElement("input");constructor(t,s){this.variable=t,this.elNode.classList.add("variable-item"),this.nameInput.value=this.variable.name,this.nameInput.classList.add("variable-name"),this.initValueInput.value=this.variable.initalValue??"",this.initValueInput.classList.add("variable-init-value"),this.scopeInput.classList.add("variable-scope");let i=document.createElement("td");i.appendChild(this.nameInput);let n=document.createElement("td");n.appendChild(this.scopeInput);let a=document.createElement("td");a.appendChild(this.initValueInput),this.elNode.appendChild(i),this.elNode.appendChild(n),this.elNode.appendChild(a),s.elNode.querySelector("table tbody")?.appendChild(this.elNode),s.main.on(e.groupChange,(({group:e})=>{this.RenderScope(e)})),this.RenderScope()}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}let t=document.createElement("option");t.text=u,t.value=u,this.scopeInput.prepend(t),this.scopeInput.value=this.variable.scope}}var w=Object.freeze({__proto__:null,DesginerView:x,Line:N,Node:L,VariableView:_});class D extends f{main;constructor(e,t){super(e,t),this.main=t,new _(this.elNode,t)}}class P extends f{main;constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(e.change,this.renderUI.bind(this)),this.main.on(e.openProject,(e=>{this.elContent?.querySelectorAll(".active").forEach((e=>{e.classList.remove("active")})),this.elContent&&e?.data?.Get("id")&&this.elContent.querySelector(`[data-project-id="${e?.data?.Get("id")}"]`)?.classList.add("active")}))}renderUI(){let t=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(this.elContent){if(this.elContent.innerHTML="",t){t.innerHTML="";let e=document.createElement("button");t?.appendChild(e),e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject("")))}this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.dispatch(e.openProject,{data:t}),this.main.dispatch(e.showProperty,{data:t})})),this.elContent?.appendChild(s)}))}}}class M extends f{main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e.showProperty,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let s=t.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let a=document.createElement("div");a.classList.add("property-label"),a.innerHTML=i;let o=document.createElement("div");o.classList.add("property-value"),c.BindElement(o,t,this.main,i),n.appendChild(a),n.appendChild(o),e.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let a=document.createElement("div");a.classList.add("property-value"),c.BindElement(a,t,this.main,s),i.appendChild(n),i.appendChild(a),e.appendChild(i)}))}}class j extends f{main;view;constructor(t,s){super(t,s),this.main=s,this.view=new x(this.elNode,s),this.view.on(e.showProperty,(t=>{s.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.view?.Open(e.data)}))}}class S{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,y),this.addDock(t.left,P),this.addDock(t.right,M),this.addDock(t.view,j),this.addDock(t.bottom,D),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const T={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"node-test",html:"",dot:{top:0,right:0,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:0,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input class="node-form-control" node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class A{$data=new n(this);$projectOpen;$properties={};$control={};events=new i;$controlChoose=null;$checkOption=!1;constructor(){this.$properties[s.solution]={id:{default:()=>d()},key:{default:s.solution},name:{default:()=>`solution-${d()}`,edit:!0},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>d()},name:{default:()=>`Flow-${d()}`,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}}}addVariable(){let e=new m;return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...T}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(h).forEach((e=>{s[e.key]={dot:{left:1,top:1,right:1,bottom:1},...e},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>d()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(e,t){t.innerHTML=e.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.$data.InitData(e,this.getPropertyByKey(s.solution))}setProjectOpen(e){this.$projectOpen=e}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(t){let i=null;t instanceof n?(i=this.getProjectById(t.Get("id")),i||(i=t,this.$data.Append("projects",i))):(i=new n(this),i.InitData(t,this.getPropertyByKey(s.main)),this.$data.Append("projects",i)),i&&(this.$projectOpen=i,this.newVariable().name="var1",this.newVariable().name="var2",this.newVariable().name="var3",this.newVariable().name="var4",this.newVariable().name="var5",this.dispatch(e.change,{data:i}),this.dispatch(e.showProperty,{data:i}),this.dispatch(e.openProject,{data:i}))}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}}var B=Object.freeze({__proto__:null,DockEnum:t,ControlDock:y,DockBase:f,ProjectDock:P,PropertyDock:M,TabDock:class extends f{main;constructor(t,s){super(t,s),this.main=s,this.elNode.innerHTML="",this.elNode.classList.add("vs-tab"),this.main.on(e.openProject,(e=>{this.elNode?.querySelectorAll(".active").forEach((e=>{e.classList.remove("active")})),this.elNode&&e?.data?.Get("id")&&this.elNode.querySelector(`[data-project-id="${e?.data?.Get("id")}"]`)?.classList.add("active")})),this.main.on(e.newProject,this.render.bind(this))}render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.dispatch(e.openProject,{data:t}),this.main.dispatch(e.showProperty,{data:t})})),this.elNode?.appendChild(s)}))}},ViewDock:j,VariableDock:D,DockManager:S});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new A,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new S(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}},SystemBase:A,...g,...B,...w}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
