/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.5
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"},i="root";class n{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class o{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new n,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e.dataChange}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e.dataChange}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof o&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof o&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,n=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof o&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof o&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,n&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof o){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.data[t]instanceof o||!this.data[t].key||(this.data[t]=new o(this.property,this.data[t])),!Array.isArray(this.data[t])||!this.property||this.data[t][0]instanceof o||(this.data[t]=this.data[t].map((e=>e instanceof o||!e.key?e:new o(this.property,e)))),this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof o?e[t]=e[t].toJson():Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof o&&(e[t]=e[t].map((e=>e.toJson())));return e}delete(){this.events=new n,this.data={}}}class a{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new o;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new n}}class r extends a{parent;constructor(e){super(),this.parent=e}}const d=()=>new Date,h=()=>d().getTime(),l=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,p=e=>e&&e instanceof Function,c=["SPAN","DIV","P","TEXTAREA"];class u{el;data;main;keyName;elNode;property;elSuggestions;elSuggestionsContent;nodeEditor;constructor(e,t,s,i=null){this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName?e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.nodeEditor=e,this.nodeEditor.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode)):(this.keyName=e?.getAttribute("node:model"),this.keyName&&(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el,this.nodeEditor=document.createElement("span"),this.nodeEditor.classList.add("node-editor"),e.parentElement?.insertBefore(this.nodeEditor,e),e.parentElement?.removeChild(e),this.nodeEditor.appendChild(this.elNode))),this.elSuggestions=document.createElement("div"),this.elSuggestions.classList.add("node-editor_suggestions"),this.elSuggestionsContent=document.createElement("div"),this.elSuggestionsContent.classList.add("suggestions_content"),this.elSuggestions.appendChild(this.elSuggestionsContent),this.showSuggestions(!1),this.keyName&&this.bindData()}checkShowSuggestions(){if(this.elSuggestionsContent){this.elSuggestionsContent.innerHTML="";var e=this.main.getVariable();if(!e||0==e.length)return void this.showSuggestions(!1);let t=document.createElement("ul");for(let s of e){let e=document.createElement("li");e.innerHTML=s.Get("name"),t.appendChild(e)}this.elSuggestionsContent.appendChild(t)}let t=this.elNode.value,s=this.elNode.selectionStart;if(t){let e=t.lastIndexOf("${",s);t.lastIndexOf("}",s)<e?this.showSuggestions(!0):this.showSuggestions(!1)}}showSuggestions(e=!0){this.elSuggestions&&(e?this.elSuggestions.removeAttribute("style"):this.elSuggestions.setAttribute("style","display:none;"))}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.elNode.addEventListener("focus",(()=>{this.elSuggestions&&this.elNode?.parentElement?.appendChild(this.elSuggestions)})),this.elNode.addEventListener("blur",(()=>{this.elSuggestions&&this.elNode?.parentElement?.removeChild(this.elSuggestions)})),this.elNode.addEventListener("select",(()=>{this.checkShowSuggestions()})),this.property&&this.property.select&&p(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let s=document.createElement("option");return s.value=e,s.text=t,s}));for(let t of e)this.elNode.appendChild(t)}this.property&&p(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(e){this.elNode&&(c.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t.elNode!==this.elNode&&this.setNodeValue(e)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&(this.data.Set(this.keyName,this.elNode.value,this),this.checkShowSuggestions())}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new u(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new u(e,t,s)))}}var m,v=Object.freeze({__proto__:null,FlowCore:a,BaseFlow:r,DockEnum:t,EventEnum:e,PropertyEnum:s,ScopeRoot:i,DataFlow:o,DataView:u,EventFlow:n,compareSort:l,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:h,LOG:(e,...t)=>console.log(e,t),getDate:d,isFunction:p});class g{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new o;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,o=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,r=t,d=s,h=i,l=n;switch(o){case"open":if(e>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new g(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(m||(m={}));class f{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=m.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=h(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=m.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=m.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==m.Node&&e.target.classList.contains("node-dot")){this.moveType=m.Line;let s=e.target.getAttribute("node");this.tempLine=new g(t,s),this.tempLine.temp=!0}this.moveType==m.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case m.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i);break}case m.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case m.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(h()-this.timeFastClick<100||!this.flgMove)return this.moveType=m.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===m.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=m.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class y{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(e){this.parent=e,this.elNode=e.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let e=this.parent.GetGroupName(),t=e.length-1;if(!(t<0)){for(let s=t;s>=0;s--){let t=document.createElement("span");t.innerHTML=0==s?`${e[s].text}`:`${e[s].text} >> `,t.setAttribute("group",e[s].id),t.addEventListener("click",(t=>this.parent.BackGroup(e[s].id))),this.elPathGroup.appendChild(t)}t>1&&this.btnBack.removeAttribute("style")}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_in())),e.innerHTML="+";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_out())),t.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(e),i.appendChild(t),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}class N extends r{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof o?this.data=i:(this.data.InitData({...i,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),p(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=u.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new g(this,i,t,s,e).UpdateUI()}))}}const b=1.6,C=.6,L=.1,k=1;class E extends a{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new o(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let i=this.GetDataById(this.lastGroupName);return i&&i.onSafe(e.dataChange,(()=>{this.UpdateUI.bind(this),this.toolbar.renderPathGroup(),this.changeGroup()})),this.groupData}group=[];GetGroupName(){return[...this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")}))),{id:i,text:i}]}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})})),this.toolbar.renderPathGroup()}openGroup(e){this.group=[e,...this.group],this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new N(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,new f(this),this.toolbar=new y(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{i.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)})),this.changeGroup()}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof N||(e.sender&&e.sender instanceof E||(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()}))),this.UpdateUI())}Open(t){t!=this.data?(this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI(),this.changeGroup()):this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNodeItem&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?k:this.getZoom()+L*e;b>=t&&t>=C&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class G{elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.onSafe(e.changeVariable,(({data:e})=>{this.Render()})),this.main.onSafe(e.openProject,(()=>{this.Render()})),this.main.onSafe(e.groupChange,(()=>{this.Render()})),this.Render()}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',this.variables)for(let e of this.variables)new x(e,this).RenderScope(this.main.getGroupCurrent())}}class x{variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.Get("name"),this.valueDefaultInput.value=this.variable.Get("initalValue")??"",this.typeInput.value=this.variable.Get("type")??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let s=document.createElement("td");s.appendChild(this.nameInput),this.elNode.appendChild(s),this.nameInput.addEventListener("keydown",(e=>{this.variable.Set("name",e.target.value)})),this.nameInput.addEventListener("change",(e=>{this.variable.Set("name",e.target.value)}));let i=document.createElement("td");i.appendChild(this.typeInput),this.elNode.appendChild(i),this.typeInput.addEventListener("change",(e=>{this.variable.Set("type",e.target.value)}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let o=document.createElement("td");o.appendChild(this.valueDefaultInput),this.elNode.appendChild(o),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.Set("initalValue",e.target.value)})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.Set("initalValue",e.target.value)}));let a=document.createElement("button");a.innerHTML="-",a.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(a),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}this.scopeInput.value=this.variable.Get("scope"),this.scopeInput.addEventListener("change",(e=>{this.variable.Set("scope",e.target.value)}))}}class S{elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolboxf"),this.Render()}Render(){let e=this.main.getControlAll();Object.keys(e).forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.setAttribute("draggable","true"),s.setAttribute("data-node",t),s.innerHTML=`${e[t].icon} <span>${e[t].name}</span`,s.addEventListener("dragstart",this.dragStart.bind(this)),s.addEventListener("dragend",this.dragend.bind(this)),this.elNode.appendChild(s)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class ${elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(s)}))}}var w=Object.freeze({__proto__:null,DesginerView:E,Line:g,NodeItem:N,VariableView:G,ToolboxView:S,ProjectView:$});class I{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class _ extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new S(e,this.main)}))}}class D extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new G(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");s?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable()}))}}}class M extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new $(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),s?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${h()}`,s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(i=document.createElement("a")).setAttribute("href",s),i.setAttribute("download",t+".json"),document.body.appendChild(i),i.click(),void i.remove();var e,t,s,i})),s?.appendChild(t);let i=document.createElement("button");i.innerHTML="Import",i.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var s=new FileReader;s.onload=function(){e?.(s.result)},t&&t.files&&s.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),s?.appendChild(i)}}}class P extends I{main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e.showProperty,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let s=t.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),u.BindElement(a,t,this.main,i),n.appendChild(o),n.appendChild(a),e.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),u.BindElement(o,t,this.main,s),i.appendChild(n),i.appendChild(o),e.appendChild(i)}))}}class j extends I{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new E(this.elNode,t)}}class T{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,_),this.addDock(t.left,M),this.addDock(t.right,P),this.addDock(t.view,j),this.addDock(t.bottom,D),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const A={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:0,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:0,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input class="node-form-control" node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class O{$data=new o(this);$projectOpen;$properties={};$control={};events=new n;$controlChoose=null;$checkOption=!1;$group;constructor(){this.$properties[s.solution]={id:{default:()=>h()},key:{default:()=>s.solution},name:{default:()=>`solution-${h()}`,edit:!0},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>h()},name:{default:()=>`Flow-${h()}`,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$properties[s.variable]={key:{default:s.variable},name:{default:()=>`var${h()}`},type:{default:()=>"text"},scope:{default:()=>i},initalValue:{default:""}},this.onSafe(e.groupChange,(({group:e})=>{this.$group=e}))}newSolution(e=""){this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(s.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(){let e=new o(this,{key:s.variable});return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e.filter((e=>this.getGroupCurrent().findIndex((t=>t.id==e.Get("scope")))>-1))}getGroupCurrent(){return this.$group??[]}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...A}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(l).forEach((e=>{s[e.key]={dot:{left:1,top:1,right:1,bottom:1},...e},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>h()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(e,t){t.innerHTML=e.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof o?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new o(this),t.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}}var B=Object.freeze({__proto__:null,SystemBase:O,SystemVue:class extends O{render;constructor(e){super(),this.render=e}renderHtml(e,t){if(3===parseInt(this.render.version)){let s=this.render.h(e.getOption()?.html,{...e.getOption()?.props??{},node:e},e.getOption()?.options??{});s.appContext=t,this.render.render(s,t)}else{let s=new this.render({parent:t,render:t=>t(e.getOption()?.html,{props:{...e.getOption()?.props??{},node:e}}),...e.getOption()?.options??{}}).$mount();t.appendChild(s.$el)}}}});var H=Object.freeze({__proto__:null,DockEnum:t,ControlDock:_,DockBase:I,ProjectDock:M,PropertyDock:P,TabDock:class extends I{main;constructor(t,s){super(t,s),this.main=s,this.elNode.innerHTML="",this.elNode.classList.add("vs-tab"),this.main.on(e.openProject,(e=>{this.elNode?.querySelectorAll(".active").forEach((e=>{e.classList.remove("active")})),this.elNode&&e?.data?.Get("id")&&this.elNode.querySelector(`[data-project-id="${e?.data?.Get("id")}"]`)?.classList.add("active")})),this.main.on(e.newProject,this.render.bind(this))}render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.dispatch(e.openProject,{data:t}),this.main.dispatch(e.showProperty,{data:t})})),this.elNode?.appendChild(s)}))}},ViewDock:j,VariableDock:D,DockManager:T});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new O,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new T(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}},...B,...v,...H,...w}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YUZsb3cudHMiLCIuLi9zcmMvY29yZS9CYXNlRmxvdy50cyIsIi4uL3NyYy9jb3JlL1V0aWxzLnRzIiwiLi4vc3JjL2NvcmUvRGF0YVZpZXcudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X1Rvb2xiYXIudHMiLCIuLi9zcmMvZGVzZ2luZXIvTm9kZUl0ZW0udHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL1ZhcmlhYmxlVmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Ub29sYm94Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Qcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kb2NrL0RvY2tCYXNlLnRzIiwiLi4vc3JjL2RvY2svQ29udHJvbERvY2sudHMiLCIuLi9zcmMvZG9jay9WYXJpYWJsZURvY2sudHMiLCIuLi9zcmMvZG9jay9Qcm9qZWN0RG9jay50cyIsIi4uL3NyYy9kb2NrL1Byb3BlcnR5RG9jay50cyIsIi4uL3NyYy9kb2NrL1ZpZXdEb2NrLnRzIiwiLi4vc3JjL2RvY2svRG9ja01hbmFnZXIudHMiLCIuLi9zcmMvc3lzdGVtcy9jb250cm9sLnRzIiwiLi4vc3JjL3N5c3RlbXMvU3lzdGVtQmFzZS50cyIsIi4uL3NyYy9zeXN0ZW1zL1N5c3RlbVZ1ZS50cyIsIi4uL3NyYy9kb2NrL1RhYkRvY2sudHMiLCIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvVmlzdWFsRmxvdy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXZlbnRFbnVtID0ge1xuICBpbml0OiBcImluaXRcIixcbiAgZGF0YUNoYW5nZTogXCJkYXRhQ2hhbmdlXCIsXG4gIHNob3dQcm9wZXJ0eTogXCJzaG93UHJvcGVydHlcIixcbiAgb3BlblByb2plY3Q6IFwib3BlblByb2plY3RcIixcbiAgbmV3UHJvamVjdDogXCJuZXdQcm9qZWN0XCIsXG4gIGNoYW5nZVZhcmlhYmxlOiBcImNoYW5nZVZhcmlhYmxlXCIsXG4gIGNoYW5nZTogXCJjaGFuZ2VcIixcbiAgZGlzcG9zZTogXCJkaXNwb3NlXCIsXG4gIGdyb3VwQ2hhbmdlOiBcImdyb3VwQ2hhbmdlXCIsXG59XG5cbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcbiAgbGVmdDogXCJ2cy1sZWZ0XCIsXG4gIHRvcDogXCJ2cy10b3BcIixcbiAgdmlldzogXCJ2cy12aWV3XCIsXG4gIGJvdHRvbTogXCJ2cy1ib3R0b21cIixcbiAgcmlnaHQ6IFwidnMtcmlnaHRcIixcbn1cblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5RW51bSA9IHtcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcbiAgc29sdXRpb246ICdtYWluX3NvbHV0aW9uJyxcbiAgbGluZTogJ21haW5fbGluZScsXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXG4gIGdyb3VwQ2F2YXM6IFwibWFpbl9ncm91cENhdmFzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgU2NvcGVSb290ID0gXCJyb290XCI7XG4iLCJpbXBvcnQgeyBJRXZlbnQgfSBmcm9tIFwiLi9JRmxvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyBpbXBsZW1lbnRzIElFdmVudCB7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcbiAgcHVibGljIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICB0aGlzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIC8qIEV2ZW50cyAqL1xyXG4gIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgY2FsbGJhY2t9YCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIHRoZSBldmVudCBpcyBub3QgYSBzdHJpbmdcclxuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBldmVudCBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGV2ZW50fWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB7XHJcbiAgICAgICAgbGlzdGVuZXJzOiBbXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xyXG5cclxuICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzXHJcbiAgICBjb25zdCBsaXN0ZW5lckluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spXHJcbiAgICBjb25zdCBoYXNMaXN0ZW5lciA9IGxpc3RlbmVySW5kZXggPiAtMVxyXG4gICAgaWYgKGhhc0xpc3RlbmVyKSBsaXN0ZW5lcnMuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IHtcclxuICAgICAgbGlzdGVuZXIoZGV0YWlscyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4vSUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFGbG93IHtcbiAgcHJpdmF0ZSBkYXRhOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBwcm9wZXJ0aWVzOiBhbnkgPSBudWxsO1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xuICBwdWJsaWMgZ2V0UHJvcGVydGllcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXM7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMubG9hZChkYXRhKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIEluaXREYXRhKGRhdGE6IGFueSA9IG51bGwsIHByb3BlcnRpZXM6IGFueSA9IC0xKSB7XG4gICAgaWYgKHByb3BlcnRpZXMgIT09IC0xKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIH1cbiAgICB0aGlzLmxvYWQoZGF0YSk7XG4gIH1cbiAgcHJpdmF0ZSBldmVudERhdGFDaGFuZ2Uoa2V5OiBzdHJpbmcsIGtleUNoaWxkOiBzdHJpbmcsIHZhbHVlQ2hpbGQ6IGFueSwgc2VuZGVyQ2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9XyR7a2V5Q2hpbGR9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1fJHtrZXlDaGlsZH1gLCB7XG4gICAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9YCwge1xuICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGRcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgUmVtb3ZlRXZlbnREYXRhKGl0ZW06IERhdGFGbG93LCBrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcbiAgfVxuICBwdWJsaWMgT25FdmVudERhdGEoaXRlbTogRGF0YUZsb3csIGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1gLCAoeyBrZXk6IGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCB9OiBhbnkpID0+IHRoaXMuZXZlbnREYXRhQ2hhbmdlKGtleSwga2V5Q2hpbGQsIHZhbHVlQ2hpbGQsIHNlbmRlckNoaWxkLCBpbmRleCkpO1xuICB9XG4gIHByaXZhdGUgQmluZEV2ZW50KHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICB0aGlzLk9uRXZlbnREYXRhKHZhbHVlIGFzIERhdGFGbG93LCBrZXkpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKHZhbHVlIGFzIFtdKS5sZW5ndGggPiAwICYmIHZhbHVlWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICh2YWx1ZSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5PbkV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBTZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNEaXNwYXRjaDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5kYXRhW2tleV0gIT0gdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmRhdGFba2V5XSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICAgIHRoaXMuUmVtb3ZlRXZlbnREYXRhKCh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvdyksIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5kYXRhW2tleV0pICYmICh0aGlzLmRhdGFba2V5XSBhcyBbXSkubGVuZ3RoID4gMCAmJiB0aGlzLmRhdGFba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgICAgKHRoaXMuZGF0YVtrZXldIGFzIERhdGFGbG93W10pLmZvckVhY2goKGl0ZW06IERhdGFGbG93LCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLlJlbW92ZUV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xuICAgIH1cbiAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIGlmIChpc0Rpc3BhdGNoKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuICBwdWJsaWMgU2V0RGF0YShkYXRhOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSBmYWxzZSkge1xuXG4gICAgaWYgKGlzQ2xlYXJEYXRhKSB0aGlzLmRhdGEgPSB7fTtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICBsZXQgJGRhdGE6IERhdGFGbG93ID0gZGF0YSBhcyBEYXRhRmxvdztcbiAgICAgIGlmICghdGhpcy5wcm9wZXJ0eSAmJiAkZGF0YS5wcm9wZXJ0eSkgdGhpcy5wcm9wZXJ0eSA9ICRkYXRhLnByb3BlcnR5O1xuICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoJGRhdGEuZ2V0UHJvcGVydGllcygpKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLlNldChrZXksIGRhdGFba2V5XSwgc2VuZGVyLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgR2V0KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG4gIHB1YmxpYyBBcHBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuZGF0YVtrZXldKSB0aGlzLmRhdGFba2V5XSA9IFtdO1xuICAgIHRoaXMuZGF0YVtrZXldID0gWy4uLnRoaXMuZGF0YVtrZXldLCB2YWx1ZV07XG4gICAgdGhpcy5CaW5kRXZlbnQodmFsdWUsIGtleSk7XG4gIH1cbiAgcHVibGljIFJlbW92ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIHZhciBpbmRleCA9IHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLlJlbW92ZUV2ZW50RGF0YSh0aGlzLmRhdGFba2V5XVtpbmRleF0sIGtleSk7XG4gICAgICB0aGlzLmRhdGFba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgbG9hZChkYXRhOiBhbnkpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICBpZiAoIXRoaXMucHJvcGVydGllcykge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eT8uZ2V0UHJvcGVydHlCeUtleShkYXRhLmtleSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICAgIHRoaXMuZGF0YVtrZXldID0gKGRhdGE/LltrZXldID8/ICgodHlwZW9mIHRoaXMucHJvcGVydGllc1trZXldPy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCgpIDogdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQpID8/IFwiXCIpKTtcbiAgICAgICAgaWYgKCEodGhpcy5kYXRhW2tleV0gaW5zdGFuY2VvZiBEYXRhRmxvdykgJiYgdGhpcy5kYXRhW2tleV0ua2V5KSB7XG4gICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgdGhpcy5kYXRhW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZGF0YVtrZXldKSAmJiB0aGlzLnByb3BlcnR5ICYmICEodGhpcy5kYXRhW2tleV1bMF0gaW5zdGFuY2VvZiBEYXRhRmxvdykpIHtcbiAgICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHRoaXMuZGF0YVtrZXldLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRGF0YUZsb3cpICYmIGl0ZW0ua2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLkJpbmRFdmVudCh0aGlzLmRhdGFba2V5XSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSnNvbigpKTtcbiAgfVxuICBwdWJsaWMgdG9Kc29uKCkge1xuICAgIGxldCByczogYW55ID0ge307XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydHk/LmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLmtleSk7XG4gICAgfVxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICByc1trZXldID0gdGhpcy5HZXQoa2V5KTtcbiAgICAgIGlmIChyc1trZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0udG9Kc29uKCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocnNba2V5XSkgJiYgKHJzW2tleV0gYXMgW10pLmxlbmd0aCA+IDAgJiYgcnNba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgIHJzW2tleV0gPSByc1trZXldLm1hcCgoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0udG9Kc29uKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnM7XG4gIH1cbiAgcHVibGljIGRlbGV0ZSgpIHtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3cgfSBmcm9tIFwiLi9EYXRhRmxvd1wiO1xyXG5pbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi9Db25zdGFudFwiO1xyXG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcclxuaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4vSUZsb3dcIjtcclxuZXhwb3J0IGNsYXNzIEZsb3dDb3JlIGltcGxlbWVudHMgSUV2ZW50IHtcclxuICBwdWJsaWMgR2V0SWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnaWQnKTtcclxuICB9XHJcbiAgcHVibGljIFNldElkKGlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCdpZCcsIGlkKTtcclxuICB9XHJcbiAgcHVibGljIHByb3BlcnRpZXM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gIHB1YmxpYyBDaGVja0VsZW1lbnRDaGlsZChlbDogSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiB0aGlzLmVsTm9kZSA9PSBlbCB8fCB0aGlzLmVsTm9kZS5jb250YWlucyhlbCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZXZlbnRzOiBFdmVudEZsb3c7XHJcbiAgcHVibGljIFNldERhdGEoZGF0YTogYW55LCBzZW5kZXI6IGFueSA9IG51bGwpIHtcclxuICAgIHRoaXMuZGF0YS5TZXREYXRhKGRhdGEsIHNlbmRlcik7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXREYXRhRmxvdyhkYXRhOiBEYXRhRmxvdykge1xyXG4gICAgdGhpcy5kYXRhLlNldERhdGEoZGF0YSwgdGhpcywgdHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5kaXNwYXRjaChgYmluZF9kYXRhX2V2ZW50YCwgeyBkYXRhLCBzZW5kZXI6IHRoaXMgfSk7XHJcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xyXG4gIH1cclxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gIH1cclxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcclxuICB9XHJcbiAgUmVtb3ZlRGF0YUV2ZW50KCkge1xyXG4gICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fWAsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmNoYW5nZSwgKHsga2V5LCB2YWx1ZSwgc2VuZGVyIH06IGFueSkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlRmxvdzxUUGFyZW50IGV4dGVuZHMgRmxvd0NvcmU+IGV4dGVuZHMgRmxvd0NvcmUge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcGFyZW50OiBUUGFyZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgTE9HID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuZXhwb3J0IGNvbnN0IGdldERhdGUgPSAoKSA9PiAobmV3IERhdGUoKSk7XG5leHBvcnQgY29uc3QgZ2V0VGltZSA9ICgpID0+IGdldERhdGUoKS5nZXRUaW1lKCk7XG5leHBvcnQgY29uc3QgZ2V0VXVpZCA9ICgpID0+IHtcbiAgLy8gaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDEyMi50eHRcbiAgbGV0IHM6IGFueSA9IFtdO1xuICBsZXQgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzY7IGkrKykge1xuICAgIHNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTApLCAxKTtcbiAgfVxuICBzWzE0XSA9IFwiNFwiOyAgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXG4gIHNbMTldID0gaGV4RGlnaXRzLnN1YnN0cigoc1sxOV0gJiAweDMpIHwgMHg4LCAxKTsgIC8vIGJpdHMgNi03IG9mIHRoZSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkIHRvIDAxXG4gIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcblxuICBsZXQgdXVpZCA9IHMuam9pbihcIlwiKTtcbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlU29ydCA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICBpZiAoYS5zb3J0IDwgYi5zb3J0KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmIChhLnNvcnQgPiBiLnNvcnQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gKGZuOiBhbnkpID0+IHtcbiAgcmV0dXJuIGZuICYmIGZuIGluc3RhbmNlb2YgRnVuY3Rpb247XG59XG5leHBvcnQgY29uc3QgZG93bmxvYWRPYmplY3RBc0pzb24gPSAoZXhwb3J0T2JqOiBhbnksIGV4cG9ydE5hbWU6IHN0cmluZykgPT4ge1xuICB2YXIgZGF0YVN0ciA9IFwiZGF0YTp0ZXh0L2pzb247Y2hhcnNldD11dGYtOCxcIiArIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShleHBvcnRPYmopKTtcbiAgdmFyIGRvd25sb2FkQW5jaG9yTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgZG93bmxvYWRBbmNob3JOb2RlLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgZGF0YVN0cik7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBleHBvcnROYW1lICsgXCIuanNvblwiKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZEFuY2hvck5vZGUpOyAvLyByZXF1aXJlZCBmb3IgZmlyZWZveFxuICBkb3dubG9hZEFuY2hvck5vZGUuY2xpY2soKTtcbiAgZG93bmxvYWRBbmNob3JOb2RlLnJlbW92ZSgpO1xufVxuZXhwb3J0IGNvbnN0IHJlYWRGaWxlTG9jYWwgPSAoY2FsbGJhY2s6IGFueSkgPT4ge1xuICB2YXIgaW5wdXRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjaz8uKGZyLnJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChpbnB1dEVsICYmIGlucHV0RWwuZmlsZXMpXG4gICAgICBmci5yZWFkQXNUZXh0KGlucHV0RWwuZmlsZXNbMF0pO1xuICB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbnB1dEVsKTtcbiAgaW5wdXRFbC5jbGljaygpO1xuICBpbnB1dEVsLnJlbW92ZSgpO1xufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi9JRmxvd1wiO1xuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgVGFnVmlldyA9IFsnU1BBTicsICdESVYnLCAnUCcsICdURVhUQVJFQSddO1xuZXhwb3J0IGNsYXNzIERhdGFWaWV3IHtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHByb3BlcnR5OiBhbnk7XG4gIHByaXZhdGUgZWxTdWdnZXN0aW9uczogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFN1Z2dlc3Rpb25zQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBub2RlRWRpdG9yOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnQsIHByaXZhdGUgZGF0YTogRGF0YUZsb3csIHByaXZhdGUgbWFpbjogSU1haW4sIHByaXZhdGUga2V5TmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lKSB7XG4gICAgICBpZiAoIWVsLmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSB0aGlzLm1haW4uZ2V0UHJvcGVydHlCeUtleSh0aGlzLmRhdGEuR2V0KCdrZXknKSk/Llt0aGlzLmtleU5hbWVdO1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IgPSBlbDtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcGVydHkuZWRpdCkge1xuICAgICAgICAgIGlmICh0aGlzLnByb3BlcnR5LnNlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5lbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKFwibm9kZS1mb3JtLWNvbnRyb2xcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdub2RlOm1vZGVsJywgdGhpcy5rZXlOYW1lKTtcblxuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5rZXlOYW1lID0gZWw/LmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpO1xuICAgICAgaWYgKHRoaXMua2V5TmFtZSkge1xuICAgICAgICB0aGlzLnByb3BlcnR5ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLkdldCgna2V5JykpPy5bdGhpcy5rZXlOYW1lXTtcbiAgICAgICAgdGhpcy5lbE5vZGUgPSB0aGlzLmVsIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRoaXMubm9kZUVkaXRvci5jbGFzc0xpc3QuYWRkKCdub2RlLWVkaXRvcicpO1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50Py5pbnNlcnRCZWZvcmUodGhpcy5ub2RlRWRpdG9yLCBlbCk7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lbFN1Z2dlc3Rpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5lbFN1Z2dlc3Rpb25zLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yX3N1Z2dlc3Rpb25zJyk7XG4gICAgdGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9uc0NvbnRlbnQuY2xhc3NMaXN0LmFkZCgnc3VnZ2VzdGlvbnNfY29udGVudCcpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9ucy5hcHBlbmRDaGlsZCh0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50KTtcbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyhmYWxzZSk7XG4gICAgaWYgKHRoaXMua2V5TmFtZSlcbiAgICAgIHRoaXMuYmluZERhdGEoKTtcbiAgfVxuICBwcml2YXRlIGNoZWNrU2hvd1N1Z2dlc3Rpb25zKCkge1xuICAgIGlmICh0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50KSB7XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgdmFyIGFyciA9IHRoaXMubWFpbi5nZXRWYXJpYWJsZSgpO1xuICAgICAgaWYgKCFhcnIgfHwgYXJyLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRoaXMuc2hvd1N1Z2dlc3Rpb25zKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGVsVWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiBhcnIpIHtcbiAgICAgICAgbGV0IGVsTGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBlbExpLmlubmVySFRNTCA9IGl0ZW0uR2V0KCduYW1lJyk7XG4gICAgICAgIGVsVWwuYXBwZW5kQ2hpbGQoZWxMaSk7XG4gICAgICB9XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKGVsVWwpO1xuICAgIH1cbiAgICBsZXQgdHh0OiBhbnkgPSAodGhpcy5lbE5vZGUgYXMgYW55KS52YWx1ZTtcbiAgICBsZXQgc2VsZWN0aW9uU3RhcnQgPSAodGhpcy5lbE5vZGUgYXMgYW55KS5zZWxlY3Rpb25TdGFydDtcbiAgICBpZiAodHh0KSB7XG4gICAgICBsZXQgc3RhcnRJbmRleCA9IHR4dC5sYXN0SW5kZXhPZihcIiR7XCIsIHNlbGVjdGlvblN0YXJ0KTtcbiAgICAgIGxldCBlbmRJbmRleCA9IHR4dC5sYXN0SW5kZXhPZihcIn1cIiwgc2VsZWN0aW9uU3RhcnQpO1xuICAgICAgaWYgKGVuZEluZGV4IDwgc3RhcnRJbmRleClcbiAgICAgICAgdGhpcy5zaG93U3VnZ2VzdGlvbnModHJ1ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuc2hvd1N1Z2dlc3Rpb25zKGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBzaG93U3VnZ2VzdGlvbnMoZmxnOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGlmICghdGhpcy5lbFN1Z2dlc3Rpb25zKSByZXR1cm47XG4gICAgaWYgKGZsZykge1xuICAgICAgdGhpcy5lbFN1Z2dlc3Rpb25zLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbFN1Z2dlc3Rpb25zLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIGJpbmREYXRhKCkge1xuICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbE5vZGUpIHtcbiAgICAgIHRoaXMuZGF0YS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHt0aGlzLmtleU5hbWV9YCwgdGhpcy5iaW5kSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5lbFN1Z2dlc3Rpb25zKVxuICAgICAgICAgIHRoaXMuZWxOb2RlPy5wYXJlbnRFbGVtZW50Py5hcHBlbmRDaGlsZCh0aGlzLmVsU3VnZ2VzdGlvbnMpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5lbFN1Z2dlc3Rpb25zKVxuICAgICAgICAgIHRoaXMuZWxOb2RlPy5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZCh0aGlzLmVsU3VnZ2VzdGlvbnMpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0XCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5jaGVja1Nob3dTdWdnZXN0aW9ucygpO1xuICAgICAgfSlcbiAgICAgIGlmICh0aGlzLnByb3BlcnR5ICYmIHRoaXMucHJvcGVydHkuc2VsZWN0ICYmIGlzRnVuY3Rpb24odGhpcy5wcm9wZXJ0eS5kYXRhU2VsZWN0KSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5wcm9wZXJ0eS5kYXRhU2VsZWN0KHsgZWxOb2RlOiB0aGlzLmVsTm9kZSwgbWFpbjogdGhpcy5tYWluLCBrZXk6IHRoaXMua2V5TmFtZSB9KS5tYXAoKHsgdmFsdWUsIHRleHQgfTogYW55KSA9PiB7XG4gICAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIG9wdGlvbi50ZXh0ID0gdGV4dDtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9wZXJ0eSAmJiBpc0Z1bmN0aW9uKHRoaXMucHJvcGVydHkuc2NyaXB0KSkge1xuICAgICAgICB0aGlzLnByb3BlcnR5LnNjcmlwdCh7IGVsTm9kZTogdGhpcy5lbE5vZGUsIG1haW46IHRoaXMubWFpbiwga2V5OiB0aGlzLmtleU5hbWUgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldE5vZGVWYWx1ZSh0aGlzLmRhdGEuR2V0KHRoaXMua2V5TmFtZSkpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIHNldE5vZGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHRoaXMuZWxOb2RlKSB7XG4gICAgICBpZiAoVGFnVmlldy5pbmNsdWRlcyh0aGlzLmVsTm9kZS50YWdOYW1lKSkge1xuICAgICAgICAodGhpcy5lbE5vZGUgYXMgYW55KS5pbm5lclRleHQgPSBgJHt2YWx1ZX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKHRoaXMuZWxOb2RlIGFzIGFueSkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kSW5wdXQoeyB2YWx1ZSwgc2VuZGVyIH06IGFueSkge1xuICAgIGlmIChzZW5kZXIgIT09IHRoaXMgJiYgdGhpcy5lbE5vZGUgJiYgc2VuZGVyLmVsTm9kZSAhPT0gdGhpcy5lbE5vZGUpIHtcbiAgICAgIHRoaXMuc2V0Tm9kZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kRXZlbnQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWxOb2RlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5TZXQodGhpcy5rZXlOYW1lLCAodGhpcy5lbE5vZGUgYXMgYW55KS52YWx1ZSwgdGhpcyk7XG5cblxuICAgICAgICB0aGlzLmNoZWNrU2hvd1N1Z2dlc3Rpb25zKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIERlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWxOb2RlKSB7XG4gICAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7dGhpcy5rZXlOYW1lfWAsIHRoaXMuYmluZElucHV0LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBzdGF0aWMgQmluZEVsZW1lbnQoZWw6IEVsZW1lbnQsIGRhdGE6IERhdGFGbG93LCBtYWluOiBJTWFpbiwga2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IERhdGFWaWV3W10ge1xuICAgIGlmIChlbC5jaGlsZEVsZW1lbnRDb3VudCA9PSAwIHx8IGVsLmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRhVmlldyhlbCwgZGF0YSwgbWFpbiwga2V5KV07XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tub2RlXFxcXDptb2RlbF0nKSkubWFwKChpdGVtOiBFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IERhdGFWaWV3KGl0ZW0sIGRhdGEsIG1haW4pO1xuICAgIH0pO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IGdldFRpbWUgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X0V2ZW50IHtcblxuICBwcml2YXRlIHRpbWVGYXN0Q2xpY2s6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgdGFnSW5nb3JlID0gWydpbnB1dCcsICdidXR0b24nLCAnYScsICd0ZXh0YXJlYSddO1xuXG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZmxnTW92ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYXZfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdl95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgcG9zX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcG9zX3k6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgLyogTW91c2UgYW5kIFRvdWNoIEFjdGlvbnMgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpKTtcblxuICAgIC8qIERyb3AgRHJhcCAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5ub2RlX2Ryb3BFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5ub2RlX2RyYWdvdmVyLmJpbmQodGhpcykpO1xuICAgIC8qIFpvb20gTW91c2UgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLnpvb21fZW50ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogRGVsZXRlICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHRtZW51KGV2OiBhbnkpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfVxuICBwcml2YXRlIG5vZGVfZHJhZ292ZXIoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcm9wRW5kKGV2OiBhbnkpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGxldCBrZXlOb2RlOiBhbnkgPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xDaG9vc2UoKTtcbiAgICBpZiAoIWtleU5vZGUgJiYgZXYudHlwZSAhPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tPbmx5Tm9kZShrZXlOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9kZUl0ZW0gPSB0aGlzLnBhcmVudC5BZGROb2RlKGtleU5vZGUsIHtcbiAgICAgIGdyb3VwOiB0aGlzLnBhcmVudC5DdXJyZW50R3JvdXAoKVxuICAgIH0pO1xuICAgIG5vZGVJdGVtLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9pbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIFN0YXJ0TW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMudGFnSW5nb3JlLmluY2x1ZGVzKGV2LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGltZUZhc3RDbGljayA9IGdldFRpbWUoKTtcbiAgICBpZiAoZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWFpbi1wYXRoJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkNhbnZhcztcbiAgICBsZXQgbm9kZUNob29zZSA9IHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKTtcbiAgICBpZiAobm9kZUNob29zZSAmJiBub2RlQ2hvb3NlLkNoZWNrRWxlbWVudENoaWxkKGV2LnRhcmdldCkpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmIChub2RlQ2hvb3NlICYmIHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuTm9kZSAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5MaW5lO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBuZXcgTGluZShub2RlQ2hvb3NlLCBmcm9tSW5kZXgpO1xuICAgICAgdGhpcy50ZW1wTGluZS50ZW1wID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICB0aGlzLmF2X3ggPSB0aGlzLnBhcmVudC5nZXRYKCk7XG4gICAgICB0aGlzLmF2X3kgPSB0aGlzLnBhcmVudC5nZXRZKCk7XG4gICAgfVxuICAgIHRoaXMuZmxnRHJhcCA9IHRydWU7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHVibGljIE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgdGhpcy5mbGdNb3ZlID0gdHJ1ZTtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vdmVUeXBlKSB7XG4gICAgICBjYXNlIE1vdmVUeXBlLkNhbnZhczpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5hdl94ICsgdGhpcy5wYXJlbnQuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpXG4gICAgICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgICAgIHRoaXMucGFyZW50LnNldFkoeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTm9kZTpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5wYXJlbnQuQ2FsY1godGhpcy5wb3NfeCAtIGVfcG9zX3gpO1xuICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wb3NfeSAtIGVfcG9zX3kpO1xuICAgICAgICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgICAgICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgICAgICAgIHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKT8udXBkYXRlUG9zaXRpb24oeCwgeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTGluZTpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0aGlzLnRlbXBMaW5lKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMucGFyZW50LkNhbGNYKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wYXJlbnQuZWxDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSAtIGVfcG9zX3kpO1xuICAgICAgICAgICAgdGhpcy50ZW1wTGluZS51cGRhdGVUbyh0aGlzLnBhcmVudC5lbENhbnZhcy5vZmZzZXRMZWZ0IC0geCwgdGhpcy5wYXJlbnQuZWxDYW52YXMub2Zmc2V0VG9wIC0geSk7XG4gICAgICAgICAgICBsZXQgbm9kZUVsID0gZXYudGFyZ2V0LmNsb3Nlc3QoJ1tub2RlLWlkXScpO1xuICAgICAgICAgICAgbGV0IG5vZGVJZCA9IG5vZGVFbD8uZ2V0QXR0cmlidXRlKCdub2RlLWlkJyk7XG4gICAgICAgICAgICBsZXQgbm9kZVRvID0gbm9kZUlkID8gdGhpcy5wYXJlbnQuR2V0Tm9kZUJ5SWQobm9kZUlkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChub2RlVG8gJiYgZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm5vZGUtZG90XCIpKSB7XG4gICAgICAgICAgICAgIGxldCB0b0luZGV4ID0gZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IHRvSW5kZXggPSBub2RlRWw/LnF1ZXJ5U2VsZWN0b3IoJy5ub2RlLWRvdCcpPy5bMF0/LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICB0aGlzLm1vdXNlX3ggPSBlX3Bvc194O1xuICAgICAgdGhpcy5tb3VzZV95ID0gZV9wb3NfeTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBFbmRNb3ZlKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmxnRHJhcCkgcmV0dXJuO1xuICAgIC8vZml4IEZhc3QgQ2xpY2tcbiAgICBpZiAoKChnZXRUaW1lKCkgLSB0aGlzLnRpbWVGYXN0Q2xpY2spIDwgMTAwKSB8fCAhdGhpcy5mbGdNb3ZlKSB7XG4gICAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVfcG9zX3ggPSAwO1xuICAgIGxldCBlX3Bvc195ID0gMDtcbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBlX3Bvc194ID0gdGhpcy5tb3VzZV94O1xuICAgICAgZV9wb3NfeSA9IHRoaXMubW91c2VfeTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT09IE1vdmVUeXBlLkNhbnZhcykge1xuICAgICAgbGV0IHggPSB0aGlzLmF2X3ggKyB0aGlzLnBhcmVudC5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgIGxldCB5ID0gdGhpcy5hdl95ICsgdGhpcy5wYXJlbnQuQ2FsY1koLSh0aGlzLnBvc195IC0gZV9wb3NfeSkpXG4gICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgdGhpcy5wYXJlbnQuc2V0WSh5KTtcbiAgICAgIHRoaXMuYXZfeCA9IDA7XG4gICAgICB0aGlzLmF2X3kgPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZW1wTGluZSkge1xuICAgICAgdGhpcy50ZW1wTGluZS5DbG9uZSgpO1xuICAgICAgdGhpcy50ZW1wTGluZS5kZWxldGUoKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgIHRoaXMuZmxnTW92ZSA9IGZhbHNlO1xuICB9XG4gIHByaXZhdGUga2V5ZG93bihldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKGV2LmtleSA9PT0gJ0RlbGV0ZScgfHwgKGV2LmtleSA9PT0gJ0JhY2tzcGFjZScgJiYgZXYubWV0YUtleSkpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpPy5kZWxldGUoKTtcbiAgICAgIHRoaXMucGFyZW50LmdldExpbmVDaG9vc2UoKT8uZGVsZXRlKCk7XG4gICAgfVxuICAgIGlmIChldi5rZXkgPT09ICdGMicpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBQcm9wZXJ0eUVudW0gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgTm9kZUl0ZW0gfSBmcm9tIFwiLi9Ob2RlSXRlbVwiO1xuXG5leHBvcnQgY2xhc3MgTGluZSB7XG4gIHB1YmxpYyBlbE5vZGU6IFNWR0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJzdmdcIik7XG4gIHB1YmxpYyBlbFBhdGg6IFNWR1BhdGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIFwicGF0aFwiKTtcbiAgcHJpdmF0ZSBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xuICBwcml2YXRlIGN1cnZhdHVyZTogbnVtYmVyID0gMC41O1xuICBwdWJsaWMgdGVtcDogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGZyb206IE5vZGVJdGVtLCBwdWJsaWMgZnJvbUluZGV4OiBudW1iZXIgPSAwLCBwdWJsaWMgdG86IE5vZGVJdGVtIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBwdWJsaWMgdG9JbmRleDogbnVtYmVyID0gMCwgZGF0YTogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoXCJtYWluLXBhdGhcIik7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnJyk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcImNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFBhdGgpO1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gICAgdGhpcy5mcm9tLkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy50bz8uQWRkTGluZSh0aGlzKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLkluaXREYXRhKFxuICAgICAge1xuICAgICAgICBmcm9tOiB0aGlzLmZyb20uR2V0SWQoKSxcbiAgICAgICAgZnJvbUluZGV4OiB0aGlzLmZyb21JbmRleCxcbiAgICAgICAgdG86IHRoaXMudG8/LkdldElkKCksXG4gICAgICAgIHRvSW5kZXg6IHRoaXMudG9JbmRleFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLi4uIHRoaXMuZnJvbS5wYXJlbnQubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5saW5lKSB8fCB7fVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5mcm9tLmRhdGEuQXBwZW5kKCdsaW5lcycsIHRoaXMuZGF0YSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRvKHRvX3g6IG51bWJlciwgdG9feTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmZyb20gfHwgdGhpcy5mcm9tLmVsTm9kZSA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHsgeDogZnJvbV94LCB5OiBmcm9tX3kgfTogYW55ID0gdGhpcy5mcm9tLmdldFBvc3Rpc2lvbkRvdCh0aGlzLmZyb21JbmRleCk7XG4gICAgdmFyIGxpbmVDdXJ2ZSA9IHRoaXMuY3JlYXRlQ3VydmF0dXJlKGZyb21feCwgZnJvbV95LCB0b194LCB0b195LCB0aGlzLmN1cnZhdHVyZSwgJ290aGVyJyk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBsaW5lQ3VydmUpO1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpOiBMaW5lIHtcbiAgICAvL1Bvc3Rpb24gb3V0cHV0XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50by5lbE5vZGUpIHtcbiAgICAgIGxldCB7IHg6IHRvX3gsIHk6IHRvX3kgfTogYW55ID0gdGhpcy50by5nZXRQb3N0aXNpb25Eb3QodGhpcy50b0luZGV4KTtcbiAgICAgIHRoaXMudXBkYXRlVG8odG9feCwgdG9feSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHB1YmxpYyBBY3RpdmUoZmxnOiBhbnkgPSB0cnVlKSB7XG4gICAgaWYgKGZsZykge1xuICAgICAgdGhpcy5lbFBhdGguY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIGNyZWF0ZUN1cnZhdHVyZShzdGFydF9wb3NfeDogbnVtYmVyLCBzdGFydF9wb3NfeTogbnVtYmVyLCBlbmRfcG9zX3g6IG51bWJlciwgZW5kX3Bvc195OiBudW1iZXIsIGN1cnZhdHVyZV92YWx1ZTogbnVtYmVyLCB0eXBlOiBzdHJpbmcpIHtcbiAgICBsZXQgbGluZV94ID0gc3RhcnRfcG9zX3g7XG4gICAgbGV0IGxpbmVfeSA9IHN0YXJ0X3Bvc195O1xuICAgIGxldCB4ID0gZW5kX3Bvc194O1xuICAgIGxldCB5ID0gZW5kX3Bvc195O1xuICAgIGxldCBjdXJ2YXR1cmUgPSBjdXJ2YXR1cmVfdmFsdWU7XG4gICAgLy90eXBlIG9wZW5jbG9zZSBvcGVuIGNsb3NlIG90aGVyXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3RoZXInOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcblxuICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG5cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZGVsZXRlKG5vZGVUaGlzOiBhbnkgPSBudWxsLCBpc0NsZWFyRGF0YSA9IHRydWUpIHtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoPy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMuZnJvbS5kYXRhLlJlbW92ZSgnbGluZXMnLCB0aGlzLmRhdGEpO1xuICAgIGlmICh0aGlzLmZyb20gIT0gbm9kZVRoaXMpXG4gICAgICB0aGlzLmZyb20uUmVtb3ZlTGluZSh0aGlzKTtcbiAgICBpZiAodGhpcy50byAhPSBub2RlVGhpcylcbiAgICAgIHRoaXMudG8/LlJlbW92ZUxpbmUodGhpcyk7XG4gICAgdGhpcy5lbFBhdGgucmVtb3ZlKCk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlKCk7XG4gIH1cbiAgcHVibGljIFN0YXJ0U2VsZWN0ZWQoZTogYW55KSB7XG4gICAgdGhpcy5mcm9tLnBhcmVudC5zZXRMaW5lQ2hvb3NlKHRoaXMpXG4gIH1cbiAgcHVibGljIHNldE5vZGVUbyhub2RlOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50byA9IG5vZGU7XG4gICAgdGhpcy50b0luZGV4ID0gdG9JbmRleDtcbiAgfVxuICBwdWJsaWMgQ2xvbmUoKSB7XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50b0luZGV4ICYmIHRoaXMuZnJvbSAhPSB0aGlzLnRvICYmICF0aGlzLmZyb20uY2hlY2tMaW5lRXhpc3RzKHRoaXMuZnJvbUluZGV4LCB0aGlzLnRvLCB0aGlzLnRvSW5kZXgpKSB7XG4gICAgICByZXR1cm4gbmV3IExpbmUodGhpcy5mcm9tLCB0aGlzLmZyb21JbmRleCwgdGhpcy50bywgdGhpcy50b0luZGV4KS5VcGRhdGVVSSgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBEZXNnaW5lclZpZXdfVG9vbGJhciB7XG4gIHByaXZhdGUgZWxOb2RlOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFBhdGhHcm91cDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHJpdmF0ZSBidG5CYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgdGhpcy5lbE5vZGUgPSBwYXJlbnQuZWxUb29sYmFyO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuY2xhc3NMaXN0LmFkZCgndG9vbGJhci1ncm91cCcpO1xuICAgIHRoaXMucmVuZGVyVUkoKTtcbiAgICB0aGlzLnJlbmRlclBhdGhHcm91cCgpO1xuICB9XG4gIHB1YmxpYyByZW5kZXJQYXRoR3JvdXAoKSB7XG4gICAgdGhpcy5idG5CYWNrLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuaW5uZXJIVE1MID0gYGA7XG4gICAgbGV0IGdyb3VwcyA9IHRoaXMucGFyZW50LkdldEdyb3VwTmFtZSgpO1xuICAgIGxldCBsZW4gPSBncm91cHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGVuIDwgMCkgcmV0dXJuO1xuICAgIGZvciAobGV0IGluZGV4ID0gbGVuOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICBsZXQgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGlmIChpbmRleCA9PSAwKSB7XG4gICAgICAgIHRleHQuaW5uZXJIVE1MID0gYCR7Z3JvdXBzW2luZGV4XS50ZXh0fWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0LmlubmVySFRNTCA9IGAke2dyb3Vwc1tpbmRleF0udGV4dH0gPj4gYDtcbiAgICAgIH1cbiAgICAgIHRleHQuc2V0QXR0cmlidXRlKCdncm91cCcsIGdyb3Vwc1tpbmRleF0uaWQpO1xuICAgICAgdGV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4gdGhpcy5wYXJlbnQuQmFja0dyb3VwKGdyb3Vwc1tpbmRleF0uaWQpKTtcbiAgICAgIHRoaXMuZWxQYXRoR3JvdXAuYXBwZW5kQ2hpbGQodGV4dCk7XG4gICAgfVxuICAgIGlmIChsZW4gPiAxKVxuICAgICAgdGhpcy5idG5CYWNrLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyVUkoKSB7XG4gICAgaWYgKCF0aGlzLmVsTm9kZSkgcmV0dXJuO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBgO1xuICAgIHRoaXMuYnRuQmFjay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMucGFyZW50LkJhY2tHcm91cCgpKTtcbiAgICB0aGlzLmJ0bkJhY2suaW5uZXJIVE1MID0gYEJhY2tgO1xuICAgIGxldCBidG5ab29tSW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidG5ab29tSW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC56b29tX2luKCkpO1xuICAgIGJ0blpvb21Jbi5pbm5lckhUTUwgPSBgK2A7XG4gICAgbGV0IGJ0blpvb21PdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidG5ab29tT3V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wYXJlbnQuem9vbV9vdXQoKSk7XG4gICAgYnRuWm9vbU91dC5pbm5lckhUTUwgPSBgLWA7XG4gICAgbGV0IGJ0blpvb21SZXNldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ0blpvb21SZXNldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMucGFyZW50Lnpvb21fcmVzZXQoKSk7XG4gICAgYnRuWm9vbVJlc2V0LmlubmVySFRNTCA9IGAqYDtcbiAgICBsZXQgYnV0dG9uR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBidXR0b25Hcm91cC5jbGFzc0xpc3QuYWRkKCd0b29sYmFyLWJ1dHRvbicpXG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5idG5CYWNrKTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5ab29tSW4pO1xuICAgIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0blpvb21PdXQpO1xuICAgIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0blpvb21SZXNldCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFBhdGhHcm91cCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlRmxvdywgRXZlbnRFbnVtLCBEYXRhRmxvdywgRGF0YVZpZXcgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld1wiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5leHBvcnQgY2xhc3MgTm9kZUl0ZW0gZXh0ZW5kcyBCYXNlRmxvdzxEZXNnaW5lclZpZXc+IHtcbiAgLyoqXG4gICAqIEdFVCBTRVQgZm9yIERhdGFcbiAgICovXG4gIHB1YmxpYyBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCduYW1lJyk7XG4gIH1cbiAgcHVibGljIGdldFkoKSB7XG4gICAgcmV0dXJuICt0aGlzLmRhdGEuR2V0KCd5Jyk7XG4gIH1cbiAgcHVibGljIHNldFkodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCd5JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBnZXRYKCkge1xuICAgIHJldHVybiArdGhpcy5kYXRhLkdldCgneCcpO1xuICB9XG4gIHB1YmxpYyBzZXRYKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgneCcsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgQ2hlY2tLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgna2V5JykgPT0ga2V5O1xuICB9XG4gIHB1YmxpYyBnZXREYXRhTGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnbGluZXMnKSA/PyBbXTtcbiAgfVxuICBwdWJsaWMgY2hlY2tMaW5lRXhpc3RzKGZyb21JbmRleDogbnVtYmVyLCB0bzogTm9kZUl0ZW0sIHRvSW5kZXg6IE51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFyckxpbmUuZmlsdGVyKChpdGVtOiBMaW5lKSA9PiB7XG4gICAgICBpZiAoIWl0ZW0udGVtcCAmJiBpdGVtLnRvID09IHRvICYmIGl0ZW0udG9JbmRleCA9PSB0b0luZGV4ICYmIGl0ZW0uZnJvbUluZGV4ID09IGZyb21JbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXRlbS50ZW1wICYmIGl0ZW0uZnJvbSA9PSB0byAmJiBpdGVtLmZyb21JbmRleCA9PSB0b0luZGV4ICYmIGl0ZW0udG9JbmRleCA9PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KS5sZW5ndGggPiAwO1xuICB9XG4gIHB1YmxpYyBlbENvbnRlbnQ6IEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgYXJyTGluZTogTGluZVtdID0gW107XG4gIHByaXZhdGUgb3B0aW9uOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBhcnJEYXRhVmlldzogRGF0YVZpZXdbXSA9IFtdO1xuICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50OiBEZXNnaW5lclZpZXcsIHByaXZhdGUga2V5Tm9kZTogYW55LCBkYXRhOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xOb2RlQnlLZXkoa2V5Tm9kZSk7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5vcHRpb24/LnByb3BlcnRpZXM7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLkluaXREYXRhKHsgLi4uZGF0YSwgbmFtZTogdGhpcy5vcHRpb24ubmFtZSB9LCB0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgdGhpcy5wYXJlbnQuZGF0YS5BcHBlbmQoJ25vZGVzJywgdGhpcy5kYXRhKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLnJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLW5vZGUnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbi5jbGFzcykge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbi5jbGFzcyk7XG4gICAgfVxuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnbm9kZS1pZCcsIHRoaXMuR2V0SWQoKSk7XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5Om5vbmUnKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuICAgIHRoaXMucmVuZGVyVUkoKTtcbiAgfVxuICBwdWJsaWMgZ2V0T3B0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbjtcbiAgfVxuICBwcml2YXRlIHJlbmRlclVJKGRldGFpbDogYW55ID0gbnVsbCkge1xuICAgIGlmICgoZGV0YWlsICYmIFsneCcsICd5J10uaW5jbHVkZXMoZGV0YWlsLmtleSkpKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmVsTm9kZS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkgcmV0dXJuO1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIGlmICh0aGlzLmdldE9wdGlvbigpPy5oaWRlVGl0bGUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWxlZnRcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS10b3BcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1ib3R0b21cIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtcmlnaHRcIj48L2Rpdj5cbiAgICBgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1sZWZ0XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtdG9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj4ke3RoaXMub3B0aW9uLmljb259ICR7dGhpcy5nZXROYW1lKCl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJvZHlcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWJvdHRvbVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1yaWdodFwiPjwvZGl2PlxuICAgIGA7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkTm9kZURvdCA9IChudW06IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHN0YXJ0OiBudW1iZXIsIHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChudW0pIHtcbiAgICAgICAgbGV0IG5vZGVRdWVyeSA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xuICAgICAgICBpZiAobm9kZVF1ZXJ5KSB7XG4gICAgICAgICAgbm9kZVF1ZXJ5LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgbGV0IG5vZGVEb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG5vZGVEb3QuY2xhc3NMaXN0LmFkZCgnbm9kZS1kb3QnKTtcbiAgICAgICAgICAgIG5vZGVEb3Quc2V0QXR0cmlidXRlKCdub2RlJywgYCR7c3RhcnQgKyBpfWApO1xuICAgICAgICAgICAgbm9kZVF1ZXJ5LmFwcGVuZENoaWxkKG5vZGVEb3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmxlZnQsIDEwMDAsICcubm9kZS1sZWZ0Jyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py50b3AsIDIwMDAsICcubm9kZS10b3AnKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmJvdHRvbSwgMzAwMCwgJy5ub2RlLWJvdHRvbScpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8ucmlnaHQsIDQwMDAsICcubm9kZS1yaWdodCcpO1xuXG4gICAgdGhpcy5lbENvbnRlbnQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcubm9kZS1jb250ZW50IC5ib2R5JykgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wYXJlbnQubWFpbi5yZW5kZXJIdG1sKHRoaXMsIHRoaXMuZWxDb250ZW50KTtcbiAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgdGhpcy5hcnJEYXRhVmlldy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLkRlbGV0ZSgpKTtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzLm9wdGlvbi5zY3JpcHQpKSB7XG4gICAgICB0aGlzLm9wdGlvbi5zY3JpcHQoeyBub2RlOiB0aGlzLCBlbE5vZGU6IHRoaXMuZWxOb2RlLCBtYWluOiB0aGlzLnBhcmVudC5tYWluIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbENvbnRlbnQpXG4gICAgICB0aGlzLmFyckRhdGFWaWV3ID0gRGF0YVZpZXcuQmluZEVsZW1lbnQodGhpcy5lbENvbnRlbnQsIHRoaXMuZGF0YSwgdGhpcy5wYXJlbnQubWFpbik7XG4gIH1cbiAgcHVibGljIG9wZW5Hcm91cCgpIHtcbiAgICBpZiAodGhpcy5DaGVja0tleSgnbm9kZV9ncm91cCcpKSB7XG4gICAgICB0aGlzLnBhcmVudC5vcGVuR3JvdXAodGhpcy5HZXRJZCgpKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHVwZGF0ZVBvc2l0aW9uKHg6IGFueSwgeTogYW55LCBpQ2hlY2sgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmVsTm9kZSkge1xuICAgICAgbGV0IHRlbXB4ID0geDtcbiAgICAgIGxldCB0ZW1weSA9IHk7XG4gICAgICBpZiAoIWlDaGVjaykge1xuICAgICAgICB0ZW1weSA9ICh0aGlzLmVsTm9kZS5vZmZzZXRUb3AgLSB5KTtcbiAgICAgICAgdGVtcHggPSAodGhpcy5lbE5vZGUub2Zmc2V0TGVmdCAtIHgpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXB4ICE9PSB0aGlzLmdldFgoKSkge1xuICAgICAgICB0aGlzLnNldFgodGVtcHgpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXB5ICE9PSB0aGlzLmdldFkoKSkge1xuICAgICAgICB0aGlzLnNldFkodGVtcHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwdWJsaWMgQWN0aXZlKGZsZzogYW55ID0gdHJ1ZSkge1xuICAgIGlmIChmbGcpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIFJlbW92ZUxpbmUobGluZTogTGluZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuYXJyTGluZS5pbmRleE9mKGxpbmUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLmFyckxpbmUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXJyTGluZTtcbiAgfVxuICBwdWJsaWMgQWRkTGluZShsaW5lOiBMaW5lKSB7XG4gICAgdGhpcy5hcnJMaW5lID0gWy4uLnRoaXMuYXJyTGluZSwgbGluZV07XG4gIH1cbiAgcHVibGljIGdldFBvc3Rpc2lvbkRvdChpbmRleDogbnVtYmVyID0gMCkge1xuICAgIGxldCBlbERvdDogYW55ID0gdGhpcy5lbE5vZGU/LnF1ZXJ5U2VsZWN0b3IoYC5ub2RlLWRvdFtub2RlPVwiJHtpbmRleH1cIl1gKTtcbiAgICBpZiAoZWxEb3QpIHtcbiAgICAgIGxldCB5ID0gKHRoaXMuZWxOb2RlLm9mZnNldFRvcCArIGVsRG90Lm9mZnNldFRvcCArIDEwKTtcbiAgICAgIGxldCB4ID0gKHRoaXMuZWxOb2RlLm9mZnNldExlZnQgKyBlbERvdC5vZmZzZXRMZWZ0ICsgMTApO1xuICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgcHVibGljIFVwZGF0ZVVJKCkge1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgdG9wOiAke3RoaXMuZ2V0WSgpfXB4OyBsZWZ0OiAke3RoaXMuZ2V0WCgpfXB4O2ApO1xuICAgIHRoaXMuYXJyTGluZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLlVwZGF0ZVVJKCk7XG4gICAgfSlcbiAgfVxuICBwdWJsaWMgZGVsZXRlKGlzQ2xlYXJEYXRhID0gdHJ1ZSkge1xuICAgIHRoaXMuYXJyTGluZS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmRlbGV0ZSh0aGlzLCBpc0NsZWFyRGF0YSkpO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMuZGF0YS5kZWxldGUoKTtcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5yZW5kZXJVSS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuUmVtb3ZlRGF0YUV2ZW50KCk7XG4gICAgfVxuICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmUoKTtcbiAgICB0aGlzLmFyckxpbmUgPSBbXTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLnBhcmVudC5SZW1vdmVOb2RlKHRoaXMpO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge30pO1xuICB9XG4gIHB1YmxpYyBSZW5kZXJMaW5lKCkge1xuICAgIHRoaXMuZ2V0RGF0YUxpbmUoKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdykgPT4ge1xuICAgICAgbGV0IG5vZGVGcm9tID0gdGhpcztcbiAgICAgIGxldCBub2RlVG8gPSB0aGlzLnBhcmVudC5HZXROb2RlQnlJZChpdGVtLkdldCgndG8nKSk7XG4gICAgICBsZXQgdG9JbmRleCA9IGl0ZW0uR2V0KCd0b0luZGV4Jyk7XG4gICAgICBsZXQgZnJvbUluZGV4ID0gaXRlbS5HZXQoJ2Zyb21JbmRleCcpO1xuICAgICAgbmV3IExpbmUobm9kZUZyb20sIGZyb21JbmRleCwgbm9kZVRvLCB0b0luZGV4LCBpdGVtKS5VcGRhdGVVSSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhRmxvdywgRmxvd0NvcmUsIElNYWluLCBFdmVudEVudW0sIFByb3BlcnR5RW51bSwgU2NvcGVSb290IH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlld19FdmVudCB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld19FdmVudFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3X1Rvb2xiYXIgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdfVG9vbGJhclwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4vTm9kZUl0ZW1cIjtcblxuZXhwb3J0IGNvbnN0IFpvb20gPSB7XG4gIG1heDogMS42LFxuICBtaW46IDAuNixcbiAgdmFsdWU6IDAuMSxcbiAgZGVmYXVsdDogMVxufVxuZXhwb3J0IGNsYXNzIERlc2dpbmVyVmlldyBleHRlbmRzIEZsb3dDb3JlIHtcblxuICAvKipcbiAgICogR0VUIFNFVCBmb3IgRGF0YVxuICAgKi9cbiAgcHVibGljIGdldFpvb20oKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgnem9vbScpO1xuICB9XG4gIHB1YmxpYyBzZXRab29tKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3pvb20nLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFkoKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgneScpO1xuICB9XG4gIHB1YmxpYyBzZXRZKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3knLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFgoKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgneCcpO1xuICB9XG4gIHB1YmxpYyBzZXRYKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3gnLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHJpdmF0ZSBncm91cERhdGE6IERhdGFGbG93IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGxhc3RHcm91cE5hbWU6IHN0cmluZyA9IFwiXCI7XG4gIHByaXZhdGUgZ2V0RGF0YUdyb3VwKCk6IERhdGFGbG93IHtcbiAgICBpZiAodGhpcy4kbG9jaykgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAvLyBjYWNoZSBncm91cERhdGFcbiAgICBpZiAodGhpcy5sYXN0R3JvdXBOYW1lID09PSB0aGlzLkN1cnJlbnRHcm91cCgpKSByZXR1cm4gdGhpcy5ncm91cERhdGEgPz8gdGhpcy5kYXRhO1xuICAgIHRoaXMubGFzdEdyb3VwTmFtZSA9IHRoaXMuQ3VycmVudEdyb3VwKCk7XG4gICAgbGV0IGdyb3VwcyA9IHRoaXMuZGF0YS5HZXQoJ2dyb3VwcycpO1xuICAgIHRoaXMuZ3JvdXBEYXRhID0gZ3JvdXBzPy5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldCgnZ3JvdXAnKSA9PSB0aGlzLmxhc3RHcm91cE5hbWUpPy5bMF07XG4gICAgaWYgKCF0aGlzLmdyb3VwRGF0YSkge1xuICAgICAgdGhpcy5ncm91cERhdGEgPSBuZXcgRGF0YUZsb3codGhpcy5tYWluLCB7XG4gICAgICAgIGtleTogUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXMsXG4gICAgICAgIGdyb3VwOiB0aGlzLmxhc3RHcm91cE5hbWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhLkFwcGVuZCgnZ3JvdXBzJywgdGhpcy5ncm91cERhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgfVxuICAgIGxldCBkYXRhR3JvdXAgPSB0aGlzLkdldERhdGFCeUlkKHRoaXMubGFzdEdyb3VwTmFtZSk7XG4gICAgaWYgKGRhdGFHcm91cCkge1xuICAgICAgZGF0YUdyb3VwLm9uU2FmZShFdmVudEVudW0uZGF0YUNoYW5nZSwgKCkgPT4ge1xuICAgICAgICB0aGlzLlVwZGF0ZVVJLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBEYXRhO1xuICB9XG4gIHByaXZhdGUgZ3JvdXA6IGFueVtdID0gW107XG4gIHB1YmxpYyBHZXRHcm91cE5hbWUoKTogYW55W10ge1xuICAgIHJldHVybiBbLi4udGhpcy5ncm91cC5tYXAoKGl0ZW0pID0+ICh7IGlkOiBpdGVtLCB0ZXh0OiB0aGlzLkdldERhdGFCeUlkKGl0ZW0pPy5HZXQoJ25hbWUnKSB9KSksIHsgaWQ6IFNjb3BlUm9vdCwgdGV4dDogU2NvcGVSb290IH1dO1xuICB9XG4gIHB1YmxpYyBCYWNrR3JvdXAoaWQ6IGFueSA9IG51bGwpIHtcbiAgICBsZXQgaW5kZXggPSAxO1xuICAgIGlmIChpZCkge1xuICAgICAgaW5kZXggPSB0aGlzLmdyb3VwLmluZGV4T2YoaWQpO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAoaW5kZXgpXG4gICAgICB0aGlzLmdyb3VwLnNwbGljZSgwLCBpbmRleCk7XG4gICAgZWxzZSB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgQ3VycmVudEdyb3VwKCkge1xuICAgIGxldCBuYW1lID0gdGhpcy5ncm91cD8uWzBdO1xuICAgIGlmIChuYW1lICYmIG5hbWUgIT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvb3QnO1xuICB9XG5cbiAgcHVibGljIEN1cnJlbnRHcm91cERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5DdXJyZW50R3JvdXAoKSkgPz8gdGhpcy5kYXRhO1xuICB9XG4gIHB1YmxpYyBjaGFuZ2VHcm91cCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uZ3JvdXBDaGFuZ2UsIHtcbiAgICAgICAgZ3JvdXA6IHRoaXMuR2V0R3JvdXBOYW1lKClcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKGlkOiBhbnkpIHtcbiAgICB0aGlzLmdyb3VwID0gW2lkLCAuLi50aGlzLmdyb3VwXTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgdGhpcy5jaGFuZ2VHcm91cCgpOztcbiAgfVxuICBwcml2YXRlIGxpbmVDaG9vc2U6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBzZXRMaW5lQ2hvb3NlKG5vZGU6IExpbmUgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saW5lQ2hvb3NlKSB0aGlzLmxpbmVDaG9vc2UuQWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLmxpbmVDaG9vc2UgPSBub2RlO1xuICAgIGlmICh0aGlzLmxpbmVDaG9vc2UpIHtcbiAgICAgIHRoaXMubGluZUNob29zZS5BY3RpdmUoKTtcbiAgICAgIHRoaXMuc2V0Tm9kZUNob29zZSh1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0TGluZUNob29zZSgpOiBMaW5lIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5saW5lQ2hvb3NlO1xuICB9XG4gIHByaXZhdGUgbm9kZXM6IE5vZGVJdGVtW10gPSBbXTtcbiAgcHJpdmF0ZSBub2RlQ2hvb3NlOiBOb2RlSXRlbSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHNldE5vZGVDaG9vc2Uobm9kZTogTm9kZUl0ZW0gfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ub2RlQ2hvb3NlKSB0aGlzLm5vZGVDaG9vc2UuQWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLm5vZGVDaG9vc2UgPSBub2RlO1xuICAgIGlmICh0aGlzLm5vZGVDaG9vc2UpIHtcbiAgICAgIHRoaXMubm9kZUNob29zZS5BY3RpdmUoKTtcbiAgICAgIHRoaXMuc2V0TGluZUNob29zZSh1bmRlZmluZWQpO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc2hvd1Byb3BlcnR5LCB7IGRhdGE6IHRoaXMubm9kZUNob29zZS5kYXRhIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHsgZGF0YTogdGhpcy5DdXJyZW50R3JvdXBEYXRhKCkgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXROb2RlQ2hvb3NlKCk6IE5vZGVJdGVtIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQ2hvb3NlO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlSXRlbShkYXRhOiBhbnkpOiBOb2RlSXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuQWRkTm9kZShkYXRhLkdldCgna2V5JyksIGRhdGEpO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlKGtleU5vZGU6IHN0cmluZywgZGF0YTogYW55ID0ge30pOiBOb2RlSXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuSW5zZXJ0Tm9kZShuZXcgTm9kZUl0ZW0odGhpcywga2V5Tm9kZSwgZGF0YSkpO1xuICB9XG4gIHB1YmxpYyBJbnNlcnROb2RlKG5vZGU6IE5vZGVJdGVtKTogTm9kZUl0ZW0ge1xuICAgIHRoaXMubm9kZXMgPSBbLi4udGhpcy5ub2Rlcywgbm9kZV07XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcHVibGljIFJlbW92ZU5vZGUobm9kZTogTm9kZUl0ZW0pIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLm5vZGVzLmluZGV4T2Yobm9kZSk7XG4gICAgdGhpcy5kYXRhLlJlbW92ZSgnbm9kZXMnLCBub2RlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5ub2Rlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ub2RlcztcbiAgfVxuICBwdWJsaWMgQ2xlYXJOb2RlKCkge1xuICAgIHRoaXMubm9kZXM/LmZvckVhY2goaXRlbSA9PiBpdGVtLmRlbGV0ZShmYWxzZSkpO1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgfVxuICBwdWJsaWMgR2V0RGF0YUFsbE5vZGUoKTogYW55W10ge1xuICAgIHJldHVybiAodGhpcy5kYXRhPy5HZXQoJ25vZGVzJykgPz8gW10pO1xuICB9XG4gIHB1YmxpYyBHZXREYXRhTm9kZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUFsbE5vZGUoKS5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldChcImdyb3VwXCIpID09PSB0aGlzLkN1cnJlbnRHcm91cCgpKTtcbiAgfVxuICAvKipcbiAgICogVmFyaWJ1dGVcbiAgKi9cbiAgcHVibGljIGVsQ2FudmFzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwdWJsaWMgZWxUb29sYmFyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwdWJsaWMgdG9vbGJhcjogRGVzZ2luZXJWaWV3X1Rvb2xiYXI7XG4gIHB1YmxpYyAkbG9jazogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgem9vbV9sYXN0X3ZhbHVlOiBhbnkgPSAxO1xuICBwdWJsaWMgY29uc3RydWN0b3IoZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsTm9kZSA9IGVsTm9kZTtcbiAgICBsZXQgcHJvcGVydGllczogYW55ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pO1xuICAgIHRoaXMuZGF0YS5Jbml0RGF0YSh7fSwgcHJvcGVydGllcyk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnZGVzZ2luZXItdmlldycpXG4gICAgdGhpcy5lbENhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKFwiZGVzZ2luZXItY2FudmFzXCIpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsVG9vbGJhci5jbGFzc0xpc3QuYWRkKFwiZGVzZ2luZXItdG9vbGJhclwiKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsQ2FudmFzKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsVG9vbGJhcik7XG4gICAgdGhpcy5lbE5vZGUudGFiSW5kZXggPSAwO1xuICAgIG5ldyBEZXNnaW5lclZpZXdfRXZlbnQodGhpcyk7XG4gICAgdGhpcy50b29sYmFyID0gbmV3IERlc2dpbmVyVmlld19Ub29sYmFyKHRoaXMpO1xuICAgIHRoaXMub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMuUmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGF0YTogYW55KSA9PiB7IG1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgZGF0YSk7IH0pO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuT3BlbihpdGVtLmRhdGEpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWaWV3KHg6IGFueSwgeTogYW55LCB6b29tOiBhbnkpIHtcbiAgICB0aGlzLmVsQ2FudmFzLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7em9vbX0pYDtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKSB7XG4gICAgdGhpcy51cGRhdGVWaWV3KHRoaXMuZ2V0WCgpLCB0aGlzLmdldFkoKSwgdGhpcy5nZXRab29tKCkpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXJVSShkZXRhaWw6IGFueSA9IHt9KSB7XG4gICAgaWYgKGRldGFpbC5zZW5kZXIgJiYgZGV0YWlsLnNlbmRlciBpbnN0YW5jZW9mIE5vZGVJdGVtKSByZXR1cm47XG4gICAgaWYgKGRldGFpbC5zZW5kZXIgJiYgZGV0YWlsLnNlbmRlciBpbnN0YW5jZW9mIERlc2dpbmVyVmlldykge1xuICAgICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLkNsZWFyTm9kZSgpO1xuICAgIHRoaXMuR2V0RGF0YU5vZGUoKS5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuQWRkTm9kZUl0ZW0oaXRlbSk7XG4gICAgfSk7XG4gICAgdGhpcy5HZXRBbGxOb2RlKCkuZm9yRWFjaCgoaXRlbTogTm9kZUl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uUmVuZGVyTGluZSgpO1xuICAgIH0pXG4gICAgdGhpcy5VcGRhdGVVSSgpO1xuICB9XG4gIHB1YmxpYyBPcGVuKCRkYXRhOiBEYXRhRmxvdykge1xuICAgIGlmICgkZGF0YSA9PSB0aGlzLmRhdGEpIHtcbiAgICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhPy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgKGRldGFpbDogYW55KSA9PiB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCBkZXRhaWwpKTtcbiAgICB0aGlzLmRhdGEgPSAkZGF0YTtcbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIChkZXRhaWw6IGFueSkgPT4gdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgZGV0YWlsKSk7XG4gICAgdGhpcy4kbG9jayA9IGZhbHNlO1xuICAgIHRoaXMubGFzdEdyb3VwTmFtZSA9ICcnO1xuICAgIHRoaXMuZ3JvdXBEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3JvdXAgPSBbXTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgdGhpcy5jaGFuZ2VHcm91cCgpO1xuICB9XG4gIHB1YmxpYyBDYWxjWChudW1iZXI6IGFueSkge1xuICAgIHJldHVybiBudW1iZXIgKiAodGhpcy5lbENhbnZhcy5jbGllbnRXaWR0aCAvICh0aGlzLmVsTm9kZT8uY2xpZW50V2lkdGggKiB0aGlzLmdldFpvb20oKSkpO1xuICB9XG4gIHB1YmxpYyBDYWxjWShudW1iZXI6IGFueSkge1xuICAgIHJldHVybiBudW1iZXIgKiAodGhpcy5lbENhbnZhcy5jbGllbnRIZWlnaHQgLyAodGhpcy5lbE5vZGU/LmNsaWVudEhlaWdodCAqIHRoaXMuZ2V0Wm9vbSgpKSk7XG4gIH1cbiAgcHVibGljIEdldEFsbE5vZGUoKTogTm9kZUl0ZW1bXSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMgfHwgW107XG4gIH1cbiAgcHVibGljIEdldE5vZGVCeUlkKGlkOiBzdHJpbmcpOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuR2V0QWxsTm9kZSgpLmZpbHRlcihub2RlID0+IG5vZGUuR2V0SWQoKSA9PSBpZCk/LlswXTtcbiAgfVxuXG4gIHB1YmxpYyBHZXREYXRhQnlJZChpZDogc3RyaW5nKTogRGF0YUZsb3cgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5HZXREYXRhQWxsTm9kZSgpLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5HZXQoJ2lkJykgPT09IGlkKT8uWzBdO1xuICB9XG4gIGNoZWNrT25seU5vZGUoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHRoaXMubWFpbi5nZXRDb250cm9sQnlLZXkoa2V5KS5vbmx5Tm9kZUl0ZW0pICYmIHRoaXMubm9kZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5DaGVja0tleShrZXkpKS5sZW5ndGggPiAwO1xuICB9XG4gIHB1YmxpYyB6b29tX3JlZnJlc2goZmxnOiBhbnkgPSAwKSB7XG4gICAgbGV0IHRlbXBfem9vbSA9IGZsZyA9PSAwID8gWm9vbS5kZWZhdWx0IDogKHRoaXMuZ2V0Wm9vbSgpICsgWm9vbS52YWx1ZSAqIGZsZyk7XG4gICAgaWYgKFpvb20ubWF4ID49IHRlbXBfem9vbSAmJiB0ZW1wX3pvb20gPj0gWm9vbS5taW4pIHtcbiAgICAgIHRoaXMuc2V0WCgodGhpcy5nZXRYKCkgLyB0aGlzLnpvb21fbGFzdF92YWx1ZSkgKiB0ZW1wX3pvb20pO1xuICAgICAgdGhpcy5zZXRZKCh0aGlzLmdldFkoKSAvIHRoaXMuem9vbV9sYXN0X3ZhbHVlKSAqIHRlbXBfem9vbSk7XG4gICAgICB0aGlzLnpvb21fbGFzdF92YWx1ZSA9IHRlbXBfem9vbTtcbiAgICAgIHRoaXMuc2V0Wm9vbSh0aGlzLnpvb21fbGFzdF92YWx1ZSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB6b29tX2luKCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKDEpO1xuICB9XG4gIHB1YmxpYyB6b29tX291dCgpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgtMSk7XG4gIH1cbiAgcHVibGljIHpvb21fcmVzZXQoKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goMCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBFdmVudEVudW0sIElNYWluLCBTY29wZVJvb3QgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgVmFyaWFibGVWaWV3IHtcbiAgcHJpdmF0ZSB2YXJpYWJsZXM6IERhdGFGbG93W10gfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdmFyaWFibGUnKTtcbiAgICB0aGlzLm1haW4ub25TYWZlKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgKHsgZGF0YSB9OiBhbnkpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uU2FmZShFdmVudEVudW0ub3BlblByb2plY3QsICgpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uU2FmZShFdmVudEVudW0uZ3JvdXBDaGFuZ2UsICgpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSlcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgdGhpcy52YXJpYWJsZXMgPSB0aGlzLm1haW4uZ2V0VmFyaWFibGUoKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8dGFibGUgYm9yZGVyPVwiMVwiPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtbmFtZVwiPk5hbWU8L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtdHlwZVwiPlR5cGU8L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtc2NvcGVcIj5TY29wZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1kZWZhdWx0XCI+RGVmYXVsdDwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1idXR0b25cIj48L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgYDtcbiAgICBpZiAodGhpcy52YXJpYWJsZXMpIHtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy52YXJpYWJsZXMpIHtcbiAgICAgICAgbmV3IFZhcmlhYmxlSXRlbShpdGVtLCB0aGlzKS5SZW5kZXJTY29wZSh0aGlzLm1haW4uZ2V0R3JvdXBDdXJyZW50KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY2xhc3MgVmFyaWFibGVJdGVtIHtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgcHJpdmF0ZSBuYW1lSW5wdXQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgcHJpdmF0ZSB0eXBlSW5wdXQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gIHByaXZhdGUgc2NvcGVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpdmF0ZSB2YWx1ZURlZmF1bHRJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSB2YXJpYWJsZTogRGF0YUZsb3csIHByaXZhdGUgcGFyZW50OiBWYXJpYWJsZVZpZXcpIHtcbiAgICAodGhpcy5uYW1lSW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUuR2V0KCduYW1lJyk7XG4gICAgKHRoaXMudmFsdWVEZWZhdWx0SW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUuR2V0KCdpbml0YWxWYWx1ZScpID8/ICcnO1xuICAgICh0aGlzLnR5cGVJbnB1dCBhcyBhbnkpLnZhbHVlID0gdGhpcy52YXJpYWJsZS5HZXQoJ3R5cGUnKSA/PyAnJztcbiAgICBmb3IgKGxldCBpdGVtIG9mIFsndGV4dCcsICdudW1iZXInLCAnZGF0ZScsICdvYmplY3QnXSkge1xuICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgb3B0aW9uLnRleHQgPSBpdGVtO1xuICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbTtcbiAgICAgIHRoaXMudHlwZUlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuICAgIGxldCBuYW1lQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBuYW1lQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMubmFtZUlucHV0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChuYW1lQ29sdW1uKTtcbiAgICB0aGlzLm5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ25hbWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5uYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ25hbWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBsZXQgdHlwZUNvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdHlwZUNvbHVtbi5hcHBlbmRDaGlsZCh0aGlzLnR5cGVJbnB1dCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodHlwZUNvbHVtbik7XG4gICAgdGhpcy50eXBlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ3R5cGUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgbGV0IHNjb3BlQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBzY29wZUNvbHVtbi5hcHBlbmRDaGlsZCh0aGlzLnNjb3BlSW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHNjb3BlQ29sdW1uKTtcblxuXG4gICAgbGV0IHZhbHVlRGVmYXVsdENvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdmFsdWVEZWZhdWx0Q29sdW1uLmFwcGVuZENoaWxkKHRoaXMudmFsdWVEZWZhdWx0SW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHZhbHVlRGVmYXVsdENvbHVtbik7XG4gICAgdGhpcy52YWx1ZURlZmF1bHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnaW5pdGFsVmFsdWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy52YWx1ZURlZmF1bHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ2luaXRhbFZhbHVlJywgZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgbGV0IGJ1dHRvblJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ1dHRvblJlbW92ZS5pbm5lckhUTUwgPSBgLWA7XG4gICAgYnV0dG9uUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgcGFyZW50Lm1haW4ucmVtb3ZlVmFyaWFibGUodmFyaWFibGUpO1xuICAgIH0pO1xuICAgIGxldCBidXR0b25SZW1vdmVDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGJ1dHRvblJlbW92ZUNvbHVtbi5hcHBlbmRDaGlsZChidXR0b25SZW1vdmUpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKGJ1dHRvblJlbW92ZUNvbHVtbik7XG5cbiAgICBwYXJlbnQuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlIHRib2R5Jyk/LmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcblxuICB9XG4gIFJlbmRlclNjb3BlKGdyb3VwOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5zY29wZUlucHV0LmlubmVySFRNTCA9ICcnO1xuICAgIGlmIChncm91cCkge1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiBncm91cCkge1xuICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIG9wdGlvbi50ZXh0ID0gaXRlbS50ZXh0O1xuICAgICAgICBvcHRpb24udmFsdWUgPSBpdGVtLmlkO1xuICAgICAgICB0aGlzLnNjb3BlSW5wdXQucHJlcGVuZChvcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICAodGhpcy5zY29wZUlucHV0IGFzIGFueSkudmFsdWUgPSB0aGlzLnZhcmlhYmxlLkdldCgnc2NvcGUnKTtcbiAgICB0aGlzLnNjb3BlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ3Njb3BlJywgZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBUb29sYm94VmlldyB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdG9vbGJveGYnKTtcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgbGV0IGNvbnRyb2xzID0gdGhpcy5tYWluLmdldENvbnRyb2xBbGwoKTtcbiAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBsZXQgbm9kZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ25vZGUtaXRlbScpO1xuICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnLCBpdGVtKTtcbiAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2NvbnRyb2xzW2l0ZW1dLmljb259IDxzcGFuPiR7Y29udHJvbHNbaXRlbV0ubmFtZX08L3NwYW5gO1xuICAgICAgbm9kZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5kcmFnU3RhcnQuYmluZCh0aGlzKSlcbiAgICAgIG5vZGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLmRyYWdlbmQuYmluZCh0aGlzKSlcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcbiAgICB9KTtcbiAgfVxuICBwcml2YXRlIGRyYWdlbmQoZTogYW55KSB7XG4gICAgdGhpcy5tYWluLnNldENvbnRyb2xDaG9vc2UobnVsbCk7XG4gIH1cblxuICBwcml2YXRlIGRyYWdTdGFydChlOiBhbnkpIHtcbiAgICBsZXQga2V5ID0gZS50YXJnZXQuY2xvc2VzdChcIi5ub2RlLWl0ZW1cIikuZ2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnKTtcbiAgICB0aGlzLm1haW4uc2V0Q29udHJvbENob29zZShrZXkpO1xuICAgIGlmIChlLnR5cGUgIT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwibm9kZVwiLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtLCBJTWFpbiwgRGF0YUZsb3cgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdFZpZXcge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb2plY3QnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLmNoYW5nZVZhcmlhYmxlLCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyKCkge1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBgO1xuICAgIGxldCBwcm9qZWN0cyA9IHRoaXMubWFpbi5nZXRQcm9qZWN0QWxsKCk7XG4gICAgcHJvamVjdHMuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnbm9kZS1pdGVtJyk7XG4gICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcbiAgICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9X25hbWVgLCAoKSA9PiB7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIH0pO1xuICAgICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tYWluLmNoZWNrUHJvamVjdE9wZW4oaXRlbSkpIHtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLnNldFByb2plY3RPcGVuKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsTm9kZT8uYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJvdGVjdGVkIGVsQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICdEb2NrQmFzZSc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgQm94SW5mbyh0aXRsZTogc3RyaW5nLCAkY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX2hlYWRlclwiPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb190aXRsZVwiPiR7dGl0bGV9PC9zcGFuPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb19idXR0b25cIj48L3NwYW4+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb19jb250ZW50XCI+PC9kaXY+YDtcclxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9fY29udGVudCcpO1xyXG4gICAgaWYgKCRjYWxsYmFjaykge1xyXG4gICAgICAkY2FsbGJhY2sodGhpcy5lbENvbnRlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBUb29sYm94VmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbERvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLWNvbnRyb2wnKTtcbiAgICB0aGlzLkJveEluZm8oJ0NvbnRyb2wnLCAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIG5ldyBUb29sYm94Vmlldyhub2RlLCB0aGlzLm1haW4pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiwgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBWYXJpYWJsZVZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlRG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdmFyaWFibGUnKTtcbiAgICB0aGlzLkJveEluZm8oJ1ZhcmlhYmxlJywgKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBuZXcgVmFyaWFibGVWaWV3KG5vZGUsIG1haW4pO1xuICAgIH0pO1xuICAgIGxldCAkbm9kZVJpZ2h0OiBIVE1MRWxlbWVudCB8IG51bGwgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudnMtYm94aW5mb19oZWFkZXIgLnZzLWJveGluZm9fYnV0dG9uJyk7XG4gICAgaWYgKCRub2RlUmlnaHQpIHtcbiAgICAgICRub2RlUmlnaHQuaW5uZXJIVE1MID0gYGA7XG4gICAgICBsZXQgYnV0dG9uTmV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25OZXcpO1xuICAgICAgYnV0dG9uTmV3LmlubmVySFRNTCA9IGBOZXcgVmFyaWFibGVgO1xuICAgICAgYnV0dG9uTmV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLm1haW4ubmV3VmFyaWFibGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIEV2ZW50RW51bSwgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgZG93bmxvYWRPYmplY3RBc0pzb24sIGdldFRpbWUsIHJlYWRGaWxlTG9jYWwgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgUHJvamVjdFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvUHJvamVjdFZpZXdcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3REb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1wcm9qZWN0Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9qZWN0JywgKGVsQ29udGVudDogYW55KSA9PiB7XG4gICAgICBuZXcgUHJvamVjdFZpZXcoZWxDb250ZW50LCBtYWluKTtcbiAgICB9KTtcbiAgICBsZXQgJG5vZGVSaWdodDogSFRNTEVsZW1lbnQgfCBudWxsID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9faGVhZGVyIC52cy1ib3hpbmZvX2J1dHRvbicpO1xuICAgIGlmICgkbm9kZVJpZ2h0KSB7XG4gICAgICAkbm9kZVJpZ2h0LmlubmVySFRNTCA9IGBgO1xuICAgICAgbGV0IGJ1dHRvbk5ldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uTmV3LmlubmVySFRNTCA9IGBOZXdgO1xuICAgICAgYnV0dG9uTmV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5tYWluLm5ld1Byb2plY3QoJycpKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbk5ldyk7XG5cbiAgICAgIGxldCBidXR0b25FeHBvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbkV4cG9ydC5pbm5lckhUTUwgPSBgRXhwb3J0YDtcbiAgICAgIGJ1dHRvbkV4cG9ydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRvd25sb2FkT2JqZWN0QXNKc29uKHRoaXMubWFpbi5leHBvcnRKc29uKCksIGB2cy1zb2x1dGlvbi0ke2dldFRpbWUoKX1gKSk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25FeHBvcnQpO1xuXG4gICAgICBsZXQgYnV0dG9uSW1wb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b25JbXBvcnQuaW5uZXJIVE1MID0gYEltcG9ydGA7XG4gICAgICBidXR0b25JbXBvcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHJlYWRGaWxlTG9jYWwoKHJzOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAocnMpIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5pbXBvcnRKc29uKEpTT04ucGFyc2UocnMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25JbXBvcnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YVZpZXcsIERhdGFGbG93LCBFdmVudEVudW0sIElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcclxuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb3BlcnR5RG9jayBleHRlbmRzIERvY2tCYXNlIHtcclxuICBwcml2YXRlIGxhc3REYXRhOiBEYXRhRmxvdyB8IHVuZGVmaW5lZDtcclxuICBwcml2YXRlIGhpZGVLZXlzOiBzdHJpbmdbXSA9IFsnbGluZXMnLCAnbm9kZXMnLCAnZ3JvdXBzJywgJ3ZhcmlhYmxlJywgJ3gnLCAneScsICd6b29tJ107XHJcbiAgcHJpdmF0ZSBzb3J0S2V5czogc3RyaW5nW10gPSBbJ2lkJywgJ2tleScsICduYW1lJywgJ2dyb3VwJ107XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xyXG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcclxuXHJcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1wcm9wZXJ0eScpO1xyXG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9wZXJ0eScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gICAgICBtYWluLm9uKEV2ZW50RW51bS5zaG93UHJvcGVydHksIChkZXRhaWw6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyVUkobm9kZSwgZGV0YWlsLmRhdGEpO1xyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlclVJKG5vZGU6IEhUTUxFbGVtZW50LCBkYXRhOiBEYXRhRmxvdykge1xyXG4gICAgaWYgKHRoaXMubGFzdERhdGEgPT0gZGF0YSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmxhc3REYXRhID0gZGF0YTtcclxuICAgIG5vZGUuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBsZXQgcHJvcGVydGllczogYW55ID0gZGF0YS5nZXRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLnNvcnRLZXlzLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmhpZGVLZXlzLmluY2x1ZGVzKGtleSkgfHwgIXByb3BlcnRpZXNba2V5XSkgcmV0dXJuO1xyXG4gICAgICBsZXQgcHJvcGVydHlJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1pdGVtJyk7XHJcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5TGFiZWwuY2xhc3NMaXN0LmFkZCgncHJvcGVydHktbGFiZWwnKTtcclxuICAgICAgcHJvcGVydHlMYWJlbC5pbm5lckhUTUwgPSBrZXk7XHJcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5VmFsdWUuY2xhc3NMaXN0LmFkZCgncHJvcGVydHktdmFsdWUnKTtcclxuICAgICAgRGF0YVZpZXcuQmluZEVsZW1lbnQocHJvcGVydHlWYWx1ZSwgZGF0YSwgdGhpcy5tYWluLCBrZXkpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgbm9kZS5hcHBlbmRDaGlsZChwcm9wZXJ0eUl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAodGhpcy5oaWRlS2V5cy5pbmNsdWRlcyhrZXkpIHx8IHRoaXMuc29ydEtleXMuaW5jbHVkZXMoa2V5KSkgcmV0dXJuO1xyXG4gICAgICBsZXQgcHJvcGVydHlJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1pdGVtJyk7XHJcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5TGFiZWwuY2xhc3NMaXN0LmFkZCgncHJvcGVydHktbGFiZWwnKTtcclxuICAgICAgcHJvcGVydHlMYWJlbC5pbm5lckhUTUwgPSBrZXk7XHJcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHByb3BlcnR5VmFsdWUuY2xhc3NMaXN0LmFkZCgncHJvcGVydHktdmFsdWUnKTtcclxuICAgICAgRGF0YVZpZXcuQmluZEVsZW1lbnQocHJvcGVydHlWYWx1ZSwgZGF0YSwgdGhpcy5tYWluLCBrZXkpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgbm9kZS5hcHBlbmRDaGlsZChwcm9wZXJ0eUl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEV2ZW50RW51bSwgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBWaWV3RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHJpdmF0ZSB2aWV3OiBEZXNnaW5lclZpZXcgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuXG4gICAgdGhpcy52aWV3ID0gbmV3IERlc2dpbmVyVmlldyh0aGlzLmVsTm9kZSwgbWFpbik7XG5cbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4sIERvY2tFbnVtIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcclxuaW1wb3J0IHsgQ29udHJvbERvY2sgfSBmcm9tIFwiLi9Db250cm9sRG9ja1wiO1xyXG5pbXBvcnQgeyBWYXJpYWJsZURvY2sgfSBmcm9tIFwiLi9WYXJpYWJsZURvY2tcIjtcclxuaW1wb3J0IHsgUHJvamVjdERvY2sgfSBmcm9tIFwiLi9Qcm9qZWN0RG9ja1wiO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eURvY2sgfSBmcm9tIFwiLi9Qcm9wZXJ0eURvY2tcIjtcclxuaW1wb3J0IHsgVmlld0RvY2sgfSBmcm9tIFwiLi9WaWV3RG9ja1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERvY2tNYW5hZ2VyIHtcclxuICBwcml2YXRlICRkb2NrTWFuYWdlcjogYW55ID0ge307XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7IH1cclxuICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICB0aGlzLiRkb2NrTWFuYWdlciA9IHt9O1xyXG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmxlZnQsIENvbnRyb2xEb2NrKTtcclxuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5sZWZ0LCBQcm9qZWN0RG9jayk7XHJcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ucmlnaHQsIFByb3BlcnR5RG9jayk7XHJcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0udmlldywgVmlld0RvY2spO1xyXG4gICAgLy8gIHRoaXMuYWRkRG9jayhEb2NrRW51bS50b3AsIFRhYkRvY2spO1xyXG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmJvdHRvbSwgVmFyaWFibGVEb2NrKTtcclxuICAgIHRoaXMuUmVuZGVyVUkoKTtcclxuICB9XHJcbiAgcHVibGljIGFkZERvY2soJGtleTogc3RyaW5nLCAkdmlldzogYW55KSB7XHJcbiAgICBpZiAoIXRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldKVxyXG4gICAgICB0aGlzLiRkb2NrTWFuYWdlclska2V5XSA9IFtdO1xyXG4gICAgdGhpcy4kZG9ja01hbmFnZXJbJGtleV0gPSBbLi4udGhpcy4kZG9ja01hbmFnZXJbJGtleV0sICR2aWV3XTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBSZW5kZXJVSSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcclxuICAgICAgPGRpdiBjbGFzcz1cInZzLWxlZnQgdnMtZG9ja1wiPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidnMtY29udGVudFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy10b3AgdnMtZG9ja1wiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy12aWV3IHZzLWRvY2tcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtYm90dG9tIHZzLWRvY2tcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1yaWdodCB2cy1kb2NrXCI+PC9kaXY+XHJcbiAgICBgO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy4kZG9ja01hbmFnZXIpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGxldCBxdWVyeVNlbGVjdG9yID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7a2V5fWApO1xyXG4gICAgICBpZiAocXVlcnlTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuJGRvY2tNYW5hZ2VyW2tleV0uZm9yRWFjaCgoJGl0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgICAgbmV3ICRpdGVtKHF1ZXJ5U2VsZWN0b3IsIHRoaXMubWFpbik7XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBDb250cm9sID0ge1xuICBub2RlX2JlZ2luOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXBsYXlcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdCZWdpbicsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGNsYXNzOiAnJyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMSxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfZW5kOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXN0b3BcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdFbmQnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDEsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfaWY6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtZXF1YWxzXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnSWYnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdj5jb25kaXRpb246PGJyLz48aW5wdXQgY2xhc3M9XCJub2RlLWZvcm0tY29udHJvbFwiIG5vZGU6bW9kZWw9XCJjb25kaXRpb25cIi8+PC9kaXY+JyxcbiAgICBzY3JpcHQ6IGBgLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICBrZXk6IFwiY29uZGl0aW9uXCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9ncm91cDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1vYmplY3QtZ3JvdXBcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdHcm91cCcsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6ICc8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgcDNcIj48YnV0dG9uIGNsYXNzPVwiYnRuR29Hcm91cCBub2RlLWZvcm0tY29udHJvbFwiPkdvPC9idXR0b24+PC9kaXY+JyxcbiAgICBzY3JpcHQ6ICh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpID0+IHtcbiAgICAgIGVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuR29Hcm91cCcpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgbm9kZS5vcGVuR3JvdXAoKSB9KTtcbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIG91dHB1dDogMlxuICB9LFxuICBub2RlX29wdGlvbjoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1vYmplY3QtZ3JvdXBcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdPcHRpb24nLFxuICAgIGRvdDoge1xuICAgICAgdG9wOiAxLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBsZWZ0OiAxLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6IGBcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAxXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMlwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDNcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDA0XCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYCxcbiAgICBzY3JpcHQ6ICh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpID0+IHtcbiAgICAgIGVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuR29Hcm91cCcpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgbm9kZS5vcGVuR3JvdXAoKSB9KTtcbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIG91dHB1dDogMlxuICB9LFxuICBub2RlX3Byb2plY3Q6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnUHJvamVjdCcsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6ICc8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgcDNcIj48c2VsZWN0IGNsYXNzPVwibm9kZS1mb3JtLWNvbnRyb2xcIiBub2RlOm1vZGVsPVwicHJvamVjdFwiPjwvc2VsZWN0PjwvZGl2PicsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG5cbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHByb2plY3Q6IHtcbiAgICAgICAga2V5OiBcInByb2plY3RcIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgc2VsZWN0OiB0cnVlLFxuICAgICAgICBkYXRhU2VsZWN0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG1haW4uZ2V0UHJvamVjdEFsbCgpLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5HZXQoJ2lkJyksXG4gICAgICAgICAgICAgIHRleHQ6IGl0ZW0uR2V0KCduYW1lJylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG5cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIElNYWluLCBjb21wYXJlU29ydCwgRXZlbnRFbnVtLCBQcm9wZXJ0eUVudW0sIEV2ZW50RmxvdywgZ2V0VGltZSwgU2NvcGVSb290IH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xuXG5leHBvcnQgY2xhc3MgU3lzdGVtQmFzZSBpbXBsZW1lbnRzIElNYWluIHtcbiAgcHJpdmF0ZSAkZGF0YTogRGF0YUZsb3cgPSBuZXcgRGF0YUZsb3codGhpcyk7XG4gIHByaXZhdGUgJHByb2plY3RPcGVuOiBEYXRhRmxvdyB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSAkcHJvcGVydGllczogYW55ID0ge307XG4gIHByaXZhdGUgJGNvbnRyb2w6IGFueSA9IHt9O1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93ID0gbmV3IEV2ZW50RmxvdygpO1xuICBwcml2YXRlICRjb250cm9sQ2hvb3NlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSAkY2hlY2tPcHRpb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSAkZ3JvdXA6IGFueTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vc2V0IHByb2plY3RcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5zb2x1dGlvbl0gPSB7XG4gICAgICBpZDoge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gUHJvcGVydHlFbnVtLnNvbHV0aW9uXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgc29sdXRpb24tJHtnZXRUaW1lKCl9YCxcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBwcm9qZWN0czoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0ubGluZV0gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLmxpbmVcbiAgICAgIH0sXG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICBmcm9tSW5kZXg6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHRvOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB0b0luZGV4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vc2V0IHByb2plY3RcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5tYWluXSA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGdldFRpbWUoKVxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYEZsb3ctJHtnZXRUaW1lKCl9YCxcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLm1haW5cbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfSxcbiAgICAgIGdyb3Vwczoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfSxcbiAgICAgIG5vZGVzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5ncm91cENhdmFzXSA9IHtcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhc1xuICAgICAgfSxcbiAgICAgIGdyb3VwOiB7XG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LFxuICAgICAgeDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgem9vbToge1xuICAgICAgICBkZWZhdWx0OiAxXG4gICAgICB9LFxuICAgIH1cbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS52YXJpYWJsZV0gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLnZhcmlhYmxlXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgdmFyJHtnZXRUaW1lKCl9YFxuICAgICAgfSxcbiAgICAgIHR5cGU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gJ3RleHQnXG4gICAgICB9LFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gU2NvcGVSb290XG4gICAgICB9LFxuICAgICAgaW5pdGFsVmFsdWU6IHtcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgfVxuICAgIHRoaXMub25TYWZlKEV2ZW50RW51bS5ncm91cENoYW5nZSwgKHsgZ3JvdXAgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLiRncm91cCA9IGdyb3VwO1xuICAgIH0pXG4gIH1cbiAgbmV3U29sdXRpb24oJG5hbWU6IHN0cmluZyA9ICcnKTogdm9pZCB7XG4gICAgdGhpcy5vcGVuU29sdXRpb24oeyBuYW1lOiAkbmFtZSB9KTtcbiAgfVxuICBvcGVuU29sdXRpb24oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuJGRhdGEuSW5pdERhdGEoJGRhdGEsIHRoaXMuZ2V0UHJvcGVydHlCeUtleShQcm9wZXJ0eUVudW0uc29sdXRpb24pKTtcbiAgICB0aGlzLm9wZW5Qcm9qZWN0KHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpPy5bMF0gPz8ge30pO1xuICB9XG4gIHJlbW92ZVZhcmlhYmxlKHZhcmliYWxlOiBEYXRhRmxvdyk6IHZvaWQge1xuICAgIHRoaXMuJHByb2plY3RPcGVuPy5SZW1vdmUoJ3ZhcmlhYmxlJywgdmFyaWJhbGUpO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZVZhcmlhYmxlLCB7IGRhdGE6IHZhcmliYWxlIH0pO1xuICB9XG4gIGFkZFZhcmlhYmxlKCk6IERhdGFGbG93IHtcbiAgICBsZXQgdmFyaWJhbGUgPSBuZXcgRGF0YUZsb3codGhpcywgeyBrZXk6IFByb3BlcnR5RW51bS52YXJpYWJsZSB9KTtcbiAgICB0aGlzLiRwcm9qZWN0T3Blbj8uQXBwZW5kKCd2YXJpYWJsZScsIHZhcmliYWxlKTtcbiAgICByZXR1cm4gdmFyaWJhbGU7XG4gIH1cbiAgbmV3VmFyaWFibGUoKTogRGF0YUZsb3cge1xuICAgIGxldCB2YXJpYmFsZSA9IHRoaXMuYWRkVmFyaWFibGUoKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgeyBkYXRhOiB2YXJpYmFsZSB9KTtcbiAgICByZXR1cm4gdmFyaWJhbGU7XG4gIH1cbiAgZ2V0VmFyaWFibGUoKTogRGF0YUZsb3dbXSB7XG4gICAgbGV0IGFycjogYW55ID0gW107XG4gICAgaWYgKHRoaXMuJHByb2plY3RPcGVuKSB7XG4gICAgICBhcnIgPSB0aGlzLiRwcm9qZWN0T3Blbi5HZXQoXCJ2YXJpYWJsZVwiKTtcbiAgICAgIGlmICghYXJyKSB7XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICB0aGlzLiRwcm9qZWN0T3Blbi5TZXQoJ3ZhcmlhYmxlJywgYXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyci5maWx0ZXIoKGl0ZW06IGFueSkgPT4gdGhpcy5nZXRHcm91cEN1cnJlbnQoKS5maW5kSW5kZXgoKF9ncm91cDogYW55KSA9PiBfZ3JvdXAuaWQgPT0gaXRlbS5HZXQoJ3Njb3BlJykpID4gLTEpO1xuICB9XG4gIGdldEdyb3VwQ3VycmVudCgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLiRncm91cCA/PyBbXTtcbiAgfVxuICBleHBvcnRKc29uKCkge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLnRvSnNvbigpO1xuICB9XG4gIHB1YmxpYyBjaGVja0luaXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNoZWNrT3B0aW9uO1xuICB9XG4gIGluaXRPcHRpb24ob3B0aW9uOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLiRjaGVja09wdGlvbiA9IHRydWU7XG4gICAgLy8gc2V0IGNvbnRyb2xcbiAgICB0aGlzLiRjb250cm9sID0gaXNEZWZhdWx0ID8geyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30sIC4uLkNvbnRyb2wgfSA6IHsgLi4ub3B0aW9uPy5jb250cm9sIHx8IHt9IH07XG4gICAgbGV0IGNvbnRyb2xUZW1wOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRjb250cm9sKS5tYXAoKGtleSkgPT4gKHsgLi4udGhpcy4kY29udHJvbFtrZXldLCBrZXksIHNvcnQ6ICh0aGlzLiRjb250cm9sW2tleV0uc29ydCA9PT0gdW5kZWZpbmVkID8gOTk5OTkgOiB0aGlzLiRjb250cm9sW2tleV0uc29ydCkgfSkpLnNvcnQoY29tcGFyZVNvcnQpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgY29udHJvbFRlbXBbaXRlbS5rZXldID0ge1xuICAgICAgICBkb3Q6IHtcbiAgICAgICAgICBsZWZ0OiAxLFxuICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICByaWdodDogMSxcbiAgICAgICAgICBib3R0b206IDEsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLml0ZW1cbiAgICAgIH07XG4gICAgICB0aGlzLiRwcm9wZXJ0aWVzW2Ake2l0ZW0ua2V5fWBdID0ge1xuICAgICAgICAuLi4oaXRlbS5wcm9wZXJ0aWVzIHx8IHt9KSxcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgICAgfSxcbiAgICAgICAga2V5OiB7XG4gICAgICAgICAgZGVmYXVsdDogaXRlbS5rZXlcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgIGRlZmF1bHQ6IGl0ZW0ua2V5LFxuICAgICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcbiAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy4kY29udHJvbCA9IGNvbnRyb2xUZW1wO1xuICB9XG4gIHJlbmRlckh0bWwobm9kZTogTm9kZUl0ZW0sIGVsUGFyZW50OiBFbGVtZW50KSB7XG4gICAgZWxQYXJlbnQuaW5uZXJIVE1MID0gbm9kZS5nZXRPcHRpb24oKT8uaHRtbDtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudHMuZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29udHJvbEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbCA/PyB7fTtcbiAgfVxuICBnZXRQcm9qZWN0QWxsKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJykgPz8gW107XG4gIH1cbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9wZW5Tb2x1dGlvbihkYXRhKTtcbiAgfVxuICBzZXRQcm9qZWN0T3BlbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuJHByb2plY3RPcGVuICE9ICRkYXRhKSB7XG4gICAgICB0aGlzLiRwcm9qZWN0T3BlbiA9ICRkYXRhO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgIGRhdGE6ICRkYXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwge1xuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5vcGVuUHJvamVjdCwge1xuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNoZWNrUHJvamVjdE9wZW4oJGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiRwcm9qZWN0T3BlbiA9PSAkZGF0YTtcbiAgfVxuICBuZXdQcm9qZWN0KCk6IHZvaWQge1xuICAgIHRoaXMub3BlblByb2plY3Qoe30pO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLm5ld1Byb2plY3QsIHt9KTtcbiAgfVxuICBvcGVuUHJvamVjdCgkZGF0YTogYW55KTogdm9pZCB7XG4gICAgbGV0ICRwcm9qZWN0OiBhbnkgPSBudWxsO1xuICAgIGlmICgkZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAkcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5SWQoJGRhdGEuR2V0KCdpZCcpKTtcbiAgICAgIGlmICghJHByb2plY3QpIHtcbiAgICAgICAgJHByb2plY3QgPSAkZGF0YTtcbiAgICAgICAgdGhpcy4kZGF0YS5BcHBlbmQoJ3Byb2plY3RzJywgJHByb2plY3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAkcHJvamVjdCA9IG5ldyBEYXRhRmxvdyh0aGlzKTtcbiAgICAgICRwcm9qZWN0LkluaXREYXRhKCRkYXRhLCB0aGlzLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pKTtcbiAgICAgIHRoaXMuJGRhdGEuQXBwZW5kKCdwcm9qZWN0cycsICRwcm9qZWN0KTtcbiAgICB9XG4gICAgdGhpcy5zZXRQcm9qZWN0T3BlbigkcHJvamVjdCk7XG4gIH1cbiAgcHVibGljIGdldFByb2plY3RCeUlkKCRpZDogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpLmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdpZCcpID09PSAkaWQpPy5bMF07XG4gIH1cbiAgc2V0Q29udHJvbENob29zZShrZXk6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLiRjb250cm9sQ2hvb3NlID0ga2V5O1xuICB9XG4gIGdldENvbnRyb2xDaG9vc2UoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xDaG9vc2U7XG4gIH1cbiAgZ2V0Q29udHJvbEJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xba2V5XSB8fCB7fTtcbiAgfVxuICBnZXRDb250cm9sTm9kZUJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0Q29udHJvbEJ5S2V5KGtleSksXG4gICAgICBwcm9wZXJ0aWVzOiB0aGlzLmdldFByb3BlcnR5QnlLZXkoYCR7a2V5fWApXG4gICAgfVxuICB9XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvcGVydGllc1trZXldO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgU3lzdGVtQmFzZSB9IGZyb20gXCIuL1N5c3RlbUJhc2VcIjtcbmV4cG9ydCBjbGFzcyBTeXN0ZW1WdWUgZXh0ZW5kcyBTeXN0ZW1CYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIHJlbmRlckh0bWwobm9kZTogTm9kZUl0ZW0sIGVsUGFyZW50OiBFbGVtZW50KSB7XG4gICAgaWYgKHBhcnNlSW50KHRoaXMucmVuZGVyLnZlcnNpb24pID09PSAzKSB7XG4gICAgICAvL1Z1ZSAzXG4gICAgICBsZXQgd3JhcHBlciA9IHRoaXMucmVuZGVyLmgobm9kZS5nZXRPcHRpb24oKT8uaHRtbCwgeyAuLi4obm9kZS5nZXRPcHRpb24oKT8ucHJvcHMgPz8ge30pLCBub2RlIH0sIChub2RlLmdldE9wdGlvbigpPy5vcHRpb25zID8/IHt9KSk7XG4gICAgICB3cmFwcGVyLmFwcENvbnRleHQgPSBlbFBhcmVudDtcbiAgICAgIHRoaXMucmVuZGVyLnJlbmRlcih3cmFwcGVyLCBlbFBhcmVudCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVnVlIDJcbiAgICAgIGxldCB3cmFwcGVyID0gbmV3IHRoaXMucmVuZGVyKHtcbiAgICAgICAgcGFyZW50OiBlbFBhcmVudCxcbiAgICAgICAgcmVuZGVyOiAoaDogYW55KSA9PiBoKG5vZGUuZ2V0T3B0aW9uKCk/Lmh0bWwsIHsgcHJvcHM6IHsgLi4uKG5vZGUuZ2V0T3B0aW9uKCk/LnByb3BzID8/IHt9KSwgbm9kZSB9IH0pLFxuICAgICAgICAuLi4obm9kZS5nZXRPcHRpb24oKT8ub3B0aW9ucyA/PyB7fSlcbiAgICAgIH0pLiRtb3VudCgpXG4gICAgICAvL1xuICAgICAgZWxQYXJlbnQuYXBwZW5kQ2hpbGQod3JhcHBlci4kZWwpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4sIEV2ZW50RW51bSwgRGF0YUZsb3cgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFiRG9jayBleHRlbmRzIERvY2tCYXNlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYGA7XHJcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy10YWInKTtcclxuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIChkZXRhaWw6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLmVsTm9kZT8ucXVlcnlTZWxlY3RvckFsbCgnLmFjdGl2ZScpLmZvckVhY2goKF9ub2RlKSA9PiB7XHJcbiAgICAgICAgX25vZGUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAodGhpcy5lbE5vZGUgJiYgZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJykpIHtcclxuICAgICAgICB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9qZWN0LWlkPVwiJHtkZXRhaWw/LmRhdGE/LkdldCgnaWQnKX1cIl1gKT8uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5uZXdQcm9qZWN0LCB0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBgO1xyXG4gICAgbGV0IHByb2plY3RzID0gdGhpcy5tYWluLmdldFByb2plY3RBbGwoKTtcclxuICAgIHByb2plY3RzLmZvckVhY2goKGl0ZW06IERhdGFGbG93KSA9PiB7XHJcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBub2RlSXRlbS5jbGFzc0xpc3QuYWRkKCdub2RlLWl0ZW0nKTtcclxuICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xyXG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcclxuICAgICAgaXRlbS5yZW1vdmVMaXN0ZW5lcihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcclxuICAgICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpdGVtLm9uKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV9uYW1lYCwgKCkgPT4ge1xyXG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICh0aGlzLm1haW4uY2hlY2tQcm9qZWN0T3BlbihpdGVtKSkge1xyXG4gICAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICB9XHJcbiAgICAgIG5vZGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsIHsgZGF0YTogaXRlbSB9KTtcclxuICAgICAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiBpdGVtIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5lbE5vZGU/LmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWaXN1YWxGbG93IH0gZnJvbSBcIi4vVmlzdWFsRmxvd1wiO1xuaW1wb3J0ICogYXMgU3lzdGVtQmFzZSBmcm9tIFwiLi9zeXN0ZW1zL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4vY29yZS9pbmRleCc7XG5pbXBvcnQgKiBhcyBEZXNnaW5lciBmcm9tIFwiLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0ICogYXMgRG9jayBmcm9tICcuL2RvY2svaW5kZXgnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBWaXN1YWxGbG93LFxuICAuLi5TeXN0ZW1CYXNlLFxuICAuLi5Db3JlLFxuICAuLi5Eb2NrLFxuICAuLi5EZXNnaW5lclxufTtcblxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgRG9ja01hbmFnZXIgfSBmcm9tICcuL2RvY2svRG9ja01hbmFnZXInO1xuaW1wb3J0IHsgU3lzdGVtQmFzZSB9IGZyb20gJy4vc3lzdGVtcy9TeXN0ZW1CYXNlJztcbmV4cG9ydCBjbGFzcyBWaXN1YWxGbG93IHtcbiAgcHJpdmF0ZSBtYWluOiBJTWFpbiB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IERvY2tNYW5hZ2VyO1xuICBwdWJsaWMgZ2V0RG9ja01hbmFnZXIoKTogRG9ja01hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLiRkb2NrTWFuYWdlcjtcbiAgfVxuICBwdWJsaWMgc2V0T3B0aW9uKGRhdGE6IGFueSwgaXNEZWZhdWx0OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHRoaXMubWFpbj8uaW5pdE9wdGlvbihkYXRhLCBpc0RlZmF1bHQpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgbWFpbjogSU1haW4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm1haW4gPSBtYWluID8/IG5ldyBTeXN0ZW1CYXNlKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSBuZXcgRG9ja01hbmFnZXIodGhpcy5jb250YWluZXIsIHRoaXMubWFpbik7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIucmVzZXQoKTtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5tYWluPy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHRoaXMubWFpbj8uZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICB9XG4gIHB1YmxpYyBnZXRNYWluKCk6IElNYWluIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tYWluO1xuICB9XG4gIG5ld1NvbHV0aW9uKCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ubmV3U29sdXRpb24oJG5hbWUpO1xuICB9XG4gIG9wZW5Tb2x1dGlvbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm9wZW5Tb2x1dGlvbigkZGF0YSk7XG4gIH1cbiAgbmV3UHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm5ld1Byb2plY3QoJG5hbWUpO1xuICB9XG4gIG9wZW5Qcm9qZWN0KCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ub3BlblByb2plY3QoJG5hbWUpO1xuICB9XG4gIGdldFByb2plY3RBbGwoKTogYW55W10gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZ2V0UHJvamVjdEFsbCgpO1xuICB9XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8uc2V0UHJvamVjdE9wZW4oJGRhdGEpO1xuICB9XG4gIGltcG9ydEpzb24oZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/LmltcG9ydEpzb24oZGF0YSk7XG4gIH1cbiAgZXhwb3J0SnNvbigpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZXhwb3J0SnNvbigpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiRXZlbnRFbnVtIiwiaW5pdCIsImRhdGFDaGFuZ2UiLCJzaG93UHJvcGVydHkiLCJvcGVuUHJvamVjdCIsIm5ld1Byb2plY3QiLCJjaGFuZ2VWYXJpYWJsZSIsImNoYW5nZSIsImRpc3Bvc2UiLCJncm91cENoYW5nZSIsIkRvY2tFbnVtIiwibGVmdCIsInRvcCIsInZpZXciLCJib3R0b20iLCJyaWdodCIsIlByb3BlcnR5RW51bSIsIm1haW4iLCJzb2x1dGlvbiIsImxpbmUiLCJ2YXJpYWJsZSIsImdyb3VwQ2F2YXMiLCJTY29wZVJvb3QiLCJFdmVudEZsb3ciLCJldmVudHMiLCJjb25zdHJ1Y3RvciIsIm9uU2FmZSIsImV2ZW50IiwiY2FsbGJhY2siLCJ0aGlzIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImNvbnNvbGUiLCJlcnJvciIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsInB1c2giLCJsaXN0ZW5lckluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiZGV0YWlscyIsImZvckVhY2giLCJsaXN0ZW5lciIsIkRhdGFGbG93IiwicHJvcGVydHkiLCJkYXRhIiwicHJvcGVydGllcyIsImdldFByb3BlcnRpZXMiLCJsb2FkIiwiSW5pdERhdGEiLCJldmVudERhdGFDaGFuZ2UiLCJrZXkiLCJrZXlDaGlsZCIsInZhbHVlQ2hpbGQiLCJzZW5kZXJDaGlsZCIsImluZGV4IiwidmFsdWUiLCJzZW5kZXIiLCJSZW1vdmVFdmVudERhdGEiLCJpdGVtIiwiT25FdmVudERhdGEiLCJCaW5kRXZlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJTZXQiLCJpc0Rpc3BhdGNoIiwiU2V0RGF0YSIsImlzQ2xlYXJEYXRhIiwiJGRhdGEiLCJPYmplY3QiLCJrZXlzIiwiR2V0IiwiQXBwZW5kIiwiUmVtb3ZlIiwiZ2V0UHJvcGVydHlCeUtleSIsImRlZmF1bHQiLCJtYXAiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0pzb24iLCJycyIsImRlbGV0ZSIsIkZsb3dDb3JlIiwiR2V0SWQiLCJTZXRJZCIsImlkIiwiZWxOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiQ2hlY2tFbGVtZW50Q2hpbGQiLCJlbCIsImNvbnRhaW5zIiwiU2V0RGF0YUZsb3ciLCJSZW1vdmVEYXRhRXZlbnQiLCJzZXRUaW1lb3V0IiwidHlwZSIsIkJhc2VGbG93IiwicGFyZW50Iiwic3VwZXIiLCJnZXREYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJjb21wYXJlU29ydCIsImEiLCJiIiwic29ydCIsImlzRnVuY3Rpb24iLCJmbiIsIkZ1bmN0aW9uIiwiVGFnVmlldyIsIkRhdGFWaWV3Iiwia2V5TmFtZSIsImVsU3VnZ2VzdGlvbnMiLCJlbFN1Z2dlc3Rpb25zQ29udGVudCIsIm5vZGVFZGl0b3IiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJlZGl0Iiwic2VsZWN0Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJzaG93U3VnZ2VzdGlvbnMiLCJiaW5kRGF0YSIsImNoZWNrU2hvd1N1Z2dlc3Rpb25zIiwiaW5uZXJIVE1MIiwiYXJyIiwiZ2V0VmFyaWFibGUiLCJlbFVsIiwiZWxMaSIsInR4dCIsInNlbGVjdGlvblN0YXJ0Iiwic3RhcnRJbmRleCIsImxhc3RJbmRleE9mIiwiZmxnIiwicmVtb3ZlQXR0cmlidXRlIiwiYmluZElucHV0IiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kRXZlbnQiLCJkYXRhU2VsZWN0Iiwib3B0aW9ucyIsInRleHQiLCJvcHRpb24iLCJzY3JpcHQiLCJzZXROb2RlVmFsdWUiLCJpbmNsdWRlcyIsInRhZ05hbWUiLCJpbm5lclRleHQiLCJEZWxldGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3RhdGljIiwiY2hpbGRFbGVtZW50Q291bnQiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIk1vdmVUeXBlIiwicyIsImhleERpZ2l0cyIsImkiLCJzdWJzdHIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwibWVzc2FnZSIsIm9wdGlvbmFsUGFyYW1zIiwibG9nIiwiTGluZSIsImZyb21JbmRleCIsInRvIiwidG9JbmRleCIsImNyZWF0ZUVsZW1lbnROUyIsImVsUGF0aCIsImN1cnZhdHVyZSIsInRlbXAiLCJTdGFydFNlbGVjdGVkIiwic2V0QXR0cmlidXRlTlMiLCJlbENhbnZhcyIsIkFkZExpbmUiLCJ1cGRhdGVUbyIsInRvX3giLCJ0b195IiwieCIsImZyb21feCIsInkiLCJmcm9tX3kiLCJnZXRQb3N0aXNpb25Eb3QiLCJsaW5lQ3VydmUiLCJjcmVhdGVDdXJ2YXR1cmUiLCJVcGRhdGVVSSIsIkFjdGl2ZSIsInJlbW92ZSIsInN0YXJ0X3Bvc194Iiwic3RhcnRfcG9zX3kiLCJlbmRfcG9zX3giLCJlbmRfcG9zX3kiLCJjdXJ2YXR1cmVfdmFsdWUiLCJsaW5lX3giLCJsaW5lX3kiLCJoeDEiLCJhYnMiLCJoeDIiLCJub2RlVGhpcyIsIlJlbW92ZUxpbmUiLCJlIiwic2V0TGluZUNob29zZSIsInNldE5vZGVUbyIsIm5vZGUiLCJDbG9uZSIsImNoZWNrTGluZUV4aXN0cyIsIkRlc2dpbmVyVmlld19FdmVudCIsInRpbWVGYXN0Q2xpY2siLCJ0YWdJbmdvcmUiLCJtb3ZlVHlwZSIsIk5vbmUiLCJmbGdEcmFwIiwiZmxnTW92ZSIsImF2X3giLCJhdl95IiwicG9zX3giLCJwb3NfeSIsIm1vdXNlX3giLCJtb3VzZV95IiwidGVtcExpbmUiLCJFbmRNb3ZlIiwiTW92ZSIsIlN0YXJ0TW92ZSIsImNvbnRleHRtZW51Iiwibm9kZV9kcm9wRW5kIiwibm9kZV9kcmFnb3ZlciIsInpvb21fZW50ZXIiLCJrZXlkb3duIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsIiRsb2NrIiwia2V5Tm9kZSIsImdldENvbnRyb2xDaG9vc2UiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZV9wb3NfeCIsImVfcG9zX3kiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJDYWxjWCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkNhbGNZIiwiY2hlY2tPbmx5Tm9kZSIsIkFkZE5vZGUiLCJncm91cCIsIkN1cnJlbnRHcm91cCIsInVwZGF0ZVBvc2l0aW9uIiwiY3RybEtleSIsImRlbHRhWSIsInpvb21fb3V0Iiwiem9vbV9pbiIsInRhcmdldCIsInRvTG93ZXJDYXNlIiwiQ2FudmFzIiwibm9kZUNob29zZSIsImdldE5vZGVDaG9vc2UiLCJOb2RlIiwic2V0Tm9kZUNob29zZSIsImdldFgiLCJnZXRZIiwic2V0WCIsInNldFkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwibm9kZUVsIiwiY2xvc2VzdCIsIm5vZGVJZCIsIm5vZGVUbyIsIkdldE5vZGVCeUlkIiwicXVlcnlTZWxlY3RvciIsIm1ldGFLZXkiLCJnZXRMaW5lQ2hvb3NlIiwiRGVzZ2luZXJWaWV3X1Rvb2xiYXIiLCJlbFBhdGhHcm91cCIsImJ0bkJhY2siLCJlbFRvb2xiYXIiLCJyZW5kZXJVSSIsInJlbmRlclBhdGhHcm91cCIsImdyb3VwcyIsIkdldEdyb3VwTmFtZSIsImxlbiIsIkJhY2tHcm91cCIsImJ0blpvb21JbiIsImJ0blpvb21PdXQiLCJidG5ab29tUmVzZXQiLCJ6b29tX3Jlc2V0IiwiYnV0dG9uR3JvdXAiLCJOb2RlSXRlbSIsImdldE5hbWUiLCJDaGVja0tleSIsImdldERhdGFMaW5lIiwiYXJyTGluZSIsImZpbHRlciIsImVsQ29udGVudCIsImFyckRhdGFWaWV3IiwiZ2V0Q29udHJvbE5vZGVCeUtleSIsIm5hbWUiLCJjbGFzcyIsImdldE9wdGlvbiIsImRldGFpbCIsImFjdGl2ZUVsZW1lbnQiLCJoaWRlVGl0bGUiLCJpY29uIiwiYWRkTm9kZURvdCIsIm51bSIsInN0YXJ0IiwicXVlcnkiLCJub2RlUXVlcnkiLCJub2RlRG90IiwiZG90IiwicmVuZGVySHRtbCIsIkJpbmRFbGVtZW50Iiwib3Blbkdyb3VwIiwiaUNoZWNrIiwidGVtcHgiLCJ0ZW1weSIsImVsRG90IiwiUmVtb3ZlTm9kZSIsIlJlbmRlckxpbmUiLCJab29tIiwiRGVzZ2luZXJWaWV3IiwiZ2V0Wm9vbSIsImdldERhdGFHcm91cCIsInNldFpvb20iLCJncm91cERhdGEiLCJsYXN0R3JvdXBOYW1lIiwiZGF0YUdyb3VwIiwiR2V0RGF0YUJ5SWQiLCJ0b29sYmFyIiwiY2hhbmdlR3JvdXAiLCJSZW5kZXJVSSIsIkN1cnJlbnRHcm91cERhdGEiLCJsaW5lQ2hvb3NlIiwibm9kZXMiLCJBZGROb2RlSXRlbSIsIkluc2VydE5vZGUiLCJDbGVhck5vZGUiLCJHZXREYXRhQWxsTm9kZSIsIkdldERhdGFOb2RlIiwiem9vbV9sYXN0X3ZhbHVlIiwidGFiSW5kZXgiLCJPcGVuIiwidXBkYXRlVmlldyIsInpvb20iLCJzdHlsZSIsInRyYW5zZm9ybSIsIkdldEFsbE5vZGUiLCJudW1iZXIiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbnRyb2xCeUtleSIsInpvb21fcmVmcmVzaCIsInRlbXBfem9vbSIsIlZhcmlhYmxlVmlldyIsInZhcmlhYmxlcyIsIlJlbmRlciIsIlZhcmlhYmxlSXRlbSIsIlJlbmRlclNjb3BlIiwiZ2V0R3JvdXBDdXJyZW50IiwibmFtZUlucHV0IiwidHlwZUlucHV0Iiwic2NvcGVJbnB1dCIsInZhbHVlRGVmYXVsdElucHV0IiwibmFtZUNvbHVtbiIsInR5cGVDb2x1bW4iLCJzY29wZUNvbHVtbiIsInZhbHVlRGVmYXVsdENvbHVtbiIsImJ1dHRvblJlbW92ZSIsInJlbW92ZVZhcmlhYmxlIiwiYnV0dG9uUmVtb3ZlQ29sdW1uIiwicHJlcGVuZCIsIlRvb2xib3hWaWV3IiwiY29udHJvbHMiLCJnZXRDb250cm9sQWxsIiwibm9kZUl0ZW0iLCJkcmFnU3RhcnQiLCJkcmFnZW5kIiwic2V0Q29udHJvbENob29zZSIsInNldERhdGEiLCJQcm9qZWN0VmlldyIsImdldFByb2plY3RBbGwiLCJjaGVja1Byb2plY3RPcGVuIiwic2V0UHJvamVjdE9wZW4iLCJEb2NrQmFzZSIsImNvbnRhaW5lciIsIkJveEluZm8iLCJ0aXRsZSIsIiRjYWxsYmFjayIsIkNvbnRyb2xEb2NrIiwiVmFyaWFibGVEb2NrIiwiJG5vZGVSaWdodCIsImJ1dHRvbk5ldyIsIm5ld1ZhcmlhYmxlIiwiUHJvamVjdERvY2siLCJidXR0b25FeHBvcnQiLCJkb3dubG9hZE9iamVjdEFzSnNvbiIsImV4cG9ydE9iaiIsImV4cG9ydEpzb24iLCJleHBvcnROYW1lIiwiZGF0YVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsImRvd25sb2FkQW5jaG9yTm9kZSIsImJvZHkiLCJjbGljayIsImJ1dHRvbkltcG9ydCIsImlucHV0RWwiLCJpbXBvcnRKc29uIiwicGFyc2UiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJmaWxlcyIsInJlYWRBc1RleHQiLCJQcm9wZXJ0eURvY2siLCJsYXN0RGF0YSIsImhpZGVLZXlzIiwic29ydEtleXMiLCJwcm9wZXJ0eUl0ZW0iLCJwcm9wZXJ0eUxhYmVsIiwicHJvcGVydHlWYWx1ZSIsIlZpZXdEb2NrIiwiRG9ja01hbmFnZXIiLCIkZG9ja01hbmFnZXIiLCJyZXNldCIsImFkZERvY2siLCIka2V5IiwiJHZpZXciLCIkaXRlbSIsIkNvbnRyb2wiLCJub2RlX2JlZ2luIiwiaHRtbCIsIm9ubHlOb2RlIiwibm9kZV9lbmQiLCJub2RlX2lmIiwiY29uZGl0aW9uIiwib3V0cHV0Iiwibm9kZV9ncm91cCIsIm5vZGVfb3B0aW9uIiwibm9kZV9wcm9qZWN0IiwicHJvamVjdCIsIlN5c3RlbUJhc2UiLCIkcHJvamVjdE9wZW4iLCIkcHJvcGVydGllcyIsIiRjb250cm9sIiwiJGNvbnRyb2xDaG9vc2UiLCIkY2hlY2tPcHRpb24iLCIkZ3JvdXAiLCJwcm9qZWN0cyIsInNjb3BlIiwiaW5pdGFsVmFsdWUiLCJuZXdTb2x1dGlvbiIsIiRuYW1lIiwib3BlblNvbHV0aW9uIiwidmFyaWJhbGUiLCJhZGRWYXJpYWJsZSIsImZpbmRJbmRleCIsIl9ncm91cCIsImNoZWNrSW5pdE9wdGlvbiIsImluaXRPcHRpb24iLCJpc0RlZmF1bHQiLCJjb250cm9sIiwiY29udHJvbFRlbXAiLCJsaW5lcyIsImVsUGFyZW50IiwiJHByb2plY3QiLCJnZXRQcm9qZWN0QnlJZCIsIiRpZCIsInJlbmRlciIsInBhcnNlSW50IiwidmVyc2lvbiIsIndyYXBwZXIiLCJoIiwicHJvcHMiLCJhcHBDb250ZXh0IiwiJG1vdW50IiwiJGVsIiwiX25vZGUiLCJWaXN1YWxGbG93IiwiZ2V0RG9ja01hbmFnZXIiLCJzZXRPcHRpb24iLCJnZXRNYWluIiwiQ29yZSIsIkRvY2siLCJEZXNnaW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O3VDQUFPLE1BQU1BLEVBQVksQ0FDdkJDLEtBQU0sT0FDTkMsV0FBWSxhQUNaQyxhQUFjLGVBQ2RDLFlBQWEsY0FDYkMsV0FBWSxhQUNaQyxlQUFnQixpQkFDaEJDLE9BQVEsU0FDUkMsUUFBUyxVQUNU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
