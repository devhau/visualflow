/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.5
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},i={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"};class s{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const i=this.events[e].listeners,s=i.indexOf(t);s>-1&&i.splice(s,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class n{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new s,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,i,s,n,a){a?(this.dispatch(`${e.dataChange}_${t}_${a}_${i}`,{key:t,keyChild:i,value:s,sender:n,index:a}),this.dispatch(`${e.dataChange}_${t}_${a}`,{key:t,keyChild:i,value:s,sender:n,index:a})):this.dispatch(`${e.dataChange}_${t}_${i}`,{key:t,keyChild:i,value:s,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:i,value:s,sender:n})}RemoveEventData(t,i,s){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(i,e,t,n,s)))}OnEventData(t,i,s){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(i,e,t,n,s)))}BindEvent(e,t){e&&(e instanceof n&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof n&&e.forEach(((e,i)=>this.OnEventData(e,t,i))))}Set(t,i,s=null,a=!0){this.data[t]!=i&&(this.data[t]&&(this.data[t]instanceof n&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof n&&this.data[t].forEach(((e,i)=>this.RemoveEventData(e,t,i)))),this.BindEvent(i,t)),this.data[t]=i,a&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:i,sender:s}),this.dispatch(e.dataChange,{key:t,value:i,sender:s}),this.dispatch(e.change,{key:t,value:i,sender:s}))}SetData(t,i=null,s=!1){if(s&&(this.data={}),t instanceof n){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),i,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),i,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],i,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var i=this.data[e].indexOf(t);i>-1&&(this.RemoveEventData(this.data[e][i],e),this.data[e].splice(i,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.data[t]instanceof n||!this.data[t].key||(this.data[t]=new n(this.property,this.data[t])),!Array.isArray(this.data[t])||!this.property||this.data[t][0]instanceof n||(this.data[t]=this.data[t].map((e=>e instanceof n||!e.key?e:new n(this.property,e)))),this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof n?e[t]=e[t].toJson():Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof n&&(e[t]=e[t].map((e=>e.toJson())));return e}delete(){this.events=new s,this.data={}}}class a{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new n;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:i,sender:s})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:i,sender:s}),this.dispatch(e.dataChange,{type:"data",key:t,value:i,sender:s})}))})),this.data.removeListener(e.change,(({key:t,value:i,sender:s})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:i,sender:s})}))}))}constructor(){this.events=new s}}class o extends a{parent;constructor(e){super(),this.parent=e}}const r=()=>new Date,d=()=>r().getTime(),h=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,l=e=>e&&e instanceof Function,p=["SPAN","DIV","P","TEXTAREA"];class c{el;data;main;keyName;elNode;property;constructor(e,t,i,s=null){if(this.el=e,this.data=t,this.main=i,this.keyName=s,this.keyName)e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.el.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode));else if(this.keyName=e?.getAttribute("node:model"),this.keyName){this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el;let t=document.createElement("span");t.classList.add("node-editor"),e.parentElement?.insertBefore(t,e),e.parentElement?.removeChild(e),t.appendChild(this.elNode)}this.keyName&&this.bindData()}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.property&&this.property.select&&l(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let i=document.createElement("option");return i.value=e,i.text=t,i}));for(let t of e)this.elNode.appendChild(t)}this.property&&l(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(e){this.elNode&&(p.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t.elNode!==this.elNode&&this.setNodeValue(e)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&this.data.Set(this.keyName,this.elNode.value,this)}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,i,s=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new c(e,t,i,s)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new c(e,t,i)))}}const u="root";class m extends s{name="";value;type="";initalValue;scope=u}var v,g=Object.freeze({__proto__:null,FlowCore:a,BaseFlow:o,DockEnum:t,EventEnum:e,PropertyEnum:i,DataFlow:n,DataView:c,EventFlow:s,compareSort:h,getUuid:()=>{let e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:d,LOG:(e,...t)=>console.log(e,t),getDate:r,isFunction:l,VariableNode:m,ScopeRoot:u});class f{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new n;curvature=.5;temp=!1;constructor(e,t=0,s,n=0,a=null){this.from=e,this.fromIndex=t,this.to=s,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),a?this.data=a:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(i.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:i,y:s}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(i,s,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,i,s,n,a){let o=e,r=t,d=i,h=s,l=n;switch(a){case"open":if(e>=i)var p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*(-1*l);else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(e>=i)p=o+Math.abs(d-o)*(-1*l),c=d-Math.abs(d-o)*l;else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(e>=i)p=o+Math.abs(d-o)*(-1*l),c=d-Math.abs(d-o)*(-1*l);else p=o+Math.abs(d-o)*l,c=d-Math.abs(d-o)*l;return" M "+o+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+o+" "+r+" C "+(p=o+Math.abs(d-o)*l)+" "+r+" "+(c=d-Math.abs(d-o)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new f(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(v||(v={}));class y{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=v.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let i=0,s=0;"touchmove"===e.type?(i=e.touches[0].clientX,s=e.touches[0].clientY):(i=e.clientX,s=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-i),a=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,a)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=d(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=v.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=v.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==v.Node&&e.target.classList.contains("node-dot")){this.moveType=v.Line;let i=e.target.getAttribute("node");this.tempLine=new f(t,i),this.tempLine.temp=!0}this.moveType==v.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,i=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,i=e.touches[0].clientY):(t=e.clientX,i=e.clientY),this.moveType){case v.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),s=this.av_y+this.parent.CalcY(-(this.pos_y-i));this.parent.setX(e),this.parent.setY(s);break}case v.Node:{let e=this.parent.CalcX(this.pos_x-t),s=this.parent.CalcY(this.pos_y-i);this.pos_x=t,this.pos_y=i,this.parent.getNodeChoose()?.updatePosition(e,s);break}case v.Line:if(this.tempLine){let s=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-s,this.parent.elCanvas.offsetTop-n);let a=e.target.closest("[node-id]"),o=a?.getAttribute("node-id"),r=o?this.parent.GetNodeById(o):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=a?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=i)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(d()-this.timeFastClick<100||!this.flgMove)return this.moveType=v.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,i=0;if("touchend"===e.type?(t=this.mouse_x,i=this.mouse_y):(t=e.clientX,i=e.clientY),this.moveType===v.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),s=this.av_y+this.parent.CalcY(-(this.pos_y-i));this.parent.setX(e),this.parent.setY(s),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=i,this.moveType=v.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class b{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(e){this.parent=e,this.elNode=e.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let e=this.parent.GetGroupName(),t=e.length-1;if(t<0)return;let i=document.createElement("span");i.innerHTML="Root",i.addEventListener("click",(e=>this.parent.BackGroup("Root"))),this.elPathGroup.appendChild(i),this.btnBack.removeAttribute("style");for(let i=t;i>=0;i--){let t=document.createElement("span");t.innerHTML=`>>${e[i].text}`,t.setAttribute("group",e[i].id),t.addEventListener("click",(t=>this.parent.BackGroup(e[i].id))),this.elPathGroup.appendChild(t)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_in())),e.innerHTML="+";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_out())),t.innerHTML="-";let i=document.createElement("button");i.addEventListener("click",(()=>this.parent.zoom_reset())),i.innerHTML="*";let s=document.createElement("div");s.classList.add("toolbar-button"),s.appendChild(this.btnBack),s.appendChild(e),s.appendChild(t),s.appendChild(i),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(s)}}class N extends o{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,i){return this.arrLine.filter((s=>!s.temp&&s.to==t&&s.toIndex==i&&s.fromIndex==e||!s.temp&&s.from==t&&s.fromIndex==i&&s.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,i,s={}){super(t),this.keyNode=i,this.option=this.parent.main.getControlNodeByKey(i),this.properties=this.option?.properties,s instanceof n?this.data=s:(this.data.InitData({...s,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,i)=>{if(e){let s=this.elNode.querySelector(i);if(s){s.innerHTML="";for(let i=0;i<e;i++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+i}`),s.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),l(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=c.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(e,t,i=!1){if(this.elNode){let s=e,n=t;i||(n=this.elNode.offsetTop-t,s=this.elNode.offsetLeft-e),s!==this.getX()&&this.setX(s),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),i=e.Get("toIndex"),s=e.Get("fromIndex");new f(this,s,t,i,e).UpdateUI()}))}}const C=1.6,L=.6,k=.1,E=1;class G extends a{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new n(this.main,{key:i.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let s=this.GetDataById(this.lastGroupName);return s&&s.onSafe(e.dataChange,(()=>{this.UpdateUI.bind(this),this.toolbar.renderPathGroup(),this.changeGroup()})),this.groupData}group=[];GetGroupName(){return this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")})))}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}))}openGroup(e){this.group=[e,...this.group],this.toolbar.renderPathGroup(),this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new N(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(t,s){super(),this.main=s,this.elNode=t;let n=this.main.getPropertyByKey(i.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,new y(this),this.toolbar=new b(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{s.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)}))}updateView(e,t,i){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${i})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof N||(e.sender&&e.sender instanceof G?this.UpdateUI():(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()})),this.UpdateUI(),this.toolbar.renderPathGroup()))}Open(t){if(t==this.data)return this.toolbar.renderPathGroup(),void this.RenderUI();this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNodeItem&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?E:this.getZoom()+k*e;C>=t&&t>=L&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class x{elNode;main;variables;constructor(t,i){this.elNode=t,this.main=i,this.elNode.classList.add("vs-variable"),this.main.on(e.changeVariable,(({group:e})=>{this.Render(e)})),this.main.on(e.openProject,(({group:e})=>{this.Render(e)})),this.main.on(e.groupChange,(({group:e})=>{this.Render(e)})),this.Render()}Render(e=null){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',console.log(this.variables),this.variables){e||(e=[u]),e.includes(u)||(e=[...e,u]);for(let t of this.variables.filter((t=>e.includes(t.scope))))new I(t,this).RenderScope(e)}}changeData(){this.main.updateVariable(this.variables??[])}}class I{variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.name,this.valueDefaultInput.value=this.variable.initalValue??"",this.typeInput.value=this.variable.type??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let i=document.createElement("td");i.appendChild(this.nameInput),this.elNode.appendChild(i),this.nameInput.addEventListener("keydown",(e=>{this.variable.name=e.target.value,this.change()})),this.nameInput.addEventListener("change",(e=>{this.variable.name=e.target.value,this.change()}));let s=document.createElement("td");s.appendChild(this.typeInput),this.elNode.appendChild(s),this.typeInput.addEventListener("change",(e=>{this.variable.type=e.target.value,this.change()}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let a=document.createElement("td");a.appendChild(this.valueDefaultInput),this.elNode.appendChild(a),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.initalValue=e.target.value,this.change()})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.initalValue=e.target.value,this.change()}));let o=document.createElement("button");o.innerHTML="-",o.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(o),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}change(){this.parent.changeData()}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){if(t===u)continue;let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}let t=document.createElement("option");t.text=u,t.value=u,this.scopeInput.prepend(t),this.scopeInput.value=this.variable.scope,this.scopeInput.addEventListener("change",(e=>{this.variable.scope=e.target.value,this.change()}))}}class ${elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolboxf"),this.Render()}Render(){let e=this.main.getControlAll();Object.keys(e).forEach((t=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",t),i.innerHTML=`${e[t].icon} <span>${e[t].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),this.elNode.appendChild(i)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class _{elNode;main;constructor(t,i){this.elNode=t,this.main=i,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let i=document.createElement("div");i.classList.add("node-item"),i.innerHTML=`${t.Get("name")}`,i.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{i.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{i.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&i.classList.add("active"),i.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(i)}))}}var w=Object.freeze({__proto__:null,DesginerView:G,Line:f,NodeItem:N,VariableView:x,ToolboxView:$,ProjectView:_});class D{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class M extends D{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new $(e,this.main)}))}}class P extends D{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new x(e,t)}));let i=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(i){i.innerHTML="";let e=document.createElement("button");i?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable().name=`var${d()}`}))}}}class j extends D{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new _(e,t)}));let i=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(i){i.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),i?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${d()}`,i="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(s=document.createElement("a")).setAttribute("href",i),s.setAttribute("download",t+".json"),document.body.appendChild(s),s.click(),void s.remove();var e,t,i,s})),i?.appendChild(t);let s=document.createElement("button");s.innerHTML="Import",s.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var i=new FileReader;i.onload=function(){e?.(i.result)},t&&t.files&&i.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),i?.appendChild(s)}}}class S extends D{main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,i){super(t,i),this.main=i,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{i.on(e.showProperty,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let i=t.getProperties();this.sortKeys.forEach((s=>{if(this.hideKeys.includes(s)||!i[s])return;let n=document.createElement("div");n.classList.add("property-item");let a=document.createElement("div");a.classList.add("property-label"),a.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),c.BindElement(o,t,this.main,s),n.appendChild(a),n.appendChild(o),e.appendChild(n)})),Object.keys(i).forEach((i=>{if(this.hideKeys.includes(i)||this.sortKeys.includes(i))return;let s=document.createElement("div");s.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),c.BindElement(a,t,this.main,i),s.appendChild(n),s.appendChild(a),e.appendChild(s)}))}}class T extends D{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new G(this.elNode,t)}}class A{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,M),this.addDock(t.left,j),this.addDock(t.right,S),this.addDock(t.view,T),this.addDock(t.bottom,P),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const O={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:0,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:0,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input class="node-form-control" node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:i})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{i.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:i})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{i.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:i})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:i})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:i})=>{},default:""}}}};class B{$data=new n(this);$projectOpen;$properties={};$control={};events=new s;$controlChoose=null;$checkOption=!1;constructor(){this.$properties[i.solution]={id:{default:()=>d()},key:{default:()=>i.solution},name:{default:()=>`solution-${d()}`,edit:!0},projects:{default:[]}},this.$properties[i.line]={key:{default:i.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[i.main]={id:{default:()=>d()},name:{default:()=>`Flow-${d()}`,edit:!0},key:{default:i.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[i.groupCavas]={key:{default:i.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}}}newSolution(e=""){this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(i.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(){let e=new m;return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e}updateVariable(e){this.$projectOpen?.Set("variable",e)}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...O}:{...e?.control||{}};let i={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(h).forEach((e=>{i[e.key]={dot:{left:1,top:1,right:1,bottom:1},...e},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>d()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=i}renderHtml(e,t){t.innerHTML=e.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof n?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new n(this),t.InitData(e,this.getPropertyByKey(i.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}}var H=Object.freeze({__proto__:null,SystemBase:B,SystemVue:class extends B{render;constructor(e){super(),this.render=e}renderHtml(e,t){if(3===parseInt(this.render.version)){let i=this.render.h(e.getOption()?.html,{...e.getOption()?.props??{},node:e},e.getOption()?.options??{});i.appContext=t,this.render.render(i,t)}else{let i=new this.render({parent:t,render:t=>t(e.getOption()?.html,{props:{...e.getOption()?.props??{},node:e}}),...e.getOption()?.options??{}}).$mount();t.appendChild(i.$el)}}}});var R=Object.freeze({__proto__:null,DockEnum:t,ControlDock:M,DockBase:D,ProjectDock:j,PropertyDock:S,TabDock:class extends D{main;constructor(t,i){super(t,i),this.main=i,this.elNode.innerHTML="",this.elNode.classList.add("vs-tab"),this.main.on(e.openProject,(e=>{this.elNode?.querySelectorAll(".active").forEach((e=>{e.classList.remove("active")})),this.elNode&&e?.data?.Get("id")&&this.elNode.querySelector(`[data-project-id="${e?.data?.Get("id")}"]`)?.classList.add("active")})),this.main.on(e.newProject,this.render.bind(this))}render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let i=document.createElement("div");i.classList.add("node-item"),i.innerHTML=`${t.Get("name")}`,i.setAttribute("data-project-id",t.Get("id")),t.removeListener(`${e.dataChange}_name`,(()=>{i.innerHTML=`${t.Get("name")}`})),t.on(`${e.dataChange}_name`,(()=>{i.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&i.classList.add("active"),i.addEventListener("click",(()=>{this.main.dispatch(e.openProject,{data:t}),this.main.dispatch(e.showProperty,{data:t})})),this.elNode?.appendChild(i)}))}},ViewDock:T,VariableDock:P,DockManager:A});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new B,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new A(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}},...H,...g,...R,...w}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YUZsb3cudHMiLCIuLi9zcmMvY29yZS9CYXNlRmxvdy50cyIsIi4uL3NyYy9jb3JlL1V0aWxzLnRzIiwiLi4vc3JjL2NvcmUvRGF0YVZpZXcudHMiLCIuLi9zcmMvY29yZS9WYXJpYWJsZU5vZGUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X1Rvb2xiYXIudHMiLCIuLi9zcmMvZGVzZ2luZXIvTm9kZUl0ZW0udHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL1ZhcmlhYmxlVmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Ub29sYm94Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Qcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kb2NrL0RvY2tCYXNlLnRzIiwiLi4vc3JjL2RvY2svQ29udHJvbERvY2sudHMiLCIuLi9zcmMvZG9jay9WYXJpYWJsZURvY2sudHMiLCIuLi9zcmMvZG9jay9Qcm9qZWN0RG9jay50cyIsIi4uL3NyYy9kb2NrL1Byb3BlcnR5RG9jay50cyIsIi4uL3NyYy9kb2NrL1ZpZXdEb2NrLnRzIiwiLi4vc3JjL2RvY2svRG9ja01hbmFnZXIudHMiLCIuLi9zcmMvc3lzdGVtcy9jb250cm9sLnRzIiwiLi4vc3JjL3N5c3RlbXMvU3lzdGVtQmFzZS50cyIsIi4uL3NyYy9zeXN0ZW1zL1N5c3RlbVZ1ZS50cyIsIi4uL3NyYy9kb2NrL1RhYkRvY2sudHMiLCIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvVmlzdWFsRmxvdy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXZlbnRFbnVtID0ge1xyXG4gIGluaXQ6IFwiaW5pdFwiLFxyXG4gIGRhdGFDaGFuZ2U6IFwiZGF0YUNoYW5nZVwiLFxyXG4gIHNob3dQcm9wZXJ0eTogXCJzaG93UHJvcGVydHlcIixcclxuICBvcGVuUHJvamVjdDogXCJvcGVuUHJvamVjdFwiLFxyXG4gIG5ld1Byb2plY3Q6IFwibmV3UHJvamVjdFwiLFxyXG4gIGNoYW5nZVZhcmlhYmxlOiBcImNoYW5nZVZhcmlhYmxlXCIsXHJcbiAgY2hhbmdlOiBcImNoYW5nZVwiLFxyXG4gIGRpc3Bvc2U6IFwiZGlzcG9zZVwiLFxyXG4gIGdyb3VwQ2hhbmdlOiBcImdyb3VwQ2hhbmdlXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcclxuICBsZWZ0OiBcInZzLWxlZnRcIixcclxuICB0b3A6IFwidnMtdG9wXCIsXHJcbiAgdmlldzogXCJ2cy12aWV3XCIsXHJcbiAgYm90dG9tOiBcInZzLWJvdHRvbVwiLFxyXG4gIHJpZ2h0OiBcInZzLXJpZ2h0XCIsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUVudW0gPSB7XHJcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcclxuICBzb2x1dGlvbjogJ21haW5fc29sdXRpb24nLFxyXG4gIGxpbmU6ICdtYWluX2xpbmUnLFxyXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXHJcbiAgZ3JvdXBDYXZhczogXCJtYWluX2dyb3VwQ2F2YXNcIixcclxufTtcclxuIiwiaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4vSUZsb3dcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudEZsb3cgaW1wbGVtZW50cyBJRXZlbnQge1xyXG4gIHByaXZhdGUgZXZlbnRzOiBhbnkgPSB7fTtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG4gIHB1YmxpYyBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgdGhpcy5vbihldmVudCwgY2FsbGJhY2spO1xyXG4gIH1cclxuICAvKiBFdmVudHMgKi9cclxuICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBsaXN0ZW5lciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24sIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGNhbGxiYWNrfWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaXMgbm90IGEgc3RyaW5nXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBUaGUgZXZlbnQgbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCB0aGUgZ2l2ZW4gdHlwZSBpcyAke3R5cGVvZiBldmVudH1gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0ge1xyXG4gICAgICAgIGxpc3RlbmVyczogW11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuXHJcbiAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50XSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVyc1xyXG4gICAgY29uc3QgbGlzdGVuZXJJbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKVxyXG4gICAgY29uc3QgaGFzTGlzdGVuZXIgPSBsaXN0ZW5lckluZGV4ID4gLTFcclxuICAgIGlmIChoYXNMaXN0ZW5lcikgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LCAxKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiB7XHJcbiAgICAgIGxpc3RlbmVyKGRldGFpbHMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuL0lGbG93XCI7XG5pbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi9Db25zdGFudFwiO1xuaW1wb3J0IHsgRXZlbnRGbG93IH0gZnJvbSBcIi4vRXZlbnRGbG93XCI7XG5cbmV4cG9ydCBjbGFzcyBEYXRhRmxvdyB7XG4gIHByaXZhdGUgZGF0YTogYW55ID0ge307XG4gIHByaXZhdGUgcHJvcGVydGllczogYW55ID0gbnVsbDtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdztcbiAgcHVibGljIGdldFByb3BlcnRpZXMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzO1xuICB9XG4gIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XG4gICAgdGhpcy5ldmVudHMuZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHByb3BlcnR5OiBJUHJvcGVydHkgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50RmxvdygpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLmxvYWQoZGF0YSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBJbml0RGF0YShkYXRhOiBhbnkgPSBudWxsLCBwcm9wZXJ0aWVzOiBhbnkgPSAtMSkge1xuICAgIGlmIChwcm9wZXJ0aWVzICE9PSAtMSkge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICB9XG4gICAgdGhpcy5sb2FkKGRhdGEpO1xuICB9XG4gIHByaXZhdGUgZXZlbnREYXRhQ2hhbmdlKGtleTogc3RyaW5nLCBrZXlDaGlsZDogc3RyaW5nLCB2YWx1ZUNoaWxkOiBhbnksIHNlbmRlckNoaWxkOiBhbnksIGluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaW5kZXgpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fV8ke2tleUNoaWxkfWAsIHtcbiAgICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQsIGluZGV4XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fWAsIHtcbiAgICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQsIGluZGV4XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7a2V5Q2hpbGR9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fWAsIHtcbiAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIFJlbW92ZUV2ZW50RGF0YShpdGVtOiBEYXRhRmxvdywga2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAoIWl0ZW0pIHJldHVybjtcbiAgICBpdGVtLnJlbW92ZUxpc3RlbmVyKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfWAsICh7IGtleToga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkIH06IGFueSkgPT4gdGhpcy5ldmVudERhdGFDaGFuZ2Uoa2V5LCBrZXlDaGlsZCwgdmFsdWVDaGlsZCwgc2VuZGVyQ2hpbGQsIGluZGV4KSk7XG4gIH1cbiAgcHVibGljIE9uRXZlbnREYXRhKGl0ZW06IERhdGFGbG93LCBrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgIGl0ZW0ub24oYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcbiAgfVxuICBwcml2YXRlIEJpbmRFdmVudCh2YWx1ZTogYW55LCBrZXk6IHN0cmluZykge1xuICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgdGhpcy5PbkV2ZW50RGF0YSh2YWx1ZSBhcyBEYXRhRmxvdywga2V5KTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmICh2YWx1ZSBhcyBbXSkubGVuZ3RoID4gMCAmJiB2YWx1ZVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAodmFsdWUgYXMgRGF0YUZsb3dbXSkuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3csIGluZGV4OiBudW1iZXIpID0+IHRoaXMuT25FdmVudERhdGEoaXRlbSwga2V5LCBpbmRleCkpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgU2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBzZW5kZXI6IGFueSA9IG51bGwsIGlzRGlzcGF0Y2g6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgaWYgKHRoaXMuZGF0YVtrZXldICE9IHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5kYXRhW2tleV0pIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVtrZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICAgICB0aGlzLlJlbW92ZUV2ZW50RGF0YSgodGhpcy5kYXRhW2tleV0gYXMgRGF0YUZsb3cpLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZGF0YVtrZXldKSAmJiAodGhpcy5kYXRhW2tleV0gYXMgW10pLmxlbmd0aCA+IDAgJiYgdGhpcy5kYXRhW2tleV1bMF0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICAgICh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5SZW1vdmVFdmVudERhdGEoaXRlbSwga2V5LCBpbmRleCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLkJpbmRFdmVudCh2YWx1ZSwga2V5KTtcbiAgICB9XG4gICAgdGhpcy5kYXRhW2tleV0gPSB2YWx1ZTtcbiAgICBpZiAoaXNEaXNwYXRjaCkge1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9YCwge1xuICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwge1xuICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cbiAgcHVibGljIFNldERhdGEoZGF0YTogYW55LCBzZW5kZXI6IGFueSA9IG51bGwsIGlzQ2xlYXJEYXRhID0gZmFsc2UpIHtcblxuICAgIGlmIChpc0NsZWFyRGF0YSkgdGhpcy5kYXRhID0ge307XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgbGV0ICRkYXRhOiBEYXRhRmxvdyA9IGRhdGEgYXMgRGF0YUZsb3c7XG4gICAgICBpZiAoIXRoaXMucHJvcGVydHkgJiYgJGRhdGEucHJvcGVydHkpIHRoaXMucHJvcGVydHkgPSAkZGF0YS5wcm9wZXJ0eTtcbiAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMucHJvcGVydGllcykpIHtcbiAgICAgICAgICB0aGlzLlNldChrZXksICRkYXRhLkdldChrZXkpLCBzZW5kZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKCRkYXRhLmdldFByb3BlcnRpZXMoKSkpIHtcbiAgICAgICAgICB0aGlzLlNldChrZXksICRkYXRhLkdldChrZXkpLCBzZW5kZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgdGhpcy5TZXQoa2V5LCBkYXRhW2tleV0sIHNlbmRlciwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIEdldChrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGFba2V5XTtcbiAgfVxuICBwdWJsaWMgQXBwZW5kKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgaWYgKCF0aGlzLmRhdGFba2V5XSkgdGhpcy5kYXRhW2tleV0gPSBbXTtcbiAgICB0aGlzLmRhdGFba2V5XSA9IFsuLi50aGlzLmRhdGFba2V5XSwgdmFsdWVdO1xuICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xuICB9XG4gIHB1YmxpYyBSZW1vdmUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5SZW1vdmVFdmVudERhdGEodGhpcy5kYXRhW2tleV1baW5kZXhdLCBrZXkpO1xuICAgICAgdGhpcy5kYXRhW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGxvYWQoZGF0YTogYW55KSB7XG4gICAgdGhpcy5kYXRhID0ge307XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydHk/LmdldFByb3BlcnR5QnlLZXkoZGF0YS5rZXkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICB0aGlzLmRhdGFba2V5XSA9IChkYXRhPy5ba2V5XSA/PyAoKHR5cGVvZiB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQoKSA6IHRoaXMucHJvcGVydGllc1trZXldPy5kZWZhdWx0KSA/PyBcIlwiKSk7XG4gICAgICAgIGlmICghKHRoaXMuZGF0YVtrZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpICYmIHRoaXMuZGF0YVtrZXldLmtleSkge1xuICAgICAgICAgIHRoaXMuZGF0YVtrZXldID0gbmV3IERhdGFGbG93KHRoaXMucHJvcGVydHksIHRoaXMuZGF0YVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFba2V5XSkgJiYgdGhpcy5wcm9wZXJ0eSAmJiAhKHRoaXMuZGF0YVtrZXldWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpKSB7XG4gICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSB0aGlzLmRhdGFba2V5XS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIERhdGFGbG93KSAmJiBpdGVtLmtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFGbG93KHRoaXMucHJvcGVydHksIGl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5CaW5kRXZlbnQodGhpcy5kYXRhW2tleV0sIGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pzb24oKSk7XG4gIH1cbiAgcHVibGljIHRvSnNvbigpIHtcbiAgICBsZXQgcnM6IGFueSA9IHt9O1xuICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnR5Py5nZXRQcm9wZXJ0eUJ5S2V5KHRoaXMuZGF0YS5rZXkpO1xuICAgIH1cbiAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgcnNba2V5XSA9IHRoaXMuR2V0KGtleSk7XG4gICAgICBpZiAocnNba2V5XSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgIHJzW2tleV0gPSByc1trZXldLnRvSnNvbigpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJzW2tleV0pICYmIChyc1trZXldIGFzIFtdKS5sZW5ndGggPiAwICYmIHJzW2tleV1bMF0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICByc1trZXldID0gcnNba2V5XS5tYXAoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLnRvSnNvbigpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJzO1xuICB9XG4gIHB1YmxpYyBkZWxldGUoKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgdGhpcy5kYXRhID0ge307XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcclxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgRXZlbnRGbG93IH0gZnJvbSBcIi4vRXZlbnRGbG93XCI7XHJcbmltcG9ydCB7IElFdmVudCB9IGZyb20gXCIuL0lGbG93XCI7XHJcbmV4cG9ydCBjbGFzcyBGbG93Q29yZSBpbXBsZW1lbnRzIElFdmVudCB7XHJcbiAgcHVibGljIEdldElkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2lkJyk7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXRJZChpZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgnaWQnLCBpZCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBwcm9wZXJ0aWVzOiBhbnkgPSB7fTtcclxuICBwdWJsaWMgZGF0YTogRGF0YUZsb3cgPSBuZXcgRGF0YUZsb3coKTtcclxuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICBwdWJsaWMgQ2hlY2tFbGVtZW50Q2hpbGQoZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbE5vZGUgPT0gZWwgfHwgdGhpcy5lbE5vZGUuY29udGFpbnMoZWwpO1xyXG4gIH1cclxuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xyXG4gIHB1YmxpYyBTZXREYXRhKGRhdGE6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsKSB7XHJcbiAgICB0aGlzLmRhdGEuU2V0RGF0YShkYXRhLCBzZW5kZXIpO1xyXG4gIH1cclxuICBwdWJsaWMgU2V0RGF0YUZsb3coZGF0YTogRGF0YUZsb3cpIHtcclxuICAgIHRoaXMuZGF0YS5TZXREYXRhKGRhdGEsIHRoaXMsIHRydWUpO1xyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2goYGJpbmRfZGF0YV9ldmVudGAsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xyXG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7IGRhdGEsIHNlbmRlcjogdGhpcyB9KTtcclxuICB9XHJcbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcclxuICB9XHJcbiAgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XHJcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XHJcbiAgfVxyXG4gIFJlbW92ZURhdGFFdmVudCgpIHtcclxuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGF0YUNoYW5nZSwgKHsga2V5LCB2YWx1ZSwgc2VuZGVyIH06IGFueSkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5jaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUZsb3c8VFBhcmVudCBleHRlbmRzIEZsb3dDb3JlPiBleHRlbmRzIEZsb3dDb3JlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHBhcmVudDogVFBhcmVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IExPRyA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IGNvbnNvbGUubG9nKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKTtcbmV4cG9ydCBjb25zdCBnZXREYXRlID0gKCkgPT4gKG5ldyBEYXRlKCkpO1xuZXhwb3J0IGNvbnN0IGdldFRpbWUgPSAoKSA9PiBnZXREYXRlKCkuZ2V0VGltZSgpO1xuZXhwb3J0IGNvbnN0IGdldFV1aWQgPSAoKSA9PiB7XG4gIC8vIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQxMjIudHh0XG4gIGxldCBzOiBhbnkgPSBbXTtcbiAgbGV0IGhleERpZ2l0cyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM2OyBpKyspIHtcbiAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XG4gIH1cbiAgc1sxNF0gPSBcIjRcIjsgIC8vIGJpdHMgMTItMTUgb2YgdGhlIHRpbWVfaGlfYW5kX3ZlcnNpb24gZmllbGQgdG8gMDAxMFxuICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHNbMTldICYgMHgzKSB8IDB4OCwgMSk7ICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxuICBzWzhdID0gc1sxM10gPSBzWzE4XSA9IHNbMjNdID0gXCItXCI7XG5cbiAgbGV0IHV1aWQgPSBzLmpvaW4oXCJcIik7XG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgY29uc3QgY29tcGFyZVNvcnQgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgaWYgKGEuc29ydCA8IGIuc29ydCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5zb3J0ID4gYi5zb3J0KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IChmbjogYW55KSA9PiB7XG4gIHJldHVybiBmbiAmJiBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xufVxuZXhwb3J0IGNvbnN0IGRvd25sb2FkT2JqZWN0QXNKc29uID0gKGV4cG9ydE9iajogYW55LCBleHBvcnROYW1lOiBzdHJpbmcpID0+IHtcbiAgdmFyIGRhdGFTdHIgPSBcImRhdGE6dGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZXhwb3J0T2JqKSk7XG4gIHZhciBkb3dubG9hZEFuY2hvck5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGRhdGFTdHIpO1xuICBkb3dubG9hZEFuY2hvck5vZGUuc2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIiwgZXhwb3J0TmFtZSArIFwiLmpzb25cIik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRBbmNob3JOb2RlKTsgLy8gcmVxdWlyZWQgZm9yIGZpcmVmb3hcbiAgZG93bmxvYWRBbmNob3JOb2RlLmNsaWNrKCk7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5yZW1vdmUoKTtcbn1cbmV4cG9ydCBjb25zdCByZWFkRmlsZUxvY2FsID0gKGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgdmFyIGlucHV0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZSgndHlwZScsICdmaWxlJyk7XG4gIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2s/Lihmci5yZXN1bHQpO1xuICAgIH1cbiAgICBpZiAoaW5wdXRFbCAmJiBpbnB1dEVsLmZpbGVzKVxuICAgICAgZnIucmVhZEFzVGV4dChpbnB1dEVsLmZpbGVzWzBdKTtcbiAgfSk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW5wdXRFbCk7XG4gIGlucHV0RWwuY2xpY2soKTtcbiAgaW5wdXRFbC5yZW1vdmUoKTtcbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4vSUZsb3dcIjtcclxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgRGF0YUZsb3cgfSBmcm9tIFwiLi9EYXRhRmxvd1wiO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vVXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBUYWdWaWV3ID0gWydTUEFOJywgJ0RJVicsICdQJywgJ1RFWFRBUkVBJ107XHJcbmV4cG9ydCBjbGFzcyBEYXRhVmlldyB7XHJcbiAgcHJpdmF0ZSBlbE5vZGU6IEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcbiAgcHJpdmF0ZSBwcm9wZXJ0eTogYW55O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50LCBwcml2YXRlIGRhdGE6IERhdGFGbG93LCBwcml2YXRlIG1haW46IElNYWluLCBwcml2YXRlIGtleU5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICBpZiAodGhpcy5rZXlOYW1lKSB7XHJcbiAgICAgIGlmICghZWwuZ2V0QXR0cmlidXRlKCdub2RlOm1vZGVsJykpIHtcclxuICAgICAgICB0aGlzLnByb3BlcnR5ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLkdldCgna2V5JykpPy5bdGhpcy5rZXlOYW1lXTtcclxuICAgICAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydHkuZWRpdCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMucHJvcGVydHkuc2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKFwibm9kZS1mb3JtLWNvbnRyb2xcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnLCB0aGlzLmtleU5hbWUpO1xyXG4gICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmtleU5hbWUgPSBlbD8uZ2V0QXR0cmlidXRlKCdub2RlOm1vZGVsJyk7XHJcbiAgICAgIGlmICh0aGlzLmtleU5hbWUpIHtcclxuICAgICAgICB0aGlzLnByb3BlcnR5ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLkdldCgna2V5JykpPy5bdGhpcy5rZXlOYW1lXTtcclxuICAgICAgICB0aGlzLmVsTm9kZSA9IHRoaXMuZWw7XHJcbiAgICAgICAgbGV0IG5vZGVFZGl0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgbm9kZUVkaXRvci5jbGFzc0xpc3QuYWRkKCdub2RlLWVkaXRvcicpO1xyXG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQ/Lmluc2VydEJlZm9yZShub2RlRWRpdG9yLCBlbCk7XHJcbiAgICAgICAgZWwucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgIG5vZGVFZGl0b3IuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5rZXlOYW1lKVxyXG4gICAgICB0aGlzLmJpbmREYXRhKCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgYmluZERhdGEoKSB7XHJcbiAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWxOb2RlKSB7XHJcbiAgICAgIHRoaXMuZGF0YS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHt0aGlzLmtleU5hbWV9YCwgdGhpcy5iaW5kSW5wdXQuYmluZCh0aGlzKSk7XHJcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xyXG4gICAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICAgIGlmICh0aGlzLnByb3BlcnR5ICYmIHRoaXMucHJvcGVydHkuc2VsZWN0ICYmIGlzRnVuY3Rpb24odGhpcy5wcm9wZXJ0eS5kYXRhU2VsZWN0KSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnByb3BlcnR5LmRhdGFTZWxlY3QoeyBlbE5vZGU6IHRoaXMuZWxOb2RlLCBtYWluOiB0aGlzLm1haW4sIGtleTogdGhpcy5rZXlOYW1lIH0pLm1hcCgoeyB2YWx1ZSwgdGV4dCB9OiBhbnkpID0+IHtcclxuICAgICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgb3B0aW9uLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgcmV0dXJuIG9wdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBmb3IgKGxldCBvcHRpb24gb2Ygb3B0aW9ucykge1xyXG4gICAgICAgICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnByb3BlcnR5ICYmIGlzRnVuY3Rpb24odGhpcy5wcm9wZXJ0eS5zY3JpcHQpKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eS5zY3JpcHQoeyBlbE5vZGU6IHRoaXMuZWxOb2RlLCBtYWluOiB0aGlzLm1haW4sIGtleTogdGhpcy5rZXlOYW1lIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2V0Tm9kZVZhbHVlKHRoaXMuZGF0YS5HZXQodGhpcy5rZXlOYW1lKSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgc2V0Tm9kZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmVsTm9kZSkge1xyXG4gICAgICBpZiAoVGFnVmlldy5pbmNsdWRlcyh0aGlzLmVsTm9kZS50YWdOYW1lKSkge1xyXG4gICAgICAgICh0aGlzLmVsTm9kZSBhcyBhbnkpLmlubmVyVGV4dCA9IGAke3ZhbHVlfWA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgKHRoaXMuZWxOb2RlIGFzIGFueSkudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcbiAgcHJpdmF0ZSBiaW5kSW5wdXQoeyB2YWx1ZSwgc2VuZGVyIH06IGFueSkge1xyXG4gICAgaWYgKHNlbmRlciAhPT0gdGhpcyAmJiB0aGlzLmVsTm9kZSAmJiBzZW5kZXIuZWxOb2RlICE9PSB0aGlzLmVsTm9kZSkge1xyXG4gICAgICB0aGlzLnNldE5vZGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgYmluZEV2ZW50KCkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbE5vZGUpIHtcclxuICAgICAgICB0aGlzLmRhdGEuU2V0KHRoaXMua2V5TmFtZSwgKHRoaXMuZWxOb2RlIGFzIGFueSkudmFsdWUsIHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIERlbGV0ZSgpIHtcclxuICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbE5vZGUpIHtcclxuICAgICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke3RoaXMua2V5TmFtZX1gLCB0aGlzLmJpbmRJbnB1dC5iaW5kKHRoaXMpKTtcclxuICAgICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XHJcbiAgICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBCaW5kRWxlbWVudChlbDogRWxlbWVudCwgZGF0YTogRGF0YUZsb3csIG1haW46IElNYWluLCBrZXk6IHN0cmluZyB8IG51bGwgPSBudWxsKTogRGF0YVZpZXdbXSB7XHJcbiAgICBpZiAoZWwuY2hpbGRFbGVtZW50Q291bnQgPT0gMCB8fCBlbC5nZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnKSkge1xyXG4gICAgICByZXR1cm4gW25ldyBEYXRhVmlldyhlbCwgZGF0YSwgbWFpbiwga2V5KV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbC5xdWVyeVNlbGVjdG9yQWxsKCdbbm9kZVxcXFw6bW9kZWxdJykpLm1hcCgoaXRlbTogRWxlbWVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGFWaWV3KGl0ZW0sIGRhdGEsIG1haW4pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcblxuZXhwb3J0IGNvbnN0IFNjb3BlUm9vdCA9IFwicm9vdFwiO1xuZXhwb3J0IGNsYXNzIFZhcmlhYmxlTm9kZSBleHRlbmRzIEV2ZW50RmxvdyB7XG4gIG5hbWU6IHN0cmluZyA9ICcnO1xuICB2YWx1ZTogYW55O1xuICB0eXBlOiBzdHJpbmcgPSAnJztcbiAgaW5pdGFsVmFsdWU6IGFueTtcbiAgc2NvcGU6IHN0cmluZyA9IFNjb3BlUm9vdDtcbn1cbiIsImltcG9ydCB7IGdldFRpbWUgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X0V2ZW50IHtcblxuICBwcml2YXRlIHRpbWVGYXN0Q2xpY2s6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgdGFnSW5nb3JlID0gWydpbnB1dCcsICdidXR0b24nLCAnYScsICd0ZXh0YXJlYSddO1xuXG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZmxnTW92ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYXZfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdl95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgcG9zX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcG9zX3k6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgLyogTW91c2UgYW5kIFRvdWNoIEFjdGlvbnMgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpKTtcblxuICAgIC8qIERyb3AgRHJhcCAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5ub2RlX2Ryb3BFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5ub2RlX2RyYWdvdmVyLmJpbmQodGhpcykpO1xuICAgIC8qIFpvb20gTW91c2UgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLnpvb21fZW50ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogRGVsZXRlICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHRtZW51KGV2OiBhbnkpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfVxuICBwcml2YXRlIG5vZGVfZHJhZ292ZXIoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcm9wRW5kKGV2OiBhbnkpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGxldCBrZXlOb2RlOiBhbnkgPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xDaG9vc2UoKTtcbiAgICBpZiAoIWtleU5vZGUgJiYgZXYudHlwZSAhPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tPbmx5Tm9kZShrZXlOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9kZUl0ZW0gPSB0aGlzLnBhcmVudC5BZGROb2RlKGtleU5vZGUsIHtcbiAgICAgIGdyb3VwOiB0aGlzLnBhcmVudC5DdXJyZW50R3JvdXAoKVxuICAgIH0pO1xuICAgIG5vZGVJdGVtLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9pbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIFN0YXJ0TW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMudGFnSW5nb3JlLmluY2x1ZGVzKGV2LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGltZUZhc3RDbGljayA9IGdldFRpbWUoKTtcbiAgICBpZiAoZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWFpbi1wYXRoJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkNhbnZhcztcbiAgICBsZXQgbm9kZUNob29zZSA9IHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKTtcbiAgICBpZiAobm9kZUNob29zZSAmJiBub2RlQ2hvb3NlLkNoZWNrRWxlbWVudENoaWxkKGV2LnRhcmdldCkpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmIChub2RlQ2hvb3NlICYmIHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuTm9kZSAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5MaW5lO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBuZXcgTGluZShub2RlQ2hvb3NlLCBmcm9tSW5kZXgpO1xuICAgICAgdGhpcy50ZW1wTGluZS50ZW1wID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICB0aGlzLmF2X3ggPSB0aGlzLnBhcmVudC5nZXRYKCk7XG4gICAgICB0aGlzLmF2X3kgPSB0aGlzLnBhcmVudC5nZXRZKCk7XG4gICAgfVxuICAgIHRoaXMuZmxnRHJhcCA9IHRydWU7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHVibGljIE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgdGhpcy5mbGdNb3ZlID0gdHJ1ZTtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vdmVUeXBlKSB7XG4gICAgICBjYXNlIE1vdmVUeXBlLkNhbnZhczpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5hdl94ICsgdGhpcy5wYXJlbnQuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpXG4gICAgICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgICAgIHRoaXMucGFyZW50LnNldFkoeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTm9kZTpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5wYXJlbnQuQ2FsY1godGhpcy5wb3NfeCAtIGVfcG9zX3gpO1xuICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wb3NfeSAtIGVfcG9zX3kpO1xuICAgICAgICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgICAgICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgICAgICAgIHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKT8udXBkYXRlUG9zaXRpb24oeCwgeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTGluZTpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0aGlzLnRlbXBMaW5lKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMucGFyZW50LkNhbGNYKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wYXJlbnQuZWxDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSAtIGVfcG9zX3kpO1xuICAgICAgICAgICAgdGhpcy50ZW1wTGluZS51cGRhdGVUbyh0aGlzLnBhcmVudC5lbENhbnZhcy5vZmZzZXRMZWZ0IC0geCwgdGhpcy5wYXJlbnQuZWxDYW52YXMub2Zmc2V0VG9wIC0geSk7XG4gICAgICAgICAgICBsZXQgbm9kZUVsID0gZXYudGFyZ2V0LmNsb3Nlc3QoJ1tub2RlLWlkXScpO1xuICAgICAgICAgICAgbGV0IG5vZGVJZCA9IG5vZGVFbD8uZ2V0QXR0cmlidXRlKCdub2RlLWlkJyk7XG4gICAgICAgICAgICBsZXQgbm9kZVRvID0gbm9kZUlkID8gdGhpcy5wYXJlbnQuR2V0Tm9kZUJ5SWQobm9kZUlkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChub2RlVG8gJiYgZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm5vZGUtZG90XCIpKSB7XG4gICAgICAgICAgICAgIGxldCB0b0luZGV4ID0gZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IHRvSW5kZXggPSBub2RlRWw/LnF1ZXJ5U2VsZWN0b3IoJy5ub2RlLWRvdCcpPy5bMF0/LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICB0aGlzLm1vdXNlX3ggPSBlX3Bvc194O1xuICAgICAgdGhpcy5tb3VzZV95ID0gZV9wb3NfeTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBFbmRNb3ZlKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmxnRHJhcCkgcmV0dXJuO1xuICAgIC8vZml4IEZhc3QgQ2xpY2tcbiAgICBpZiAoKChnZXRUaW1lKCkgLSB0aGlzLnRpbWVGYXN0Q2xpY2spIDwgMTAwKSB8fCAhdGhpcy5mbGdNb3ZlKSB7XG4gICAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVfcG9zX3ggPSAwO1xuICAgIGxldCBlX3Bvc195ID0gMDtcbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBlX3Bvc194ID0gdGhpcy5tb3VzZV94O1xuICAgICAgZV9wb3NfeSA9IHRoaXMubW91c2VfeTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT09IE1vdmVUeXBlLkNhbnZhcykge1xuICAgICAgbGV0IHggPSB0aGlzLmF2X3ggKyB0aGlzLnBhcmVudC5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgIGxldCB5ID0gdGhpcy5hdl95ICsgdGhpcy5wYXJlbnQuQ2FsY1koLSh0aGlzLnBvc195IC0gZV9wb3NfeSkpXG4gICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgdGhpcy5wYXJlbnQuc2V0WSh5KTtcbiAgICAgIHRoaXMuYXZfeCA9IDA7XG4gICAgICB0aGlzLmF2X3kgPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZW1wTGluZSkge1xuICAgICAgdGhpcy50ZW1wTGluZS5DbG9uZSgpO1xuICAgICAgdGhpcy50ZW1wTGluZS5kZWxldGUoKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgIHRoaXMuZmxnTW92ZSA9IGZhbHNlO1xuICB9XG4gIHByaXZhdGUga2V5ZG93bihldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKGV2LmtleSA9PT0gJ0RlbGV0ZScgfHwgKGV2LmtleSA9PT0gJ0JhY2tzcGFjZScgJiYgZXYubWV0YUtleSkpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpPy5kZWxldGUoKTtcbiAgICAgIHRoaXMucGFyZW50LmdldExpbmVDaG9vc2UoKT8uZGVsZXRlKCk7XG4gICAgfVxuICAgIGlmIChldi5rZXkgPT09ICdGMicpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBQcm9wZXJ0eUVudW0gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgTm9kZUl0ZW0gfSBmcm9tIFwiLi9Ob2RlSXRlbVwiO1xuXG5leHBvcnQgY2xhc3MgTGluZSB7XG4gIHB1YmxpYyBlbE5vZGU6IFNWR0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJzdmdcIik7XG4gIHB1YmxpYyBlbFBhdGg6IFNWR1BhdGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIFwicGF0aFwiKTtcbiAgcHJpdmF0ZSBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xuICBwcml2YXRlIGN1cnZhdHVyZTogbnVtYmVyID0gMC41O1xuICBwdWJsaWMgdGVtcDogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGZyb206IE5vZGVJdGVtLCBwdWJsaWMgZnJvbUluZGV4OiBudW1iZXIgPSAwLCBwdWJsaWMgdG86IE5vZGVJdGVtIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBwdWJsaWMgdG9JbmRleDogbnVtYmVyID0gMCwgZGF0YTogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoXCJtYWluLXBhdGhcIik7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnJyk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcImNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFBhdGgpO1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gICAgdGhpcy5mcm9tLkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy50bz8uQWRkTGluZSh0aGlzKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLkluaXREYXRhKFxuICAgICAge1xuICAgICAgICBmcm9tOiB0aGlzLmZyb20uR2V0SWQoKSxcbiAgICAgICAgZnJvbUluZGV4OiB0aGlzLmZyb21JbmRleCxcbiAgICAgICAgdG86IHRoaXMudG8/LkdldElkKCksXG4gICAgICAgIHRvSW5kZXg6IHRoaXMudG9JbmRleFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLi4uIHRoaXMuZnJvbS5wYXJlbnQubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5saW5lKSB8fCB7fVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5mcm9tLmRhdGEuQXBwZW5kKCdsaW5lcycsIHRoaXMuZGF0YSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRvKHRvX3g6IG51bWJlciwgdG9feTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmZyb20gfHwgdGhpcy5mcm9tLmVsTm9kZSA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHsgeDogZnJvbV94LCB5OiBmcm9tX3kgfTogYW55ID0gdGhpcy5mcm9tLmdldFBvc3Rpc2lvbkRvdCh0aGlzLmZyb21JbmRleCk7XG4gICAgdmFyIGxpbmVDdXJ2ZSA9IHRoaXMuY3JlYXRlQ3VydmF0dXJlKGZyb21feCwgZnJvbV95LCB0b194LCB0b195LCB0aGlzLmN1cnZhdHVyZSwgJ290aGVyJyk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBsaW5lQ3VydmUpO1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpOiBMaW5lIHtcbiAgICAvL1Bvc3Rpb24gb3V0cHV0XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50by5lbE5vZGUpIHtcbiAgICAgIGxldCB7IHg6IHRvX3gsIHk6IHRvX3kgfTogYW55ID0gdGhpcy50by5nZXRQb3N0aXNpb25Eb3QodGhpcy50b0luZGV4KTtcbiAgICAgIHRoaXMudXBkYXRlVG8odG9feCwgdG9feSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHB1YmxpYyBBY3RpdmUoZmxnOiBhbnkgPSB0cnVlKSB7XG4gICAgaWYgKGZsZykge1xuICAgICAgdGhpcy5lbFBhdGguY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIGNyZWF0ZUN1cnZhdHVyZShzdGFydF9wb3NfeDogbnVtYmVyLCBzdGFydF9wb3NfeTogbnVtYmVyLCBlbmRfcG9zX3g6IG51bWJlciwgZW5kX3Bvc195OiBudW1iZXIsIGN1cnZhdHVyZV92YWx1ZTogbnVtYmVyLCB0eXBlOiBzdHJpbmcpIHtcbiAgICBsZXQgbGluZV94ID0gc3RhcnRfcG9zX3g7XG4gICAgbGV0IGxpbmVfeSA9IHN0YXJ0X3Bvc195O1xuICAgIGxldCB4ID0gZW5kX3Bvc194O1xuICAgIGxldCB5ID0gZW5kX3Bvc195O1xuICAgIGxldCBjdXJ2YXR1cmUgPSBjdXJ2YXR1cmVfdmFsdWU7XG4gICAgLy90eXBlIG9wZW5jbG9zZSBvcGVuIGNsb3NlIG90aGVyXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3RoZXInOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcblxuICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG5cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZGVsZXRlKG5vZGVUaGlzOiBhbnkgPSBudWxsLCBpc0NsZWFyRGF0YSA9IHRydWUpIHtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoPy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMuZnJvbS5kYXRhLlJlbW92ZSgnbGluZXMnLCB0aGlzLmRhdGEpO1xuICAgIGlmICh0aGlzLmZyb20gIT0gbm9kZVRoaXMpXG4gICAgICB0aGlzLmZyb20uUmVtb3ZlTGluZSh0aGlzKTtcbiAgICBpZiAodGhpcy50byAhPSBub2RlVGhpcylcbiAgICAgIHRoaXMudG8/LlJlbW92ZUxpbmUodGhpcyk7XG4gICAgdGhpcy5lbFBhdGgucmVtb3ZlKCk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlKCk7XG4gIH1cbiAgcHVibGljIFN0YXJ0U2VsZWN0ZWQoZTogYW55KSB7XG4gICAgdGhpcy5mcm9tLnBhcmVudC5zZXRMaW5lQ2hvb3NlKHRoaXMpXG4gIH1cbiAgcHVibGljIHNldE5vZGVUbyhub2RlOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50byA9IG5vZGU7XG4gICAgdGhpcy50b0luZGV4ID0gdG9JbmRleDtcbiAgfVxuICBwdWJsaWMgQ2xvbmUoKSB7XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50b0luZGV4ICYmIHRoaXMuZnJvbSAhPSB0aGlzLnRvICYmICF0aGlzLmZyb20uY2hlY2tMaW5lRXhpc3RzKHRoaXMuZnJvbUluZGV4LCB0aGlzLnRvLCB0aGlzLnRvSW5kZXgpKSB7XG4gICAgICByZXR1cm4gbmV3IExpbmUodGhpcy5mcm9tLCB0aGlzLmZyb21JbmRleCwgdGhpcy50bywgdGhpcy50b0luZGV4KS5VcGRhdGVVSSgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBEZXNnaW5lclZpZXdfVG9vbGJhciB7XG4gIHByaXZhdGUgZWxOb2RlOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFBhdGhHcm91cDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHJpdmF0ZSBidG5CYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgdGhpcy5lbE5vZGUgPSBwYXJlbnQuZWxUb29sYmFyO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuY2xhc3NMaXN0LmFkZCgndG9vbGJhci1ncm91cCcpO1xuICAgIHRoaXMucmVuZGVyVUkoKTtcbiAgICB0aGlzLnJlbmRlclBhdGhHcm91cCgpO1xuICB9XG4gIHB1YmxpYyByZW5kZXJQYXRoR3JvdXAoKSB7XG4gICAgdGhpcy5idG5CYWNrLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuaW5uZXJIVE1MID0gYGA7XG4gICAgbGV0IGdyb3VwcyA9IHRoaXMucGFyZW50LkdldEdyb3VwTmFtZSgpO1xuICAgIGxldCBsZW4gPSBncm91cHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGVuIDwgMCkgcmV0dXJuO1xuICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRleHQuaW5uZXJIVE1MID0gYFJvb3RgO1xuICAgIHRleHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHRoaXMucGFyZW50LkJhY2tHcm91cCgnUm9vdCcpKTtcbiAgICB0aGlzLmVsUGF0aEdyb3VwLmFwcGVuZENoaWxkKHRleHQpO1xuICAgIHRoaXMuYnRuQmFjay5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgZm9yIChsZXQgaW5kZXggPSBsZW47IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGV4dC5pbm5lckhUTUwgPSBgPj4ke2dyb3Vwc1tpbmRleF0udGV4dH1gO1xuICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ2dyb3VwJywgZ3JvdXBzW2luZGV4XS5pZCk7XG4gICAgICB0ZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB0aGlzLnBhcmVudC5CYWNrR3JvdXAoZ3JvdXBzW2luZGV4XS5pZCkpO1xuICAgICAgdGhpcy5lbFBhdGhHcm91cC5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHJlbmRlclVJKCkge1xuICAgIGlmICghdGhpcy5lbE5vZGUpIHJldHVybjtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgYDtcbiAgICB0aGlzLmJ0bkJhY2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC5CYWNrR3JvdXAoKSk7XG4gICAgdGhpcy5idG5CYWNrLmlubmVySFRNTCA9IGBCYWNrYDtcbiAgICBsZXQgYnRuWm9vbUluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnRuWm9vbUluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wYXJlbnQuem9vbV9pbigpKTtcbiAgICBidG5ab29tSW4uaW5uZXJIVE1MID0gYCtgO1xuICAgIGxldCBidG5ab29tT3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnRuWm9vbU91dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMucGFyZW50Lnpvb21fb3V0KCkpO1xuICAgIGJ0blpvb21PdXQuaW5uZXJIVE1MID0gYC1gO1xuICAgIGxldCBidG5ab29tUmVzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidG5ab29tUmVzZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC56b29tX3Jlc2V0KCkpO1xuICAgIGJ0blpvb21SZXNldC5pbm5lckhUTUwgPSBgKmA7XG4gICAgbGV0IGJ1dHRvbkdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYnV0dG9uR3JvdXAuY2xhc3NMaXN0LmFkZCgndG9vbGJhci1idXR0b24nKVxuICAgIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKHRoaXMuYnRuQmFjayk7XG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuWm9vbUluKTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5ab29tT3V0KTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5ab29tUmVzZXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxQYXRoR3JvdXApO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZUZsb3csIEV2ZW50RW51bSwgRGF0YUZsb3csIERhdGFWaWV3IH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuZXhwb3J0IGNsYXNzIE5vZGVJdGVtIGV4dGVuZHMgQmFzZUZsb3c8RGVzZ2luZXJWaWV3PiB7XG4gIC8qKlxuICAgKiBHRVQgU0VUIGZvciBEYXRhXG4gICAqL1xuICBwdWJsaWMgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBnZXRZKCkge1xuICAgIHJldHVybiArdGhpcy5kYXRhLkdldCgneScpO1xuICB9XG4gIHB1YmxpYyBzZXRZKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgneScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WCgpIHtcbiAgICByZXR1cm4gK3RoaXMuZGF0YS5HZXQoJ3gnKTtcbiAgfVxuICBwdWJsaWMgc2V0WCh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5TZXQoJ3gnLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIENoZWNrS2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2tleScpID09IGtleTtcbiAgfVxuICBwdWJsaWMgZ2V0RGF0YUxpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2xpbmVzJykgPz8gW107XG4gIH1cbiAgcHVibGljIGNoZWNrTGluZUV4aXN0cyhmcm9tSW5kZXg6IG51bWJlciwgdG86IE5vZGVJdGVtLCB0b0luZGV4OiBOdW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnJMaW5lLmZpbHRlcigoaXRlbTogTGluZSkgPT4ge1xuICAgICAgaWYgKCFpdGVtLnRlbXAgJiYgaXRlbS50byA9PSB0byAmJiBpdGVtLnRvSW5kZXggPT0gdG9JbmRleCAmJiBpdGVtLmZyb21JbmRleCA9PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0udGVtcCAmJiBpdGVtLmZyb20gPT0gdG8gJiYgaXRlbS5mcm9tSW5kZXggPT0gdG9JbmRleCAmJiBpdGVtLnRvSW5kZXggPT0gZnJvbUluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSkubGVuZ3RoID4gMDtcbiAgfVxuICBwdWJsaWMgZWxDb250ZW50OiBFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGFyckxpbmU6IExpbmVbXSA9IFtdO1xuICBwcml2YXRlIG9wdGlvbjogYW55ID0ge307XG4gIHByaXZhdGUgYXJyRGF0YVZpZXc6IERhdGFWaWV3W10gPSBbXTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogRGVzZ2luZXJWaWV3LCBwcml2YXRlIGtleU5vZGU6IGFueSwgZGF0YTogYW55ID0ge30pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5wYXJlbnQubWFpbi5nZXRDb250cm9sTm9kZUJ5S2V5KGtleU5vZGUpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMub3B0aW9uPy5wcm9wZXJ0aWVzO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5Jbml0RGF0YSh7IC4uLmRhdGEsIG5hbWU6IHRoaXMub3B0aW9uLm5hbWUgfSwgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICAgIHRoaXMucGFyZW50LmRhdGEuQXBwZW5kKCdub2RlcycsIHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIHRoaXMuZGF0YS5vbihFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5yZW5kZXJVSS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1ub2RlJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb24uY2xhc3MpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb24uY2xhc3MpO1xuICAgIH1cbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ25vZGUtaWQnLCB0aGlzLkdldElkKCkpO1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpub25lJyk7XG4gICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsQ2FudmFzLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcbiAgICB0aGlzLnJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIGdldE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb247XG4gIH1cbiAgcHJpdmF0ZSByZW5kZXJVSShkZXRhaWw6IGFueSA9IG51bGwpIHtcbiAgICBpZiAoKGRldGFpbCAmJiBbJ3gnLCAneSddLmluY2x1ZGVzKGRldGFpbC5rZXkpKSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbE5vZGUuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHJldHVybjtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGRpc3BsYXk6bm9uZTtgKTtcbiAgICBpZiAodGhpcy5nZXRPcHRpb24oKT8uaGlkZVRpdGxlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1sZWZ0XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtdG9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keVwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtYm90dG9tXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLXJpZ2h0XCI+PC9kaXY+XG4gICAgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtbGVmdFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLXRvcFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+JHt0aGlzLm9wdGlvbi5pY29ufSAke3RoaXMuZ2V0TmFtZSgpfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1ib3R0b21cIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtcmlnaHRcIj48L2Rpdj5cbiAgICBgO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZE5vZGVEb3QgPSAobnVtOiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkLCBzdGFydDogbnVtYmVyLCBxdWVyeTogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAobnVtKSB7XG4gICAgICAgIGxldCBub2RlUXVlcnkgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKHF1ZXJ5KTtcbiAgICAgICAgaWYgKG5vZGVRdWVyeSkge1xuICAgICAgICAgIG5vZGVRdWVyeS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlRG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBub2RlRG90LmNsYXNzTGlzdC5hZGQoJ25vZGUtZG90Jyk7XG4gICAgICAgICAgICBub2RlRG90LnNldEF0dHJpYnV0ZSgnbm9kZScsIGAke3N0YXJ0ICsgaX1gKTtcbiAgICAgICAgICAgIG5vZGVRdWVyeS5hcHBlbmRDaGlsZChub2RlRG90KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py5sZWZ0LCAxMDAwLCAnLm5vZGUtbGVmdCcpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8udG9wLCAyMDAwLCAnLm5vZGUtdG9wJyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py5ib3R0b20sIDMwMDAsICcubm9kZS1ib3R0b20nKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LnJpZ2h0LCA0MDAwLCAnLm5vZGUtcmlnaHQnKTtcblxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLm5vZGUtY29udGVudCAuYm9keScpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMucGFyZW50Lm1haW4ucmVuZGVySHRtbCh0aGlzLCB0aGlzLmVsQ29udGVudCk7XG4gICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgIHRoaXMuYXJyRGF0YVZpZXcuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5EZWxldGUoKSk7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhpcy5vcHRpb24uc2NyaXB0KSkge1xuICAgICAgdGhpcy5vcHRpb24uc2NyaXB0KHsgbm9kZTogdGhpcywgZWxOb2RlOiB0aGlzLmVsTm9kZSwgbWFpbjogdGhpcy5wYXJlbnQubWFpbiB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZWxDb250ZW50KVxuICAgICAgdGhpcy5hcnJEYXRhVmlldyA9IERhdGFWaWV3LkJpbmRFbGVtZW50KHRoaXMuZWxDb250ZW50LCB0aGlzLmRhdGEsIHRoaXMucGFyZW50Lm1haW4pO1xuICB9XG4gIHB1YmxpYyBvcGVuR3JvdXAoKSB7XG4gICAgaWYgKHRoaXMuQ2hlY2tLZXkoJ25vZGVfZ3JvdXAnKSkge1xuICAgICAgdGhpcy5wYXJlbnQub3Blbkdyb3VwKHRoaXMuR2V0SWQoKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB1cGRhdGVQb3NpdGlvbih4OiBhbnksIHk6IGFueSwgaUNoZWNrID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5lbE5vZGUpIHtcbiAgICAgIGxldCB0ZW1weCA9IHg7XG4gICAgICBsZXQgdGVtcHkgPSB5O1xuICAgICAgaWYgKCFpQ2hlY2spIHtcbiAgICAgICAgdGVtcHkgPSAodGhpcy5lbE5vZGUub2Zmc2V0VG9wIC0geSk7XG4gICAgICAgIHRlbXB4ID0gKHRoaXMuZWxOb2RlLm9mZnNldExlZnQgLSB4KTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1weCAhPT0gdGhpcy5nZXRYKCkpIHtcbiAgICAgICAgdGhpcy5zZXRYKHRlbXB4KTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1weSAhPT0gdGhpcy5nZXRZKCkpIHtcbiAgICAgICAgdGhpcy5zZXRZKHRlbXB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIEFjdGl2ZShmbGc6IGFueSA9IHRydWUpIHtcbiAgICBpZiAoZmxnKSB7XG4gICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBSZW1vdmVMaW5lKGxpbmU6IExpbmUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmFyckxpbmUuaW5kZXhPZihsaW5lKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5hcnJMaW5lLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFyckxpbmU7XG4gIH1cbiAgcHVibGljIEFkZExpbmUobGluZTogTGluZSkge1xuICAgIHRoaXMuYXJyTGluZSA9IFsuLi50aGlzLmFyckxpbmUsIGxpbmVdO1xuICB9XG4gIHB1YmxpYyBnZXRQb3N0aXNpb25Eb3QoaW5kZXg6IG51bWJlciA9IDApIHtcbiAgICBsZXQgZWxEb3Q6IGFueSA9IHRoaXMuZWxOb2RlPy5xdWVyeVNlbGVjdG9yKGAubm9kZS1kb3Rbbm9kZT1cIiR7aW5kZXh9XCJdYCk7XG4gICAgaWYgKGVsRG90KSB7XG4gICAgICBsZXQgeSA9ICh0aGlzLmVsTm9kZS5vZmZzZXRUb3AgKyBlbERvdC5vZmZzZXRUb3AgKyAxMCk7XG4gICAgICBsZXQgeCA9ICh0aGlzLmVsTm9kZS5vZmZzZXRMZWZ0ICsgZWxEb3Qub2Zmc2V0TGVmdCArIDEwKTtcbiAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpIHtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHRvcDogJHt0aGlzLmdldFkoKX1weDsgbGVmdDogJHt0aGlzLmdldFgoKX1weDtgKTtcbiAgICB0aGlzLmFyckxpbmUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5VcGRhdGVVSSgpO1xuICAgIH0pXG4gIH1cbiAgcHVibGljIGRlbGV0ZShpc0NsZWFyRGF0YSA9IHRydWUpIHtcbiAgICB0aGlzLmFyckxpbmUuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5kZWxldGUodGhpcywgaXNDbGVhckRhdGEpKTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLmRhdGEuZGVsZXRlKCk7XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLlJlbW92ZURhdGFFdmVudCgpO1xuICAgIH1cbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlKCk7XG4gICAgdGhpcy5hcnJMaW5lID0gW107XG4gICAgaWYgKGlzQ2xlYXJEYXRhKVxuICAgICAgdGhpcy5wYXJlbnQuUmVtb3ZlTm9kZSh0aGlzKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHt9KTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyTGluZSgpIHtcbiAgICB0aGlzLmdldERhdGFMaW5lKCkuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlRnJvbSA9IHRoaXM7XG4gICAgICBsZXQgbm9kZVRvID0gdGhpcy5wYXJlbnQuR2V0Tm9kZUJ5SWQoaXRlbS5HZXQoJ3RvJykpO1xuICAgICAgbGV0IHRvSW5kZXggPSBpdGVtLkdldCgndG9JbmRleCcpO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGl0ZW0uR2V0KCdmcm9tSW5kZXgnKTtcbiAgICAgIG5ldyBMaW5lKG5vZGVGcm9tLCBmcm9tSW5kZXgsIG5vZGVUbywgdG9JbmRleCwgaXRlbSkuVXBkYXRlVUkoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIEZsb3dDb3JlLCBJTWFpbiwgRXZlbnRFbnVtLCBQcm9wZXJ0eUVudW0gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3X0V2ZW50IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3X0V2ZW50XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXdfVG9vbGJhciB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld19Ub29sYmFyXCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuaW1wb3J0IHsgTm9kZUl0ZW0gfSBmcm9tIFwiLi9Ob2RlSXRlbVwiO1xuXG5leHBvcnQgY29uc3QgWm9vbSA9IHtcbiAgbWF4OiAxLjYsXG4gIG1pbjogMC42LFxuICB2YWx1ZTogMC4xLFxuICBkZWZhdWx0OiAxXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3IGV4dGVuZHMgRmxvd0NvcmUge1xuXG4gIC8qKlxuICAgKiBHRVQgU0VUIGZvciBEYXRhXG4gICAqL1xuICBwdWJsaWMgZ2V0Wm9vbSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd6b29tJyk7XG4gIH1cbiAgcHVibGljIHNldFpvb20odmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgnem9vbScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd5Jyk7XG4gIH1cbiAgcHVibGljIHNldFkodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WCgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd4Jyk7XG4gIH1cbiAgcHVibGljIHNldFgodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneCcsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwcml2YXRlIGdyb3VwRGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGFzdEdyb3VwTmFtZTogc3RyaW5nID0gXCJcIjtcbiAgcHJpdmF0ZSBnZXREYXRhR3JvdXAoKTogRGF0YUZsb3cge1xuICAgIGlmICh0aGlzLiRsb2NrKSByZXR1cm4gdGhpcy5kYXRhO1xuICAgIC8vIGNhY2hlIGdyb3VwRGF0YVxuICAgIGlmICh0aGlzLmxhc3RHcm91cE5hbWUgPT09IHRoaXMuQ3VycmVudEdyb3VwKCkpIHJldHVybiB0aGlzLmdyb3VwRGF0YSA/PyB0aGlzLmRhdGE7XG4gICAgdGhpcy5sYXN0R3JvdXBOYW1lID0gdGhpcy5DdXJyZW50R3JvdXAoKTtcbiAgICBsZXQgZ3JvdXBzID0gdGhpcy5kYXRhLkdldCgnZ3JvdXBzJyk7XG4gICAgdGhpcy5ncm91cERhdGEgPSBncm91cHM/LmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdncm91cCcpID09IHRoaXMubGFzdEdyb3VwTmFtZSk/LlswXTtcbiAgICBpZiAoIXRoaXMuZ3JvdXBEYXRhKSB7XG4gICAgICB0aGlzLmdyb3VwRGF0YSA9IG5ldyBEYXRhRmxvdyh0aGlzLm1haW4sIHtcbiAgICAgICAga2V5OiBQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhcyxcbiAgICAgICAgZ3JvdXA6IHRoaXMubGFzdEdyb3VwTmFtZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRhdGEuQXBwZW5kKCdncm91cHMnLCB0aGlzLmdyb3VwRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICB9XG4gICAgbGV0IGRhdGFHcm91cCA9IHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5sYXN0R3JvdXBOYW1lKTtcbiAgICBpZiAoZGF0YUdyb3VwKSB7XG4gICAgICBkYXRhR3JvdXAub25TYWZlKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuVXBkYXRlVUkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b29sYmFyLnJlbmRlclBhdGhHcm91cCgpO1xuICAgICAgICB0aGlzLmNoYW5nZUdyb3VwKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ncm91cERhdGE7XG4gIH1cbiAgcHJpdmF0ZSBncm91cDogYW55W10gPSBbXTtcbiAgcHVibGljIEdldEdyb3VwTmFtZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAubWFwKChpdGVtKSA9PiAoeyBpZDogaXRlbSwgdGV4dDogdGhpcy5HZXREYXRhQnlJZChpdGVtKT8uR2V0KCduYW1lJykgfSkpO1xuICB9XG4gIHB1YmxpYyBCYWNrR3JvdXAoaWQ6IGFueSA9IG51bGwpIHtcbiAgICBsZXQgaW5kZXggPSAxO1xuICAgIGlmIChpZCkge1xuICAgICAgaW5kZXggPSB0aGlzLmdyb3VwLmluZGV4T2YoaWQpO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAoaW5kZXgpXG4gICAgICB0aGlzLmdyb3VwLnNwbGljZSgwLCBpbmRleCk7XG4gICAgZWxzZSB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgQ3VycmVudEdyb3VwKCkge1xuICAgIGxldCBuYW1lID0gdGhpcy5ncm91cD8uWzBdO1xuICAgIGlmIChuYW1lICYmIG5hbWUgIT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvb3QnO1xuICB9XG5cbiAgcHVibGljIEN1cnJlbnRHcm91cERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5DdXJyZW50R3JvdXAoKSkgPz8gdGhpcy5kYXRhO1xuICB9XG4gIHB1YmxpYyBjaGFuZ2VHcm91cCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uZ3JvdXBDaGFuZ2UsIHtcbiAgICAgICAgZ3JvdXA6IHRoaXMuR2V0R3JvdXBOYW1lKClcbiAgICAgIH0pO1xuICAgIH0pXG5cbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKGlkOiBhbnkpIHtcbiAgICB0aGlzLmdyb3VwID0gW2lkLCAuLi50aGlzLmdyb3VwXTtcbiAgICB0aGlzLnRvb2xiYXIucmVuZGVyUGF0aEdyb3VwKCk7XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTs7XG4gIH1cbiAgcHJpdmF0ZSBsaW5lQ2hvb3NlOiBMaW5lIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgc2V0TGluZUNob29zZShub2RlOiBMaW5lIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGluZUNob29zZSkgdGhpcy5saW5lQ2hvb3NlLkFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5saW5lQ2hvb3NlID0gbm9kZTtcbiAgICBpZiAodGhpcy5saW5lQ2hvb3NlKSB7XG4gICAgICB0aGlzLmxpbmVDaG9vc2UuQWN0aXZlKCk7XG4gICAgICB0aGlzLnNldE5vZGVDaG9vc2UodW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGdldExpbmVDaG9vc2UoKTogTGluZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubGluZUNob29zZTtcbiAgfVxuICBwcml2YXRlIG5vZGVzOiBOb2RlSXRlbVtdID0gW107XG4gIHByaXZhdGUgbm9kZUNob29zZTogTm9kZUl0ZW0gfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBzZXROb2RlQ2hvb3NlKG5vZGU6IE5vZGVJdGVtIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubm9kZUNob29zZSkgdGhpcy5ub2RlQ2hvb3NlLkFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5ub2RlQ2hvb3NlID0gbm9kZTtcbiAgICBpZiAodGhpcy5ub2RlQ2hvb3NlKSB7XG4gICAgICB0aGlzLm5vZGVDaG9vc2UuQWN0aXZlKCk7XG4gICAgICB0aGlzLnNldExpbmVDaG9vc2UodW5kZWZpbmVkKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiB0aGlzLm5vZGVDaG9vc2UuZGF0YSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc2hvd1Byb3BlcnR5LCB7IGRhdGE6IHRoaXMuQ3VycmVudEdyb3VwRGF0YSgpIH0pO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0Tm9kZUNob29zZSgpOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUNob29zZTtcbiAgfVxuICBwdWJsaWMgQWRkTm9kZUl0ZW0oZGF0YTogYW55KTogTm9kZUl0ZW0ge1xuICAgIHJldHVybiB0aGlzLkFkZE5vZGUoZGF0YS5HZXQoJ2tleScpLCBkYXRhKTtcbiAgfVxuICBwdWJsaWMgQWRkTm9kZShrZXlOb2RlOiBzdHJpbmcsIGRhdGE6IGFueSA9IHt9KTogTm9kZUl0ZW0ge1xuICAgIHJldHVybiB0aGlzLkluc2VydE5vZGUobmV3IE5vZGVJdGVtKHRoaXMsIGtleU5vZGUsIGRhdGEpKTtcbiAgfVxuICBwdWJsaWMgSW5zZXJ0Tm9kZShub2RlOiBOb2RlSXRlbSk6IE5vZGVJdGVtIHtcbiAgICB0aGlzLm5vZGVzID0gWy4uLnRoaXMubm9kZXMsIG5vZGVdO1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIHB1YmxpYyBSZW1vdmVOb2RlKG5vZGU6IE5vZGVJdGVtKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5ub2Rlcy5pbmRleE9mKG5vZGUpO1xuICAgIHRoaXMuZGF0YS5SZW1vdmUoJ25vZGVzJywgbm9kZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMubm9kZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gIH1cbiAgcHVibGljIENsZWFyTm9kZSgpIHtcbiAgICB0aGlzLm5vZGVzPy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5kZWxldGUoZmFsc2UpKTtcbiAgICB0aGlzLm5vZGVzID0gW107XG4gIH1cbiAgcHVibGljIEdldERhdGFBbGxOb2RlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gKHRoaXMuZGF0YT8uR2V0KCdub2RlcycpID8/IFtdKTtcbiAgfVxuICBwdWJsaWMgR2V0RGF0YU5vZGUoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLkdldERhdGFBbGxOb2RlKCkuZmlsdGVyKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS5HZXQoXCJncm91cFwiKSA9PT0gdGhpcy5DdXJyZW50R3JvdXAoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlidXRlXG4gICovXG4gIHB1YmxpYyBlbENhbnZhczogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHVibGljIGVsVG9vbGJhcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHVibGljIHRvb2xiYXI6IERlc2dpbmVyVmlld19Ub29sYmFyO1xuICBwdWJsaWMgJGxvY2s6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIHpvb21fbGFzdF92YWx1ZTogYW55ID0gMTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5lbE5vZGUgPSBlbE5vZGU7XG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IHRoaXMubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5tYWluKTtcbiAgICB0aGlzLmRhdGEuSW5pdERhdGEoe30sIHByb3BlcnRpZXMpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LnJlbW92ZShcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCdkZXNnaW5lci12aWV3JylcbiAgICB0aGlzLmVsQ2FudmFzLmNsYXNzTGlzdC5hZGQoXCJkZXNnaW5lci1jYW52YXNcIik7XG4gICAgdGhpcy5lbFRvb2xiYXIuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLXRvb2xiYXJcIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbENhbnZhcyk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFRvb2xiYXIpO1xuICAgIHRoaXMuZWxOb2RlLnRhYkluZGV4ID0gMDtcbiAgICBuZXcgRGVzZ2luZXJWaWV3X0V2ZW50KHRoaXMpO1xuICAgIHRoaXMudG9vbGJhciA9IG5ldyBEZXNnaW5lclZpZXdfVG9vbGJhcih0aGlzKTtcbiAgICB0aGlzLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLlJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIHRoaXMub24oRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgKGRhdGE6IGFueSkgPT4geyBtYWluLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIGRhdGEpOyB9KTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCAoaXRlbTogYW55KSA9PiB7XG4gICAgICB0aGlzLk9wZW4oaXRlbS5kYXRhKTtcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVZpZXcoeDogYW55LCB5OiBhbnksIHpvb206IGFueSkge1xuICAgIHRoaXMuZWxDYW52YXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHt6b29tfSlgO1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpIHtcbiAgICB0aGlzLnVwZGF0ZVZpZXcodGhpcy5nZXRYKCksIHRoaXMuZ2V0WSgpLCB0aGlzLmdldFpvb20oKSk7XG4gIH1cbiAgcHVibGljIFJlbmRlclVJKGRldGFpbDogYW55ID0ge30pIHtcbiAgICBpZiAoZGV0YWlsLnNlbmRlciAmJiBkZXRhaWwuc2VuZGVyIGluc3RhbmNlb2YgTm9kZUl0ZW0pIHJldHVybjtcbiAgICBpZiAoZGV0YWlsLnNlbmRlciAmJiBkZXRhaWwuc2VuZGVyIGluc3RhbmNlb2YgRGVzZ2luZXJWaWV3KSB7XG4gICAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuQ2xlYXJOb2RlKCk7XG4gICAgdGhpcy5HZXREYXRhTm9kZSgpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgdGhpcy5BZGROb2RlSXRlbShpdGVtKTtcbiAgICB9KTtcbiAgICB0aGlzLkdldEFsbE5vZGUoKS5mb3JFYWNoKChpdGVtOiBOb2RlSXRlbSkgPT4ge1xuICAgICAgaXRlbS5SZW5kZXJMaW5lKCk7XG4gICAgfSlcbiAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgdGhpcy50b29sYmFyLnJlbmRlclBhdGhHcm91cCgpO1xuICB9XG4gIHB1YmxpYyBPcGVuKCRkYXRhOiBEYXRhRmxvdykge1xuICAgIGlmICgkZGF0YSA9PSB0aGlzLmRhdGEpIHtcbiAgICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhPy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgKGRldGFpbDogYW55KSA9PiB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCBkZXRhaWwpKTtcbiAgICB0aGlzLmRhdGEgPSAkZGF0YTtcbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIChkZXRhaWw6IGFueSkgPT4gdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgZGV0YWlsKSk7XG4gICAgdGhpcy4kbG9jayA9IGZhbHNlO1xuICAgIHRoaXMubGFzdEdyb3VwTmFtZSA9ICcnO1xuICAgIHRoaXMuZ3JvdXBEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3JvdXAgPSBbXTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIENhbGNYKG51bWJlcjogYW55KSB7XG4gICAgcmV0dXJuIG51bWJlciAqICh0aGlzLmVsQ2FudmFzLmNsaWVudFdpZHRoIC8gKHRoaXMuZWxOb2RlPy5jbGllbnRXaWR0aCAqIHRoaXMuZ2V0Wm9vbSgpKSk7XG4gIH1cbiAgcHVibGljIENhbGNZKG51bWJlcjogYW55KSB7XG4gICAgcmV0dXJuIG51bWJlciAqICh0aGlzLmVsQ2FudmFzLmNsaWVudEhlaWdodCAvICh0aGlzLmVsTm9kZT8uY2xpZW50SGVpZ2h0ICogdGhpcy5nZXRab29tKCkpKTtcbiAgfVxuICBwdWJsaWMgR2V0QWxsTm9kZSgpOiBOb2RlSXRlbVtdIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlcyB8fCBbXTtcbiAgfVxuICBwdWJsaWMgR2V0Tm9kZUJ5SWQoaWQ6IHN0cmluZyk6IE5vZGVJdGVtIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5HZXRBbGxOb2RlKCkuZmlsdGVyKG5vZGUgPT4gbm9kZS5HZXRJZCgpID09IGlkKT8uWzBdO1xuICB9XG5cbiAgcHVibGljIEdldERhdGFCeUlkKGlkOiBzdHJpbmcpOiBEYXRhRmxvdyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLkdldERhdGFBbGxOb2RlKCkuZmlsdGVyKChpdGVtKSA9PiBpdGVtLkdldCgnaWQnKSA9PT0gaWQpPy5bMF07XG4gIH1cbiAgY2hlY2tPbmx5Tm9kZShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiAodGhpcy5tYWluLmdldENvbnRyb2xCeUtleShrZXkpLm9ubHlOb2RlSXRlbSkgJiYgdGhpcy5ub2Rlcy5maWx0ZXIoaXRlbSA9PiBpdGVtLkNoZWNrS2V5KGtleSkpLmxlbmd0aCA+IDA7XG4gIH1cbiAgcHVibGljIHpvb21fcmVmcmVzaChmbGc6IGFueSA9IDApIHtcbiAgICBsZXQgdGVtcF96b29tID0gZmxnID09IDAgPyBab29tLmRlZmF1bHQgOiAodGhpcy5nZXRab29tKCkgKyBab29tLnZhbHVlICogZmxnKTtcbiAgICBpZiAoWm9vbS5tYXggPj0gdGVtcF96b29tICYmIHRlbXBfem9vbSA+PSBab29tLm1pbikge1xuICAgICAgdGhpcy5zZXRYKCh0aGlzLmdldFgoKSAvIHRoaXMuem9vbV9sYXN0X3ZhbHVlKSAqIHRlbXBfem9vbSk7XG4gICAgICB0aGlzLnNldFkoKHRoaXMuZ2V0WSgpIC8gdGhpcy56b29tX2xhc3RfdmFsdWUpICogdGVtcF96b29tKTtcbiAgICAgIHRoaXMuem9vbV9sYXN0X3ZhbHVlID0gdGVtcF96b29tO1xuICAgICAgdGhpcy5zZXRab29tKHRoaXMuem9vbV9sYXN0X3ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21faW4oKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goMSk7XG4gIH1cbiAgcHVibGljIHpvb21fb3V0KCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKC0xKTtcbiAgfVxuICBwdWJsaWMgem9vbV9yZXNldCgpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtLCBJTWFpbiwgVmFyaWFibGVOb2RlLCBTY29wZVJvb3QgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgVmFyaWFibGVWaWV3IHtcbiAgcHJpdmF0ZSB2YXJpYWJsZXM6IFZhcmlhYmxlTm9kZVtdIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXZhcmlhYmxlJyk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgKHsgZ3JvdXAgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLlJlbmRlcihncm91cCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgKHsgZ3JvdXAgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLlJlbmRlcihncm91cCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5ncm91cENoYW5nZSwgKHsgZ3JvdXAgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLlJlbmRlcihncm91cCk7XG4gICAgfSlcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoZ3JvdXA6IGFueSA9IG51bGwpIHtcbiAgICB0aGlzLnZhcmlhYmxlcyA9IHRoaXMubWFpbi5nZXRWYXJpYWJsZSgpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgIDx0YWJsZSBib3JkZXI9XCIxXCI+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1uYW1lXCI+TmFtZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS10eXBlXCI+VHlwZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1zY29wZVwiPlNjb3BlPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInZhcmlhYmxlLWRlZmF1bHRcIj5EZWZhdWx0PC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInZhcmlhYmxlLWJ1dHRvblwiPjwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICBgO1xuICAgIGNvbnNvbGUubG9nKHRoaXMudmFyaWFibGVzKTtcbiAgICBpZiAodGhpcy52YXJpYWJsZXMpIHtcbiAgICAgIGlmICghZ3JvdXApIGdyb3VwID0gW1Njb3BlUm9vdF07XG4gICAgICBpZiAoIWdyb3VwLmluY2x1ZGVzKFNjb3BlUm9vdCkpIGdyb3VwID0gWy4uLmdyb3VwLCBTY29wZVJvb3RdXG4gICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMudmFyaWFibGVzLmZpbHRlcigoaXRlbSkgPT4gZ3JvdXAuaW5jbHVkZXMoaXRlbS5zY29wZSkpKSB7XG4gICAgICAgIG5ldyBWYXJpYWJsZUl0ZW0oaXRlbSwgdGhpcykuUmVuZGVyU2NvcGUoZ3JvdXApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwdWJsaWMgY2hhbmdlRGF0YSgpIHtcbiAgICB0aGlzLm1haW4udXBkYXRlVmFyaWFibGUodGhpcy52YXJpYWJsZXMgPz8gW10pO1xuICB9XG59XG5jbGFzcyBWYXJpYWJsZUl0ZW0ge1xuICBwcml2YXRlIGVsTm9kZTogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICBwcml2YXRlIG5hbWVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBwcml2YXRlIHR5cGVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpdmF0ZSBzY29wZUlucHV0OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICBwcml2YXRlIHZhbHVlRGVmYXVsdElucHV0OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHZhcmlhYmxlOiBWYXJpYWJsZU5vZGUsIHByaXZhdGUgcGFyZW50OiBWYXJpYWJsZVZpZXcpIHtcbiAgICAodGhpcy5uYW1lSW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUubmFtZTtcbiAgICAodGhpcy52YWx1ZURlZmF1bHRJbnB1dCBhcyBhbnkpLnZhbHVlID0gdGhpcy52YXJpYWJsZS5pbml0YWxWYWx1ZSA/PyAnJztcbiAgICAodGhpcy50eXBlSW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUudHlwZSA/PyAnJztcbiAgICBmb3IgKGxldCBpdGVtIG9mIFsndGV4dCcsICdudW1iZXInLCAnZGF0ZScsICdvYmplY3QnXSkge1xuICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgb3B0aW9uLnRleHQgPSBpdGVtO1xuICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbTtcbiAgICAgIHRoaXMudHlwZUlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuICAgIGxldCBuYW1lQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBuYW1lQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMubmFtZUlucHV0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChuYW1lQ29sdW1uKTtcbiAgICB0aGlzLm5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5uYW1lID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICAgIHRoaXMubmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmFyaWFibGUubmFtZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgdGhpcy5jaGFuZ2UoKTtcbiAgICB9KTtcblxuICAgIGxldCB0eXBlQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0eXBlQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMudHlwZUlucHV0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0eXBlQ29sdW1uKTtcbiAgICB0aGlzLnR5cGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLnR5cGUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMuY2hhbmdlKCk7XG4gICAgfSk7XG4gICAgbGV0IHNjb3BlQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBzY29wZUNvbHVtbi5hcHBlbmRDaGlsZCh0aGlzLnNjb3BlSW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHNjb3BlQ29sdW1uKTtcblxuXG4gICAgbGV0IHZhbHVlRGVmYXVsdENvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdmFsdWVEZWZhdWx0Q29sdW1uLmFwcGVuZENoaWxkKHRoaXMudmFsdWVEZWZhdWx0SW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHZhbHVlRGVmYXVsdENvbHVtbik7XG4gICAgdGhpcy52YWx1ZURlZmF1bHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLmluaXRhbFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICAgIHRoaXMudmFsdWVEZWZhdWx0SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmFyaWFibGUuaW5pdGFsVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMuY2hhbmdlKCk7XG4gICAgfSk7XG5cbiAgICBsZXQgYnV0dG9uUmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnV0dG9uUmVtb3ZlLmlubmVySFRNTCA9IGAtYDtcbiAgICBidXR0b25SZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBwYXJlbnQubWFpbi5yZW1vdmVWYXJpYWJsZSh2YXJpYWJsZSk7XG4gICAgfSk7XG4gICAgbGV0IGJ1dHRvblJlbW92ZUNvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgYnV0dG9uUmVtb3ZlQ29sdW1uLmFwcGVuZENoaWxkKGJ1dHRvblJlbW92ZSk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uUmVtb3ZlQ29sdW1uKTtcblxuICAgIHBhcmVudC5lbE5vZGUucXVlcnlTZWxlY3RvcigndGFibGUgdGJvZHknKT8uYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gIH1cbiAgY2hhbmdlKCkge1xuICAgIHRoaXMucGFyZW50LmNoYW5nZURhdGEoKTtcbiAgfVxuICBSZW5kZXJTY29wZShncm91cDogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuc2NvcGVJbnB1dC5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgZ3JvdXApIHtcbiAgICAgICAgaWYgKGl0ZW0gPT09IFNjb3BlUm9vdCkgY29udGludWU7XG4gICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgb3B0aW9uLnRleHQgPSBpdGVtLnRleHQ7XG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IGl0ZW0uaWQ7XG4gICAgICAgIHRoaXMuc2NvcGVJbnB1dC5wcmVwZW5kKG9wdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24udGV4dCA9IFNjb3BlUm9vdDtcbiAgICBvcHRpb24udmFsdWUgPSBTY29wZVJvb3Q7XG4gICAgdGhpcy5zY29wZUlucHV0LnByZXBlbmQob3B0aW9uKTtcbiAgICAodGhpcy5zY29wZUlucHV0IGFzIGFueSkudmFsdWUgPSB0aGlzLnZhcmlhYmxlLnNjb3BlO1xuICAgIHRoaXMuc2NvcGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLnNjb3BlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB0aGlzLmNoYW5nZSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBUb29sYm94VmlldyB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdG9vbGJveGYnKTtcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgbGV0IGNvbnRyb2xzID0gdGhpcy5tYWluLmdldENvbnRyb2xBbGwoKTtcbiAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBsZXQgbm9kZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ25vZGUtaXRlbScpO1xuICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnLCBpdGVtKTtcbiAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2NvbnRyb2xzW2l0ZW1dLmljb259IDxzcGFuPiR7Y29udHJvbHNbaXRlbV0ubmFtZX08L3NwYW5gO1xuICAgICAgbm9kZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5kcmFnU3RhcnQuYmluZCh0aGlzKSlcbiAgICAgIG5vZGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLmRyYWdlbmQuYmluZCh0aGlzKSlcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcbiAgICB9KTtcbiAgfVxuICBwcml2YXRlIGRyYWdlbmQoZTogYW55KSB7XG4gICAgdGhpcy5tYWluLnNldENvbnRyb2xDaG9vc2UobnVsbCk7XG4gIH1cblxuICBwcml2YXRlIGRyYWdTdGFydChlOiBhbnkpIHtcbiAgICBsZXQga2V5ID0gZS50YXJnZXQuY2xvc2VzdChcIi5ub2RlLWl0ZW1cIikuZ2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnKTtcbiAgICB0aGlzLm1haW4uc2V0Q29udHJvbENob29zZShrZXkpO1xuICAgIGlmIChlLnR5cGUgIT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwibm9kZVwiLCBrZXkpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtLCBJTWFpbiwgRGF0YUZsb3cgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdFZpZXcge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb2plY3QnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLmNoYW5nZVZhcmlhYmxlLCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyKCkge1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBgO1xuICAgIGxldCBwcm9qZWN0cyA9IHRoaXMubWFpbi5nZXRQcm9qZWN0QWxsKCk7XG4gICAgcHJvamVjdHMuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnbm9kZS1pdGVtJyk7XG4gICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcbiAgICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9X25hbWVgLCAoKSA9PiB7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIH0pO1xuICAgICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tYWluLmNoZWNrUHJvamVjdE9wZW4oaXRlbSkpIHtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLnNldFByb2plY3RPcGVuKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsTm9kZT8uYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJvdGVjdGVkIGVsQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICdEb2NrQmFzZSc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgQm94SW5mbyh0aXRsZTogc3RyaW5nLCAkY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX2hlYWRlclwiPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb190aXRsZVwiPiR7dGl0bGV9PC9zcGFuPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb19idXR0b25cIj48L3NwYW4+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb19jb250ZW50XCI+PC9kaXY+YDtcclxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9fY29udGVudCcpO1xyXG4gICAgaWYgKCRjYWxsYmFjaykge1xyXG4gICAgICAkY2FsbGJhY2sodGhpcy5lbENvbnRlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBUb29sYm94VmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbERvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLWNvbnRyb2wnKTtcbiAgICB0aGlzLkJveEluZm8oJ0NvbnRyb2wnLCAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIG5ldyBUb29sYm94Vmlldyhub2RlLCB0aGlzLm1haW4pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiwgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBWYXJpYWJsZVZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlRG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdmFyaWFibGUnKTtcbiAgICB0aGlzLkJveEluZm8oJ1ZhcmlhYmxlJywgKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBuZXcgVmFyaWFibGVWaWV3KG5vZGUsIG1haW4pO1xuICAgIH0pO1xuICAgIGxldCAkbm9kZVJpZ2h0OiBIVE1MRWxlbWVudCB8IG51bGwgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudnMtYm94aW5mb19oZWFkZXIgLnZzLWJveGluZm9fYnV0dG9uJyk7XG4gICAgaWYgKCRub2RlUmlnaHQpIHtcbiAgICAgICRub2RlUmlnaHQuaW5uZXJIVE1MID0gYGA7XG4gICAgICBsZXQgYnV0dG9uTmV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25OZXcpO1xuICAgICAgYnV0dG9uTmV3LmlubmVySFRNTCA9IGBOZXcgVmFyaWFibGVgO1xuICAgICAgYnV0dG9uTmV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLm1haW4ubmV3VmFyaWFibGUoKS5uYW1lID0gYHZhciR7Z2V0VGltZSgpfWA7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBFdmVudEVudW0sIElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IGRvd25sb2FkT2JqZWN0QXNKc29uLCBnZXRUaW1lLCByZWFkRmlsZUxvY2FsIH0gZnJvbSBcIi4uL2NvcmUvVXRpbHNcIjtcbmltcG9ydCB7IFByb2plY3RWaWV3IH0gZnJvbSBcIi4uL2Rlc2dpbmVyL1Byb2plY3RWaWV3XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtcHJvamVjdCcpO1xuICAgIHRoaXMuQm94SW5mbygnUHJvamVjdCcsIChlbENvbnRlbnQ6IGFueSkgPT4ge1xuICAgICAgbmV3IFByb2plY3RWaWV3KGVsQ29udGVudCwgbWFpbik7XG4gICAgfSk7XG4gICAgbGV0ICRub2RlUmlnaHQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy52cy1ib3hpbmZvX2hlYWRlciAudnMtYm94aW5mb19idXR0b24nKTtcbiAgICBpZiAoJG5vZGVSaWdodCkge1xuICAgICAgJG5vZGVSaWdodC5pbm5lckhUTUwgPSBgYDtcbiAgICAgIGxldCBidXR0b25OZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbk5ldy5pbm5lckhUTUwgPSBgTmV3YDtcbiAgICAgIGJ1dHRvbk5ldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMubWFpbi5uZXdQcm9qZWN0KCcnKSk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25OZXcpO1xuXG4gICAgICBsZXQgYnV0dG9uRXhwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b25FeHBvcnQuaW5uZXJIVE1MID0gYEV4cG9ydGA7XG4gICAgICBidXR0b25FeHBvcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBkb3dubG9hZE9iamVjdEFzSnNvbih0aGlzLm1haW4uZXhwb3J0SnNvbigpLCBgdnMtc29sdXRpb24tJHtnZXRUaW1lKCl9YCkpO1xuICAgICAgJG5vZGVSaWdodD8uYXBwZW5kQ2hpbGQoYnV0dG9uRXhwb3J0KTtcblxuICAgICAgbGV0IGJ1dHRvbkltcG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uSW1wb3J0LmlubmVySFRNTCA9IGBJbXBvcnRgO1xuICAgICAgYnV0dG9uSW1wb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICByZWFkRmlsZUxvY2FsKChyczogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKHJzKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uaW1wb3J0SnNvbihKU09OLnBhcnNlKHJzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgJG5vZGVSaWdodD8uYXBwZW5kQ2hpbGQoYnV0dG9uSW1wb3J0KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFWaWV3LCBEYXRhRmxvdywgRXZlbnRFbnVtLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XHJcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eURvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XHJcbiAgcHJpdmF0ZSBsYXN0RGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XHJcbiAgcHJpdmF0ZSBoaWRlS2V5czogc3RyaW5nW10gPSBbJ2xpbmVzJywgJ25vZGVzJywgJ2dyb3VwcycsICd2YXJpYWJsZScsICd4JywgJ3knLCAnem9vbSddO1xyXG4gIHByaXZhdGUgc29ydEtleXM6IHN0cmluZ1tdID0gWydpZCcsICdrZXknLCAnbmFtZScsICdncm91cCddO1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcclxuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XHJcblxyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtcHJvcGVydHknKTtcclxuICAgIHRoaXMuQm94SW5mbygnUHJvcGVydHknLCAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgICAgbWFpbi5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGV0YWlsOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlclVJKG5vZGUsIGRldGFpbC5kYXRhKTtcclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZXJVSShub2RlOiBIVE1MRWxlbWVudCwgZGF0YTogRGF0YUZsb3cpIHtcclxuICAgIGlmICh0aGlzLmxhc3REYXRhID09IGRhdGEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5sYXN0RGF0YSA9IGRhdGE7XHJcbiAgICBub2RlLmlubmVySFRNTCA9ICcnO1xyXG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IGRhdGEuZ2V0UHJvcGVydGllcygpO1xyXG4gICAgdGhpcy5zb3J0S2V5cy5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAodGhpcy5oaWRlS2V5cy5pbmNsdWRlcyhrZXkpIHx8ICFwcm9wZXJ0aWVzW2tleV0pIHJldHVybjtcclxuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uY2xhc3NMaXN0LmFkZCgncHJvcGVydHktaXRlbScpO1xyXG4gICAgICBsZXQgcHJvcGVydHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XHJcbiAgICAgIHByb3BlcnR5TGFiZWwuaW5uZXJIVE1MID0ga2V5O1xyXG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XHJcbiAgICAgIERhdGFWaWV3LkJpbmRFbGVtZW50KHByb3BlcnR5VmFsdWUsIGRhdGEsIHRoaXMubWFpbiwga2V5KTtcclxuICAgICAgcHJvcGVydHlJdGVtLmFwcGVuZENoaWxkKHByb3BlcnR5TGFiZWwpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocHJvcGVydHlJdGVtKTtcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHRoaXMuaGlkZUtleXMuaW5jbHVkZXMoa2V5KSB8fCB0aGlzLnNvcnRLZXlzLmluY2x1ZGVzKGtleSkpIHJldHVybjtcclxuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uY2xhc3NMaXN0LmFkZCgncHJvcGVydHktaXRlbScpO1xyXG4gICAgICBsZXQgcHJvcGVydHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XHJcbiAgICAgIHByb3BlcnR5TGFiZWwuaW5uZXJIVE1MID0ga2V5O1xyXG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XHJcbiAgICAgIERhdGFWaWV3LkJpbmRFbGVtZW50KHByb3BlcnR5VmFsdWUsIGRhdGEsIHRoaXMubWFpbiwga2V5KTtcclxuICAgICAgcHJvcGVydHlJdGVtLmFwcGVuZENoaWxkKHByb3BlcnR5TGFiZWwpO1xyXG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocHJvcGVydHlJdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudEVudW0sIElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgVmlld0RvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHByaXZhdGUgdmlldzogRGVzZ2luZXJWaWV3IHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcblxuICAgIHRoaXMudmlldyA9IG5ldyBEZXNnaW5lclZpZXcodGhpcy5lbE5vZGUsIG1haW4pO1xuXG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluLCBEb2NrRW51bSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XHJcbmltcG9ydCB7IENvbnRyb2xEb2NrIH0gZnJvbSBcIi4vQ29udHJvbERvY2tcIjtcclxuaW1wb3J0IHsgVmFyaWFibGVEb2NrIH0gZnJvbSBcIi4vVmFyaWFibGVEb2NrXCI7XHJcbmltcG9ydCB7IFByb2plY3REb2NrIH0gZnJvbSBcIi4vUHJvamVjdERvY2tcIjtcclxuaW1wb3J0IHsgUHJvcGVydHlEb2NrIH0gZnJvbSBcIi4vUHJvcGVydHlEb2NrXCI7XHJcbmltcG9ydCB7IFZpZXdEb2NrIH0gZnJvbSBcIi4vVmlld0RvY2tcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb2NrTWFuYWdlciB7XHJcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikgeyB9XHJcbiAgcHVibGljIHJlc2V0KCkge1xyXG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSB7fTtcclxuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5sZWZ0LCBDb250cm9sRG9jayk7XHJcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ubGVmdCwgUHJvamVjdERvY2spO1xyXG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnJpZ2h0LCBQcm9wZXJ0eURvY2spO1xyXG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnZpZXcsIFZpZXdEb2NrKTtcclxuICAgIC8vICB0aGlzLmFkZERvY2soRG9ja0VudW0udG9wLCBUYWJEb2NrKTtcclxuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5ib3R0b20sIFZhcmlhYmxlRG9jayk7XHJcbiAgICB0aGlzLlJlbmRlclVJKCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBhZGREb2NrKCRrZXk6IHN0cmluZywgJHZpZXc6IGFueSkge1xyXG4gICAgaWYgKCF0aGlzLiRkb2NrTWFuYWdlclska2V5XSlcclxuICAgICAgdGhpcy4kZG9ja01hbmFnZXJbJGtleV0gPSBbXTtcclxuICAgIHRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldID0gWy4uLnRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldLCAkdmlld107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgUmVuZGVyVUkoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1sZWZ0IHZzLWRvY2tcIj48L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cInZzLWNvbnRlbnRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtdG9wIHZzLWRvY2tcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtdmlldyB2cy1kb2NrXCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLWJvdHRvbSB2cy1kb2NrXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidnMtcmlnaHQgdnMtZG9ja1wiPjwvZGl2PlxyXG4gICAgYDtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMuJGRvY2tNYW5hZ2VyKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICBsZXQgcXVlcnlTZWxlY3RvciA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYC4ke2tleX1gKTtcclxuICAgICAgaWYgKHF1ZXJ5U2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLiRkb2NrTWFuYWdlcltrZXldLmZvckVhY2goKCRpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgIG5ldyAkaXRlbShxdWVyeVNlbGVjdG9yLCB0aGlzLm1haW4pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgQ29udHJvbCA9IHtcbiAgbm9kZV9iZWdpbjoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnQmVnaW4nLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBjbGFzczogJycsXG4gICAgaHRtbDogJycsXG4gICAgZG90OiB7XG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDEsXG4gICAgfSxcbiAgICBvbmx5Tm9kZTogdHJ1ZVxuICB9LFxuICBub2RlX2VuZDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1zdG9wXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnRW5kJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogJycsXG4gICAgZG90OiB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAxLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgfSxcbiAgICBvbmx5Tm9kZTogdHJ1ZVxuICB9LFxuICBub2RlX2lmOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWVxdWFsc1wiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ0lmJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogJzxkaXY+Y29uZGl0aW9uOjxici8+PGlucHV0IGNsYXNzPVwibm9kZS1mb3JtLWNvbnRyb2xcIiBub2RlOm1vZGVsPVwiY29uZGl0aW9uXCIvPjwvZGl2PicsXG4gICAgc2NyaXB0OiBgYCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBjb25kaXRpb246IHtcbiAgICAgICAga2V5OiBcImNvbmRpdGlvblwiLFxuICAgICAgICBlZGl0OiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfVxuICAgIH0sXG4gICAgb3V0cHV0OiAyXG4gIH0sXG4gIG5vZGVfZ3JvdXA6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnR3JvdXAnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bkdvR3JvdXAgbm9kZS1mb3JtLWNvbnRyb2xcIj5HbzwvYnV0dG9uPjwvZGl2PicsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9vcHRpb246IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnT3B0aW9uJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMSxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiBgXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAzXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNFwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDVcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9wcm9qZWN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLW9iamVjdC1ncm91cFwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ1Byb2plY3QnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PHNlbGVjdCBjbGFzcz1cIm5vZGUtZm9ybS1jb250cm9sXCIgbm9kZTptb2RlbD1cInByb2plY3RcIj48L3NlbGVjdD48L2Rpdj4nLFxuICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGtleTogXCJwcm9qZWN0XCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIHNlbGVjdDogdHJ1ZSxcbiAgICAgICAgZGF0YVNlbGVjdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBtYWluLmdldFByb2plY3RBbGwoKS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uR2V0KCdpZCcpLFxuICAgICAgICAgICAgICB0ZXh0OiBpdGVtLkdldCgnbmFtZScpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBJTWFpbiwgY29tcGFyZVNvcnQsIEV2ZW50RW51bSwgUHJvcGVydHlFbnVtLCBFdmVudEZsb3csIGdldFRpbWUsIFZhcmlhYmxlTm9kZSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcblxuZXhwb3J0IGNsYXNzIFN5c3RlbUJhc2UgaW1wbGVtZW50cyBJTWFpbiB7XG4gIHByaXZhdGUgJGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KHRoaXMpO1xuICBwcml2YXRlICRwcm9qZWN0T3BlbjogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJHByb3BlcnRpZXM6IGFueSA9IHt9O1xuICBwcml2YXRlICRjb250cm9sOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdyA9IG5ldyBFdmVudEZsb3coKTtcbiAgcHJpdmF0ZSAkY29udHJvbENob29zZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgJGNoZWNrT3B0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0uc29sdXRpb25dID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFByb3BlcnR5RW51bS5zb2x1dGlvblxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYHNvbHV0aW9uLSR7Z2V0VGltZSgpfWAsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICB9LFxuICAgICAgcHJvamVjdHM6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLmxpbmVdID0ge1xuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5saW5lXG4gICAgICB9LFxuICAgICAgZnJvbToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgZnJvbUluZGV4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB0bzoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgdG9JbmRleDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9XG4gICAgfTtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0ubWFpbl0gPSB7XG4gICAgICBpZDoge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGBGbG93LSR7Z2V0VGltZSgpfWAsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5tYWluXG4gICAgICB9LFxuICAgICAgdmFyaWFibGU6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH0sXG4gICAgICBncm91cHM6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH0sXG4gICAgICBub2Rlczoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhc10gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXNcbiAgICAgIH0sXG4gICAgICBncm91cDoge1xuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICAgIHg6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHk6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHpvb206IHtcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICB9XG4gIH1cbiAgbmV3U29sdXRpb24oJG5hbWU6IHN0cmluZyA9ICcnKTogdm9pZCB7XG4gICAgdGhpcy5vcGVuU29sdXRpb24oeyBuYW1lOiAkbmFtZSB9KTtcbiAgfVxuICBvcGVuU29sdXRpb24oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuJGRhdGEuSW5pdERhdGEoJGRhdGEsIHRoaXMuZ2V0UHJvcGVydHlCeUtleShQcm9wZXJ0eUVudW0uc29sdXRpb24pKTtcbiAgICB0aGlzLm9wZW5Qcm9qZWN0KHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpPy5bMF0gPz8ge30pO1xuICB9XG4gIHJlbW92ZVZhcmlhYmxlKHZhcmliYWxlOiBWYXJpYWJsZU5vZGUpOiB2b2lkIHtcbiAgICB0aGlzLiRwcm9qZWN0T3Blbj8uUmVtb3ZlKCd2YXJpYWJsZScsIHZhcmliYWxlKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgeyBkYXRhOiB2YXJpYmFsZSB9KTtcbiAgfVxuICBhZGRWYXJpYWJsZSgpOiBWYXJpYWJsZU5vZGUge1xuICAgIGxldCB2YXJpYmFsZSA9IG5ldyBWYXJpYWJsZU5vZGUoKTtcbiAgICB0aGlzLiRwcm9qZWN0T3Blbj8uQXBwZW5kKCd2YXJpYWJsZScsIHZhcmliYWxlKTtcbiAgICByZXR1cm4gdmFyaWJhbGU7XG4gIH1cbiAgbmV3VmFyaWFibGUoKTogVmFyaWFibGVOb2RlIHtcbiAgICBsZXQgdmFyaWJhbGUgPSB0aGlzLmFkZFZhcmlhYmxlKCk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlVmFyaWFibGUsIHsgZGF0YTogdmFyaWJhbGUgfSk7XG4gICAgcmV0dXJuIHZhcmliYWxlO1xuICB9XG4gIGdldFZhcmlhYmxlKCk6IFZhcmlhYmxlTm9kZVtdIHtcbiAgICBsZXQgYXJyOiBhbnkgPSBbXTtcbiAgICBpZiAodGhpcy4kcHJvamVjdE9wZW4pIHtcbiAgICAgIGFyciA9IHRoaXMuJHByb2plY3RPcGVuLkdldChcInZhcmlhYmxlXCIpO1xuICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIHRoaXMuJHByb2plY3RPcGVuLlNldCgndmFyaWFibGUnLCBhcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG4gIHVwZGF0ZVZhcmlhYmxlKHZhcnM6IFZhcmlhYmxlTm9kZVtdKTogdm9pZCB7XG4gICAgdGhpcy4kcHJvamVjdE9wZW4/LlNldCgndmFyaWFibGUnLCB2YXJzKTtcbiAgfVxuICBleHBvcnRKc29uKCkge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLnRvSnNvbigpO1xuICB9XG4gIHB1YmxpYyBjaGVja0luaXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNoZWNrT3B0aW9uO1xuICB9XG4gIGluaXRPcHRpb24ob3B0aW9uOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLiRjaGVja09wdGlvbiA9IHRydWU7XG4gICAgLy8gc2V0IGNvbnRyb2xcbiAgICB0aGlzLiRjb250cm9sID0gaXNEZWZhdWx0ID8geyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30sIC4uLkNvbnRyb2wgfSA6IHsgLi4ub3B0aW9uPy5jb250cm9sIHx8IHt9IH07XG4gICAgbGV0IGNvbnRyb2xUZW1wOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRjb250cm9sKS5tYXAoKGtleSkgPT4gKHsgLi4udGhpcy4kY29udHJvbFtrZXldLCBrZXksIHNvcnQ6ICh0aGlzLiRjb250cm9sW2tleV0uc29ydCA9PT0gdW5kZWZpbmVkID8gOTk5OTkgOiB0aGlzLiRjb250cm9sW2tleV0uc29ydCkgfSkpLnNvcnQoY29tcGFyZVNvcnQpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgY29udHJvbFRlbXBbaXRlbS5rZXldID0ge1xuICAgICAgICBkb3Q6IHtcbiAgICAgICAgICBsZWZ0OiAxLFxuICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICByaWdodDogMSxcbiAgICAgICAgICBib3R0b206IDEsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLml0ZW1cbiAgICAgIH07XG4gICAgICB0aGlzLiRwcm9wZXJ0aWVzW2Ake2l0ZW0ua2V5fWBdID0ge1xuICAgICAgICAuLi4oaXRlbS5wcm9wZXJ0aWVzIHx8IHt9KSxcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgICAgfSxcbiAgICAgICAga2V5OiB7XG4gICAgICAgICAgZGVmYXVsdDogaXRlbS5rZXlcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgIGRlZmF1bHQ6IGl0ZW0ua2V5LFxuICAgICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcbiAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdGhpcy4kY29udHJvbCA9IGNvbnRyb2xUZW1wO1xuICB9XG4gIHJlbmRlckh0bWwobm9kZTogTm9kZUl0ZW0sIGVsUGFyZW50OiBFbGVtZW50KSB7XG4gICAgZWxQYXJlbnQuaW5uZXJIVE1MID0gbm9kZS5nZXRPcHRpb24oKT8uaHRtbDtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudHMuZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29udHJvbEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbCA/PyB7fTtcbiAgfVxuICBnZXRQcm9qZWN0QWxsKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJykgPz8gW107XG4gIH1cbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLm9wZW5Tb2x1dGlvbihkYXRhKTtcbiAgfVxuICBzZXRQcm9qZWN0T3BlbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuJHByb2plY3RPcGVuICE9ICRkYXRhKSB7XG4gICAgICB0aGlzLiRwcm9qZWN0T3BlbiA9ICRkYXRhO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgIGRhdGE6ICRkYXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwge1xuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5vcGVuUHJvamVjdCwge1xuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNoZWNrUHJvamVjdE9wZW4oJGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiRwcm9qZWN0T3BlbiA9PSAkZGF0YTtcbiAgfVxuICBuZXdQcm9qZWN0KCk6IHZvaWQge1xuICAgIHRoaXMub3BlblByb2plY3Qoe30pO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLm5ld1Byb2plY3QsIHt9KTtcbiAgfVxuICBvcGVuUHJvamVjdCgkZGF0YTogYW55KTogdm9pZCB7XG4gICAgbGV0ICRwcm9qZWN0OiBhbnkgPSBudWxsO1xuICAgIGlmICgkZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAkcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5SWQoJGRhdGEuR2V0KCdpZCcpKTtcbiAgICAgIGlmICghJHByb2plY3QpIHtcbiAgICAgICAgJHByb2plY3QgPSAkZGF0YTtcbiAgICAgICAgdGhpcy4kZGF0YS5BcHBlbmQoJ3Byb2plY3RzJywgJHByb2plY3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAkcHJvamVjdCA9IG5ldyBEYXRhRmxvdyh0aGlzKTtcbiAgICAgICRwcm9qZWN0LkluaXREYXRhKCRkYXRhLCB0aGlzLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pKTtcbiAgICAgIHRoaXMuJGRhdGEuQXBwZW5kKCdwcm9qZWN0cycsICRwcm9qZWN0KTtcbiAgICB9XG4gICAgdGhpcy5zZXRQcm9qZWN0T3BlbigkcHJvamVjdCk7XG4gIH1cbiAgcHVibGljIGdldFByb2plY3RCeUlkKCRpZDogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpLmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdpZCcpID09PSAkaWQpPy5bMF07XG4gIH1cbiAgc2V0Q29udHJvbENob29zZShrZXk6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLiRjb250cm9sQ2hvb3NlID0ga2V5O1xuICB9XG4gIGdldENvbnRyb2xDaG9vc2UoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xDaG9vc2U7XG4gIH1cbiAgZ2V0Q29udHJvbEJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xba2V5XSB8fCB7fTtcbiAgfVxuICBnZXRDb250cm9sTm9kZUJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0Q29udHJvbEJ5S2V5KGtleSksXG4gICAgICBwcm9wZXJ0aWVzOiB0aGlzLmdldFByb3BlcnR5QnlLZXkoYCR7a2V5fWApXG4gICAgfVxuICB9XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvcGVydGllc1trZXldO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgU3lzdGVtQmFzZSB9IGZyb20gXCIuL1N5c3RlbUJhc2VcIjtcbmV4cG9ydCBjbGFzcyBTeXN0ZW1WdWUgZXh0ZW5kcyBTeXN0ZW1CYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyOiBhbnkpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIHJlbmRlckh0bWwobm9kZTogTm9kZUl0ZW0sIGVsUGFyZW50OiBFbGVtZW50KSB7XG4gICAgaWYgKHBhcnNlSW50KHRoaXMucmVuZGVyLnZlcnNpb24pID09PSAzKSB7XG4gICAgICAvL1Z1ZSAzXG4gICAgICBsZXQgd3JhcHBlciA9IHRoaXMucmVuZGVyLmgobm9kZS5nZXRPcHRpb24oKT8uaHRtbCwgeyAuLi4obm9kZS5nZXRPcHRpb24oKT8ucHJvcHMgPz8ge30pLCBub2RlIH0sIChub2RlLmdldE9wdGlvbigpPy5vcHRpb25zID8/IHt9KSk7XG4gICAgICB3cmFwcGVyLmFwcENvbnRleHQgPSBlbFBhcmVudDtcbiAgICAgIHRoaXMucmVuZGVyLnJlbmRlcih3cmFwcGVyLCBlbFBhcmVudCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVnVlIDJcbiAgICAgIGxldCB3cmFwcGVyID0gbmV3IHRoaXMucmVuZGVyKHtcbiAgICAgICAgcGFyZW50OiBlbFBhcmVudCxcbiAgICAgICAgcmVuZGVyOiAoaDogYW55KSA9PiBoKG5vZGUuZ2V0T3B0aW9uKCk/Lmh0bWwsIHsgcHJvcHM6IHsgLi4uKG5vZGUuZ2V0T3B0aW9uKCk/LnByb3BzID8/IHt9KSwgbm9kZSB9IH0pLFxuICAgICAgICAuLi4obm9kZS5nZXRPcHRpb24oKT8ub3B0aW9ucyA/PyB7fSlcbiAgICAgIH0pLiRtb3VudCgpXG4gICAgICAvL1xuICAgICAgZWxQYXJlbnQuYXBwZW5kQ2hpbGQod3JhcHBlci4kZWwpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4sIEV2ZW50RW51bSwgRGF0YUZsb3cgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFiRG9jayBleHRlbmRzIERvY2tCYXNlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYGA7XHJcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy10YWInKTtcclxuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIChkZXRhaWw6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLmVsTm9kZT8ucXVlcnlTZWxlY3RvckFsbCgnLmFjdGl2ZScpLmZvckVhY2goKF9ub2RlKSA9PiB7XHJcbiAgICAgICAgX25vZGUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAodGhpcy5lbE5vZGUgJiYgZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJykpIHtcclxuICAgICAgICB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9qZWN0LWlkPVwiJHtkZXRhaWw/LmRhdGE/LkdldCgnaWQnKX1cIl1gKT8uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5uZXdQcm9qZWN0LCB0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBgO1xyXG4gICAgbGV0IHByb2plY3RzID0gdGhpcy5tYWluLmdldFByb2plY3RBbGwoKTtcclxuICAgIHByb2plY3RzLmZvckVhY2goKGl0ZW06IERhdGFGbG93KSA9PiB7XHJcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBub2RlSXRlbS5jbGFzc0xpc3QuYWRkKCdub2RlLWl0ZW0nKTtcclxuICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xyXG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcclxuICAgICAgaXRlbS5yZW1vdmVMaXN0ZW5lcihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcclxuICAgICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpdGVtLm9uKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV9uYW1lYCwgKCkgPT4ge1xyXG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmICh0aGlzLm1haW4uY2hlY2tQcm9qZWN0T3BlbihpdGVtKSkge1xyXG4gICAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICB9XHJcbiAgICAgIG5vZGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsIHsgZGF0YTogaXRlbSB9KTtcclxuICAgICAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiBpdGVtIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5lbE5vZGU/LmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWaXN1YWxGbG93IH0gZnJvbSBcIi4vVmlzdWFsRmxvd1wiO1xuaW1wb3J0ICogYXMgU3lzdGVtQmFzZSBmcm9tIFwiLi9zeXN0ZW1zL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4vY29yZS9pbmRleCc7XG5pbXBvcnQgKiBhcyBEZXNnaW5lciBmcm9tIFwiLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0ICogYXMgRG9jayBmcm9tICcuL2RvY2svaW5kZXgnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBWaXN1YWxGbG93LFxuICAuLi5TeXN0ZW1CYXNlLFxuICAuLi5Db3JlLFxuICAuLi5Eb2NrLFxuICAuLi5EZXNnaW5lclxufTtcblxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgRG9ja01hbmFnZXIgfSBmcm9tICcuL2RvY2svRG9ja01hbmFnZXInO1xuaW1wb3J0IHsgU3lzdGVtQmFzZSB9IGZyb20gJy4vc3lzdGVtcy9TeXN0ZW1CYXNlJztcbmV4cG9ydCBjbGFzcyBWaXN1YWxGbG93IHtcbiAgcHJpdmF0ZSBtYWluOiBJTWFpbiB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IERvY2tNYW5hZ2VyO1xuICBwdWJsaWMgZ2V0RG9ja01hbmFnZXIoKTogRG9ja01hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLiRkb2NrTWFuYWdlcjtcbiAgfVxuICBwdWJsaWMgc2V0T3B0aW9uKGRhdGE6IGFueSwgaXNEZWZhdWx0OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHRoaXMubWFpbj8uaW5pdE9wdGlvbihkYXRhLCBpc0RlZmF1bHQpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgbWFpbjogSU1haW4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm1haW4gPSBtYWluID8/IG5ldyBTeXN0ZW1CYXNlKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSBuZXcgRG9ja01hbmFnZXIodGhpcy5jb250YWluZXIsIHRoaXMubWFpbik7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIucmVzZXQoKTtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5tYWluPy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHRoaXMubWFpbj8uZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICB9XG4gIHB1YmxpYyBnZXRNYWluKCk6IElNYWluIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tYWluO1xuICB9XG4gIG5ld1NvbHV0aW9uKCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ubmV3U29sdXRpb24oJG5hbWUpO1xuICB9XG4gIG9wZW5Tb2x1dGlvbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm9wZW5Tb2x1dGlvbigkZGF0YSk7XG4gIH1cbiAgbmV3UHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm5ld1Byb2plY3QoJG5hbWUpO1xuICB9XG4gIG9wZW5Qcm9qZWN0KCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ub3BlblByb2plY3QoJG5hbWUpO1xuICB9XG4gIGdldFByb2plY3RBbGwoKTogYW55W10gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZ2V0UHJvamVjdEFsbCgpO1xuICB9XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8uc2V0UHJvamVjdE9wZW4oJGRhdGEpO1xuICB9XG4gIGltcG9ydEpzb24oZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/LmltcG9ydEpzb24oZGF0YSk7XG4gIH1cbiAgZXhwb3J0SnNvbigpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZXhwb3J0SnNvbigpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiRXZlbnRFbnVtIiwiaW5pdCIsImRhdGFDaGFuZ2UiLCJzaG93UHJvcGVydHkiLCJvcGVuUHJvamVjdCIsIm5ld1Byb2plY3QiLCJjaGFuZ2VWYXJpYWJsZSIsImNoYW5nZSIsImRpc3Bvc2UiLCJncm91cENoYW5nZSIsIkRvY2tFbnVtIiwibGVmdCIsInRvcCIsInZpZXciLCJib3R0b20iLCJyaWdodCIsIlByb3BlcnR5RW51bSIsIm1haW4iLCJzb2x1dGlvbiIsImxpbmUiLCJ2YXJpYWJsZSIsImdyb3VwQ2F2YXMiLCJFdmVudEZsb3ciLCJldmVudHMiLCJjb25zdHJ1Y3RvciIsIm9uU2FmZSIsImV2ZW50IiwiY2FsbGJhY2siLCJ0aGlzIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImNvbnNvbGUiLCJlcnJvciIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsInB1c2giLCJsaXN0ZW5lckluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiZGV0YWlscyIsImZvckVhY2giLCJsaXN0ZW5lciIsIkRhdGFGbG93IiwicHJvcGVydHkiLCJkYXRhIiwicHJvcGVydGllcyIsImdldFByb3BlcnRpZXMiLCJsb2FkIiwiSW5pdERhdGEiLCJldmVudERhdGFDaGFuZ2UiLCJrZXkiLCJrZXlDaGlsZCIsInZhbHVlQ2hpbGQiLCJzZW5kZXJDaGlsZCIsImluZGV4IiwidmFsdWUiLCJzZW5kZXIiLCJSZW1vdmVFdmVudERhdGEiLCJpdGVtIiwiT25FdmVudERhdGEiLCJCaW5kRXZlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJTZXQiLCJpc0Rpc3BhdGNoIiwiU2V0RGF0YSIsImlzQ2xlYXJEYXRhIiwiJGRhdGEiLCJPYmplY3QiLCJrZXlzIiwiR2V0IiwiQXBwZW5kIiwiUmVtb3ZlIiwiZ2V0UHJvcGVydHlCeUtleSIsImRlZmF1bHQiLCJtYXAiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0pzb24iLCJycyIsImRlbGV0ZSIsIkZsb3dDb3JlIiwiR2V0SWQiLCJTZXRJZCIsImlkIiwiZWxOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiQ2hlY2tFbGVtZW50Q2hpbGQiLCJlbCIsImNvbnRhaW5zIiwiU2V0RGF0YUZsb3ciLCJSZW1vdmVEYXRhRXZlbnQiLCJzZXRUaW1lb3V0IiwidHlwZSIsIkJhc2VGbG93IiwicGFyZW50Iiwic3VwZXIiLCJnZXREYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJjb21wYXJlU29ydCIsImEiLCJiIiwic29ydCIsImlzRnVuY3Rpb24iLCJmbiIsIkZ1bmN0aW9uIiwiVGFnVmlldyIsIkRhdGFWaWV3Iiwia2V5TmFtZSIsImdldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsImVkaXQiLCJzZWxlY3QiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsIm5vZGVFZGl0b3IiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJiaW5kRGF0YSIsImJpbmRJbnB1dCIsImJpbmQiLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZEV2ZW50IiwiZGF0YVNlbGVjdCIsIm9wdGlvbnMiLCJ0ZXh0Iiwib3B0aW9uIiwic2NyaXB0Iiwic2V0Tm9kZVZhbHVlIiwiaW5jbHVkZXMiLCJ0YWdOYW1lIiwiaW5uZXJUZXh0IiwiRGVsZXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInN0YXRpYyIsImNoaWxkRWxlbWVudENvdW50IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJTY29wZVJvb3QiLCJWYXJpYWJsZU5vZGUiLCJuYW1lIiwiaW5pdGFsVmFsdWUiLCJzY29wZSIsIk1vdmVUeXBlIiwicyIsImhleERpZ2l0cyIsImkiLCJzdWJzdHIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwibWVzc2FnZSIsIm9wdGlvbmFsUGFyYW1zIiwibG9nIiwiTGluZSIsImZyb21JbmRleCIsInRvIiwidG9JbmRleCIsImNyZWF0ZUVsZW1lbnROUyIsImVsUGF0aCIsImN1cnZhdHVyZSIsInRlbXAiLCJTdGFydFNlbGVjdGVkIiwic2V0QXR0cmlidXRlTlMiLCJlbENhbnZhcyIsIkFkZExpbmUiLCJ1cGRhdGVUbyIsInRvX3giLCJ0b195IiwieCIsImZyb21feCIsInkiLCJmcm9tX3kiLCJnZXRQb3N0aXNpb25Eb3QiLCJsaW5lQ3VydmUiLCJjcmVhdGVDdXJ2YXR1cmUiLCJVcGRhdGVVSSIsIkFjdGl2ZSIsImZsZyIsInJlbW92ZSIsInN0YXJ0X3Bvc194Iiwic3RhcnRfcG9zX3kiLCJlbmRfcG9zX3giLCJlbmRfcG9zX3kiLCJjdXJ2YXR1cmVfdmFsdWUiLCJsaW5lX3giLCJsaW5lX3kiLCJoeDEiLCJhYnMiLCJoeDIiLCJub2RlVGhpcyIsIlJlbW92ZUxpbmUiLCJlIiwic2V0TGluZUNob29zZSIsInNldE5vZGVUbyIsIm5vZGUiLCJDbG9uZSIsImNoZWNrTGluZUV4aXN0cyIsIkRlc2dpbmVyVmlld19FdmVudCIsInRpbWVGYXN0Q2xpY2siLCJ0YWdJbmdvcmUiLCJtb3ZlVHlwZSIsIk5vbmUiLCJmbGdEcmFwIiwiZmxnTW92ZSIsImF2X3giLCJhdl95IiwicG9zX3giLCJwb3NfeSIsIm1vdXNlX3giLCJtb3VzZV95IiwidGVtcExpbmUiLCJFbmRNb3ZlIiwiTW92ZSIsIlN0YXJ0TW92ZSIsImNvbnRleHRtZW51Iiwibm9kZV9kcm9wRW5kIiwibm9kZV9kcmFnb3ZlciIsInpvb21fZW50ZXIiLCJrZXlkb3duIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsIiRsb2NrIiwia2V5Tm9kZSIsImdldENvbnRyb2xDaG9vc2UiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZV9wb3NfeCIsImVfcG9zX3kiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJDYWxjWCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkNhbGNZIiwiY2hlY2tPbmx5Tm9kZSIsIkFkZE5vZGUiLCJncm91cCIsIkN1cnJlbnRHcm91cCIsInVwZGF0ZVBvc2l0aW9uIiwiY3RybEtleSIsImRlbHRhWSIsInpvb21fb3V0Iiwiem9vbV9pbiIsInRhcmdldCIsInRvTG93ZXJDYXNlIiwiQ2FudmFzIiwibm9kZUNob29zZSIsImdldE5vZGVDaG9vc2UiLCJOb2RlIiwic2V0Tm9kZUNob29zZSIsImdldFgiLCJnZXRZIiwic2V0WCIsInNldFkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwibm9kZUVsIiwiY2xvc2VzdCIsIm5vZGVJZCIsIm5vZGVUbyIsIkdldE5vZGVCeUlkIiwicXVlcnlTZWxlY3RvciIsIm1ldGFLZXkiLCJnZXRMaW5lQ2hvb3NlIiwiRGVzZ2luZXJWaWV3X1Rvb2xiYXIiLCJlbFBhdGhHcm91cCIsImJ0bkJhY2siLCJlbFRvb2xiYXIiLCJyZW5kZXJVSSIsInJlbmRlclBhdGhHcm91cCIsImlubmVySFRNTCIsImdyb3VwcyIsIkdldEdyb3VwTmFtZSIsImxlbiIsIkJhY2tHcm91cCIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0blpvb21JbiIsImJ0blpvb21PdXQiLCJidG5ab29tUmVzZXQiLCJ6b29tX3Jlc2V0IiwiYnV0dG9uR3JvdXAiLCJOb2RlSXRlbSIsImdldE5hbWUiLCJDaGVja0tleSIsImdldERhdGFMaW5lIiwiYXJyTGluZSIsImZpbHRlciIsImVsQ29udGVudCIsImFyckRhdGFWaWV3IiwiZ2V0Q29udHJvbE5vZGVCeUtleSIsImNsYXNzIiwiZ2V0T3B0aW9uIiwiZGV0YWlsIiwiYWN0aXZlRWxlbWVudCIsImhpZGVUaXRsZSIsImljb24iLCJhZGROb2RlRG90IiwibnVtIiwic3RhcnQiLCJxdWVyeSIsIm5vZGVRdWVyeSIsIm5vZGVEb3QiLCJkb3QiLCJyZW5kZXJIdG1sIiwiQmluZEVsZW1lbnQiLCJvcGVuR3JvdXAiLCJpQ2hlY2siLCJ0ZW1weCIsInRlbXB5IiwiZWxEb3QiLCJSZW1vdmVOb2RlIiwiUmVuZGVyTGluZSIsIlpvb20iLCJEZXNnaW5lclZpZXciLCJnZXRab29tIiwiZ2V0RGF0YUdyb3VwIiwic2V0Wm9vbSIsImdyb3VwRGF0YSIsImxhc3RHcm91cE5hbWUiLCJkYXRhR3JvdXAiLCJHZXREYXRhQnlJZCIsInRvb2xiYXIiLCJjaGFuZ2VHcm91cCIsIlJlbmRlclVJIiwiQ3VycmVudEdyb3VwRGF0YSIsImxpbmVDaG9vc2UiLCJub2RlcyIsIkFkZE5vZGVJdGVtIiwiSW5zZXJ0Tm9kZSIsIkNsZWFyTm9kZSIsIkdldERhdGFBbGxOb2RlIiwiR2V0RGF0YU5vZGUiLCJ6b29tX2xhc3RfdmFsdWUiLCJ0YWJJbmRleCIsIk9wZW4iLCJ1cGRhdGVWaWV3Iiwiem9vbSIsInN0eWxlIiwidHJhbnNmb3JtIiwiR2V0QWxsTm9kZSIsIm51bWJlciIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29udHJvbEJ5S2V5Iiwiem9vbV9yZWZyZXNoIiwidGVtcF96b29tIiwiVmFyaWFibGVWaWV3IiwidmFyaWFibGVzIiwiUmVuZGVyIiwiZ2V0VmFyaWFibGUiLCJWYXJpYWJsZUl0ZW0iLCJSZW5kZXJTY29wZSIsImNoYW5nZURhdGEiLCJ1cGRhdGVWYXJpYWJsZSIsIm5hbWVJbnB1dCIsInR5cGVJbnB1dCIsInNjb3BlSW5wdXQiLCJ2YWx1ZURlZmF1bHRJbnB1dCIsIm5hbWVDb2x1bW4iLCJ0eXBlQ29sdW1uIiwic2NvcGVDb2x1bW4iLCJ2YWx1ZURlZmF1bHRDb2x1bW4iLCJidXR0b25SZW1vdmUiLCJyZW1vdmVWYXJpYWJsZSIsImJ1dHRvblJlbW92ZUNvbHVtbiIsInByZXBlbmQiLCJUb29sYm94VmlldyIsImNvbnRyb2xzIiwiZ2V0Q29udHJvbEFsbCIsIm5vZGVJdGVtIiwiZHJhZ1N0YXJ0IiwiZHJhZ2VuZCIsInNldENvbnRyb2xDaG9vc2UiLCJzZXREYXRhIiwiUHJvamVjdFZpZXciLCJnZXRQcm9qZWN0QWxsIiwiY2hlY2tQcm9qZWN0T3BlbiIsInNldFByb2plY3RPcGVuIiwiRG9ja0Jhc2UiLCJjb250YWluZXIiLCJCb3hJbmZvIiwidGl0bGUiLCIkY2FsbGJhY2siLCJDb250cm9sRG9jayIsIlZhcmlhYmxlRG9jayIsIiRub2RlUmlnaHQiLCJidXR0b25OZXciLCJuZXdWYXJpYWJsZSIsIlByb2plY3REb2NrIiwiYnV0dG9uRXhwb3J0IiwiZG93bmxvYWRPYmplY3RBc0pzb24iLCJleHBvcnRPYmoiLCJleHBvcnRKc29uIiwiZXhwb3J0TmFtZSIsImRhdGFTdHIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkb3dubG9hZEFuY2hvck5vZGUiLCJib2R5IiwiY2xpY2siLCJidXR0b25JbXBvcnQiLCJpbnB1dEVsIiwiaW1wb3J0SnNvbiIsInBhcnNlIiwiZnIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVzdWx0IiwiZmlsZXMiLCJyZWFkQXNUZXh0IiwiUHJvcGVydHlEb2NrIiwibGFzdERhdGEiLCJoaWRlS2V5cyIsInNvcnRLZXlzIiwicHJvcGVydHlJdGVtIiwicHJvcGVydHlMYWJlbCIsInByb3BlcnR5VmFsdWUiLCJWaWV3RG9jayIsIkRvY2tNYW5hZ2VyIiwiJGRvY2tNYW5hZ2VyIiwicmVzZXQiLCJhZGREb2NrIiwiJGtleSIsIiR2aWV3IiwiJGl0ZW0iLCJDb250cm9sIiwibm9kZV9iZWdpbiIsImh0bWwiLCJvbmx5Tm9kZSIsIm5vZGVfZW5kIiwibm9kZV9pZiIsImNvbmRpdGlvbiIsIm91dHB1dCIsIm5vZGVfZ3JvdXAiLCJub2RlX29wdGlvbiIsIm5vZGVfcHJvamVjdCIsInByb2plY3QiLCJTeXN0ZW1CYXNlIiwiJHByb2plY3RPcGVuIiwiJHByb3BlcnRpZXMiLCIkY29udHJvbCIsIiRjb250cm9sQ2hvb3NlIiwiJGNoZWNrT3B0aW9uIiwicHJvamVjdHMiLCJuZXdTb2x1dGlvbiIsIiRuYW1lIiwib3BlblNvbHV0aW9uIiwidmFyaWJhbGUiLCJhZGRWYXJpYWJsZSIsImFyciIsInZhcnMiLCJjaGVja0luaXRPcHRpb24iLCJpbml0T3B0aW9uIiwiaXNEZWZhdWx0IiwiY29udHJvbCIsImNvbnRyb2xUZW1wIiwibGluZXMiLCJlbFBhcmVudCIsIiRwcm9qZWN0IiwiZ2V0UHJvamVjdEJ5SWQiLCIkaWQiLCJyZW5kZXIiLCJwYXJzZUludCIsInZlcnNpb24iLCJ3cmFwcGVyIiwiaCIsInByb3BzIiwiYXBwQ29udGV4dCIsIiRtb3VudCIsIiRlbCIsIl9ub2RlIiwiVmlzdWFsRmxvdyIsImdldERvY2tNYW5hZ2VyIiwic2V0T3B0aW9uIiwiZ2V0TWFpbiIsIkNvcmUiLCJEb2NrIiwiRGVzZ2luZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozt1Q0FBTyxNQUFNQSxFQUFZLENBQ3ZCQyxLQUFNLE9BQ05DLFdBQVksYUFDWkMsYUFBYyxlQUNkQyxZQUFhLGNB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
