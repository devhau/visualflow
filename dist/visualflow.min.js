/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.2
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const t={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",change:"change",dispose:"dispose"},e={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"};class i{main;elNode=document.createElement("div");elContent;constructor(t,e){this.main=e,t.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(t,e){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${t}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),e&&e(this.elContent)}}class n extends i{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(t=>{let e=this.main.getControlAll();Object.keys(e).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${e[s].icon} <span>${e[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),t.appendChild(i)}))}))}dragend(t){this.main.setControlChoose(null)}dragStart(t){let e=t.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(e),"touchstart"!==t.type&&t.dataTransfer.setData("node",e)}}class o{events={};constructor(){}onSafe(t,e){this.removeListener(t,e),this.on(t,e)}on(t,e){return"function"!=typeof e?(console.error("The listener callback must be a function, the given type is "+typeof e),!1):"string"!=typeof t?(console.error("The event name must be a string, the given type is "+typeof t),!1):(void 0===this.events[t]&&(this.events[t]={listeners:[]}),void this.events[t].listeners.push(e))}removeListener(t,e){if(!this.events[t])return!1;const s=this.events[t].listeners,i=s.indexOf(e);i>-1&&s.splice(i,1)}dispatch(t,e){if(void 0===this.events[t])return!1;this.events[t].listeners.forEach((t=>{t(e)}))}}class a{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}constructor(t,e){this.property=t,this.events=new o,e&&this.load(e)}InitData(t=null,e=-1){-1!==e&&(this.properties=e),this.load(t)}eventDataChange(e,s,i,n,o){o?(this.dispatch(`${t.dataChange}_${e}_${o}_${s}`,{key:e,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${t.dataChange}_${e}_${o}`,{key:e,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${t.dataChange}_${e}_${s}`,{key:e,keyChild:s,value:i,sender:n}),this.dispatch(`${t.dataChange}_${e}`,{key:e,keyChild:s,value:i,sender:n})}RemoveEventData(e,s,i){e&&e.removeListener(`${t.dataChange}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}OnEventData(e,s,i){e&&e.on(`${t.dataChange}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}BindEvent(t,e){t&&(t instanceof a&&this.OnEventData(t,e),Array.isArray(t)&&t.length>0&&t[0]instanceof a&&t.forEach(((t,s)=>this.OnEventData(t,e,s))))}Set(e,s,i=null,n=!0){this.data[e]!=s&&(this.data[e]&&(this.data[e]instanceof a&&this.RemoveEventData(this.data[e],e),Array.isArray(this.data[e])&&this.data[e].length>0&&this.data[e][0]instanceof a&&this.data[e].forEach(((t,s)=>this.RemoveEventData(t,e,s)))),this.BindEvent(s,e)),this.data[e]=s,n&&(this.dispatch(`${t.dataChange}_${e}`,{key:e,value:s,sender:i}),this.dispatch(t.dataChange,{key:e,value:s,sender:i}),this.dispatch(t.change,{key:e,value:s,sender:i}))}SetData(e,s=null,i=!1){if(i&&(this.data={}),e instanceof a){let t=e;if(!this.property&&t.property&&(this.property=t.property),this.properties)for(let e of Object.keys(this.properties))this.Set(e,t.Get(e),s,!1);else for(let e of Object.keys(t.getProperties()))this.Set(e,t.Get(e),s,!1)}else Object.keys(e).forEach((t=>{this.Set(t,e[t],s,!1)}));this.dispatch(t.change,{data:e})}Get(t){return this.data[t]}Append(t,e){this.data[t]||(this.data[t]=[]),this.data[t]=[...this.data[t],e],this.BindEvent(e,t)}Remove(t,e){this.data[t].indexOf(e);var s=this.data[t].indexOf(e);s>-1&&(this.RemoveEventData(this.data[t][s],t),this.data[t].splice(s,1))}load(t){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(t.key)),this.properties)for(let e of Object.keys(this.properties))this.data[e]=t?.[e]??("function"==typeof this.properties[e]?.default?this.properties[e]?.default():this.properties[e]?.default)??"",this.data[e]instanceof a||!this.data[e].key||(this.data[e]=new a(this.property,this.data[e])),!Array.isArray(this.data[e])||!this.property||this.data[e][0]instanceof a||(this.data[e]=this.data[e].map((t=>t instanceof a||!t.key?t:new a(this.property,t)))),this.BindEvent(this.data[e],e)}toString(){return JSON.stringify(this.toJson())}toJson(){let t={};for(let e of Object.keys(this.properties))t[e]=this.Get(e),t[e]instanceof a&&(t[e]=t[e].toJson()),Array.isArray(t[e])&&t[e].length>0&&t[e][0]instanceof a&&(t[e]=t[e].map((t=>t.toJson())));return t}delete(){this.events=new o,this.data={}}}class r{GetId(){return this.data.Get("id")}SetId(t){return this.data.Set("id",t)}properties={};data=new a;elNode=document.createElement("div");CheckElementChild(t){return this.elNode==t||this.elNode.contains(t)}events;SetData(t,e=null){this.data.SetData(t,e)}SetDataFlow(e){this.data.SetData(e,this,!0),this.dispatch("bind_data_event",{data:e,sender:this}),this.dispatch(t.change,{data:e,sender:this})}onSafe(t,e){return this.events.onSafe(t,e),this}on(t,e){return this.events.on(t,e),this}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}BindDataEvent(){this.data.on(t.dataChange,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t.dataChange}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t.dataChange,{type:"data",key:e,value:s,sender:i})}))})),this.data.on(t.change,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(t.change,{type:"data",key:e,value:s,sender:i})}))}))}RemoveDataEvent(){this.data.removeListener(t.dataChange,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t.dataChange}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t.dataChange,{type:"data",key:e,value:s,sender:i})}))})),this.data.removeListener(t.change,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(t.change,{type:"data",key:e,value:s,sender:i})}))}))}constructor(){this.events=new o,this.BindDataEvent()}}class d extends r{parent;constructor(t){super(),this.parent=t}}const h=()=>new Date,l=()=>h().getTime(),c=(t,e)=>t.sort<e.sort?-1:t.sort>e.sort?1:0,p=t=>t&&t instanceof Function,u=["SPAN","DIV","P","TEXTAREA"];class m{el;data;main;keyName;elNode;property;constructor(t,e,s,i=null){if(this.el=t,this.data=e,this.main=s,this.keyName=i,this.keyName)t.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.el.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode));else if(this.keyName=t?.getAttribute("node:model"),this.keyName){this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el;let e=document.createElement("span");e.classList.add("node-editor"),t.parentElement?.insertBefore(e,t),t.parentElement?.removeChild(t),e.appendChild(this.elNode)}this.keyName&&this.bindData()}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${t.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keypress",this.bindEvent.bind(this)),this.property&&this.property.select&&p(this.property.dataSelect)){const t=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:t,text:e})=>{let s=document.createElement("option");return s.value=t,s.text=e,s}));for(let e of t)this.elNode.appendChild(e)}this.property&&p(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(t){this.elNode&&(u.includes(this.elNode.tagName)?this.elNode.innerText=`${t}`:this.elNode.value=t)}bindInput({value:t,sender:e}){e!==this&&this.elNode&&e.elNode!==this.elNode&&this.setNodeValue(t)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&this.data.Set(this.keyName,this.elNode.value,this)}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${t.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(t,e,s,i=null){return 0==t.childElementCount||t.getAttribute("node:model")?[new m(t,e,s,i)]:Array.from(t.querySelectorAll("[node\\:model]")).map((t=>new m(t,e,s)))}}var v,f=Object.freeze({__proto__:null,FlowCore:r,BaseFlow:d,DockEnum:e,EventEnum:t,PropertyEnum:s,DataFlow:a,DataView:m,EventFlow:o,compareSort:c,getUuid:()=>{let t=[],e="0123456789abcdef";for(let s=0;s<36;s++)t[s]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")},getTime:l,LOG:(t,...e)=>console.log(t,e),getDate:h,isFunction:p});class g extends i{main;constructor(e,s){super(e,s),this.main=s,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(t.change,this.renderUI.bind(this)),this.main.on(t.openProject,(t=>{this.elContent?.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")})),this.elContent&&t?.data?.Get("id")&&this.elContent.querySelector(`[data-project-id="${t?.data?.Get("id")}"]`)?.classList.add("active")}))}renderUI(){let e=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(this.elContent){if(this.elContent.innerHTML="",e){e.innerHTML="";let t=document.createElement("button");e?.appendChild(t),t.innerHTML="New",t.addEventListener("click",(()=>this.main.newProject("")))}this.main.getProjectAll().forEach((e=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${e.Get("name")}`,s.setAttribute("data-project-id",e.Get("id")),e.removeListener(`${t.dataChange}_name`,(()=>{s.innerHTML=`${e.Get("name")}`})),e.on(`${t.dataChange}_name`,(()=>{s.innerHTML=`${e.Get("name")}`})),this.main.checkProjectOpen(e)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.dispatch(t.openProject,{data:e}),this.main.dispatch(t.showProperty,{data:e})})),this.elContent?.appendChild(s)}))}}}class y extends i{main;lastData;hideKeys=["lines","nodes","groups"];sortKeys=["id","key","name","group"];constructor(e,s){super(e,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(e=>{s.on(t.showProperty,(t=>{this.renderUI(e,t.data)}))}))}renderUI(t,e){if(this.lastData==e)return;this.lastData=e,t.innerHTML="";let s=e.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),m.BindElement(a,e,this.main,i),n.appendChild(o),n.appendChild(a),t.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),m.BindElement(o,e,this.main,s),i.appendChild(n),i.appendChild(o),t.appendChild(i)}))}}class N{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new a;curvature=.5;temp=!1;constructor(t,e=0,i,n=0,o=null){this.from=t,this.fromIndex=e,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(t,e){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,t,e,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:t,y:e}=this.to.getPostisionDot(this.toIndex);this.updateTo(t,e)}return this}Active(t=!0){t?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(t,e,s,i,n,o){let a=t,r=e,d=s,h=i,l=n;switch(o){case"open":if(t>=s)var c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"close":if(t>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*l;else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"other":if(t>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(c=a+Math.abs(d-a)*l)+" "+r+" "+(p=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(t=null,e=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),e&&this.from.data.Remove("lines",this.data),this.from!=t&&this.from.RemoveLine(this),this.to!=t&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(t){this.from.parent.setLineChoose(this)}setNodeTo(t,e){this.to=t,this.toIndex=e}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new N(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(t){t[t.None=0]="None",t[t.Node=1]="Node",t[t.Canvas=2]="Canvas",t[t.Line=3]="Line"}(v||(v={}));class C{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=v.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(t){this.parent=t,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(t){t.preventDefault()}node_dragover(t){t.preventDefault()}node_dropEnd(t){if(t.preventDefault(),this.parent.$lock)return;let e=this.parent.main.getControlChoose();if(e||"touchend"===t.type||(e=t.dataTransfer.getData("node")),!e)return;let s=0,i=0;"touchmove"===t.type?(s=t.touches[0].clientX,i=t.touches[0].clientY):(s=t.clientX,i=t.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(e)||this.parent.AddNode(e,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(t){this.parent.$lock||t.ctrlKey&&(t.preventDefault(),t.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(t){if(this.parent.$lock)return;if(this.tagIngore.includes(t.target.tagName.toLowerCase()))return;if(this.timeFastClick=l(),t.target.classList.contains("main-path"))return;"touchstart"===t.type?(this.pos_x=t.touches[0].clientX,this.pos_y=t.touches[0].clientY):(this.pos_x=t.clientX,this.pos_y=t.clientY),this.moveType=v.Canvas;let e=this.parent.getNodeChoose();if(e&&e.CheckElementChild(t.target)?this.moveType=v.Node:this.parent.setNodeChoose(void 0),e&&this.moveType==v.Node&&t.target.classList.contains("node-dot")){this.moveType=v.Line;let s=t.target.getAttribute("node");this.tempLine=new N(e,s),this.tempLine.temp=!0}this.moveType==v.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(t){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let e=0,s=0;switch("touchmove"===t.type?(e=t.touches[0].clientX,s=t.touches[0].clientY):(e=t.clientX,s=t.clientY),this.moveType){case v.Canvas:{let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i);break}case v.Node:{let t=this.parent.CalcX(this.pos_x-e),i=this.parent.CalcY(this.pos_y-s);this.pos_x=e,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(t,i);break}case v.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-e),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=t.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&t.target.classList.contains("node-dot")){let e=t.target.getAttribute("node");this.tempLine.setNodeTo(r,e)}else{let t=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,t)}}}"touchmove"===t.type&&(this.mouse_x=e,this.mouse_y=s)}EndMove(t){if(this.parent.$lock)return;if(!this.flgDrap)return;if(l()-this.timeFastClick<100||!this.flgMove)return this.moveType=v.None,this.flgDrap=!1,void(this.flgMove=!1);let e=0,s=0;if("touchend"===t.type?(e=this.mouse_x,s=this.mouse_y):(e=t.clientX,s=t.clientY),this.moveType===v.Canvas){let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=e,this.pos_y=s,this.moveType=v.None,this.flgDrap=!1,this.flgMove=!1}keydown(t){this.parent.$lock||(("Delete"===t.key||"Backspace"===t.key&&t.metaKey)&&(t.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===t.key&&t.preventDefault())}}class L{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(t){this.parent=t,this.elNode=t.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let t=this.parent.GetGroupName(),e=t.length-1;if(e<0)return;let s=document.createElement("span");s.innerHTML="Root",s.addEventListener("click",(t=>this.parent.BackGroup("Root"))),this.elPathGroup.appendChild(s),this.btnBack.removeAttribute("style");for(let s=e;s>=0;s--){let e=document.createElement("span");e.innerHTML=`>>${t[s].text}`,e.setAttribute("group",t[s].id),e.addEventListener("click",(e=>this.parent.BackGroup(t[s].id))),this.elPathGroup.appendChild(e)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_in())),t.innerHTML="+";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_out())),e.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(t),i.appendChild(e),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}class k extends d{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}CheckKey(t){return this.data.Get("key")==t}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(t,e,s){return this.arrLine.filter((i=>!i.temp&&i.to==e&&i.toIndex==s&&i.fromIndex==t||!i.temp&&i.from==e&&i.fromIndex==s&&i.toIndex==t)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(e,s,i={}){super(e),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof a?this.data=i:(this.data.InitData(i,this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(t.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.renderUI()}getOption(){return this.option}renderUI(t=null){if(t&&["x","y"].includes(t.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const e=(t,e,s)=>{if(t){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<t;s++){let t=document.createElement("div");t.classList.add("node-dot"),t.setAttribute("node",`${e+s}`),i.appendChild(t)}}}};e(this.option?.dot?.left,1e3,".node-left"),e(this.option?.dot?.top,2e3,".node-top"),e(this.option?.dot?.bottom,3e3,".node-bottom"),e(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((t=>t.Delete())),p(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=m.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(t,e,s=!1){if(this.elNode){let i=t,n=e;s||(n=this.elNode.offsetTop-e,i=this.elNode.offsetLeft-t),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(t=!0){t?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(t){var e=this.arrLine.indexOf(t);return e>-1&&this.arrLine.splice(e,1),this.arrLine}AddLine(t){this.arrLine=[...this.arrLine,t]}getPostisionDot(t=0){let e=this.elNode?.querySelector(`.node-dot[node="${t}"]`);if(e){let t=this.elNode.offsetTop+e.offsetTop+10;return{x:this.elNode.offsetLeft+e.offsetLeft+10,y:t}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((t=>{t.UpdateUI()}))}delete(e=!0){this.arrLine.forEach((t=>t.delete(this,e))),e?this.data.delete():(this.data.removeListener(t.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(t.change,{})}RenderLine(){this.getDataLine().forEach((t=>{let e=this.parent.GetNodeById(t.Get("to")),s=t.Get("toIndex"),i=t.Get("fromIndex");new N(this,i,e,s,t).UpdateUI()}))}}const b=1.6,E=.6,G=.1,_=1;class $ extends r{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(t){return this.getDataGroup().Set("zoom",t,this)}getY(){return+this.getDataGroup().Get("y")}setY(t){return this.getDataGroup().Set("y",t,this)}getX(){return+this.getDataGroup().Get("x")}setX(t){return this.getDataGroup().Set("x",t,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let e=this.data.Get("groups");return this.groupData=e?.filter((t=>t.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new a(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData)),this.groupData.onSafe(t.dataChange,this.UpdateUI.bind(this)),this.groupData}group=[];GetGroupName(){return this.group.map((t=>({id:t,text:this.GetDataById(t)?.Get("name")})))}BackGroup(t=null){let e=1;t&&(e=this.group.indexOf(t),e<0&&(e=0)),e?this.group.splice(0,e):this.group=[],this.toolbar.renderPathGroup(),this.RenderUI()}CurrentGroup(){let t=this.group?.[0];return t&&""!=t?t:"root"}openGroup(t){this.group=[t,...this.group],this.toolbar.renderPathGroup(),this.RenderUI()}lineChoose;setLineChoose(t){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=t,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(e){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=e,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(t.showProperty,{data:this.nodeChoose.data})):this.dispatch(t.showProperty,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNodeItem(t){return this.AddNode(t.Get("key"),t)}AddNode(t,e={}){return this.InsertNode(new k(this,t,e))}InsertNode(t){return this.nodes=[...this.nodes,t],t}RemoveNode(t){var e=this.nodes.indexOf(t);return this.data.Remove("nodes",t),e>-1&&this.nodes.splice(e,1),this.nodes}ClearNode(){this.nodes?.forEach((t=>t.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((t=>t.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(e,i){super(),this.main=i,this.elNode=e;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,this.RenderUI(),this.on(t.dataChange,this.RenderUI.bind(this)),new C(this),this.toolbar=new L(this)}updateView(t,e,s){this.elCanvas.style.transform=`translate(${t}px, ${e}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(t={}){t.sender&&t.sender instanceof k||(t.sender&&t.sender instanceof $||(this.ClearNode(),this.GetDataNode().forEach((t=>{this.AddNodeItem(t)})),this.GetAllNode().forEach((t=>{t.RenderLine()}))),this.UpdateUI())}Open(t){this.data=t,this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.toolbar.renderPathGroup(),this.BindDataEvent(),this.RenderUI()}CalcX(t){return t*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(t){return t*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(t){return this.GetAllNode().filter((e=>e.GetId()==t))?.[0]}GetDataById(t){return this.GetDataAllNode().filter((e=>e.Get("id")===t))?.[0]}checkOnlyNode(t){return this.main.getControlByKey(t).onlyNode&&this.nodes.filter((e=>e.CheckKey(t))).length>0}zoom_refresh(t=0){let e=0==t?_:this.getZoom()+G*t;b>=e&&e>=E&&(this.setX(this.getX()/this.zoom_last_value*e),this.setY(this.getY()/this.zoom_last_value*e),this.zoom_last_value=e,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class x extends i{main;view;constructor(e,s){super(e,s),this.main=s,this.view=new $(this.elNode,s),this.view.on(t.showProperty,(e=>{s.dispatch(t.showProperty,e)})),this.main.on(t.openProject,(t=>{this.view?.Open(t.data),this.main.setProjectOpen(t.data)}))}}class D{container;main;$dockManager={};constructor(t,e){this.container=t,this.main=e}reset(){this.$dockManager={},this.addDock(e.left,n),this.addDock(e.left,g),this.addDock(e.right,y),this.addDock(e.view,x),this.addDock(e.bottom,i),this.RenderUI()}addDock(t,e){this.$dockManager[t]||(this.$dockManager[t]=[]),this.$dockManager[t]=[...this.$dockManager[t],e]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((t=>{let e=this.container.querySelector(`.${t}`);e&&this.$dockManager[t].forEach((t=>{new t(e,this.main)}))}))}}const w={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"node-test",html:"",dot:{top:0,right:0,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:0,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input class="node-form-control" node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:t,main:e,node:s})=>{t.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:t,main:e,node:s})=>{t.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:t,main:e,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:t,main:e,node:s})=>e.getProjectAll().map((t=>({value:t.Get("id"),text:t.Get("name")}))),script:({elNode:t,main:e,node:s})=>{},default:""}}}};class P{$data=new a(this);$projectOpen;$properties={};$control={};events=new o;$controlChoose=null;$checkOption=!1;constructor(){this.$properties[s.solution]={id:{default:()=>l()},key:{default:s.solution},name:{default:()=>`solution-${l()}`,edit:!0},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>l()},name:{default:()=>`Flow-${l()}`,edit:!0},key:{default:s.main},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}}}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(t,e=!0){this.$checkOption=!0,this.$control=e?{...t?.control||{},...w}:{...t?.control||{}};let s={};Object.keys(this.$control).map((t=>({...this.$control[t],key:t,sort:void 0===this.$control[t].sort?99999:this.$control[t].sort}))).sort(c).forEach((t=>{s[t.key]={dot:{left:1,top:1,right:1,bottom:1},...t},this.$properties[`${t.key}`]={...t.properties||{},id:{default:()=>l()},key:{default:t.key},name:{default:t.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(t,e){e.innerHTML=t.getOption()?.html}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(t){this.$data.InitData(t,this.getPropertyByKey(s.solution))}setProjectOpen(t){this.$projectOpen=t}checkProjectOpen(t){return this.$projectOpen==t}newProject(){this.openProject({}),this.dispatch(t.newProject,{})}openProject(e){if(e instanceof a){let s=this.getProjectById(e.Get("id"));s||(s=e,this.$data.Append("projects",s)),this.dispatch(t.openProject,s)}else{let i=new a(this);i.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",i),this.dispatch(t.openProject,{data:i}),this.dispatch(t.showProperty,{data:i}),this.dispatch(t.change,{data:i})}}getProjectById(t){return this.$data.Get("projects").filter((e=>e.Get("id")===t))?.[0]}setControlChoose(t){this.$controlChoose=t}getControlChoose(){return this.$controlChoose}getControlByKey(t){return this.$control[t]||{}}getControlNodeByKey(t){return{...this.getControlByKey(t),properties:this.getPropertyByKey(`${t}`)}}getPropertyByKey(t){return this.$properties[t]}}var I=Object.freeze({__proto__:null,DesginerView:$,Line:N,Node:k});var M=Object.freeze({__proto__:null,DockEnum:e,ControlDock:n,DockBase:i,ProjectDock:g,PropertyDock:y,TabDock:class extends i{main;constructor(e,s){super(e,s),this.main=s,this.elNode.innerHTML="",this.elNode.classList.add("vs-tab"),this.main.on(t.openProject,(t=>{this.elNode?.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")})),this.elNode&&t?.data?.Get("id")&&this.elNode.querySelector(`[data-project-id="${t?.data?.Get("id")}"]`)?.classList.add("active")})),this.main.on(t.newProject,this.render.bind(this))}render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((e=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${e.Get("name")}`,s.setAttribute("data-project-id",e.Get("id")),e.removeListener(`${t.dataChange}_name`,(()=>{s.innerHTML=`${e.Get("name")}`})),e.on(`${t.dataChange}_name`,(()=>{s.innerHTML=`${e.Get("name")}`})),this.main.checkProjectOpen(e)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.dispatch(t.openProject,{data:e}),this.main.dispatch(t.showProperty,{data:e})})),this.elNode?.appendChild(s)}))}},ViewDock:x,DockManager:D});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(t,e=!0){this.main?.initOption(t,e),this.$dockManager.reset()}constructor(t,e){this.container=t,this.main=e??new P,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new D(this.container,this.main),this.$dockManager.reset()}onSafe(t,e){this.main?.onSafe(t,e)}on(t,e){this.main?.on(t,e)}removeListener(t,e){this.main?.removeListener(t,e)}dispatch(t,e){this.main?.dispatch(t,e)}getMain(){return this.main}newProject(t){this.getMain()?.newProject(t)}openProject(t){this.getMain()?.openProject(t)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(t){this.getMain()?.setProjectOpen(t)}importJson(t){this.getMain()?.importJson(t)}exportJson(){return this.getMain()?.exportJson()}},SystemBase:P,...f,...M,...I}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
