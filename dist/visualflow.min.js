/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.7
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange",setGroup:"setGroup",zoom:"zoom",runProject:"runProject",stopProject:"stopProject",statusBot:"statusBot"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"},i="root";class n{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}const o=()=>new Date,a=()=>o().getTime(),r=e=>`${e}${o().getTime().toString().substring(5)}`,d=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,h=e=>e&&e instanceof Function;class l{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new n,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e.dataChange}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e.dataChange}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof l&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof l&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,n=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof l&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof l&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,n&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof l){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Increase(e,t){(!t||t>this.data[e])&&this.Set(e,++this.data[e])}Decrease(e,t){(!t||t<this.data[e])&&this.Set(e,--this.data[e])}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties){const t=(e,t)=>{let s=t;h(t)&&(s=t()),Array.isArray(s)?s=s.map((e=>e.key?new l(this.property,e):e)):s?.key&&(s=new l(this.property,s)),this.data[e]=s,this.BindEvent(this.data[e],e)};for(let s of Object.keys(this.properties)){if(this.properties[s].sub&&e)for(let i of Object.keys(e))i.startsWith(s)&&t(i,e?.[i]??this.properties[s]?.default);else t(s,e?.[s]??this.properties[s]?.default)}}}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));const t=t=>{let s=this.Get(t);s instanceof l?e[t]=s.toJson():Array.isArray(s)?e[t]=s.map((e=>e instanceof l?e.toJson():e)):e[t]=s};for(let e of Object.keys(this.properties)){if(this.properties[e].sub)for(let s of Object.keys(this.data))s.startsWith(e)&&t(s);else t(e)}return e}delete(){this.events=new n,this.data={}}}class c{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new l;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new n}}class p extends c{parent;constructor(e){super(),this.parent=e}}const u=["SPAN","DIV","P","TEXTAREA"];class m{el;data;main;keyName;elNode;property;elSuggestions;elSuggestionsContent;nodeEditor;constructor(e,t,s,i=null){this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName?e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.nodeEditor=e,this.nodeEditor.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode)):(this.keyName=e?.getAttribute("node:model"),this.keyName&&(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el,this.nodeEditor=document.createElement("span"),this.nodeEditor.classList.add("node-editor"),e.parentElement?.insertBefore(this.nodeEditor,e),e.parentElement?.removeChild(e),this.nodeEditor.appendChild(this.elNode))),this.elSuggestions=document.createElement("div"),this.elSuggestions.classList.add("node-editor_suggestions"),this.elSuggestionsContent=document.createElement("div"),this.elSuggestionsContent.classList.add("suggestions_content"),this.elSuggestions.appendChild(this.elSuggestionsContent),this.showSuggestions(!1),this.nodeEditor&&this.nodeEditor.addEventListener("click",(e=>{e.target.classList.contains("sug-variable-item")&&this.setVar(e.target.innerText)})),this.keyName&&this.bindData()}setVar(e){let t=this.elNode.selectionStart;if(this.property.var)this.setNodeValue(e);else{let s=this.elNode.value,i=s.lastIndexOf("${",t);this.setNodeValue(`${s.substring(0,i)}\${${e}}${s.substring(t,s.length)}`)}setTimeout((()=>{this.elNode?.focus(),this.showSuggestions(!1),this.elNode.selectionStart=t+e.length,this.bindEvent()}))}checkShowSuggestions(){var e=this.main.getVariable();if(!e||0==e.length)return void this.showSuggestions(!1);let t=this.elNode.value,s=this.elNode.selectionStart,i="",n=0;if(t)if(this.property.var)i=t,this.showSuggestions(!0);else{if(n=t.lastIndexOf("${",s),!(t.lastIndexOf("}",s)<n))return void this.showSuggestions(!1);i=t.substring(n+2,s),this.showSuggestions(!0)}if(this.elSuggestionsContent){let t=document.createElement("div"),s=!1;console.log(i);for(let n of e){const e=n.Get("name");if(i&&!e.startsWith(i))continue;let o=document.createElement("button");o.innerHTML=e,o.classList.add("sug-variable-item"),t.appendChild(o),s=!0}if(this.elSuggestionsContent.appendChild(t),!s)return void this.showSuggestions(!1);this.suggestionIndex=0,this.setSuggestionIndex(0)}}showSuggestions(e=!0){this.elSuggestions&&(this.elSuggestionsContent&&(this.elSuggestionsContent.innerHTML=""),e?this.elSuggestions.removeAttribute("style"):this.elSuggestions.setAttribute("style","display:none;"))}elFocus=!1;regexValidate=null;suggestionIndex=0;setSuggestionIndex(e){if(!this.elSuggestions)return;let t=this.suggestionIndex+e;0>t||t>=this.elSuggestions.querySelectorAll(".sug-variable-item").length-1||(this.suggestionIndex=t,this.elSuggestions.querySelectorAll(".sug-variable-item").forEach(((e,t)=>{e.classList.remove("active"),t==this.suggestionIndex&&e.classList.add("active")})))}bindData(){if(this.keyName&&this.elNode){if(this.property.validate&&(this.regexValidate=new RegExp(this.property.validate,"i")),this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("keydown",(e=>{var t=e.which?e.which:e.keyCode;if(13==t&&this.suggestionIndex>-1){let t=this.elSuggestions?.querySelector(".active")?.innerHTML;return t&&this.setVar(t),e.preventDefault(),e.returnValue=!1,e.cancelBubble=!0,!1}return 38==t?(this.setSuggestionIndex(-1),e.preventDefault(),e.returnValue=!1,e.cancelBubble=!0,!1):40==t?(this.setSuggestionIndex(1),e.preventDefault(),e.returnValue=!1,e.cancelBubble=!0,!1):void this.bindEvent()})),this.elNode.addEventListener("paste",(e=>{if(this.regexValidate&&!this.regexValidate.test(e.clipboardData.getData("Text")))return e.preventDefault(),e.returnValue=!1,e.cancelBubble=!0,!1})),this.elNode.addEventListener("keypress",(e=>{var t=e.which?e.which:e.keyCode;if(this.regexValidate&&!this.regexValidate.test(String.fromCharCode(t)))return e.stopPropagation(),e.preventDefault(),e.returnValue=!1,e.cancelBubble=!0,!1})),this.elNode.addEventListener("focus",(()=>{this.elFocus=!0,this.suggestionIndex=0,this.elSuggestions&&this.elNode?.parentElement?.appendChild(this.elSuggestions)})),this.elNode.setAttribute("autocomplete","off"),this.elNode.addEventListener("blur",(()=>{this.elFocus=!1,setTimeout((()=>{this.elSuggestions&&!this.elFocus&&(this.elNode?.parentElement?.removeChild?.(this.elSuggestions),this.suggestionIndex=-1)}),500)})),this.elNode.addEventListener("select",(()=>{this.checkShowSuggestions()})),this.elNode&&this.property&&this.property.select&&h(this.property.dataSelect)){if(this.property.selectNone){let e=document.createElement("option");e.value="",e.text=this.property.selectNone,this.elNode?.appendChild(e),this.elNode.value=""}this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).forEach((e=>{let t=document.createElement("option");t.value=e.value,t.text=e.text,this.elNode?.appendChild(t)}))}this.property&&h(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName)??"")}}setNodeValue(e){this.elNode&&(u.includes(this.elNode.tagName)?this.elNode.innerText=`${e??""}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t?.elNode!==this.elNode&&this.setNodeValue(e??"")}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&(this.data.Set(this.keyName,this.elNode.value,this),this.checkShowSuggestions())}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new m(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new m(e,t,s)))}}var v,g=Object.freeze({__proto__:null,FlowCore:c,BaseFlow:p,DockEnum:t,EventEnum:e,PropertyEnum:s,ScopeRoot:i,DataFlow:l,DataView:m,EventFlow:n,compareSort:d,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:a,LOG:(e,...t)=>console.log(e,t),getDate:o,isFunction:h});class f{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new l;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,o=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,r=t,d=s,h=i,l=n;switch(o){case"open":if(e>=s)var c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"close":if(e>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*l;else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"other":if(e>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(c=a+Math.abs(d-a)*l)+" "+r+" "+(p=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new f(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(v||(v={}));class b{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=v.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=a(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=v.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=v.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==v.Node&&e.target.classList.contains("node-dot")){this.moveType=v.Line;let s=e.target.getAttribute("node");this.tempLine=new f(t,s),this.tempLine.temp=!0}this.moveType==v.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case v.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.parent.UpdateUI();break}case v.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case v.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(a()-this.timeFastClick<100||!this.flgMove)return this.moveType=v.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===v.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=v.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class y extends p{keyNode;IncreaseValue(e,t){return this.data.Increase(e,t)}DecreaseValue(e,t){return this.data.Decrease(e,t)}getDataValue(e){return this.data.Get(e)}setDataValue(e,t){return this.data.Set(e,t,this)}getName(){return this.getDataValue("name")}getY(){return+this.getDataValue("y")}setY(e){return this.setDataValue("y",e)}getX(){return+this.getDataValue("x")}setX(e){return this.setDataValue("x",e)}CheckKey(e){return this.getDataValue("key")==e}getDataLine(){return this.getDataValue("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;temp=new l;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof l?this.data=i:(this.data.InitData({...i,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(document.activeElement&&this.elNode.contains(document.activeElement)&&!["BUTTON","A"].includes(document.activeElement.tagName))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml({node:this,elNode:this.elContent,main:this.parent.main}),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),h(this.option.script)&&this.option.script({node:this,elNode:this.elContent,main:this.parent.main}),this.elContent&&(this.arrDataView=m.BindElement(this.elContent,this.data,this.parent.main))}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new f(this,i,t,s,e).UpdateUI()}))}}const N=1.6,C=.6,L=.1,k=1;class E extends c{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new l(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let i=this.GetDataById(this.lastGroupName);return i&&i.onSafe(`${e.dataChange}_name`,(()=>{this.changeGroup()})),this.groupData}group=[];GetGroupName(){return[...this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")}))),{id:i,text:i}]}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}))}openGroup(e){this.group=[e,...this.group],this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new y(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,new b(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{i.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)})),this.main.on(e.zoom,(({zoom:e})=>{0==e?this.zoom_reset():1==e?this.zoom_out():-1==e&&this.zoom_in(),this.UpdateUI()})),this.main.on(e.setGroup,(({groupId:e})=>{this.BackGroup(e)})),this.changeGroup()}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof y||(e.sender&&e.sender instanceof E||(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()}))),this.UpdateUI())}Open(t){t!=this.data?(this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI(),this.changeGroup()):this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNode&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?k:this.getZoom()+L*e;N>=t&&t>=C&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class x{elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.onSafe(e.changeVariable,(({data:e})=>{this.Render()})),this.main.onSafe(e.openProject,(()=>{this.Render()})),this.main.onSafe(e.groupChange,(()=>{this.Render()})),this.Render()}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',this.variables)for(let e of this.variables)new $(e,this).RenderScope(this.main.getGroupCurrent())}}class ${variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.Get("name"),this.valueDefaultInput.value=this.variable.Get("initalValue")??"",this.typeInput.value=this.variable.Get("type")??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let s=document.createElement("td");s.appendChild(this.nameInput),this.elNode.appendChild(s),this.nameInput.addEventListener("keydown",(e=>{this.variable.Set("name",e.target.value)})),this.nameInput.addEventListener("change",(e=>{this.variable.Set("name",e.target.value)}));let i=document.createElement("td");i.appendChild(this.typeInput),this.elNode.appendChild(i),this.typeInput.addEventListener("change",(e=>{this.variable.Set("type",e.target.value)}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let o=document.createElement("td");o.appendChild(this.valueDefaultInput),this.elNode.appendChild(o),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.Set("initalValue",e.target.value)})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.Set("initalValue",e.target.value)}));let a=document.createElement("button");a.innerHTML="-",a.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(a),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}this.scopeInput.value=this.variable.Get("scope"),this.scopeInput.addEventListener("change",(e=>{this.variable.Set("scope",e.target.value)}))}}class S{elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolbox"),this.Render()}Render(){let e=this.main.getControlAll(),t={};Object.keys(e).forEach((s=>{let i=e[s].group??"other";void 0===t[i]&&(t[i]=[]),t[i]=[...t[i],e[s]]})),Object.keys(t).forEach(((e,s)=>{let i=document.createElement("div");i.classList.add("node-box"),i.classList.add("active"),i.innerHTML=`\n        <p class="node-box_title">${e}</p>\n        <div class="node-box_boby"></div>\n      `,i.querySelector(".node-box_title")?.addEventListener("click",(()=>{i.classList.contains("active")?i.classList.remove("active"):i.classList.add("active")}));for(let s of t[e]){let e=document.createElement("div");e.classList.add("node-item"),e.setAttribute("draggable","true"),e.setAttribute("data-node",s.key),e.innerHTML=`${s.icon} <span>${s.name}</span`,e.addEventListener("dragstart",this.dragStart.bind(this)),e.addEventListener("dragend",this.dragend.bind(this)),i.querySelector(".node-box_boby")?.appendChild(e)}this.elNode.appendChild(i)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class j{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.onSafe(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(s)}))}}class w{elNode;main;$elBoby;$elWarp;$btnNext;$btnBack;$btnAdd;$btnZoomIn;$btnZoomOut;$btnZoomReset;$btnRunProject;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-tab-project"),this.main.on(e.openProject,this.Render.bind(this)),this.Render()}Render(){let t=this.$elWarp?.scrollLeft??0;this.elNode.innerHTML='\n    <div class="tab-project__search"></div>\n    <div class="tab-project__list">\n      <div class="tab-project_button">\n        <button class="btn-back"><i class="fas fa-angle-left"></i></button>\n      </div>\n      <div class="tab-project_warp">\n        <div class="tab-project__body">\n        </div>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-next"><i class="fas fa-angle-right"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-add"><i class="fas fa-plus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-run-project"><i class="fas fa-play"></i> Run</button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-in"><i class="fas fa-search-plus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-out"><i class="fas fa-search-minus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-reset"><i class="fas fa-redo"></i></button>\n      </div>\n    </div>\n    ',this.$elWarp=this.elNode.querySelector(".tab-project_warp"),this.$elBoby=this.elNode.querySelector(".tab-project__body"),this.$btnBack=this.elNode.querySelector(".btn-back"),this.$btnNext=this.elNode.querySelector(".btn-next"),this.$btnAdd=this.elNode.querySelector(".btn-add"),this.$btnZoomIn=this.elNode.querySelector(".btn-zoom-in"),this.$btnZoomOut=this.elNode.querySelector(".btn-zoom-out"),this.$btnZoomReset=this.elNode.querySelector(".btn-zoom-reset"),this.$btnRunProject=this.elNode.querySelector(".btn-run-project");const s=()=>{this.$elWarp};this.$elWarp?.addEventListener("scroll",(e=>{s()}),{passive:!0}),s(),this.$btnBack?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft-=100)})),this.$btnNext?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft+=100)})),this.$btnAdd?.addEventListener("click",(()=>{this.main.newProject("")})),this.$btnZoomIn?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:-1})})),this.$btnZoomOut?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:1})})),this.$btnZoomReset?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:0})})),this.main.on(e.statusBot,(e=>{this.$btnRunProject&&(this.$btnRunProject.innerHTML=e?'<i class="fas fa-stop"></i> Stop':'<i class="fas fa-play"></i> Run')})),this.$btnRunProject?.addEventListener("click",(()=>{this.main.running()?(console.log("stop"),this.main.stopProject()):(console.log("run"),this.main.runProject())}));let i,n=this.main.getProjectAll();for(let t of n){let s=document.createElement("div"),n=document.createElement("span"),o=document.createElement("div"),a=document.createElement("button");s.setAttribute("data-project-id",t.Get("id")),n.innerHTML=t.Get("name"),n.classList.add("pro-name"),o.classList.add("pro-button"),a.innerHTML='<i class="fas fa-minus"></i>',o.appendChild(a),s.appendChild(n),s.appendChild(o),s.classList.add("project-item"),this.main.checkProjectOpen(t)&&(s.classList.add("active"),i=s),s.addEventListener("click",(e=>{a.contains(e.target)||e.target==a||this.main.setProjectOpen(t)})),a.addEventListener("click",(e=>{this.main.removeProject(t)})),this.$elBoby?.appendChild(s),t.onSafe(e.dataChange+"_name",(()=>{n.innerHTML=t.Get("name")}))}this.$elWarp&&(this.$elWarp.scrollLeft=null!=i?i.offsetLeft-20:t)}}class I{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-breadcrumb-group"),this.main.on(e.groupChange,(({group:e})=>{this.render(e)})),this.elNode.innerHTML=""}render(e){if(this.elNode.innerHTML="",!this.elNode||!e)return;let t=document.createElement("ul"),s=!0;e.forEach((e=>{if(!s){let e=document.createElement("li");e.innerHTML=">",t.prepend(e)}let i=document.createElement("li");i.innerHTML=e.text,i.addEventListener("click",(()=>this.setGroupId(e.id))),i.classList.add("group-item"),t.prepend(i),s=!1}));let i=document.createElement("div");i.classList.add("group-warp");let n=document.createElement("div");if(n.classList.add("group-body"),i.appendChild(n),n.appendChild(t),e.length>1){let t=document.createElement("div");t.classList.add("group-button"),t.innerHTML='<button><i class="fas fa-redo"></i></button>',t.addEventListener("click",(()=>this.setGroupId(e[1].id))),this.elNode.appendChild(t)}this.elNode.appendChild(i)}setGroupId(t){this.main.dispatch(e.setGroup,{groupId:t})}}class _{elNode;main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-property-view"),this.main.on(e.showProperty,(e=>{this.Render(e.data)}))}Render(e){if(this.lastData==e)return;this.lastData=e,this.elNode.innerHTML="";let t=e.getProperties();this.sortKeys.forEach((s=>{if(this.hideKeys.includes(s)||!t[s]||t[s].hide)return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=t[s].text??s;let o=document.createElement("div");o.classList.add("property-value"),m.BindElement(o,e,this.main,s),i.appendChild(n),i.appendChild(o),this.elNode.appendChild(i)})),Object.keys(t).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s)||!t[s]||t[s].hide)return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=t[s].text??s;let o=document.createElement("div");o.classList.add("property-value"),m.BindElement(o,e,this.main,s),i.appendChild(n),i.appendChild(o),this.elNode.appendChild(i)}))}}var D=Object.freeze({__proto__:null,DesginerView:E,Line:f,NodeItem:y,VariableView:x,ToolboxView:S,ProjectView:j,TabProjectView:w,BreadcrumbGroupView:I,PropertyView:_});class G{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_warp"><div class="vs-boxinfo_content"></div></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class P extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new S(e,this.main)}))}}class M extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new x(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");s?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable(void 0,void 0,void 0)}))}}}class T extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(e=>{new _(e,t)}))}}class O extends G{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new E(this.elNode,t)}}class A extends G{main;constructor(e,t){super(e,t),this.main=t,new w(this.elNode,t)}}class V extends G{main;constructor(e,t){super(e,t),this.main=t,new I(this.elNode,t)}}class R{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,P),this.addDock(t.right,T),this.addDock(t.top,A),this.addDock(t.bottom,V),this.addDock(t.bottom,M),this.addDock(t.view,O),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const B={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:1,left:0,bottom:0},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:1,top:0,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",class:"vs-content-flex",html:'<div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50001"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50002"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50003"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50004"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50005"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50006"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50007"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Else</span><span><span class="node-dot" node="50008"></span></span></div>\n            </div>\n      ',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},dot:{left:1,top:0,right:0,bottom:0}},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class H{$data=new l(this);temp=new l;$projectOpen;$properties={};$control={};events=new n;$controlChoose=null;$checkOption=!1;$group;$indexProject=-1;constructor(){this.$properties[s.solution]={id:{default:()=>a()},key:{default:()=>s.solution},name:{default:()=>r("solution-"),edit:!0},project:{default:()=>""},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>a()},name:{default:()=>"Flow "+this.$indexProject++,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$properties[s.variable]={key:{default:s.variable},name:{default:()=>r("var")},type:{default:()=>"text"},scope:{default:()=>i},initalValue:{default:""}},this.onSafe(e.groupChange,(({group:e})=>{this.$group=e}))}newSolution(e=""){this.$indexProject=1,this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(s.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(e,t=null,i=null){let n=new l(this,{name:e,initalValue:i,key:s.variable,scope:t??this.getGroupCurrent()?.[0]?.id});return this.$projectOpen?.Append("variable",n),n}newVariable(t,s=null,i=null){let n=this.addVariable(t,s,i);return this.dispatch(e.changeVariable,{data:n}),n}changeVariableName(t,s,i){let n=this.$projectOpen?.Get("variable");if(n)for(let o of n)o.Get("name")==t&&o.Get("scope")==i&&(o.Set("name",s),this.dispatch(e.changeVariable,{data:o}))}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e.filter((e=>this.getGroupCurrent().findIndex((t=>t.id==e.Get("scope")))>-1))}getGroupCurrent(){return this.$group??[]}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...B}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(d).forEach((e=>{s[e.key]={...e,dot:{left:1,top:1,right:1,bottom:1,...e?.dot}},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>a()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml({elNode:e,main:t,node:s}){h(s.getOption()?.html)?e.innerHTML=s.getOption()?.html?.({elNode:e,main:t,node:s}):e.innerHTML=s.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.$data.Set("project",this.$projectOpen?.Get("id")),this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof l?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new l(this),t.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}removeProject(t){let s=t;s=this.getProjectById(t.Get("id")),this.$data.Remove("projects",s),!this.checkProjectOpen(s)||(this.$projectOpen=this.$data.Get("projects")?.[0],this.$projectOpen)?(this.dispatch(e.change,{data:this.$projectOpen}),this.dispatch(e.showProperty,{data:this.$projectOpen}),this.dispatch(e.openProject,{data:this.$projectOpen})):this.newProject()}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}$running=!1;running(){return this.$running}setRunning(t){this.$running=t,this.dispatch(e.statusBot,t)}callbackRunProject(t){this.on(e.runProject,(({data:e})=>{t?.(e)}))}callbackStopProject(t){this.on(e.stopProject,(()=>{t()}))}runProject(){this.setRunning(!0),this.dispatch(e.runProject,{data:this.exportJson()})}stopProject(){this.dispatch(e.stopProject,{})}}var z=Object.freeze({__proto__:null,SystemBase:H,SystemVue:class extends H{render;constructor(e){super(),this.render=e}renderHtml({elNode:e,main:t,node:s}){if(3===parseInt(this.render.version)){let t=this.render.h(s.getOption()?.html,{...s.getOption()?.props??{},node:s},s.getOption()?.options??{});t.appContext=e,this.render.render(t,e)}else{let t=new this.render({parent:e,render:e=>e(s.getOption()?.html,{props:{...s.getOption()?.props??{},node:s}}),...s.getOption()?.options??{}}).$mount();e.appendChild(t.$el)}}}});var U=Object.freeze({__proto__:null,DockEnum:t,ControlDock:P,DockBase:G,ProjectDock:class extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new j(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),s?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${a()}`,s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(i=document.createElement("a")).setAttribute("href",s),i.setAttribute("download",t+".json"),document.body.appendChild(i),i.click(),void i.remove();var e,t,s,i})),s?.appendChild(t);let i=document.createElement("button");i.innerHTML="Import",i.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var s=new FileReader;s.onload=function(){e?.(s.result)},t&&t.files&&s.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),s?.appendChild(i)}}},PropertyDock:T,TabDock:A,ViewDock:O,VariableDock:M,DockManager:R});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new H,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new R(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}callbackRunProject(e){this.getMain()?.callbackRunProject(e)}callbackStopProject(e){this.getMain()?.callbackStopProject(e)}setRunning(e){this.getMain()?.setRunning(e)}},...z,...g,...U,...D}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
