/**
   * @license
   * author: Nguyen Van Hau
   * visualflow.js v0.0.1-beta
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e="dataChange",t="showProperty",s="change",i="dispose",n="vs-left",o="vs-top",a="vs-view",h="vs-bottom",r="vs-right",d="main_project";class l{main;elNode=document.createElement("div");constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_title">${e}</div>\n    <div class="vs-boxinfo_content"></div>`,t&&t(this.elNode.querySelector(".vs-boxinfo_content"))}}class c extends l{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{let t=this.main.getControlAll();Object.keys(t).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=t[s].name,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),e.appendChild(i)}))}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}const p=()=>(new Date).getTime();var v,u;!function(e){e[e.Label=0]="Label",e[e.Text=1]="Text",e[e.Inline=2]="Inline"}(v||(v={}));class m{data;key;type;isEdit=!1;elInput=null;elLabel=null;elNode=document.createElement("div");constructor(t,s,n=null,o=v.Label,a=!1){this.data=t,this.key=s,this.type=o,this.data=t,this.data.onSafe(`${e}_${s}`,this.changeData.bind(this)),this.data.onSafe(i,this.dispose.bind(this)),this.isEdit=o===v.Text,this.elNode.classList.add("node-editor"),a&&n?(n.parentElement?.insertBefore(this.elNode,n),n.parentElement?.removeChild(n),n?.remove()):n&&n.appendChild(this.elNode),this.render()}render(){let e=this.data.Get(this.key);if(this.isEdit){if(this.elLabel&&(this.elLabel.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.remove(),this.elLabel=null),this.elInput)return void(this.elInput.value=e);this.elInput=document.createElement("input"),this.elInput.addEventListener("keydown",this.inputData.bind(this)),this.elInput.value=e,this.elInput.setAttribute("node:model",this.key),this.elNode.appendChild(this.elInput)}else{if(this.elInput&&(this.elInput.removeEventListener("keyup",this.inputData.bind(this)),this.elInput.remove(),this.elInput=null),this.elLabel)return void(this.elLabel.innerHTML=e);this.elLabel=document.createElement("span"),this.type==v.Inline&&this.elLabel.addEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.setAttribute("node:model",this.key),this.elLabel.innerHTML=e,this.elNode.appendChild(this.elLabel)}}switchModeEdit(){this.isEdit=!0,this.render()}inputData(e){setTimeout((()=>{this.data.Set(this.key,e.target.value,this)}))}changeData({key:e,value:t,sender:s}){this.render(),((e,...t)=>{console.log(e,t)})("changeData: ? ? ?",e,t,s)}dispose(){this.elInput?.removeEventListener("keydown",this.inputData.bind(this)),this.elLabel?.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.data.removeListener(`${e}_${this.key}`,this.changeData.bind(this)),this.data.removeListener(i,this.dispose.bind(this))}}class y extends l{main;lastData;labelKeys=["id","key"];constructor(e,s){super(e,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(e=>{s.on(t,(t=>{this.renderUI(e,t.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let s=t.getProperties();Object.keys(s).forEach((s=>{let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),this.labelKeys.includes(s)?new m(t,s,o,v.Label):new m(t,s,o,v.Text),i.appendChild(n),i.appendChild(o),e.appendChild(i)}))}}class f{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class g{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new f,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof g&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof g&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,i,n=null){this.data[t]!=i&&(this.data[t]&&(this.data[t]instanceof g&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof g&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(i,t)),this.data[t]=i,this.dispatch(`${e}_${t}`,{key:t,value:i,sender:n}),this.dispatch(e,{key:t,value:i,sender:n}),this.dispatch(s,{key:t,value:i,sender:n})}Get(e){return this.data[e]}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof g&&(e[t]=e[t].toJson()),Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof g&&(e[t]=e[t].map((e=>e.toJson())));return e}}class C{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new g;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;setData(e){this.data=e,this.BindDataEvent(),this.dispatch("bind_data_event",{data:e,sender:this})}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}BindDataEvent(){this.data.on(e,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e,{type:"data",key:t,value:s,sender:i})}))})),this.data.on(s,(({key:e,value:t,sender:i})=>{setTimeout((()=>{this.dispatch(s,{type:"data",key:e,value:t,sender:i})}))}))}constructor(){this.events=new f,this.BindDataEvent()}}class L extends C{parent;constructor(e){super(),this.parent=e}}class b{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");curvature=.5;constructor(e,t=0,s,i=0){this.from=e,this.fromIndex=t,this.to=s,this.toIndex=i,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this)}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,h=t,r=s,d=i,l=n;switch(o){case"open":if(e>=s)var c=a+Math.abs(r-a)*l,p=r-Math.abs(r-a)*(-1*l);else c=a+Math.abs(r-a)*l,p=r-Math.abs(r-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+d+" "+r+"  "+d;case"close":if(e>=s)c=a+Math.abs(r-a)*(-1*l),p=r-Math.abs(r-a)*l;else c=a+Math.abs(r-a)*l,p=r-Math.abs(r-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+d+" "+r+"  "+d;case"other":if(e>=s)c=a+Math.abs(r-a)*(-1*l),p=r-Math.abs(r-a)*(-1*l);else c=a+Math.abs(r-a)*l,p=r-Math.abs(r-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+d+" "+r+"  "+d;default:return" M "+a+" "+h+" C "+(c=a+Math.abs(r-a)*l)+" "+h+" "+(p=r-Math.abs(r-a)*l)+" "+d+" "+r+"  "+d}}delete(e=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elNode?.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex)return new b(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(u||(u={}));const N=1.6,k=.6,_=.1,E=1;class x{parent;zoom_last_value=1;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=u.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){e.preventDefault();let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t).updatePosition(n,o)}zoom_enter(e){e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(e=0){let t=0==e?E:this.parent.getZoom()+_*e;N>=t&&t>=k&&(this.parent.setX(this.parent.getX()/this.zoom_last_value*t),this.parent.setY(this.parent.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.parent.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}StartMove(e){if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=p(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=u.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=u.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==u.Node&&e.target.classList.contains("node-dot")){this.moveType=u.Line;let s=e.target.getAttribute("node");this.tempLine=new b(t,s)}this.moveType==u.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case u.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i);break}case u.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case u.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),h=a?this.parent.GetNodeById(a):void 0;if(h&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(h,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(h,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(!this.flgDrap)return;if(p()-this.timeFastClick<100||!this.flgMove)return this.moveType=u.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===u.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete()),this.pos_x=t,this.pos_y=s,this.moveType=u.None,this.flgDrap=!1,this.flgMove=!1}}class I extends L{keyNode;getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}elContent;arrLine=[];option={};constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,this.data.InitData(i,this.properties),this.data.on(e,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.renderUI()}renderUI(){this.elNode.setAttribute("style","display:none;"),this.elNode.innerHTML=`\n      <div class="node-left">\n        <div class="node-dot" node="4000"></div>\n      </div>\n      <div class="node-container">\n        <div class="node-top">\n          <div class="node-dot" node="1000"></div>\n        </div>\n        <div class="node-content">${this.option.html}</div>\n        <div class="node-bottom">\n          <div class="node-dot" node="2000"></div>\n        </div>\n      </div>\n      <div class="node-right">\n        <div class="node-dot"  node="3000"></div>\n      </div>\n    `,this.elContent=this.elNode.querySelector(".node-content"),this.UpdateUI()}updatePosition(e,t,s=!1){this.elNode&&(s?(e!==this.getX()&&this.setX(e),t!==this.getY()&&this.setX(t)):(this.setY(this.elNode.offsetTop-t),this.setX(this.elNode.offsetLeft-e)))}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}}class M extends C{main;getZoom(){return this.data.Get("zoom")}setZoom(e){return this.data.Set("zoom",e,this)}getY(){return this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}view_event;lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(e){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=e,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(t,{data:this.nodeChoose.data})):this.dispatch(t,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNode(e,t={}){return this.InsertNode(new I(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}elCanvas=document.createElement("div");constructor(t,s){super(),this.main=s,this.elNode=t;let i=this.main.getPropertyByKey(d);this.data.InitData({},i),this.RenderUI(),this.UpdateUI(),this.on(e,this.RenderUI.bind(this)),this.view_event=new x(this)}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){setTimeout((()=>{this.updateView(this.getX(),this.getY(),this.getZoom())}))}RenderUI(){this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,this.UpdateUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNode&&this.nodes.filter((t=>t.CheckKey(e))).length>0}}class $ extends l{main;constructor(e,s){super(e,s),this.main=s,new M(this.elNode,s).on(t,(e=>s.dispatch(t,e)))}}class D{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(n,c),this.addDock(r,y),this.addDock(a,$),this.addDock(o,l),this.addDock(h,l),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}return class{container;$properties={};$control={};$controlChoose=null;$dockManager;events;getDockManager(){return this.$dockManager}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}getControlAll(){return this.$control??{}}constructor(e,t=null){this.container=e,this.events=new f,this.$properties[d]={...t?.properties||{},id:{default:()=>p()},name:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$control=t?.control||{},Object.keys(this.$control).forEach((e=>{this.$properties[`node_${e}`]={...this.$control[e].properties||{},id:{default:()=>p()},key:{default:e},name:{default:""},x:{default:0},y:{default:0}}})),this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new D(this.container,this),this.$dockManager.reset()}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`node_${e}`)}}getPropertyByKey(e){return this.$properties[e]}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
