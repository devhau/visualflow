/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.6
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange",setGroup:"setGroup",zoom:"zoom",runProject:"runProject",stopProject:"stopProject"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"},i="root";class n{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}const o=()=>new Date,a=()=>o().getTime(),r=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,d=e=>e&&e instanceof Function;class h{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new n,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e.dataChange}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e.dataChange}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof h&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof h&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,n=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof h&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof h&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,n&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof h){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Increase(e){this.Set(e,++this.data[e])}Decrease(e){this.Set(e,--this.data[e])}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties){const t=(e,t)=>{let s=t;d(t)&&(s=t()),Array.isArray(s)?s=s.map((e=>e.key?new h(this.property,e):e)):s?.key&&(s=new h(this.property,s)),this.data[e]=s,this.BindEvent(this.data[e],e)};for(let s of Object.keys(this.properties)){if(this.properties[s].sub&&e)for(let i of Object.keys(e))i.startsWith(s)&&t(i,e?.[i]??this.properties[s]?.default);else t(s,e?.[s]??this.properties[s]?.default)}}}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));const t=t=>{let s=this.Get(t);s instanceof h?e[t]=s.toJson():Array.isArray(s)?e[t]=s.map((e=>e instanceof h?e.toJson():e)):e[t]=s};for(let e of Object.keys(this.properties)){if(this.properties[e].sub)for(let s of Object.keys(this.data))s.startsWith(e)&&t(s);else t(e)}return e}delete(){this.events=new n,this.data={}}}class l{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new h;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new n}}class c extends l{parent;constructor(e){super(),this.parent=e}}const p=["SPAN","DIV","P","TEXTAREA"];class u{el;data;main;keyName;elNode;property;elSuggestions;elSuggestionsContent;nodeEditor;constructor(e,t,s,i=null){this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName?e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.nodeEditor=e,this.nodeEditor.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode)):(this.keyName=e?.getAttribute("node:model"),this.keyName&&(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el,this.nodeEditor=document.createElement("span"),this.nodeEditor.classList.add("node-editor"),e.parentElement?.insertBefore(this.nodeEditor,e),e.parentElement?.removeChild(e),this.nodeEditor.appendChild(this.elNode))),this.elSuggestions=document.createElement("div"),this.elSuggestions.classList.add("node-editor_suggestions"),this.elSuggestionsContent=document.createElement("div"),this.elSuggestionsContent.classList.add("suggestions_content"),this.elSuggestions.appendChild(this.elSuggestionsContent),this.showSuggestions(!1),this.keyName&&this.bindData()}checkShowSuggestions(){if(this.elSuggestionsContent){this.elSuggestionsContent.innerHTML="";var e=this.main.getVariable();if(!e||0==e.length)return void this.showSuggestions(!1);let t=document.createElement("ul");for(let s of e){let e=document.createElement("li"),i=document.createElement("a");e.appendChild(i),i.innerHTML=s.Get("name"),i.addEventListener("click",(()=>{alert(i.innerHTML)})),t.appendChild(e)}this.elSuggestionsContent.appendChild(t)}let t=this.elNode.value,s=this.elNode.selectionStart;if(t){let e=t.lastIndexOf("${",s);t.lastIndexOf("}",s)<e?this.showSuggestions(!0):this.showSuggestions(!1)}}showSuggestions(e=!0){this.elSuggestions&&(e?this.elSuggestions.removeAttribute("style"):this.elSuggestions.setAttribute("style","display:none;"))}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.elNode.addEventListener("focus",(()=>{this.elSuggestions&&this.elNode?.parentElement?.appendChild(this.elSuggestions)})),this.elNode.addEventListener("blur",(()=>{setTimeout((()=>{this.elSuggestions&&this.elNode?.parentElement?.removeChild(this.elSuggestions)}))})),this.elNode.addEventListener("select",(()=>{this.checkShowSuggestions()})),this.property&&this.property.select&&d(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let s=document.createElement("option");return s.value=e,s.text=t,s}));for(let t of e)this.elNode.appendChild(t)}this.property&&d(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName)??"")}}setNodeValue(e){this.elNode&&(p.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t?.elNode!==this.elNode&&this.setNodeValue(e??"")}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&(this.data.Set(this.keyName,this.elNode.value,this),this.checkShowSuggestions())}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new u(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new u(e,t,s)))}}var m,v=Object.freeze({__proto__:null,FlowCore:l,BaseFlow:c,DockEnum:t,EventEnum:e,PropertyEnum:s,ScopeRoot:i,DataFlow:h,DataView:u,EventFlow:n,compareSort:r,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:a,LOG:(e,...t)=>console.log(e,t),getDate:o,isFunction:d});class g{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new h;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,o=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,r=t,d=s,h=i,l=n;switch(o){case"open":if(e>=s)var c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"close":if(e>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*l;else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;case"other":if(e>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+c+" "+r+" "+p+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(c=a+Math.abs(d-a)*l)+" "+r+" "+(p=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new g(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(m||(m={}));class f{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=m.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=a(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=m.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=m.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==m.Node&&e.target.classList.contains("node-dot")){this.moveType=m.Line;let s=e.target.getAttribute("node");this.tempLine=new g(t,s),this.tempLine.temp=!0}this.moveType==m.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case m.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.parent.UpdateUI();break}case m.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case m.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(a()-this.timeFastClick<100||!this.flgMove)return this.moveType=m.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===m.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=m.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class y extends c{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof h?this.data=i:(this.data.InitData({...i,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(document.activeElement&&this.elNode.contains(document.activeElement)&&!["BUTTON","A"].includes(document.activeElement.tagName))return;console.log(document.activeElement?.tagName),this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml({node:this,elNode:this.elContent,main:this.parent.main}),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),d(this.option.script)&&this.option.script({node:this,elNode:this.elContent,main:this.parent.main}),this.elContent&&(this.arrDataView=u.BindElement(this.elContent,this.data,this.parent.main))}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new g(this,i,t,s,e).UpdateUI()}))}}const b=1.6,N=.6,C=.1,L=1;class k extends l{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new h(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let i=this.GetDataById(this.lastGroupName);return i&&i.onSafe(`${e.dataChange}_name`,(()=>{this.changeGroup()})),this.groupData}group=[];GetGroupName(){return[...this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")}))),{id:i,text:i}]}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}))}openGroup(e){this.group=[e,...this.group],this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new y(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,new f(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{i.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)})),this.main.on(e.zoom,(({zoom:e})=>{0==e?this.zoom_reset():1==e?this.zoom_out():-1==e&&this.zoom_in(),this.UpdateUI()})),this.main.on(e.setGroup,(({groupId:e})=>{this.BackGroup(e)})),this.changeGroup()}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof y||(e.sender&&e.sender instanceof k||(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()}))),this.UpdateUI())}Open(t){t!=this.data?(this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI(),this.changeGroup()):this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNode&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?L:this.getZoom()+C*e;b>=t&&t>=N&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class E{elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.onSafe(e.changeVariable,(({data:e})=>{this.Render()})),this.main.onSafe(e.openProject,(()=>{this.Render()})),this.main.onSafe(e.groupChange,(()=>{this.Render()})),this.Render()}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',this.variables)for(let e of this.variables)new $(e,this).RenderScope(this.main.getGroupCurrent())}}class ${variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.Get("name"),this.valueDefaultInput.value=this.variable.Get("initalValue")??"",this.typeInput.value=this.variable.Get("type")??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let s=document.createElement("td");s.appendChild(this.nameInput),this.elNode.appendChild(s),this.nameInput.addEventListener("keydown",(e=>{this.variable.Set("name",e.target.value)})),this.nameInput.addEventListener("change",(e=>{this.variable.Set("name",e.target.value)}));let i=document.createElement("td");i.appendChild(this.typeInput),this.elNode.appendChild(i),this.typeInput.addEventListener("change",(e=>{this.variable.Set("type",e.target.value)}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let o=document.createElement("td");o.appendChild(this.valueDefaultInput),this.elNode.appendChild(o),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.Set("initalValue",e.target.value)})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.Set("initalValue",e.target.value)}));let a=document.createElement("button");a.innerHTML="-",a.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(a),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}this.scopeInput.value=this.variable.Get("scope"),this.scopeInput.addEventListener("change",(e=>{this.variable.Set("scope",e.target.value)}))}}class x{elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolbox"),this.Render()}Render(){let e=this.main.getControlAll(),t={};Object.keys(e).forEach((s=>{let i=e[s].group??"other";void 0===t[i]&&(t[i]=[]),t[i]=[...t[i],e[s]]})),Object.keys(t).forEach(((e,s)=>{let i=document.createElement("div");i.classList.add("node-box"),i.classList.add("active"),i.innerHTML=`\n        <p class="node-box_title">${e}</p>\n        <div class="node-box_boby"></div>\n      `,i.querySelector(".node-box_title")?.addEventListener("click",(()=>{i.classList.contains("active")?i.classList.remove("active"):i.classList.add("active")}));for(let s of t[e]){let e=document.createElement("div");e.classList.add("node-item"),e.setAttribute("draggable","true"),e.setAttribute("data-node",s.key),e.innerHTML=`${s.icon} <span>${s.name}</span`,e.addEventListener("dragstart",this.dragStart.bind(this)),e.addEventListener("dragend",this.dragend.bind(this)),i.querySelector(".node-box_boby")?.appendChild(e)}this.elNode.appendChild(i)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class j{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.onSafe(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(s)}))}}class S{elNode;main;$elBoby;$elWarp;$btnNext;$btnBack;$btnAdd;$btnZoomIn;$btnZoomOut;$btnZoomReset;$btnRunProject;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-tab-project"),this.main.on(e.openProject,this.Render.bind(this)),this.Render()}Render(){let t=this.$elWarp?.scrollLeft??0;this.elNode.innerHTML='\n    <div class="tab-project__search"></div>\n    <div class="tab-project__list">\n      <div class="tab-project_button">\n        <button class="btn-back"><i class="fas fa-angle-left"></i></button>\n      </div>\n      <div class="tab-project_warp">\n        <div class="tab-project__body">\n        </div>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-next"><i class="fas fa-angle-right"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-add"><i class="fas fa-plus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-run-project"><i class="fas fa-play"></i> Run</button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-in"><i class="fas fa-search-minus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-out"><i class="fas fa-search-plus"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-zoom-reset"><i class="fas fa-redo"></i></button>\n      </div>\n    </div>\n    ',this.$elWarp=this.elNode.querySelector(".tab-project_warp"),this.$elBoby=this.elNode.querySelector(".tab-project__body"),this.$btnBack=this.elNode.querySelector(".btn-back"),this.$btnNext=this.elNode.querySelector(".btn-next"),this.$btnAdd=this.elNode.querySelector(".btn-add"),this.$btnZoomIn=this.elNode.querySelector(".btn-zoom-in"),this.$btnZoomOut=this.elNode.querySelector(".btn-zoom-out"),this.$btnZoomReset=this.elNode.querySelector(".btn-zoom-reset"),this.$btnRunProject=this.elNode.querySelector(".btn-run-project");const s=()=>{this.$elWarp};this.$elWarp?.addEventListener("scroll",(e=>{s()}),{passive:!0}),s(),this.$btnBack?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft-=100)})),this.$btnNext?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft+=100)})),this.$btnAdd?.addEventListener("click",(()=>{this.main.newProject("")})),this.$btnZoomIn?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:-1})})),this.$btnZoomOut?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:1})})),this.$btnZoomReset?.addEventListener("click",(()=>{this.main.dispatch(e.zoom,{zoom:0})})),this.$btnRunProject?.addEventListener("click",(()=>{this.main.runProject()}));let i,n=this.main.getProjectAll();for(let t of n){let s=document.createElement("div"),n=document.createElement("span"),o=document.createElement("div"),a=document.createElement("button");s.setAttribute("data-project-id",t.Get("id")),n.innerHTML=t.Get("name"),n.classList.add("pro-name"),o.classList.add("pro-button"),a.innerHTML='<i class="fas fa-minus"></i>',o.appendChild(a),s.appendChild(n),s.appendChild(o),s.classList.add("project-item"),this.main.checkProjectOpen(t)&&(s.classList.add("active"),i=s),s.addEventListener("click",(e=>{a.contains(e.target)||e.target==a||this.main.setProjectOpen(t)})),a.addEventListener("click",(e=>{this.main.removeProject(t)})),this.$elBoby?.appendChild(s),t.onSafe(e.dataChange+"_name",(()=>{n.innerHTML=t.Get("name")}))}this.$elWarp&&(this.$elWarp.scrollLeft=null!=i?i.offsetLeft-20:t)}}class w{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-breadcrumb-group"),this.main.on(e.groupChange,(({group:e})=>{this.render(e)})),this.elNode.innerHTML=""}render(e){if(this.elNode.innerHTML="",!this.elNode||!e)return;let t=document.createElement("ul"),s=!0;e.forEach((e=>{if(!s){let e=document.createElement("li");e.innerHTML=">",t.prepend(e)}let i=document.createElement("li");i.innerHTML=e.text,i.addEventListener("click",(()=>this.setGroupId(e.id))),i.classList.add("group-item"),t.prepend(i),s=!1}));let i=document.createElement("div");i.classList.add("group-warp");let n=document.createElement("div");if(n.classList.add("group-body"),i.appendChild(n),n.appendChild(t),e.length>1){let t=document.createElement("div");t.classList.add("group-button"),t.innerHTML='<button><i class="fas fa-redo"></i></button>',t.addEventListener("click",(()=>this.setGroupId(e[1].id))),this.elNode.appendChild(t)}this.elNode.appendChild(i)}setGroupId(t){this.main.dispatch(e.setGroup,{groupId:t})}}class _{elNode;main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-property-view"),this.main.on(e.showProperty,(e=>{this.Render(e.data)}))}Render(e){if(this.lastData==e)return;this.lastData=e,this.elNode.innerHTML="";let t=e.getProperties();this.sortKeys.forEach((s=>{if(this.hideKeys.includes(s)||!t[s])return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),u.BindElement(o,e,this.main,s),i.appendChild(n),i.appendChild(o),this.elNode.appendChild(i)})),Object.keys(t).forEach((t=>{if(this.hideKeys.includes(t)||this.sortKeys.includes(t))return;let s=document.createElement("div");s.classList.add("property-item");let i=document.createElement("div");i.classList.add("property-label"),i.innerHTML=t;let n=document.createElement("div");n.classList.add("property-value"),u.BindElement(n,e,this.main,t),s.appendChild(i),s.appendChild(n),this.elNode.appendChild(s)}))}}var G=Object.freeze({__proto__:null,DesginerView:k,Line:g,NodeItem:y,VariableView:E,ToolboxView:x,ProjectView:j,TabProjectView:S,BreadcrumbGroupView:w,PropertyView:_});class I{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_warp"><div class="vs-boxinfo_content"></div></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class P extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new x(e,this.main)}))}}class D extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new E(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");s?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable()}))}}}class M extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(e=>{new _(e,t)}))}}class T extends I{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new k(this.elNode,t)}}class O extends I{main;constructor(e,t){super(e,t),this.main=t,new S(this.elNode,t)}}class A extends I{main;constructor(e,t){super(e,t),this.main=t,new w(this.elNode,t)}}class R{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,P),this.addDock(t.right,M),this.addDock(t.top,O),this.addDock(t.bottom,A),this.addDock(t.bottom,D),this.addDock(t.view,T),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const B={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:1,left:0,bottom:0},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:1,top:0,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",class:"vs-content-flex",html:'<div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50001"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50002"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50003"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50004"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50005"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50006"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50007"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Else</span><span><span class="node-dot" node="50008"></span></span></div>\n            </div>\n      ',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},dot:{left:1,top:0,right:0,bottom:0}},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class H{$data=new h(this);$projectOpen;$properties={};$control={};events=new n;$controlChoose=null;$checkOption=!1;$group;$indexProject=-1;constructor(){this.$properties[s.solution]={id:{default:()=>a()},key:{default:()=>s.solution},name:{default:()=>`solution-${a()}`,edit:!0},project:{default:()=>""},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>a()},name:{default:()=>"Flow "+this.$indexProject++,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$properties[s.variable]={key:{default:s.variable},name:{default:()=>`var${a()}`},type:{default:()=>"text"},scope:{default:()=>i},initalValue:{default:""}},this.onSafe(e.groupChange,(({group:e})=>{this.$group=e}))}newSolution(e=""){this.$indexProject=1,this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(s.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(){let e=new h(this,{key:s.variable,scope:this.getGroupCurrent()?.[0]?.id});return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e.filter((e=>this.getGroupCurrent().findIndex((t=>t.id==e.Get("scope")))>-1))}getGroupCurrent(){return this.$group??[]}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...B}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(r).forEach((e=>{s[e.key]={...e,dot:{left:1,top:1,right:1,bottom:1,...e?.dot}},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>a()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml({elNode:e,main:t,node:s}){d(s.getOption()?.html)?e.innerHTML=s.getOption()?.html?.({elNode:e,main:t,node:s}):e.innerHTML=s.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.$data.Set("project",this.$projectOpen?.Get("id")),this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof h?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new h(this),t.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}removeProject(t){let s=t;s=this.getProjectById(t.Get("id")),this.$data.Remove("projects",s),!this.checkProjectOpen(s)||(this.$projectOpen=this.$data.Get("projects")?.[0],this.$projectOpen)?(this.dispatch(e.change,{data:this.$projectOpen}),this.dispatch(e.showProperty,{data:this.$projectOpen}),this.dispatch(e.openProject,{data:this.$projectOpen})):this.newProject()}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}$running=!1;running(){return this.$running}callbackRunProject(t){this.on(e.runProject,(({data:e,callback:s})=>{t?.(e,s)}))}callbackStopProject(t){this.dispatch(e.stopProject,(({callback:e})=>{t?.(e)}))}runProject(){this.$running=!0,this.dispatch(e.runProject,{data:this.exportJson(),callback:()=>this.$running=!1})}stopProject(){this.dispatch(e.stopProject,{callback:()=>this.$running=!1})}}var z=Object.freeze({__proto__:null,SystemBase:H,SystemVue:class extends H{render;constructor(e){super(),this.render=e}renderHtml({elNode:e,main:t,node:s}){if(3===parseInt(this.render.version)){let t=this.render.h(s.getOption()?.html,{...s.getOption()?.props??{},node:s},s.getOption()?.options??{});t.appContext=e,this.render.render(t,e)}else{let t=new this.render({parent:e,render:e=>e(s.getOption()?.html,{props:{...s.getOption()?.props??{},node:s}}),...s.getOption()?.options??{}}).$mount();e.appendChild(t.$el)}}}});var V=Object.freeze({__proto__:null,DockEnum:t,ControlDock:P,DockBase:I,ProjectDock:class extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new j(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),s?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${a()}`,s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(i=document.createElement("a")).setAttribute("href",s),i.setAttribute("download",t+".json"),document.body.appendChild(i),i.click(),void i.remove();var e,t,s,i})),s?.appendChild(t);let i=document.createElement("button");i.innerHTML="Import",i.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var s=new FileReader;s.onload=function(){e?.(s.result)},t&&t.files&&s.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),s?.appendChild(i)}}},PropertyDock:M,TabDock:O,ViewDock:T,VariableDock:D,DockManager:R});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new H,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new R(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}callbackRunProject(e){this.getMain()?.callbackRunProject(e)}callbackStopProject(e){this.getMain()?.callbackStopProject(e)}},...z,...v,...V,...G}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvVXRpbHMudHMiLCIuLi9zcmMvY29yZS9EYXRhRmxvdy50cyIsIi4uL3NyYy9jb3JlL0Jhc2VGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YVZpZXcudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvTm9kZUl0ZW0udHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL1ZhcmlhYmxlVmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Ub29sYm94Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Qcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9UYWJQcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9CcmVhZGNydW1iR3JvdXBWaWV3LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL1Byb3BlcnR5Vmlldy50cyIsIi4uL3NyYy9kb2NrL0RvY2tCYXNlLnRzIiwiLi4vc3JjL2RvY2svQ29udHJvbERvY2sudHMiLCIuLi9zcmMvZG9jay9WYXJpYWJsZURvY2sudHMiLCIuLi9zcmMvZG9jay9Qcm9wZXJ0eURvY2sudHMiLCIuLi9zcmMvZG9jay9WaWV3RG9jay50cyIsIi4uL3NyYy9kb2NrL1RhYkRvY2sudHMiLCIuLi9zcmMvZG9jay9CcmVhZGNydW1iR3JvdXBEb2NrLnRzIiwiLi4vc3JjL2RvY2svRG9ja01hbmFnZXIudHMiLCIuLi9zcmMvc3lzdGVtcy9jb250cm9sLnRzIiwiLi4vc3JjL3N5c3RlbXMvU3lzdGVtQmFzZS50cyIsIi4uL3NyYy9zeXN0ZW1zL1N5c3RlbVZ1ZS50cyIsIi4uL3NyYy9kb2NrL1Byb2plY3REb2NrLnRzIiwiLi4vc3JjL2luZGV4LnRzIiwiLi4vc3JjL1Zpc3VhbEZsb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEV2ZW50RW51bSA9IHtcbiAgaW5pdDogXCJpbml0XCIsXG4gIGRhdGFDaGFuZ2U6IFwiZGF0YUNoYW5nZVwiLFxuICBzaG93UHJvcGVydHk6IFwic2hvd1Byb3BlcnR5XCIsXG4gIG9wZW5Qcm9qZWN0OiBcIm9wZW5Qcm9qZWN0XCIsXG4gIG5ld1Byb2plY3Q6IFwibmV3UHJvamVjdFwiLFxuICBjaGFuZ2VWYXJpYWJsZTogXCJjaGFuZ2VWYXJpYWJsZVwiLFxuICBjaGFuZ2U6IFwiY2hhbmdlXCIsXG4gIGRpc3Bvc2U6IFwiZGlzcG9zZVwiLFxuICBncm91cENoYW5nZTogXCJncm91cENoYW5nZVwiLFxuICBzZXRHcm91cDogXCJzZXRHcm91cFwiLFxuICB6b29tOiBcInpvb21cIixcbiAgcnVuUHJvamVjdDogXCJydW5Qcm9qZWN0XCIsXG4gIHN0b3BQcm9qZWN0OiBcInN0b3BQcm9qZWN0XCIsXG59XG5cbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcbiAgbGVmdDogXCJ2cy1sZWZ0XCIsXG4gIHRvcDogXCJ2cy10b3BcIixcbiAgdmlldzogXCJ2cy12aWV3XCIsXG4gIGJvdHRvbTogXCJ2cy1ib3R0b21cIixcbiAgcmlnaHQ6IFwidnMtcmlnaHRcIixcbn1cblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5RW51bSA9IHtcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcbiAgc29sdXRpb246ICdtYWluX3NvbHV0aW9uJyxcbiAgbGluZTogJ21haW5fbGluZScsXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXG4gIGdyb3VwQ2F2YXM6IFwibWFpbl9ncm91cENhdmFzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgU2NvcGVSb290ID0gXCJyb290XCI7XG4iLCJpbXBvcnQgeyBJRXZlbnQgfSBmcm9tIFwiLi9JRmxvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyBpbXBsZW1lbnRzIElFdmVudCB7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcbiAgcHVibGljIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICB0aGlzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIC8qIEV2ZW50cyAqL1xyXG4gIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgY2FsbGJhY2t9YCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIHRoZSBldmVudCBpcyBub3QgYSBzdHJpbmdcclxuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBldmVudCBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGV2ZW50fWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB7XHJcbiAgICAgICAgbGlzdGVuZXJzOiBbXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xyXG5cclxuICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzXHJcbiAgICBjb25zdCBsaXN0ZW5lckluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spXHJcbiAgICBjb25zdCBoYXNMaXN0ZW5lciA9IGxpc3RlbmVySW5kZXggPiAtMVxyXG4gICAgaWYgKGhhc0xpc3RlbmVyKSBsaXN0ZW5lcnMuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IHtcclxuICAgICAgbGlzdGVuZXIoZGV0YWlscyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IExPRyA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IGNvbnNvbGUubG9nKG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKTtcbmV4cG9ydCBjb25zdCBnZXREYXRlID0gKCkgPT4gKG5ldyBEYXRlKCkpO1xuZXhwb3J0IGNvbnN0IGdldFRpbWUgPSAoKSA9PiBnZXREYXRlKCkuZ2V0VGltZSgpO1xuZXhwb3J0IGNvbnN0IGdldFV1aWQgPSAoKSA9PiB7XG4gIC8vIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQxMjIudHh0XG4gIGxldCBzOiBhbnkgPSBbXTtcbiAgbGV0IGhleERpZ2l0cyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM2OyBpKyspIHtcbiAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XG4gIH1cbiAgc1sxNF0gPSBcIjRcIjsgIC8vIGJpdHMgMTItMTUgb2YgdGhlIHRpbWVfaGlfYW5kX3ZlcnNpb24gZmllbGQgdG8gMDAxMFxuICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHNbMTldICYgMHgzKSB8IDB4OCwgMSk7ICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxuICBzWzhdID0gc1sxM10gPSBzWzE4XSA9IHNbMjNdID0gXCItXCI7XG5cbiAgbGV0IHV1aWQgPSBzLmpvaW4oXCJcIik7XG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgY29uc3QgY29tcGFyZVNvcnQgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgaWYgKGEuc29ydCA8IGIuc29ydCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5zb3J0ID4gYi5zb3J0KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IChmbjogYW55KSA9PiB7XG4gIHJldHVybiBmbiAmJiBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xufVxuZXhwb3J0IGNvbnN0IGRvd25sb2FkT2JqZWN0QXNKc29uID0gKGV4cG9ydE9iajogYW55LCBleHBvcnROYW1lOiBzdHJpbmcpID0+IHtcbiAgdmFyIGRhdGFTdHIgPSBcImRhdGE6dGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoZXhwb3J0T2JqKSk7XG4gIHZhciBkb3dubG9hZEFuY2hvck5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGRhdGFTdHIpO1xuICBkb3dubG9hZEFuY2hvck5vZGUuc2V0QXR0cmlidXRlKFwiZG93bmxvYWRcIiwgZXhwb3J0TmFtZSArIFwiLmpzb25cIik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRBbmNob3JOb2RlKTsgLy8gcmVxdWlyZWQgZm9yIGZpcmVmb3hcbiAgZG93bmxvYWRBbmNob3JOb2RlLmNsaWNrKCk7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5yZW1vdmUoKTtcbn1cbmV4cG9ydCBjb25zdCByZWFkRmlsZUxvY2FsID0gKGNhbGxiYWNrOiBhbnkpID0+IHtcbiAgdmFyIGlucHV0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZSgndHlwZScsICdmaWxlJyk7XG4gIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2s/Lihmci5yZXN1bHQpO1xuICAgIH1cbiAgICBpZiAoaW5wdXRFbCAmJiBpbnB1dEVsLmZpbGVzKVxuICAgICAgZnIucmVhZEFzVGV4dChpbnB1dEVsLmZpbGVzWzBdKTtcbiAgfSk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW5wdXRFbCk7XG4gIGlucHV0RWwuY2xpY2soKTtcbiAgaW5wdXRFbC5yZW1vdmUoKTtcbn1cbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuL0lGbG93XCI7XG5pbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi9Db25zdGFudFwiO1xuaW1wb3J0IHsgRXZlbnRGbG93IH0gZnJvbSBcIi4vRXZlbnRGbG93XCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFGbG93IHtcbiAgcHJpdmF0ZSBkYXRhOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBwcm9wZXJ0aWVzOiBhbnkgPSBudWxsO1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xuICBwdWJsaWMgZ2V0UHJvcGVydGllcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXM7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMubG9hZChkYXRhKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIEluaXREYXRhKGRhdGE6IGFueSA9IG51bGwsIHByb3BlcnRpZXM6IGFueSA9IC0xKSB7XG4gICAgaWYgKHByb3BlcnRpZXMgIT09IC0xKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIH1cbiAgICB0aGlzLmxvYWQoZGF0YSk7XG4gIH1cbiAgcHJpdmF0ZSBldmVudERhdGFDaGFuZ2Uoa2V5OiBzdHJpbmcsIGtleUNoaWxkOiBzdHJpbmcsIHZhbHVlQ2hpbGQ6IGFueSwgc2VuZGVyQ2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9XyR7a2V5Q2hpbGR9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1fJHtrZXlDaGlsZH1gLCB7XG4gICAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9YCwge1xuICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGRcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgUmVtb3ZlRXZlbnREYXRhKGl0ZW06IERhdGFGbG93LCBrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcbiAgfVxuICBwdWJsaWMgT25FdmVudERhdGEoaXRlbTogRGF0YUZsb3csIGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1gLCAoeyBrZXk6IGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCB9OiBhbnkpID0+IHRoaXMuZXZlbnREYXRhQ2hhbmdlKGtleSwga2V5Q2hpbGQsIHZhbHVlQ2hpbGQsIHNlbmRlckNoaWxkLCBpbmRleCkpO1xuICB9XG4gIHByaXZhdGUgQmluZEV2ZW50KHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICB0aGlzLk9uRXZlbnREYXRhKHZhbHVlIGFzIERhdGFGbG93LCBrZXkpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKHZhbHVlIGFzIFtdKS5sZW5ndGggPiAwICYmIHZhbHVlWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICh2YWx1ZSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5PbkV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBTZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNEaXNwYXRjaDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5kYXRhW2tleV0gIT0gdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmRhdGFba2V5XSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICAgIHRoaXMuUmVtb3ZlRXZlbnREYXRhKCh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvdyksIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5kYXRhW2tleV0pICYmICh0aGlzLmRhdGFba2V5XSBhcyBbXSkubGVuZ3RoID4gMCAmJiB0aGlzLmRhdGFba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgICAgKHRoaXMuZGF0YVtrZXldIGFzIERhdGFGbG93W10pLmZvckVhY2goKGl0ZW06IERhdGFGbG93LCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLlJlbW92ZUV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xuICAgIH1cbiAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIGlmIChpc0Rpc3BhdGNoKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuICBwdWJsaWMgU2V0RGF0YShkYXRhOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSBmYWxzZSkge1xuXG4gICAgaWYgKGlzQ2xlYXJEYXRhKSB0aGlzLmRhdGEgPSB7fTtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICBsZXQgJGRhdGE6IERhdGFGbG93ID0gZGF0YSBhcyBEYXRhRmxvdztcbiAgICAgIGlmICghdGhpcy5wcm9wZXJ0eSAmJiAkZGF0YS5wcm9wZXJ0eSkgdGhpcy5wcm9wZXJ0eSA9ICRkYXRhLnByb3BlcnR5O1xuICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoJGRhdGEuZ2V0UHJvcGVydGllcygpKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLlNldChrZXksIGRhdGFba2V5XSwgc2VuZGVyLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgR2V0KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG4gIHB1YmxpYyBJbmNyZWFzZShrZXk6IHN0cmluZykge1xuICAgIHRoaXMuU2V0KGtleSwgKyt0aGlzLmRhdGFba2V5XSk7XG4gIH1cbiAgcHVibGljIERlY3JlYXNlKGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5TZXQoa2V5LCAtLXRoaXMuZGF0YVtrZXldKTtcbiAgfVxuICBwdWJsaWMgQXBwZW5kKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgaWYgKCF0aGlzLmRhdGFba2V5XSkgdGhpcy5kYXRhW2tleV0gPSBbXTtcbiAgICB0aGlzLmRhdGFba2V5XSA9IFsuLi50aGlzLmRhdGFba2V5XSwgdmFsdWVdO1xuICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xuICB9XG4gIHB1YmxpYyBSZW1vdmUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5SZW1vdmVFdmVudERhdGEodGhpcy5kYXRhW2tleV1baW5kZXhdLCBrZXkpO1xuICAgICAgdGhpcy5kYXRhW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGxvYWQoZGF0YTogYW55KSB7XG4gICAgdGhpcy5kYXRhID0ge307XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydHk/LmdldFByb3BlcnR5QnlLZXkoZGF0YS5rZXkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICBjb25zdCBmdW5jU2V0VmFsdWUgPSAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlU2V0ID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlU2V0ID0gdmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVNldCkpIHtcbiAgICAgICAgICB2YWx1ZVNldCA9IHZhbHVlU2V0Lm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS5rZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhRmxvdyh0aGlzLnByb3BlcnR5LCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlU2V0Py5rZXkpIHtcbiAgICAgICAgICB2YWx1ZVNldCA9IG5ldyBEYXRhRmxvdyh0aGlzLnByb3BlcnR5LCB2YWx1ZVNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhW2tleV0gPSB2YWx1ZVNldDtcbiAgICAgICAgdGhpcy5CaW5kRXZlbnQodGhpcy5kYXRhW2tleV0sIGtleSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydGllc1trZXldO1xuICAgICAgICBpZiAocHJvcGVydHkuc3ViICYmIGRhdGEpIHtcbiAgICAgICAgICBmb3IgKGxldCBmaWVsZCBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnN0YXJ0c1dpdGgoa2V5KSkge1xuICAgICAgICAgICAgICBmdW5jU2V0VmFsdWUoZmllbGQsIGRhdGE/LltmaWVsZF0gPz8gdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmdW5jU2V0VmFsdWUoa2V5LCBkYXRhPy5ba2V5XSA/PyB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSnNvbigpKTtcbiAgfVxuICBwdWJsaWMgdG9Kc29uKCkge1xuICAgIGxldCByczogYW55ID0ge307XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydHk/LmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLmtleSk7XG4gICAgfVxuICAgIGNvbnN0IHNldFJTID0gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBsZXQgdmFsdWVSUyA9IHRoaXMuR2V0KGtleSk7XG4gICAgICBpZiAodmFsdWVSUyBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgIHJzW2tleV0gPSB2YWx1ZVJTLnRvSnNvbigpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlUlMpKSB7XG4gICAgICAgIHJzW2tleV0gPSB2YWx1ZVJTLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0udG9Kc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnNba2V5XSA9IHZhbHVlUlM7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydGllc1trZXldO1xuICAgICAgaWYgKHByb3BlcnR5LnN1Yikge1xuICAgICAgICBmb3IgKGxldCBmaWVsZCBvZiBPYmplY3Qua2V5cyh0aGlzLmRhdGEpKSB7XG4gICAgICAgICAgaWYgKGZpZWxkLnN0YXJ0c1dpdGgoa2V5KSkge1xuICAgICAgICAgICAgc2V0UlMoZmllbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0UlMoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJzO1xuICB9XG4gIHB1YmxpYyBkZWxldGUoKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgdGhpcy5kYXRhID0ge307XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcclxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcclxuaW1wb3J0IHsgRXZlbnRGbG93IH0gZnJvbSBcIi4vRXZlbnRGbG93XCI7XHJcbmltcG9ydCB7IElFdmVudCB9IGZyb20gXCIuL0lGbG93XCI7XHJcbmV4cG9ydCBjbGFzcyBGbG93Q29yZSBpbXBsZW1lbnRzIElFdmVudCB7XHJcbiAgcHVibGljIEdldElkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2lkJyk7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXRJZChpZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgnaWQnLCBpZCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBwcm9wZXJ0aWVzOiBhbnkgPSB7fTtcclxuICBwdWJsaWMgZGF0YTogRGF0YUZsb3cgPSBuZXcgRGF0YUZsb3coKTtcclxuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICBwdWJsaWMgQ2hlY2tFbGVtZW50Q2hpbGQoZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbE5vZGUgPT0gZWwgfHwgdGhpcy5lbE5vZGUuY29udGFpbnMoZWwpO1xyXG4gIH1cclxuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xyXG4gIHB1YmxpYyBTZXREYXRhKGRhdGE6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsKSB7XHJcbiAgICB0aGlzLmRhdGEuU2V0RGF0YShkYXRhLCBzZW5kZXIpO1xyXG4gIH1cclxuICBwdWJsaWMgU2V0RGF0YUZsb3coZGF0YTogRGF0YUZsb3cpIHtcclxuICAgIHRoaXMuZGF0YS5TZXREYXRhKGRhdGEsIHRoaXMsIHRydWUpO1xyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2goYGJpbmRfZGF0YV9ldmVudGAsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xyXG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7IGRhdGEsIHNlbmRlcjogdGhpcyB9KTtcclxuICB9XHJcbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcclxuICB9XHJcbiAgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XHJcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XHJcbiAgfVxyXG4gIFJlbW92ZURhdGFFdmVudCgpIHtcclxuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGF0YUNoYW5nZSwgKHsga2V5LCB2YWx1ZSwgc2VuZGVyIH06IGFueSkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5jaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XHJcbiAgICAgICAgICB0eXBlOiAnZGF0YScsXHJcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUZsb3c8VFBhcmVudCBleHRlbmRzIEZsb3dDb3JlPiBleHRlbmRzIEZsb3dDb3JlIHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHBhcmVudDogVFBhcmVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi9JRmxvd1wiO1xuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgVGFnVmlldyA9IFsnU1BBTicsICdESVYnLCAnUCcsICdURVhUQVJFQSddO1xuZXhwb3J0IGNsYXNzIERhdGFWaWV3IHtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHByb3BlcnR5OiBhbnk7XG4gIHByaXZhdGUgZWxTdWdnZXN0aW9uczogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFN1Z2dlc3Rpb25zQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBub2RlRWRpdG9yOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnQsIHByaXZhdGUgZGF0YTogRGF0YUZsb3csIHByaXZhdGUgbWFpbjogSU1haW4sIHByaXZhdGUga2V5TmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lKSB7XG4gICAgICBpZiAoIWVsLmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSB0aGlzLm1haW4uZ2V0UHJvcGVydHlCeUtleSh0aGlzLmRhdGEuR2V0KCdrZXknKSk/Llt0aGlzLmtleU5hbWVdO1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IgPSBlbCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnR5LmVkaXQpIHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eS5zZWxlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcIm5vZGUtZm9ybS1jb250cm9sXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcsIHRoaXMua2V5TmFtZSk7XG5cbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5TmFtZSA9IGVsPy5nZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnKTtcbiAgICAgIGlmICh0aGlzLmtleU5hbWUpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHRoaXMubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KHRoaXMuZGF0YS5HZXQoJ2tleScpKT8uW3RoaXMua2V5TmFtZV07XG4gICAgICAgIHRoaXMuZWxOb2RlID0gdGhpcy5lbCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IuY2xhc3NMaXN0LmFkZCgnbm9kZS1lZGl0b3InKTtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudD8uaW5zZXJ0QmVmb3JlKHRoaXMubm9kZUVkaXRvciwgZWwpO1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHRoaXMubm9kZUVkaXRvci5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZWxTdWdnZXN0aW9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9ucy5jbGFzc0xpc3QuYWRkKCdub2RlLWVkaXRvcl9zdWdnZXN0aW9ucycpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9uc0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50LmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3Rpb25zX2NvbnRlbnQnKTtcbiAgICB0aGlzLmVsU3VnZ2VzdGlvbnMuYXBwZW5kQ2hpbGQodGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudCk7XG4gICAgdGhpcy5zaG93U3VnZ2VzdGlvbnMoZmFsc2UpO1xuICAgIGlmICh0aGlzLmtleU5hbWUpXG4gICAgICB0aGlzLmJpbmREYXRhKCk7XG4gIH1cbiAgcHJpdmF0ZSBjaGVja1Nob3dTdWdnZXN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudCkge1xuICAgICAgdGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgIHZhciBhcnIgPSB0aGlzLm1haW4uZ2V0VmFyaWFibGUoKTtcbiAgICAgIGlmICghYXJyIHx8IGFyci5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyhmYWxzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBlbFVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgIGxldCBlbExpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbGV0IGVsTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZWxMaS5hcHBlbmRDaGlsZChlbExpbmspO1xuICAgICAgICBlbExpbmsuaW5uZXJIVE1MID0gaXRlbS5HZXQoJ25hbWUnKTtcbiAgICAgICAgZWxMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIGFsZXJ0KGVsTGluay5pbm5lckhUTUwpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxVbC5hcHBlbmRDaGlsZChlbExpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxTdWdnZXN0aW9uc0NvbnRlbnQuYXBwZW5kQ2hpbGQoZWxVbCk7XG4gICAgfVxuICAgIGxldCB0eHQ6IGFueSA9ICh0aGlzLmVsTm9kZSBhcyBhbnkpLnZhbHVlO1xuICAgIGxldCBzZWxlY3Rpb25TdGFydCA9ICh0aGlzLmVsTm9kZSBhcyBhbnkpLnNlbGVjdGlvblN0YXJ0O1xuICAgIGlmICh0eHQpIHtcbiAgICAgIGxldCBzdGFydEluZGV4ID0gdHh0Lmxhc3RJbmRleE9mKFwiJHtcIiwgc2VsZWN0aW9uU3RhcnQpO1xuICAgICAgbGV0IGVuZEluZGV4ID0gdHh0Lmxhc3RJbmRleE9mKFwifVwiLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICBpZiAoZW5kSW5kZXggPCBzdGFydEluZGV4KVxuICAgICAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyh0cnVlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5zaG93U3VnZ2VzdGlvbnMoZmFsc2UpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIHNob3dTdWdnZXN0aW9ucyhmbGc6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgaWYgKCF0aGlzLmVsU3VnZ2VzdGlvbnMpIHJldHVybjtcbiAgICBpZiAoZmxnKSB7XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnMucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnMuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgYmluZERhdGEoKSB7XG4gICAgaWYgKHRoaXMua2V5TmFtZSAmJiB0aGlzLmVsTm9kZSkge1xuICAgICAgdGhpcy5kYXRhLm9uKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke3RoaXMua2V5TmFtZX1gLCB0aGlzLmJpbmRJbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVsU3VnZ2VzdGlvbnMpXG4gICAgICAgICAgdGhpcy5lbE5vZGU/LnBhcmVudEVsZW1lbnQ/LmFwcGVuZENoaWxkKHRoaXMuZWxTdWdnZXN0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmVsU3VnZ2VzdGlvbnMpXG4gICAgICAgICAgICB0aGlzLmVsTm9kZT8ucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQodGhpcy5lbFN1Z2dlc3Rpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrU2hvd1N1Z2dlc3Rpb25zKCk7XG4gICAgICB9KVxuICAgICAgaWYgKHRoaXMucHJvcGVydHkgJiYgdGhpcy5wcm9wZXJ0eS5zZWxlY3QgJiYgaXNGdW5jdGlvbih0aGlzLnByb3BlcnR5LmRhdGFTZWxlY3QpKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnByb3BlcnR5LmRhdGFTZWxlY3QoeyBlbE5vZGU6IHRoaXMuZWxOb2RlLCBtYWluOiB0aGlzLm1haW4sIGtleTogdGhpcy5rZXlOYW1lIH0pLm1hcCgoeyB2YWx1ZSwgdGV4dCB9OiBhbnkpID0+IHtcbiAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgb3B0aW9uLnRleHQgPSB0ZXh0O1xuICAgICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BlcnR5ICYmIGlzRnVuY3Rpb24odGhpcy5wcm9wZXJ0eS5zY3JpcHQpKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkuc2NyaXB0KHsgZWxOb2RlOiB0aGlzLmVsTm9kZSwgbWFpbjogdGhpcy5tYWluLCBrZXk6IHRoaXMua2V5TmFtZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0Tm9kZVZhbHVlKHRoaXMuZGF0YS5HZXQodGhpcy5rZXlOYW1lKSA/PyBcIlwiKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBzZXROb2RlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh0aGlzLmVsTm9kZSkge1xuICAgICAgaWYgKFRhZ1ZpZXcuaW5jbHVkZXModGhpcy5lbE5vZGUudGFnTmFtZSkpIHtcbiAgICAgICAgKHRoaXMuZWxOb2RlIGFzIGFueSkuaW5uZXJUZXh0ID0gYCR7dmFsdWV9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh0aGlzLmVsTm9kZSBhcyBhbnkpLnZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByaXZhdGUgYmluZElucHV0KHsgdmFsdWUsIHNlbmRlciB9OiBhbnkpIHtcbiAgICBpZiAoc2VuZGVyICE9PSB0aGlzICYmIHRoaXMuZWxOb2RlICYmIHNlbmRlcj8uZWxOb2RlICE9PSB0aGlzLmVsTm9kZSkge1xuICAgICAgdGhpcy5zZXROb2RlVmFsdWUodmFsdWUgPz8gXCJcIik7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgYmluZEV2ZW50KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMua2V5TmFtZSAmJiB0aGlzLmVsTm9kZSkge1xuICAgICAgICB0aGlzLmRhdGEuU2V0KHRoaXMua2V5TmFtZSwgKHRoaXMuZWxOb2RlIGFzIGFueSkudmFsdWUsIHRoaXMpO1xuICAgICAgICB0aGlzLmNoZWNrU2hvd1N1Z2dlc3Rpb25zKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIERlbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWxOb2RlKSB7XG4gICAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7dGhpcy5rZXlOYW1lfWAsIHRoaXMuYmluZElucHV0LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBzdGF0aWMgQmluZEVsZW1lbnQoZWw6IEVsZW1lbnQsIGRhdGE6IERhdGFGbG93LCBtYWluOiBJTWFpbiwga2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IERhdGFWaWV3W10ge1xuICAgIGlmIChlbC5jaGlsZEVsZW1lbnRDb3VudCA9PSAwIHx8IGVsLmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRhVmlldyhlbCwgZGF0YSwgbWFpbiwga2V5KV07XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tub2RlXFxcXDptb2RlbF0nKSkubWFwKChpdGVtOiBFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gbmV3IERhdGFWaWV3KGl0ZW0sIGRhdGEsIG1haW4pO1xuICAgIH0pO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IGdldFRpbWUgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X0V2ZW50IHtcblxuICBwcml2YXRlIHRpbWVGYXN0Q2xpY2s6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgdGFnSW5nb3JlID0gWydpbnB1dCcsICdidXR0b24nLCAnYScsICd0ZXh0YXJlYSddO1xuXG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZmxnTW92ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYXZfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdl95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgcG9zX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcG9zX3k6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgLyogTW91c2UgYW5kIFRvdWNoIEFjdGlvbnMgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpKTtcblxuICAgIC8qIERyb3AgRHJhcCAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5ub2RlX2Ryb3BFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5ub2RlX2RyYWdvdmVyLmJpbmQodGhpcykpO1xuICAgIC8qIFpvb20gTW91c2UgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLnpvb21fZW50ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogRGVsZXRlICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHRtZW51KGV2OiBhbnkpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfVxuICBwcml2YXRlIG5vZGVfZHJhZ292ZXIoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcm9wRW5kKGV2OiBhbnkpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGxldCBrZXlOb2RlOiBhbnkgPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xDaG9vc2UoKTtcbiAgICBpZiAoIWtleU5vZGUgJiYgZXYudHlwZSAhPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tPbmx5Tm9kZShrZXlOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9kZUl0ZW0gPSB0aGlzLnBhcmVudC5BZGROb2RlKGtleU5vZGUsIHtcbiAgICAgIGdyb3VwOiB0aGlzLnBhcmVudC5DdXJyZW50R3JvdXAoKVxuICAgIH0pO1xuICAgIG5vZGVJdGVtLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9pbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIFN0YXJ0TW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMudGFnSW5nb3JlLmluY2x1ZGVzKGV2LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGltZUZhc3RDbGljayA9IGdldFRpbWUoKTtcbiAgICBpZiAoZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWFpbi1wYXRoJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkNhbnZhcztcbiAgICBsZXQgbm9kZUNob29zZSA9IHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKTtcbiAgICBpZiAobm9kZUNob29zZSAmJiBub2RlQ2hvb3NlLkNoZWNrRWxlbWVudENoaWxkKGV2LnRhcmdldCkpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmIChub2RlQ2hvb3NlICYmIHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuTm9kZSAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5MaW5lO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBuZXcgTGluZShub2RlQ2hvb3NlLCBmcm9tSW5kZXgpO1xuICAgICAgdGhpcy50ZW1wTGluZS50ZW1wID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICB0aGlzLmF2X3ggPSB0aGlzLnBhcmVudC5nZXRYKCk7XG4gICAgICB0aGlzLmF2X3kgPSB0aGlzLnBhcmVudC5nZXRZKCk7XG4gICAgfVxuICAgIHRoaXMuZmxnRHJhcCA9IHRydWU7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHVibGljIE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgdGhpcy5mbGdNb3ZlID0gdHJ1ZTtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vdmVUeXBlKSB7XG4gICAgICBjYXNlIE1vdmVUeXBlLkNhbnZhczpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5hdl94ICsgdGhpcy5wYXJlbnQuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpXG4gICAgICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgICAgIHRoaXMucGFyZW50LnNldFkoeSk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuVXBkYXRlVUkoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5Ob2RlOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBvc194IC0gZV9wb3NfeCk7XG4gICAgICAgICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBvc195IC0gZV9wb3NfeSk7XG4gICAgICAgICAgdGhpcy5wb3NfeCA9IGVfcG9zX3g7XG4gICAgICAgICAgdGhpcy5wb3NfeSA9IGVfcG9zX3k7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpPy51cGRhdGVQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5MaW5lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHRoaXMudGVtcExpbmUpIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5wYXJlbnQuQ2FsY1godGhpcy5wYXJlbnQuZWxDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueCAtIGVfcG9zX3gpO1xuICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG4gICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnVwZGF0ZVRvKHRoaXMucGFyZW50LmVsQ2FudmFzLm9mZnNldExlZnQgLSB4LCB0aGlzLnBhcmVudC5lbENhbnZhcy5vZmZzZXRUb3AgLSB5KTtcbiAgICAgICAgICAgIGxldCBub2RlRWwgPSBldi50YXJnZXQuY2xvc2VzdCgnW25vZGUtaWRdJyk7XG4gICAgICAgICAgICBsZXQgbm9kZUlkID0gbm9kZUVsPy5nZXRBdHRyaWJ1dGUoJ25vZGUtaWQnKTtcbiAgICAgICAgICAgIGxldCBub2RlVG8gPSBub2RlSWQgPyB0aGlzLnBhcmVudC5HZXROb2RlQnlJZChub2RlSWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKG5vZGVUbyAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgICAgICAgICAgbGV0IHRvSW5kZXggPSBldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdub2RlJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVtcExpbmUuc2V0Tm9kZVRvKG5vZGVUbywgdG9JbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZXQgdG9JbmRleCA9IG5vZGVFbD8ucXVlcnlTZWxlY3RvcignLm5vZGUtZG90Jyk/LlswXT8uZ2V0QXR0cmlidXRlKCdub2RlJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVtcExpbmUuc2V0Tm9kZVRvKG5vZGVUbywgdG9JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgIHRoaXMubW91c2VfeCA9IGVfcG9zX3g7XG4gICAgICB0aGlzLm1vdXNlX3kgPSBlX3Bvc195O1xuICAgIH1cbiAgfVxuICBwcml2YXRlIEVuZE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgLy9maXggRmFzdCBDbGlja1xuICAgIGlmICgoKGdldFRpbWUoKSAtIHRoaXMudGltZUZhc3RDbGljaykgPCAxMDApIHx8ICF0aGlzLmZsZ01vdmUpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICAgICAgdGhpcy5mbGdEcmFwID0gZmFsc2U7XG4gICAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNoZW5kXCIpIHtcbiAgICAgIGVfcG9zX3ggPSB0aGlzLm1vdXNlX3g7XG4gICAgICBlX3Bvc195ID0gdGhpcy5tb3VzZV95O1xuICAgIH0gZWxzZSB7XG4gICAgICBlX3Bvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICBsZXQgeCA9IHRoaXMuYXZfeCArIHRoaXMucGFyZW50LkNhbGNYKC0odGhpcy5wb3NfeCAtIGVfcG9zX3gpKVxuICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgIHRoaXMucGFyZW50LnNldFgoeCk7XG4gICAgICB0aGlzLnBhcmVudC5zZXRZKHkpO1xuICAgICAgdGhpcy5hdl94ID0gMDtcbiAgICAgIHRoaXMuYXZfeSA9IDA7XG4gICAgfVxuICAgIGlmICh0aGlzLnRlbXBMaW5lKSB7XG4gICAgICB0aGlzLnRlbXBMaW5lLkNsb25lKCk7XG4gICAgICB0aGlzLnRlbXBMaW5lLmRlbGV0ZSgpO1xuICAgICAgdGhpcy50ZW1wTGluZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5wb3NfeCA9IGVfcG9zX3g7XG4gICAgdGhpcy5wb3NfeSA9IGVfcG9zX3k7XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vbmU7XG4gICAgdGhpcy5mbGdEcmFwID0gZmFsc2U7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHJpdmF0ZSBrZXlkb3duKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXYua2V5ID09PSAnRGVsZXRlJyB8fCAoZXYua2V5ID09PSAnQmFja3NwYWNlJyAmJiBldi5tZXRhS2V5KSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKVxuXG4gICAgICB0aGlzLnBhcmVudC5nZXROb2RlQ2hvb3NlKCk/LmRlbGV0ZSgpO1xuICAgICAgdGhpcy5wYXJlbnQuZ2V0TGluZUNob29zZSgpPy5kZWxldGUoKTtcbiAgICB9XG4gICAgaWYgKGV2LmtleSA9PT0gJ0YyJykge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIFByb3BlcnR5RW51bSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuL05vZGVJdGVtXCI7XG5cbmV4cG9ydCBjbGFzcyBMaW5lIHtcbiAgcHVibGljIGVsTm9kZTogU1ZHRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKTtcbiAgcHVibGljIGVsUGF0aDogU1ZHUGF0aEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJwYXRoXCIpO1xuICBwcml2YXRlIGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KCk7XG4gIHByaXZhdGUgY3VydmF0dXJlOiBudW1iZXIgPSAwLjU7XG4gIHB1YmxpYyB0ZW1wOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZnJvbTogTm9kZUl0ZW0sIHB1YmxpYyBmcm9tSW5kZXg6IG51bWJlciA9IDAsIHB1YmxpYyB0bzogTm9kZUl0ZW0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQsIHB1YmxpYyB0b0luZGV4OiBudW1iZXIgPSAwLCBkYXRhOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5lbFBhdGguY2xhc3NMaXN0LmFkZChcIm1haW4tcGF0aFwiKTtcbiAgICB0aGlzLmVsUGF0aC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICcnKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKFwiY29ubmVjdGlvblwiKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsUGF0aCk7XG4gICAgdGhpcy5mcm9tLnBhcmVudC5lbENhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG5cbiAgICB0aGlzLmZyb20uQWRkTGluZSh0aGlzKTtcbiAgICB0aGlzLnRvPy5BZGRMaW5lKHRoaXMpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRhdGEuSW5pdERhdGEoXG4gICAgICB7XG4gICAgICAgIGZyb206IHRoaXMuZnJvbS5HZXRJZCgpLFxuICAgICAgICBmcm9tSW5kZXg6IHRoaXMuZnJvbUluZGV4LFxuICAgICAgICB0bzogdGhpcy50bz8uR2V0SWQoKSxcbiAgICAgICAgdG9JbmRleDogdGhpcy50b0luZGV4XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAuLi4gdGhpcy5mcm9tLnBhcmVudC5tYWluLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLmxpbmUpIHx8IHt9XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmZyb20uZGF0YS5BcHBlbmQoJ2xpbmVzJywgdGhpcy5kYXRhKTtcbiAgfVxuICBwdWJsaWMgdXBkYXRlVG8odG9feDogbnVtYmVyLCB0b195OiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuZnJvbSB8fCB0aGlzLmZyb20uZWxOb2RlID09IG51bGwpIHJldHVybjtcbiAgICBsZXQgeyB4OiBmcm9tX3gsIHk6IGZyb21feSB9OiBhbnkgPSB0aGlzLmZyb20uZ2V0UG9zdGlzaW9uRG90KHRoaXMuZnJvbUluZGV4KTtcbiAgICB2YXIgbGluZUN1cnZlID0gdGhpcy5jcmVhdGVDdXJ2YXR1cmUoZnJvbV94LCBmcm9tX3ksIHRvX3gsIHRvX3ksIHRoaXMuY3VydmF0dXJlLCAnb3RoZXInKTtcbiAgICB0aGlzLmVsUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsIGxpbmVDdXJ2ZSk7XG4gIH1cbiAgcHVibGljIFVwZGF0ZVVJKCk6IExpbmUge1xuICAgIC8vUG9zdGlvbiBvdXRwdXRcbiAgICBpZiAodGhpcy50byAmJiB0aGlzLnRvLmVsTm9kZSkge1xuICAgICAgbGV0IHsgeDogdG9feCwgeTogdG9feSB9OiBhbnkgPSB0aGlzLnRvLmdldFBvc3Rpc2lvbkRvdCh0aGlzLnRvSW5kZXgpO1xuICAgICAgdGhpcy51cGRhdGVUbyh0b194LCB0b195KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcHVibGljIEFjdGl2ZShmbGc6IGFueSA9IHRydWUpIHtcbiAgICBpZiAoZmxnKSB7XG4gICAgICB0aGlzLmVsUGF0aC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbFBhdGguY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgY3JlYXRlQ3VydmF0dXJlKHN0YXJ0X3Bvc194OiBudW1iZXIsIHN0YXJ0X3Bvc195OiBudW1iZXIsIGVuZF9wb3NfeDogbnVtYmVyLCBlbmRfcG9zX3k6IG51bWJlciwgY3VydmF0dXJlX3ZhbHVlOiBudW1iZXIsIHR5cGU6IHN0cmluZykge1xuICAgIGxldCBsaW5lX3ggPSBzdGFydF9wb3NfeDtcbiAgICBsZXQgbGluZV95ID0gc3RhcnRfcG9zX3k7XG4gICAgbGV0IHggPSBlbmRfcG9zX3g7XG4gICAgbGV0IHkgPSBlbmRfcG9zX3k7XG4gICAgbGV0IGN1cnZhdHVyZSA9IGN1cnZhdHVyZV92YWx1ZTtcbiAgICAvL3R5cGUgb3BlbmNsb3NlIG9wZW4gY2xvc2Ugb3RoZXJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcblxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICBpZiAoc3RhcnRfcG9zX3ggPj0gZW5kX3Bvc194KSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogKGN1cnZhdHVyZSAqIC0xKTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvdGhlcic6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuXG4gICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcbiAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIGN1cnZhdHVyZTtcblxuICAgICAgICByZXR1cm4gJyBNICcgKyBsaW5lX3ggKyAnICcgKyBsaW5lX3kgKyAnIEMgJyArIGh4MSArICcgJyArIGxpbmVfeSArICcgJyArIGh4MiArICcgJyArIHkgKyAnICcgKyB4ICsgJyAgJyArIHk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBkZWxldGUobm9kZVRoaXM6IGFueSA9IG51bGwsIGlzQ2xlYXJEYXRhID0gdHJ1ZSkge1xuICAgIHRoaXMuZWxQYXRoPy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGg/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgaWYgKGlzQ2xlYXJEYXRhKVxuICAgICAgdGhpcy5mcm9tLmRhdGEuUmVtb3ZlKCdsaW5lcycsIHRoaXMuZGF0YSk7XG4gICAgaWYgKHRoaXMuZnJvbSAhPSBub2RlVGhpcylcbiAgICAgIHRoaXMuZnJvbS5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIGlmICh0aGlzLnRvICE9IG5vZGVUaGlzKVxuICAgICAgdGhpcy50bz8uUmVtb3ZlTGluZSh0aGlzKTtcbiAgICB0aGlzLmVsUGF0aC5yZW1vdmUoKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmUoKTtcbiAgfVxuICBwdWJsaWMgU3RhcnRTZWxlY3RlZChlOiBhbnkpIHtcbiAgICB0aGlzLmZyb20ucGFyZW50LnNldExpbmVDaG9vc2UodGhpcylcbiAgfVxuICBwdWJsaWMgc2V0Tm9kZVRvKG5vZGU6IE5vZGVJdGVtIHwgdW5kZWZpbmVkLCB0b0luZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLnRvID0gbm9kZTtcbiAgICB0aGlzLnRvSW5kZXggPSB0b0luZGV4O1xuICB9XG4gIHB1YmxpYyBDbG9uZSgpIHtcbiAgICBpZiAodGhpcy50byAmJiB0aGlzLnRvSW5kZXggJiYgdGhpcy5mcm9tICE9IHRoaXMudG8gJiYgIXRoaXMuZnJvbS5jaGVja0xpbmVFeGlzdHModGhpcy5mcm9tSW5kZXgsIHRoaXMudG8sIHRoaXMudG9JbmRleCkpIHtcbiAgICAgIHJldHVybiBuZXcgTGluZSh0aGlzLmZyb20sIHRoaXMuZnJvbUluZGV4LCB0aGlzLnRvLCB0aGlzLnRvSW5kZXgpLlVwZGF0ZVVJKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlRmxvdywgRXZlbnRFbnVtLCBEYXRhRmxvdywgRGF0YVZpZXcgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld1wiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5leHBvcnQgY2xhc3MgTm9kZUl0ZW0gZXh0ZW5kcyBCYXNlRmxvdzxEZXNnaW5lclZpZXc+IHtcbiAgLyoqXG4gICAqIEdFVCBTRVQgZm9yIERhdGFcbiAgICovXG4gIHB1YmxpYyBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCduYW1lJyk7XG4gIH1cbiAgcHVibGljIGdldFkoKSB7XG4gICAgcmV0dXJuICt0aGlzLmRhdGEuR2V0KCd5Jyk7XG4gIH1cbiAgcHVibGljIHNldFkodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCd5JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBnZXRYKCkge1xuICAgIHJldHVybiArdGhpcy5kYXRhLkdldCgneCcpO1xuICB9XG4gIHB1YmxpYyBzZXRYKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgneCcsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgQ2hlY2tLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgna2V5JykgPT0ga2V5O1xuICB9XG4gIHB1YmxpYyBnZXREYXRhTGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnbGluZXMnKSA/PyBbXTtcbiAgfVxuICBwdWJsaWMgY2hlY2tMaW5lRXhpc3RzKGZyb21JbmRleDogbnVtYmVyLCB0bzogTm9kZUl0ZW0sIHRvSW5kZXg6IE51bWJlcikge1xuICAgIHJldHVybiB0aGlzLmFyckxpbmUuZmlsdGVyKChpdGVtOiBMaW5lKSA9PiB7XG4gICAgICBpZiAoIWl0ZW0udGVtcCAmJiBpdGVtLnRvID09IHRvICYmIGl0ZW0udG9JbmRleCA9PSB0b0luZGV4ICYmIGl0ZW0uZnJvbUluZGV4ID09IGZyb21JbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXRlbS50ZW1wICYmIGl0ZW0uZnJvbSA9PSB0byAmJiBpdGVtLmZyb21JbmRleCA9PSB0b0luZGV4ICYmIGl0ZW0udG9JbmRleCA9PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KS5sZW5ndGggPiAwO1xuICB9XG4gIHB1YmxpYyBlbENvbnRlbnQ6IEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgYXJyTGluZTogTGluZVtdID0gW107XG4gIHByaXZhdGUgb3B0aW9uOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBhcnJEYXRhVmlldzogRGF0YVZpZXdbXSA9IFtdO1xuICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50OiBEZXNnaW5lclZpZXcsIHByaXZhdGUga2V5Tm9kZTogYW55LCBkYXRhOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xOb2RlQnlLZXkoa2V5Tm9kZSk7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5vcHRpb24/LnByb3BlcnRpZXM7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLkluaXREYXRhKHsgLi4uZGF0YSwgbmFtZTogdGhpcy5vcHRpb24ubmFtZSB9LCB0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgdGhpcy5wYXJlbnQuZGF0YS5BcHBlbmQoJ25vZGVzJywgdGhpcy5kYXRhKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLnJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLW5vZGUnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbi5jbGFzcykge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbi5jbGFzcyk7XG4gICAgfVxuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnbm9kZS1pZCcsIHRoaXMuR2V0SWQoKSk7XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5Om5vbmUnKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuICAgIHRoaXMucmVuZGVyVUkoKTtcbiAgfVxuICBwdWJsaWMgZ2V0T3B0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbjtcbiAgfVxuICBwcml2YXRlIHJlbmRlclVJKGRldGFpbDogYW55ID0gbnVsbCkge1xuICAgIGlmICgoZGV0YWlsICYmIFsneCcsICd5J10uaW5jbHVkZXMoZGV0YWlsLmtleSkpKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIHRoaXMuZWxOb2RlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICYmICFbJ0JVVFRPTicsICdBJ10uaW5jbHVkZXMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC50YWdOYW1lKSkgcmV0dXJuO1xuICAgIGNvbnNvbGUubG9nKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ/LnRhZ05hbWUpO1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIGlmICh0aGlzLmdldE9wdGlvbigpPy5oaWRlVGl0bGUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWxlZnRcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS10b3BcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1ib3R0b21cIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtcmlnaHRcIj48L2Rpdj5cbiAgICBgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1sZWZ0XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtdG9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj4ke3RoaXMub3B0aW9uLmljb259ICR7dGhpcy5nZXROYW1lKCl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJvZHlcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWJvdHRvbVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1yaWdodFwiPjwvZGl2PlxuICAgIGA7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkTm9kZURvdCA9IChudW06IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHN0YXJ0OiBudW1iZXIsIHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChudW0pIHtcbiAgICAgICAgbGV0IG5vZGVRdWVyeSA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xuICAgICAgICBpZiAobm9kZVF1ZXJ5KSB7XG4gICAgICAgICAgbm9kZVF1ZXJ5LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgbGV0IG5vZGVEb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG5vZGVEb3QuY2xhc3NMaXN0LmFkZCgnbm9kZS1kb3QnKTtcbiAgICAgICAgICAgIG5vZGVEb3Quc2V0QXR0cmlidXRlKCdub2RlJywgYCR7c3RhcnQgKyBpfWApO1xuICAgICAgICAgICAgbm9kZVF1ZXJ5LmFwcGVuZENoaWxkKG5vZGVEb3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmxlZnQsIDEwMDAsICcubm9kZS1sZWZ0Jyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py50b3AsIDIwMDAsICcubm9kZS10b3AnKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmJvdHRvbSwgMzAwMCwgJy5ub2RlLWJvdHRvbScpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8ucmlnaHQsIDQwMDAsICcubm9kZS1yaWdodCcpO1xuXG4gICAgdGhpcy5lbENvbnRlbnQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcubm9kZS1jb250ZW50IC5ib2R5JykgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5wYXJlbnQubWFpbi5yZW5kZXJIdG1sKHsgbm9kZTogdGhpcywgZWxOb2RlOiB0aGlzLmVsQ29udGVudCwgbWFpbjogdGhpcy5wYXJlbnQubWFpbiB9KTtcbiAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgdGhpcy5hcnJEYXRhVmlldy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLkRlbGV0ZSgpKTtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzLm9wdGlvbi5zY3JpcHQpKSB7XG4gICAgICB0aGlzLm9wdGlvbi5zY3JpcHQoeyBub2RlOiB0aGlzLCBlbE5vZGU6IHRoaXMuZWxDb250ZW50LCBtYWluOiB0aGlzLnBhcmVudC5tYWluIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbENvbnRlbnQpXG4gICAgICB0aGlzLmFyckRhdGFWaWV3ID0gRGF0YVZpZXcuQmluZEVsZW1lbnQodGhpcy5lbENvbnRlbnQsIHRoaXMuZGF0YSwgdGhpcy5wYXJlbnQubWFpbik7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVBvc2l0aW9uKHg6IGFueSwgeTogYW55LCBpQ2hlY2sgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmVsTm9kZSkge1xuICAgICAgbGV0IHRlbXB4ID0geDtcbiAgICAgIGxldCB0ZW1weSA9IHk7XG4gICAgICBpZiAoIWlDaGVjaykge1xuICAgICAgICB0ZW1weSA9ICh0aGlzLmVsTm9kZS5vZmZzZXRUb3AgLSB5KTtcbiAgICAgICAgdGVtcHggPSAodGhpcy5lbE5vZGUub2Zmc2V0TGVmdCAtIHgpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXB4ICE9PSB0aGlzLmdldFgoKSkge1xuICAgICAgICB0aGlzLnNldFgodGVtcHgpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXB5ICE9PSB0aGlzLmdldFkoKSkge1xuICAgICAgICB0aGlzLnNldFkodGVtcHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwdWJsaWMgQWN0aXZlKGZsZzogYW55ID0gdHJ1ZSkge1xuICAgIGlmIChmbGcpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIFJlbW92ZUxpbmUobGluZTogTGluZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuYXJyTGluZS5pbmRleE9mKGxpbmUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLmFyckxpbmUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXJyTGluZTtcbiAgfVxuICBwdWJsaWMgQWRkTGluZShsaW5lOiBMaW5lKSB7XG4gICAgdGhpcy5hcnJMaW5lID0gWy4uLnRoaXMuYXJyTGluZSwgbGluZV07XG4gIH1cbiAgcHVibGljIGdldFBvc3Rpc2lvbkRvdChpbmRleDogbnVtYmVyID0gMCkge1xuICAgIGxldCBlbERvdDogYW55ID0gdGhpcy5lbE5vZGU/LnF1ZXJ5U2VsZWN0b3IoYC5ub2RlLWRvdFtub2RlPVwiJHtpbmRleH1cIl1gKTtcbiAgICBpZiAoZWxEb3QpIHtcbiAgICAgIGxldCB5ID0gKHRoaXMuZWxOb2RlLm9mZnNldFRvcCArIGVsRG90Lm9mZnNldFRvcCArIDEwKTtcbiAgICAgIGxldCB4ID0gKHRoaXMuZWxOb2RlLm9mZnNldExlZnQgKyBlbERvdC5vZmZzZXRMZWZ0ICsgMTApO1xuICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgcHVibGljIFVwZGF0ZVVJKCkge1xuICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgdG9wOiAke3RoaXMuZ2V0WSgpfXB4OyBsZWZ0OiAke3RoaXMuZ2V0WCgpfXB4O2ApO1xuICAgIHRoaXMuYXJyTGluZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLlVwZGF0ZVVJKCk7XG4gICAgfSlcbiAgfVxuICBwdWJsaWMgZGVsZXRlKGlzQ2xlYXJEYXRhID0gdHJ1ZSkge1xuICAgIHRoaXMuYXJyTGluZS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmRlbGV0ZSh0aGlzLCBpc0NsZWFyRGF0YSkpO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMuZGF0YS5kZWxldGUoKTtcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5yZW5kZXJVSS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuUmVtb3ZlRGF0YUV2ZW50KCk7XG4gICAgfVxuICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmUoKTtcbiAgICB0aGlzLmFyckxpbmUgPSBbXTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLnBhcmVudC5SZW1vdmVOb2RlKHRoaXMpO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge30pO1xuICB9XG4gIHB1YmxpYyBSZW5kZXJMaW5lKCkge1xuICAgIHRoaXMuZ2V0RGF0YUxpbmUoKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdykgPT4ge1xuICAgICAgbGV0IG5vZGVGcm9tID0gdGhpcztcbiAgICAgIGxldCBub2RlVG8gPSB0aGlzLnBhcmVudC5HZXROb2RlQnlJZChpdGVtLkdldCgndG8nKSk7XG4gICAgICBsZXQgdG9JbmRleCA9IGl0ZW0uR2V0KCd0b0luZGV4Jyk7XG4gICAgICBsZXQgZnJvbUluZGV4ID0gaXRlbS5HZXQoJ2Zyb21JbmRleCcpO1xuICAgICAgbmV3IExpbmUobm9kZUZyb20sIGZyb21JbmRleCwgbm9kZVRvLCB0b0luZGV4LCBpdGVtKS5VcGRhdGVVSSgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhRmxvdywgRmxvd0NvcmUsIElNYWluLCBFdmVudEVudW0sIFByb3BlcnR5RW51bSwgU2NvcGVSb290IH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlld19FdmVudCB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld19FdmVudFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4vTm9kZUl0ZW1cIjtcblxuZXhwb3J0IGNvbnN0IFpvb20gPSB7XG4gIG1heDogMS42LFxuICBtaW46IDAuNixcbiAgdmFsdWU6IDAuMSxcbiAgZGVmYXVsdDogMVxufVxuZXhwb3J0IGNsYXNzIERlc2dpbmVyVmlldyBleHRlbmRzIEZsb3dDb3JlIHtcblxuICAvKipcbiAgICogR0VUIFNFVCBmb3IgRGF0YVxuICAgKi9cbiAgcHVibGljIGdldFpvb20oKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgnem9vbScpO1xuICB9XG4gIHB1YmxpYyBzZXRab29tKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3pvb20nLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFkoKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgneScpO1xuICB9XG4gIHB1YmxpYyBzZXRZKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3knLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFgoKSB7XG4gICAgcmV0dXJuICt0aGlzLmdldERhdGFHcm91cCgpLkdldCgneCcpO1xuICB9XG4gIHB1YmxpYyBzZXRYKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREYXRhR3JvdXAoKS5TZXQoJ3gnLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHJpdmF0ZSBncm91cERhdGE6IERhdGFGbG93IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGxhc3RHcm91cE5hbWU6IHN0cmluZyA9IFwiXCI7XG4gIHByaXZhdGUgZ2V0RGF0YUdyb3VwKCk6IERhdGFGbG93IHtcbiAgICBpZiAodGhpcy4kbG9jaykgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAvLyBjYWNoZSBncm91cERhdGFcbiAgICBpZiAodGhpcy5sYXN0R3JvdXBOYW1lID09PSB0aGlzLkN1cnJlbnRHcm91cCgpKSByZXR1cm4gdGhpcy5ncm91cERhdGEgPz8gdGhpcy5kYXRhO1xuICAgIHRoaXMubGFzdEdyb3VwTmFtZSA9IHRoaXMuQ3VycmVudEdyb3VwKCk7XG4gICAgbGV0IGdyb3VwcyA9IHRoaXMuZGF0YS5HZXQoJ2dyb3VwcycpO1xuICAgIHRoaXMuZ3JvdXBEYXRhID0gZ3JvdXBzPy5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldCgnZ3JvdXAnKSA9PSB0aGlzLmxhc3RHcm91cE5hbWUpPy5bMF07XG4gICAgaWYgKCF0aGlzLmdyb3VwRGF0YSkge1xuICAgICAgdGhpcy5ncm91cERhdGEgPSBuZXcgRGF0YUZsb3codGhpcy5tYWluLCB7XG4gICAgICAgIGtleTogUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXMsXG4gICAgICAgIGdyb3VwOiB0aGlzLmxhc3RHcm91cE5hbWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhLkFwcGVuZCgnZ3JvdXBzJywgdGhpcy5ncm91cERhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgfVxuICAgIGxldCBkYXRhR3JvdXAgPSB0aGlzLkdldERhdGFCeUlkKHRoaXMubGFzdEdyb3VwTmFtZSk7XG4gICAgaWYgKGRhdGFHcm91cCkge1xuICAgICAgZGF0YUdyb3VwLm9uU2FmZShgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBEYXRhO1xuICB9XG4gIHByaXZhdGUgZ3JvdXA6IGFueVtdID0gW107XG4gIHB1YmxpYyBHZXRHcm91cE5hbWUoKTogYW55W10ge1xuICAgIHJldHVybiBbLi4udGhpcy5ncm91cC5tYXAoKGl0ZW0pID0+ICh7IGlkOiBpdGVtLCB0ZXh0OiB0aGlzLkdldERhdGFCeUlkKGl0ZW0pPy5HZXQoJ25hbWUnKSB9KSksIHsgaWQ6IFNjb3BlUm9vdCwgdGV4dDogU2NvcGVSb290IH1dO1xuICB9XG4gIHB1YmxpYyBCYWNrR3JvdXAoaWQ6IGFueSA9IG51bGwpIHtcbiAgICBsZXQgaW5kZXggPSAxO1xuICAgIGlmIChpZCkge1xuICAgICAgaW5kZXggPSB0aGlzLmdyb3VwLmluZGV4T2YoaWQpO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAoaW5kZXgpXG4gICAgICB0aGlzLmdyb3VwLnNwbGljZSgwLCBpbmRleCk7XG4gICAgZWxzZSB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgQ3VycmVudEdyb3VwKCkge1xuICAgIGxldCBuYW1lID0gdGhpcy5ncm91cD8uWzBdO1xuICAgIGlmIChuYW1lICYmIG5hbWUgIT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvb3QnO1xuICB9XG5cbiAgcHVibGljIEN1cnJlbnRHcm91cERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5DdXJyZW50R3JvdXAoKSkgPz8gdGhpcy5kYXRhO1xuICB9XG4gIHB1YmxpYyBjaGFuZ2VHcm91cCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uZ3JvdXBDaGFuZ2UsIHtcbiAgICAgICAgZ3JvdXA6IHRoaXMuR2V0R3JvdXBOYW1lKClcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBvcGVuR3JvdXAoaWQ6IGFueSkge1xuICAgIHRoaXMuZ3JvdXAgPSBbaWQsIC4uLnRoaXMuZ3JvdXBdO1xuICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgICB0aGlzLmNoYW5nZUdyb3VwKCk7O1xuICB9XG4gIHByaXZhdGUgbGluZUNob29zZTogTGluZSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHNldExpbmVDaG9vc2Uobm9kZTogTGluZSB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpbmVDaG9vc2UpIHRoaXMubGluZUNob29zZS5BY3RpdmUoZmFsc2UpO1xuICAgIHRoaXMubGluZUNob29zZSA9IG5vZGU7XG4gICAgaWYgKHRoaXMubGluZUNob29zZSkge1xuICAgICAgdGhpcy5saW5lQ2hvb3NlLkFjdGl2ZSgpO1xuICAgICAgdGhpcy5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXRMaW5lQ2hvb3NlKCk6IExpbmUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmxpbmVDaG9vc2U7XG4gIH1cbiAgcHJpdmF0ZSBub2RlczogTm9kZUl0ZW1bXSA9IFtdO1xuICBwcml2YXRlIG5vZGVDaG9vc2U6IE5vZGVJdGVtIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgc2V0Tm9kZUNob29zZShub2RlOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm5vZGVDaG9vc2UpIHRoaXMubm9kZUNob29zZS5BY3RpdmUoZmFsc2UpO1xuICAgIHRoaXMubm9kZUNob29zZSA9IG5vZGU7XG4gICAgaWYgKHRoaXMubm9kZUNob29zZSkge1xuICAgICAgdGhpcy5ub2RlQ2hvb3NlLkFjdGl2ZSgpO1xuICAgICAgdGhpcy5zZXRMaW5lQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHsgZGF0YTogdGhpcy5ub2RlQ2hvb3NlLmRhdGEgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiB0aGlzLkN1cnJlbnRHcm91cERhdGEoKSB9KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGdldE5vZGVDaG9vc2UoKTogTm9kZUl0ZW0gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm5vZGVDaG9vc2U7XG4gIH1cbiAgcHVibGljIEFkZE5vZGVJdGVtKGRhdGE6IGFueSk6IE5vZGVJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5BZGROb2RlKGRhdGEuR2V0KCdrZXknKSwgZGF0YSk7XG4gIH1cbiAgcHVibGljIEFkZE5vZGUoa2V5Tm9kZTogc3RyaW5nLCBkYXRhOiBhbnkgPSB7fSk6IE5vZGVJdGVtIHtcbiAgICByZXR1cm4gdGhpcy5JbnNlcnROb2RlKG5ldyBOb2RlSXRlbSh0aGlzLCBrZXlOb2RlLCBkYXRhKSk7XG4gIH1cbiAgcHVibGljIEluc2VydE5vZGUobm9kZTogTm9kZUl0ZW0pOiBOb2RlSXRlbSB7XG4gICAgdGhpcy5ub2RlcyA9IFsuLi50aGlzLm5vZGVzLCBub2RlXTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBwdWJsaWMgUmVtb3ZlTm9kZShub2RlOiBOb2RlSXRlbSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMubm9kZXMuaW5kZXhPZihub2RlKTtcbiAgICB0aGlzLmRhdGEuUmVtb3ZlKCdub2RlcycsIG5vZGUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICB9XG4gIHB1YmxpYyBDbGVhck5vZGUoKSB7XG4gICAgdGhpcy5ub2Rlcz8uZm9yRWFjaChpdGVtID0+IGl0ZW0uZGVsZXRlKGZhbHNlKSk7XG4gICAgdGhpcy5ub2RlcyA9IFtdO1xuICB9XG4gIHB1YmxpYyBHZXREYXRhQWxsTm9kZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuICh0aGlzLmRhdGE/LkdldCgnbm9kZXMnKSA/PyBbXSk7XG4gIH1cbiAgcHVibGljIEdldERhdGFOb2RlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5HZXREYXRhQWxsTm9kZSgpLmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KFwiZ3JvdXBcIikgPT09IHRoaXMuQ3VycmVudEdyb3VwKCkpO1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYnV0ZVxuICAqL1xuICBwdWJsaWMgZWxDYW52YXM6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHB1YmxpYyAkbG9jazogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgem9vbV9sYXN0X3ZhbHVlOiBhbnkgPSAxO1xuICBwdWJsaWMgY29uc3RydWN0b3IoZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsTm9kZSA9IGVsTm9kZTtcbiAgICBsZXQgcHJvcGVydGllczogYW55ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pO1xuICAgIHRoaXMuZGF0YS5Jbml0RGF0YSh7fSwgcHJvcGVydGllcyk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnZGVzZ2luZXItdmlldycpXG4gICAgdGhpcy5lbENhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKFwiZGVzZ2luZXItY2FudmFzXCIpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsQ2FudmFzKTtcbiAgICB0aGlzLmVsTm9kZS50YWJJbmRleCA9IDA7XG4gICAgbmV3IERlc2dpbmVyVmlld19FdmVudCh0aGlzKTtcbiAgICB0aGlzLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLlJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIHRoaXMub24oRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgKGRhdGE6IGFueSkgPT4geyBtYWluLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIGRhdGEpOyB9KTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCAoaXRlbTogYW55KSA9PiB7XG4gICAgICB0aGlzLk9wZW4oaXRlbS5kYXRhKTtcbiAgICB9KTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLnpvb20sICh7IHpvb20gfTogYW55KSA9PiB7XG4gICAgICBpZiAoem9vbSA9PSAwKSB7XG4gICAgICAgIHRoaXMuem9vbV9yZXNldCgpO1xuICAgICAgfSBlbHNlIGlmICh6b29tID09IDEpIHtcbiAgICAgICAgdGhpcy56b29tX291dCgpO1xuICAgICAgfSBlbHNlIGlmICh6b29tID09IC0xKSB7XG4gICAgICAgIHRoaXMuem9vbV9pbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgIH0pO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0uc2V0R3JvdXAsICh7IGdyb3VwSWQgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLkJhY2tHcm91cChncm91cElkKTtcbiAgICB9KTtcbiAgICB0aGlzLmNoYW5nZUdyb3VwKCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlVmlldyh4OiBhbnksIHk6IGFueSwgem9vbTogYW55KSB7XG4gICAgdGhpcy5lbENhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KSBzY2FsZSgke3pvb219KWA7XG4gIH1cbiAgcHVibGljIFVwZGF0ZVVJKCkge1xuICAgIHRoaXMudXBkYXRlVmlldyh0aGlzLmdldFgoKSwgdGhpcy5nZXRZKCksIHRoaXMuZ2V0Wm9vbSgpKTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyVUkoZGV0YWlsOiBhbnkgPSB7fSkge1xuICAgIGlmIChkZXRhaWwuc2VuZGVyICYmIGRldGFpbC5zZW5kZXIgaW5zdGFuY2VvZiBOb2RlSXRlbSkgcmV0dXJuO1xuICAgIGlmIChkZXRhaWwuc2VuZGVyICYmIGRldGFpbC5zZW5kZXIgaW5zdGFuY2VvZiBEZXNnaW5lclZpZXcpIHtcbiAgICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5DbGVhck5vZGUoKTtcbiAgICB0aGlzLkdldERhdGFOb2RlKCkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICB0aGlzLkFkZE5vZGVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICAgIHRoaXMuR2V0QWxsTm9kZSgpLmZvckVhY2goKGl0ZW06IE5vZGVJdGVtKSA9PiB7XG4gICAgICBpdGVtLlJlbmRlckxpbmUoKTtcbiAgICB9KVxuICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgfVxuICBwdWJsaWMgT3BlbigkZGF0YTogRGF0YUZsb3cpIHtcbiAgICBpZiAoJGRhdGEgPT0gdGhpcy5kYXRhKSB7XG4gICAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF0YT8uZGlzcGF0Y2goRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIChkZXRhaWw6IGFueSkgPT4gdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgZGV0YWlsKSk7XG4gICAgdGhpcy5kYXRhID0gJGRhdGE7XG4gICAgdGhpcy5kYXRhLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCAoZGV0YWlsOiBhbnkpID0+IHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIGRldGFpbCkpO1xuICAgIHRoaXMuJGxvY2sgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3RHcm91cE5hbWUgPSAnJztcbiAgICB0aGlzLmdyb3VwRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgQ2FsY1gobnVtYmVyOiBhbnkpIHtcbiAgICByZXR1cm4gbnVtYmVyICogKHRoaXMuZWxDYW52YXMuY2xpZW50V2lkdGggLyAodGhpcy5lbE5vZGU/LmNsaWVudFdpZHRoICogdGhpcy5nZXRab29tKCkpKTtcbiAgfVxuICBwdWJsaWMgQ2FsY1kobnVtYmVyOiBhbnkpIHtcbiAgICByZXR1cm4gbnVtYmVyICogKHRoaXMuZWxDYW52YXMuY2xpZW50SGVpZ2h0IC8gKHRoaXMuZWxOb2RlPy5jbGllbnRIZWlnaHQgKiB0aGlzLmdldFpvb20oKSkpO1xuICB9XG4gIHB1YmxpYyBHZXRBbGxOb2RlKCk6IE5vZGVJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLm5vZGVzIHx8IFtdO1xuICB9XG4gIHB1YmxpYyBHZXROb2RlQnlJZChpZDogc3RyaW5nKTogTm9kZUl0ZW0gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLkdldEFsbE5vZGUoKS5maWx0ZXIobm9kZSA9PiBub2RlLkdldElkKCkgPT0gaWQpPy5bMF07XG4gIH1cblxuICBwdWJsaWMgR2V0RGF0YUJ5SWQoaWQ6IHN0cmluZyk6IERhdGFGbG93IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUFsbE5vZGUoKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uR2V0KCdpZCcpID09PSBpZCk/LlswXTtcbiAgfVxuICBjaGVja09ubHlOb2RlKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuICh0aGlzLm1haW4uZ2V0Q29udHJvbEJ5S2V5KGtleSkub25seU5vZGUpICYmIHRoaXMubm9kZXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5DaGVja0tleShrZXkpKS5sZW5ndGggPiAwO1xuICB9XG4gIHB1YmxpYyB6b29tX3JlZnJlc2goZmxnOiBhbnkgPSAwKSB7XG4gICAgbGV0IHRlbXBfem9vbSA9IGZsZyA9PSAwID8gWm9vbS5kZWZhdWx0IDogKHRoaXMuZ2V0Wm9vbSgpICsgWm9vbS52YWx1ZSAqIGZsZyk7XG4gICAgaWYgKFpvb20ubWF4ID49IHRlbXBfem9vbSAmJiB0ZW1wX3pvb20gPj0gWm9vbS5taW4pIHtcbiAgICAgIHRoaXMuc2V0WCgodGhpcy5nZXRYKCkgLyB0aGlzLnpvb21fbGFzdF92YWx1ZSkgKiB0ZW1wX3pvb20pO1xuICAgICAgdGhpcy5zZXRZKCh0aGlzLmdldFkoKSAvIHRoaXMuem9vbV9sYXN0X3ZhbHVlKSAqIHRlbXBfem9vbSk7XG4gICAgICB0aGlzLnpvb21fbGFzdF92YWx1ZSA9IHRlbXBfem9vbTtcbiAgICAgIHRoaXMuc2V0Wm9vbSh0aGlzLnpvb21fbGFzdF92YWx1ZSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB6b29tX2luKCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKDEpO1xuICB9XG4gIHB1YmxpYyB6b29tX291dCgpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgtMSk7XG4gIH1cbiAgcHVibGljIHpvb21fcmVzZXQoKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goMCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBFdmVudEVudW0sIElNYWluLCBTY29wZVJvb3QgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgVmFyaWFibGVWaWV3IHtcbiAgcHJpdmF0ZSB2YXJpYWJsZXM6IERhdGFGbG93W10gfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdmFyaWFibGUnKTtcbiAgICB0aGlzLm1haW4ub25TYWZlKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgKHsgZGF0YSB9OiBhbnkpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uU2FmZShFdmVudEVudW0ub3BlblByb2plY3QsICgpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdGhpcy5tYWluLm9uU2FmZShFdmVudEVudW0uZ3JvdXBDaGFuZ2UsICgpID0+IHtcbiAgICAgIHRoaXMuUmVuZGVyKCk7XG4gICAgfSlcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgdGhpcy52YXJpYWJsZXMgPSB0aGlzLm1haW4uZ2V0VmFyaWFibGUoKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8dGFibGUgYm9yZGVyPVwiMVwiPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtbmFtZVwiPk5hbWU8L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtdHlwZVwiPlR5cGU8L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidmFyaWFibGUtc2NvcGVcIj5TY29wZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1kZWZhdWx0XCI+RGVmYXVsdDwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1idXR0b25cIj48L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgYDtcbiAgICBpZiAodGhpcy52YXJpYWJsZXMpIHtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy52YXJpYWJsZXMpIHtcbiAgICAgICAgbmV3IFZhcmlhYmxlSXRlbShpdGVtLCB0aGlzKS5SZW5kZXJTY29wZSh0aGlzLm1haW4uZ2V0R3JvdXBDdXJyZW50KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY2xhc3MgVmFyaWFibGVJdGVtIHtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgcHJpdmF0ZSBuYW1lSW5wdXQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgcHJpdmF0ZSB0eXBlSW5wdXQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gIHByaXZhdGUgc2NvcGVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpdmF0ZSB2YWx1ZURlZmF1bHRJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSB2YXJpYWJsZTogRGF0YUZsb3csIHByaXZhdGUgcGFyZW50OiBWYXJpYWJsZVZpZXcpIHtcbiAgICAodGhpcy5uYW1lSW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUuR2V0KCduYW1lJyk7XG4gICAgKHRoaXMudmFsdWVEZWZhdWx0SW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUuR2V0KCdpbml0YWxWYWx1ZScpID8/ICcnO1xuICAgICh0aGlzLnR5cGVJbnB1dCBhcyBhbnkpLnZhbHVlID0gdGhpcy52YXJpYWJsZS5HZXQoJ3R5cGUnKSA/PyAnJztcbiAgICBmb3IgKGxldCBpdGVtIG9mIFsndGV4dCcsICdudW1iZXInLCAnZGF0ZScsICdvYmplY3QnXSkge1xuICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgb3B0aW9uLnRleHQgPSBpdGVtO1xuICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbTtcbiAgICAgIHRoaXMudHlwZUlucHV0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuICAgIGxldCBuYW1lQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBuYW1lQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMubmFtZUlucHV0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChuYW1lQ29sdW1uKTtcbiAgICB0aGlzLm5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ25hbWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5uYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ25hbWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBsZXQgdHlwZUNvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdHlwZUNvbHVtbi5hcHBlbmRDaGlsZCh0aGlzLnR5cGVJbnB1dCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodHlwZUNvbHVtbik7XG4gICAgdGhpcy50eXBlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ3R5cGUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgbGV0IHNjb3BlQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBzY29wZUNvbHVtbi5hcHBlbmRDaGlsZCh0aGlzLnNjb3BlSW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHNjb3BlQ29sdW1uKTtcblxuXG4gICAgbGV0IHZhbHVlRGVmYXVsdENvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdmFsdWVEZWZhdWx0Q29sdW1uLmFwcGVuZENoaWxkKHRoaXMudmFsdWVEZWZhdWx0SW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHZhbHVlRGVmYXVsdENvbHVtbik7XG4gICAgdGhpcy52YWx1ZURlZmF1bHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnaW5pdGFsVmFsdWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy52YWx1ZURlZmF1bHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ2luaXRhbFZhbHVlJywgZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgbGV0IGJ1dHRvblJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ1dHRvblJlbW92ZS5pbm5lckhUTUwgPSBgLWA7XG4gICAgYnV0dG9uUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgcGFyZW50Lm1haW4ucmVtb3ZlVmFyaWFibGUodmFyaWFibGUpO1xuICAgIH0pO1xuICAgIGxldCBidXR0b25SZW1vdmVDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGJ1dHRvblJlbW92ZUNvbHVtbi5hcHBlbmRDaGlsZChidXR0b25SZW1vdmUpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKGJ1dHRvblJlbW92ZUNvbHVtbik7XG5cbiAgICBwYXJlbnQuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlIHRib2R5Jyk/LmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcblxuICB9XG4gIFJlbmRlclNjb3BlKGdyb3VwOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5zY29wZUlucHV0LmlubmVySFRNTCA9ICcnO1xuICAgIGlmIChncm91cCkge1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiBncm91cCkge1xuICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIG9wdGlvbi50ZXh0ID0gaXRlbS50ZXh0O1xuICAgICAgICBvcHRpb24udmFsdWUgPSBpdGVtLmlkO1xuICAgICAgICB0aGlzLnNjb3BlSW5wdXQucHJlcGVuZChvcHRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICAodGhpcy5zY29wZUlucHV0IGFzIGFueSkudmFsdWUgPSB0aGlzLnZhcmlhYmxlLkdldCgnc2NvcGUnKTtcbiAgICB0aGlzLnNjb3BlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IGFueSkgPT4ge1xuICAgICAgdGhpcy52YXJpYWJsZS5TZXQoJ3Njb3BlJywgZS50YXJnZXQudmFsdWUpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBUb29sYm94VmlldyB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdG9vbGJveCcpO1xuICAgIHRoaXMuUmVuZGVyKCk7XG4gIH1cbiAgcHVibGljIFJlbmRlcigpIHtcbiAgICBsZXQgY29udHJvbHMgPSB0aGlzLm1haW4uZ2V0Q29udHJvbEFsbCgpO1xuICAgIGxldCBncm91cDogYW55ID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhjb250cm9scykuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBsZXQgZ3JvdXBOYW1lID0gY29udHJvbHNbaXRlbV0uZ3JvdXAgPz8gXCJvdGhlclwiO1xuICAgICAgaWYgKGdyb3VwW2dyb3VwTmFtZV0gPT09IHVuZGVmaW5lZCkgZ3JvdXBbZ3JvdXBOYW1lXSA9IFtdO1xuICAgICAgZ3JvdXBbZ3JvdXBOYW1lXSA9IFtcbiAgICAgICAgLi4uZ3JvdXBbZ3JvdXBOYW1lXSxcbiAgICAgICAgY29udHJvbHNbaXRlbV1cbiAgICAgIF07XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoZ3JvdXApLmZvckVhY2goKGl0ZW06IGFueSwgaW5kZXgpID0+IHtcbiAgICAgIGxldCBpdGVtQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBpdGVtQm94LmNsYXNzTGlzdC5hZGQoJ25vZGUtYm94Jyk7XG4gICAgICBpdGVtQm94LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgaXRlbUJveC5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxwIGNsYXNzPVwibm9kZS1ib3hfdGl0bGVcIj4ke2l0ZW19PC9wPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1ib3hfYm9ieVwiPjwvZGl2PlxuICAgICAgYDtcbiAgICAgIGl0ZW1Cb3gucXVlcnlTZWxlY3RvcignLm5vZGUtYm94X3RpdGxlJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAoaXRlbUJveC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgaXRlbUJveC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1Cb3guY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3IgKGxldCBfaXRlbSBvZiBncm91cFtpdGVtXSkge1xuICAgICAgICBsZXQgbm9kZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnbm9kZS1pdGVtJyk7XG4gICAgICAgIG5vZGVJdGVtLnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcbiAgICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLW5vZGUnLCBfaXRlbS5rZXkpO1xuICAgICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtfaXRlbS5pY29ufSA8c3Bhbj4ke19pdGVtLm5hbWV9PC9zcGFuYDtcbiAgICAgICAgbm9kZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5kcmFnU3RhcnQuYmluZCh0aGlzKSlcbiAgICAgICAgbm9kZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIHRoaXMuZHJhZ2VuZC5iaW5kKHRoaXMpKVxuICAgICAgICBpdGVtQm94LnF1ZXJ5U2VsZWN0b3IoJy5ub2RlLWJveF9ib2J5Jyk/LmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKGl0ZW1Cb3gpO1xuICAgIH0pO1xuICB9XG4gIHByaXZhdGUgZHJhZ2VuZChlOiBhbnkpIHtcbiAgICB0aGlzLm1haW4uc2V0Q29udHJvbENob29zZShudWxsKTtcbiAgfVxuXG4gIHByaXZhdGUgZHJhZ1N0YXJ0KGU6IGFueSkge1xuICAgIGxldCBrZXkgPSBlLnRhcmdldC5jbG9zZXN0KFwiLm5vZGUtaXRlbVwiKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbm9kZScpO1xuICAgIHRoaXMubWFpbi5zZXRDb250cm9sQ2hvb3NlKGtleSk7XG4gICAgaWYgKGUudHlwZSAhPT0gXCJ0b3VjaHN0YXJ0XCIpIHtcbiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJub2RlXCIsIGtleSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVudW0sIElNYWluLCBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0VmlldyB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtcHJvamVjdCcpO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0uY2hhbmdlVmFyaWFibGUsIHRoaXMuUmVuZGVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIHRoaXMuUmVuZGVyLmJpbmQodGhpcykpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYGA7XG4gICAgbGV0IHByb2plY3RzID0gdGhpcy5tYWluLmdldFByb2plY3RBbGwoKTtcbiAgICBwcm9qZWN0cy5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdykgPT4ge1xuICAgICAgbGV0IG5vZGVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBub2RlSXRlbS5jbGFzc0xpc3QuYWRkKCdub2RlLWl0ZW0nKTtcbiAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIG5vZGVJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJywgaXRlbS5HZXQoJ2lkJykpO1xuICAgICAgaXRlbS5vblNhZmUoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9X25hbWVgLCAoKSA9PiB7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMubWFpbi5jaGVja1Byb2plY3RPcGVuKGl0ZW0pKSB7XG4gICAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgICAgbm9kZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMubWFpbi5zZXRQcm9qZWN0T3BlbihpdGVtKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbE5vZGU/LmFwcGVuZENoaWxkKG5vZGVJdGVtKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvSUZsb3dcIjtcblxuZXhwb3J0IGNsYXNzIFRhYlByb2plY3RWaWV3IHtcbiAgcHJpdmF0ZSAkZWxCb2J5OiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHJpdmF0ZSAkZWxXYXJwOiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHJpdmF0ZSAkYnRuTmV4dDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIHByaXZhdGUgJGJ0bkJhY2s6IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwcml2YXRlICRidG5BZGQ6IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwcml2YXRlICRidG5ab29tSW46IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwcml2YXRlICRidG5ab29tT3V0OiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHJpdmF0ZSAkYnRuWm9vbVJlc2V0OiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHJpdmF0ZSAkYnRuUnVuUHJvamVjdDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdGFiLXByb2plY3QnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgbGV0IHNjcm9sbExlZnRDYWNoZSA9IHRoaXMuJGVsV2FycD8uc2Nyb2xsTGVmdCA/PyAwO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfX3NlYXJjaFwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9fbGlzdFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1wcm9qZWN0X2J1dHRvblwiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWJhY2tcIj48aSBjbGFzcz1cImZhcyBmYS1hbmdsZS1sZWZ0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3Rfd2FycFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfX2JvZHlcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9idXR0b25cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1uZXh0XCI+PGkgY2xhc3M9XCJmYXMgZmEtYW5nbGUtcmlnaHRcIj48L2k+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9idXR0b25cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1hZGRcIj48aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfYnV0dG9uXCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tcnVuLXByb2plY3RcIj48aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPiBSdW48L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1wcm9qZWN0X2J1dHRvblwiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLXpvb20taW5cIj48aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtbWludXNcIj48L2k+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9idXR0b25cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi16b29tLW91dFwiPjxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1wbHVzXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfYnV0dG9uXCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tem9vbS1yZXNldFwiPjxpIGNsYXNzPVwiZmFzIGZhLXJlZG9cIj48L2k+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgO1xuICAgIHRoaXMuJGVsV2FycCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy50YWItcHJvamVjdF93YXJwJyk7XG4gICAgdGhpcy4kZWxCb2J5ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnRhYi1wcm9qZWN0X19ib2R5Jyk7XG4gICAgdGhpcy4kYnRuQmFjayA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5idG4tYmFjaycpO1xuICAgIHRoaXMuJGJ0bk5leHQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuLW5leHQnKTtcbiAgICB0aGlzLiRidG5BZGQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuLWFkZCcpO1xuICAgIHRoaXMuJGJ0blpvb21JbiA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5idG4tem9vbS1pbicpO1xuICAgIHRoaXMuJGJ0blpvb21PdXQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuLXpvb20tb3V0Jyk7XG4gICAgdGhpcy4kYnRuWm9vbVJlc2V0ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bi16b29tLXJlc2V0Jyk7XG4gICAgdGhpcy4kYnRuUnVuUHJvamVjdCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5idG4tcnVuLXByb2plY3QnKTtcbiAgICBjb25zdCBmblVwZGF0ZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLiRlbFdhcnApIHtcbiAgICAgICAgLy8gbGV0IHNjcm9sbExlZnQgPSB0aGlzLiRlbFdhcnAuc2Nyb2xsTGVmdDtcbiAgICAgICAgLy8gdmFyIG1heFNjcm9sbExlZnQgPSB0aGlzLiRlbFdhcnAuc2Nyb2xsV2lkdGggLSB0aGlzLiRlbFdhcnAuY2xpZW50V2lkdGg7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNjcm9sbExlZnQpO1xuICAgICAgICAvLyBpZiAodGhpcy4kYnRuQmFjayAmJiBzY3JvbGxMZWZ0IDw9IDApIHtcbiAgICAgICAgLy8gICB0aGlzLiRidG5CYWNrLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApXG4gICAgICAgIC8vIH0gZWxzZSBpZiAodGhpcy4kYnRuQmFjayAmJiBzY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bkJhY2sucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmICh0aGlzLiRidG5OZXh0ICYmIHNjcm9sbExlZnQgPj0gbWF4U2Nyb2xsTGVmdCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bk5leHQuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YClcbiAgICAgICAgLy8gfSBlbHNlIGlmICh0aGlzLiRidG5OZXh0ICYmIHNjcm9sbExlZnQgPD0gMCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bk5leHQucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuJGVsV2FycD8uYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBldmVudCA9PiB7XG4gICAgICBmblVwZGF0ZVNjcm9sbCgpO1xuICAgIH0sIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICBmblVwZGF0ZVNjcm9sbCgpO1xuICAgIHRoaXMuJGJ0bkJhY2s/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuJGVsV2FycCkge1xuICAgICAgICB0aGlzLiRlbFdhcnAuc2Nyb2xsTGVmdCAtPSAxMDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy4kYnRuTmV4dD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy4kZWxXYXJwKSB7XG4gICAgICAgIHRoaXMuJGVsV2FycC5zY3JvbGxMZWZ0ICs9IDEwMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLiRidG5BZGQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5tYWluLm5ld1Byb2plY3QoXCJcIik7XG4gICAgfSk7XG4gICAgdGhpcy4kYnRuWm9vbUluPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uem9vbSwgeyB6b29tOiAtMSB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiRidG5ab29tT3V0Py5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uem9vbSwgeyB6b29tOiAxIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJGJ0blpvb21SZXNldD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnpvb20sIHsgem9vbTogMCB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiRidG5SdW5Qcm9qZWN0Py5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5ydW5Qcm9qZWN0KCk7XG4gICAgfSlcbiAgICBsZXQgcHJvamVjdHMgPSB0aGlzLm1haW4uZ2V0UHJvamVjdEFsbCgpO1xuICAgIGxldCBpdGVtQWN0aXZlOiBhbnkgPSB1bmRlZmluZWQ7XG4gICAgZm9yIChsZXQgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgbGV0IHByb2plY3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBsZXQgcHJvamVjdE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBsZXQgcHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbGV0IHByb2plY3RCdXR0b25SZW1vdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIHByb2plY3RJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJywgcHJvamVjdC5HZXQoJ2lkJykpO1xuICAgICAgcHJvamVjdE5hbWUuaW5uZXJIVE1MID0gcHJvamVjdC5HZXQoJ25hbWUnKTtcbiAgICAgIHByb2plY3ROYW1lLmNsYXNzTGlzdC5hZGQoJ3Byby1uYW1lJyk7XG4gICAgICBwcm9qZWN0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Byby1idXR0b24nKTtcbiAgICAgIHByb2plY3RCdXR0b25SZW1vdmUuaW5uZXJIVE1MID0gYDxpIGNsYXNzPVwiZmFzIGZhLW1pbnVzXCI+PC9pPmA7XG4gICAgICBwcm9qZWN0QnV0dG9uLmFwcGVuZENoaWxkKHByb2plY3RCdXR0b25SZW1vdmUpO1xuICAgICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQocHJvamVjdE5hbWUpO1xuICAgICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQocHJvamVjdEJ1dHRvbik7XG5cbiAgICAgIHByb2plY3RJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtaXRlbScpO1xuICAgICAgaWYgKHRoaXMubWFpbi5jaGVja1Byb2plY3RPcGVuKHByb2plY3QpKSB7XG4gICAgICAgIHByb2plY3RJdGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBpdGVtQWN0aXZlID0gcHJvamVjdEl0ZW07XG4gICAgICB9XG4gICAgICBwcm9qZWN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmICghcHJvamVjdEJ1dHRvblJlbW92ZS5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSAmJiBlLnRhcmdldCAhPSBwcm9qZWN0QnV0dG9uUmVtb3ZlKSB7XG4gICAgICAgICAgdGhpcy5tYWluLnNldFByb2plY3RPcGVuKHByb2plY3QpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHByb2plY3RCdXR0b25SZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICB0aGlzLm1haW4ucmVtb3ZlUHJvamVjdChwcm9qZWN0KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kZWxCb2J5Py5hcHBlbmRDaGlsZChwcm9qZWN0SXRlbSk7XG4gICAgICBwcm9qZWN0Lm9uU2FmZShFdmVudEVudW0uZGF0YUNoYW5nZSArICdfbmFtZScsICgpID0+IHtcbiAgICAgICAgcHJvamVjdE5hbWUuaW5uZXJIVE1MID0gcHJvamVjdC5HZXQoJ25hbWUnKTtcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmICh0aGlzLiRlbFdhcnApIHtcbiAgICAgIGlmIChpdGVtQWN0aXZlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLiRlbFdhcnAuc2Nyb2xsTGVmdCA9IGl0ZW1BY3RpdmUub2Zmc2V0TGVmdCAtIDIwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxXYXJwLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0Q2FjaGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVudW0sIElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcblxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJHcm91cFZpZXcge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLWJyZWFkY3J1bWItZ3JvdXAnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLmdyb3VwQ2hhbmdlLCAoeyBncm91cCB9OiBhbnkpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyKGdyb3VwKVxuICAgIH0pO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICcnO1xuICB9XG4gIHB1YmxpYyByZW5kZXIoZ3JvdXA6IGFueSkge1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICcnO1xuICAgIGlmICghdGhpcy5lbE5vZGUgfHwgIWdyb3VwKSByZXR1cm47XG5cblxuICAgIGxldCBlbFVMID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICBsZXQgaXNGaXJzdCA9IHRydWU7XG4gICAgZ3JvdXAuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBpZiAoIWlzRmlyc3QpIHtcbiAgICAgICAgbGV0IGVsTEkyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgZWxMSTIuaW5uZXJIVE1MID0gXCI+XCI7XG4gICAgICAgIGVsVUwucHJlcGVuZChlbExJMik7XG4gICAgICB9XG4gICAgICBsZXQgZWxMSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBlbExJLmlubmVySFRNTCA9IGl0ZW0udGV4dDtcbiAgICAgIGVsTEkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnNldEdyb3VwSWQoaXRlbS5pZCkpO1xuICAgICAgZWxMSS5jbGFzc0xpc3QuYWRkKCdncm91cC1pdGVtJyk7XG4gICAgICBlbFVMLnByZXBlbmQoZWxMSSk7XG4gICAgICBpc0ZpcnN0ID0gZmFsc2U7XG4gICAgfSk7XG4gICAgbGV0IGVsV2FycCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsV2FycC5jbGFzc0xpc3QuYWRkKCdncm91cC13YXJwJyk7XG4gICAgbGV0IGVsQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsQm9keS5jbGFzc0xpc3QuYWRkKCdncm91cC1ib2R5Jyk7XG4gICAgZWxXYXJwLmFwcGVuZENoaWxkKGVsQm9keSk7XG4gICAgZWxCb2R5LmFwcGVuZENoaWxkKGVsVUwpO1xuXG4gICAgaWYgKGdyb3VwLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxldCBlbEJ1dHR1bkRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZWxCdXR0dW5EaXYuY2xhc3NMaXN0LmFkZCgnZ3JvdXAtYnV0dG9uJyk7XG4gICAgICBlbEJ1dHR1bkRpdi5pbm5lckhUTUwgPSBgPGJ1dHRvbj48aSBjbGFzcz1cImZhcyBmYS1yZWRvXCI+PC9pPjwvYnV0dG9uPmA7XG4gICAgICBlbEJ1dHR1bkRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuc2V0R3JvdXBJZChncm91cFsxXS5pZCkpO1xuICAgICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoZWxCdXR0dW5EaXYpO1xuICAgIH1cbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChlbFdhcnApO1xuICB9XG4gIHByaXZhdGUgc2V0R3JvdXBJZChncm91cElkOiBhbnkpIHtcbiAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNldEdyb3VwLCB7IGdyb3VwSWQgfSk7XG4gIH1cbn1cbiIsIlxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IERhdGFWaWV3IH0gZnJvbSBcIi4uL2NvcmUvRGF0YVZpZXdcIjtcbmltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvSUZsb3dcIjtcblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5VmlldyB7XG4gIHByaXZhdGUgbGFzdERhdGE6IERhdGFGbG93IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIGhpZGVLZXlzOiBzdHJpbmdbXSA9IFsnbGluZXMnLCAnbm9kZXMnLCAnZ3JvdXBzJywgJ3ZhcmlhYmxlJywgJ3gnLCAneScsICd6b29tJ107XG4gIHByaXZhdGUgc29ydEtleXM6IHN0cmluZ1tdID0gWydpZCcsICdrZXknLCAnbmFtZScsICdncm91cCddO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5LXZpZXcnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgKGRldGFpbDogYW55KSA9PiB7XG4gICAgICB0aGlzLlJlbmRlcihkZXRhaWwuZGF0YSk7XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIFJlbmRlcihkYXRhOiBEYXRhRmxvdykge1xuICAgIGlmICh0aGlzLmxhc3REYXRhID09IGRhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5sYXN0RGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IGRhdGEuZ2V0UHJvcGVydGllcygpO1xuICAgIHRoaXMuc29ydEtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh0aGlzLmhpZGVLZXlzLmluY2x1ZGVzKGtleSkgfHwgIXByb3BlcnRpZXNba2V5XSkgcmV0dXJuO1xuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XG4gICAgICBEYXRhVmlldy5CaW5kRWxlbWVudChwcm9wZXJ0eVZhbHVlLCBkYXRhLCB0aGlzLm1haW4sIGtleSk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XG4gICAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChwcm9wZXJ0eUl0ZW0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAodGhpcy5oaWRlS2V5cy5pbmNsdWRlcyhrZXkpIHx8IHRoaXMuc29ydEtleXMuaW5jbHVkZXMoa2V5KSkgcmV0dXJuO1xuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XG4gICAgICBEYXRhVmlldy5CaW5kRWxlbWVudChwcm9wZXJ0eVZhbHVlLCBkYXRhLCB0aGlzLm1haW4sIGtleSk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XG4gICAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChwcm9wZXJ0eUl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByb3RlY3RlZCBlbENvbnRlbnQ6IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSAnRG9ja0Jhc2UnO1xuICB9XG5cbiAgcHVibGljIEJveEluZm8odGl0bGU6IHN0cmluZywgJGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QucmVtb3ZlKCd2cy1ib3hpbmZvJyk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtYm94aW5mbycpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb19oZWFkZXJcIj48c3BhbiBjbGFzcz1cInZzLWJveGluZm9fdGl0bGVcIj4ke3RpdGxlfTwvc3Bhbj48c3BhbiBjbGFzcz1cInZzLWJveGluZm9fYnV0dG9uXCI+PC9zcGFuPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX3dhcnBcIj48ZGl2IGNsYXNzPVwidnMtYm94aW5mb19jb250ZW50XCI+PC9kaXY+PC9kaXY+YDtcbiAgICB0aGlzLmVsQ29udGVudCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy52cy1ib3hpbmZvX2NvbnRlbnQnKTtcbiAgICBpZiAoJGNhbGxiYWNrKSB7XG4gICAgICAkY2FsbGJhY2sodGhpcy5lbENvbnRlbnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgVG9vbGJveFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbnRyb2xEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1jb250cm9sJyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdDb250cm9sJywgKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICBuZXcgVG9vbGJveFZpZXcobm9kZSwgdGhpcy5tYWluKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4sIGdldFRpbWUgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgVmFyaWFibGVWaWV3IH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBWYXJpYWJsZURvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXZhcmlhYmxlJyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdWYXJpYWJsZScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbmV3IFZhcmlhYmxlVmlldyhub2RlLCBtYWluKTtcbiAgICB9KTtcbiAgICBsZXQgJG5vZGVSaWdodDogSFRNTEVsZW1lbnQgfCBudWxsID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9faGVhZGVyIC52cy1ib3hpbmZvX2J1dHRvbicpO1xuICAgIGlmICgkbm9kZVJpZ2h0KSB7XG4gICAgICAkbm9kZVJpZ2h0LmlubmVySFRNTCA9IGBgO1xuICAgICAgbGV0IGJ1dHRvbk5ldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgJG5vZGVSaWdodD8uYXBwZW5kQ2hpbGQoYnV0dG9uTmV3KTtcbiAgICAgIGJ1dHRvbk5ldy5pbm5lckhUTUwgPSBgTmV3IFZhcmlhYmxlYDtcbiAgICAgIGJ1dHRvbk5ldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLm5ld1ZhcmlhYmxlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFWaWV3LCBEYXRhRmxvdywgRXZlbnRFbnVtLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBQcm9wZXJ0eVZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvUHJvcGVydHlWaWV3XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eURvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9wZXJ0eScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbmV3IFByb3BlcnR5Vmlldyhub2RlLCBtYWluKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXdEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwcml2YXRlIHZpZXc6IERlc2dpbmVyVmlldyB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG5cbiAgICB0aGlzLnZpZXcgPSBuZXcgRGVzZ2luZXJWaWV3KHRoaXMuZWxOb2RlLCBtYWluKTtcblxuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiwgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgVGFiUHJvamVjdFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFRhYkRvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIG5ldyBUYWJQcm9qZWN0Vmlldyh0aGlzLmVsTm9kZSwgbWFpbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluLCBnZXRUaW1lIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IEJyZWFkY3J1bWJHcm91cFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJHcm91cERvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIG5ldyBCcmVhZGNydW1iR3JvdXBWaWV3KHRoaXMuZWxOb2RlLCBtYWluKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4sIERvY2tFbnVtIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IENvbnRyb2xEb2NrIH0gZnJvbSBcIi4vQ29udHJvbERvY2tcIjtcbmltcG9ydCB7IFZhcmlhYmxlRG9jayB9IGZyb20gXCIuL1ZhcmlhYmxlRG9ja1wiO1xuaW1wb3J0IHsgUHJvamVjdERvY2sgfSBmcm9tIFwiLi9Qcm9qZWN0RG9ja1wiO1xuaW1wb3J0IHsgUHJvcGVydHlEb2NrIH0gZnJvbSBcIi4vUHJvcGVydHlEb2NrXCI7XG5pbXBvcnQgeyBWaWV3RG9jayB9IGZyb20gXCIuL1ZpZXdEb2NrXCI7XG5pbXBvcnQgeyBUYWJEb2NrIH0gZnJvbSBcIi4vVGFiRG9ja1wiO1xuaW1wb3J0IHsgQnJlYWRjcnVtYkdyb3VwRG9jayB9IGZyb20gXCIuL0JyZWFkY3J1bWJHcm91cERvY2tcIjtcblxuZXhwb3J0IGNsYXNzIERvY2tNYW5hZ2VyIHtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IGFueSA9IHt9O1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHsgfVxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSB7fTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ubGVmdCwgQ29udHJvbERvY2spO1xuICAgIC8vdGhpcy5hZGREb2NrKERvY2tFbnVtLmxlZnQsIFByb2plY3REb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ucmlnaHQsIFByb3BlcnR5RG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnRvcCwgVGFiRG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmJvdHRvbSwgQnJlYWRjcnVtYkdyb3VwRG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmJvdHRvbSwgVmFyaWFibGVEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0udmlldywgVmlld0RvY2spO1xuXG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICB9XG4gIHB1YmxpYyBhZGREb2NrKCRrZXk6IHN0cmluZywgJHZpZXc6IGFueSkge1xuICAgIGlmICghdGhpcy4kZG9ja01hbmFnZXJbJGtleV0pXG4gICAgICB0aGlzLiRkb2NrTWFuYWdlclska2V5XSA9IFtdO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldID0gWy4uLnRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldLCAkdmlld107XG4gIH1cblxuICBwdWJsaWMgUmVuZGVyVUkoKSB7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInZzLWxlZnQgdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInZzLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLXRvcCB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy12aWV3IHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLWJvdHRvbSB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1yaWdodCB2cy1kb2NrXCI+PC9kaXY+XG4gICAgYDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRkb2NrTWFuYWdlcikuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGxldCBxdWVyeVNlbGVjdG9yID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7a2V5fWApO1xuICAgICAgaWYgKHF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy4kZG9ja01hbmFnZXJba2V5XS5mb3JFYWNoKCgkaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgbmV3ICRpdGVtKHF1ZXJ5U2VsZWN0b3IsIHRoaXMubWFpbik7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBDb250cm9sID0ge1xuICBub2RlX2JlZ2luOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXBsYXlcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdCZWdpbicsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGNsYXNzOiAnJyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAxLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfZW5kOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXN0b3BcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdFbmQnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIGxlZnQ6IDEsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfaWY6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtZXF1YWxzXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnSWYnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBjbGFzczogJ3ZzLWNvbnRlbnQtZmxleCcsXG4gICAgaHRtbDogYDxkaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4gc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0XCI+VGhlbjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAxXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3BhbiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHRcIj5UaGVuPC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuIHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodFwiPlRoZW48L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwM1wiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4gc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0XCI+VGhlbjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDA0XCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3BhbiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHRcIj5UaGVuPC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDVcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuIHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodFwiPlRoZW48L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNlwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4gc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0XCI+VGhlbjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDA3XCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3BhbiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHRcIj5FbHNlPC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDhcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICBgLFxuICAgIHNjcmlwdDogYGAsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIGRvdDoge1xuICAgICAgbGVmdDogMSxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gIH0sXG4gIG5vZGVfZ3JvdXA6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnR3JvdXAnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bkdvR3JvdXAgbm9kZS1mb3JtLWNvbnRyb2xcIj5HbzwvYnV0dG9uPjwvZGl2PicsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9vcHRpb246IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnT3B0aW9uJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMSxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiBgXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAzXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNFwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDVcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9wcm9qZWN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLW9iamVjdC1ncm91cFwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ1Byb2plY3QnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PHNlbGVjdCBjbGFzcz1cIm5vZGUtZm9ybS1jb250cm9sXCIgbm9kZTptb2RlbD1cInByb2plY3RcIj48L3NlbGVjdD48L2Rpdj4nLFxuICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGtleTogXCJwcm9qZWN0XCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIHNlbGVjdDogdHJ1ZSxcbiAgICAgICAgZGF0YVNlbGVjdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBtYWluLmdldFByb2plY3RBbGwoKS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uR2V0KCdpZCcpLFxuICAgICAgICAgICAgICB0ZXh0OiBpdGVtLkdldCgnbmFtZScpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBJTWFpbiwgY29tcGFyZVNvcnQsIEV2ZW50RW51bSwgUHJvcGVydHlFbnVtLCBFdmVudEZsb3csIGdldFRpbWUsIFNjb3BlUm9vdCwgaXNGdW5jdGlvbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcblxuZXhwb3J0IGNsYXNzIFN5c3RlbUJhc2UgaW1wbGVtZW50cyBJTWFpbiB7XG4gIHByaXZhdGUgJGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KHRoaXMpO1xuICBwcml2YXRlICRwcm9qZWN0T3BlbjogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJHByb3BlcnRpZXM6IGFueSA9IHt9O1xuICBwcml2YXRlICRjb250cm9sOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdyA9IG5ldyBFdmVudEZsb3coKTtcbiAgcHJpdmF0ZSAkY29udHJvbENob29zZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgJGNoZWNrT3B0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgJGdyb3VwOiBhbnk7XG4gIHByaXZhdGUgJGluZGV4UHJvamVjdDogbnVtYmVyID0gLTE7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0uc29sdXRpb25dID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFByb3BlcnR5RW51bS5zb2x1dGlvblxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYHNvbHV0aW9uLSR7Z2V0VGltZSgpfWAsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICB9LFxuICAgICAgcHJvamVjdDoge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgYCxcbiAgICAgIH0sXG4gICAgICBwcm9qZWN0czoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0ubGluZV0gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLmxpbmVcbiAgICAgIH0sXG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICBmcm9tSW5kZXg6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHRvOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB0b0luZGV4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vc2V0IHByb2plY3RcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5tYWluXSA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGdldFRpbWUoKVxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYEZsb3cgJHt0aGlzLiRpbmRleFByb2plY3QrK31gLFxuICAgICAgICBlZGl0OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0ubWFpblxuICAgICAgfSxcbiAgICAgIHZhcmlhYmxlOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9LFxuICAgICAgZ3JvdXBzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9LFxuICAgICAgbm9kZXM6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXNdID0ge1xuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5ncm91cENhdmFzXG4gICAgICB9LFxuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgICB4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB6b29tOiB7XG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICAgIH0sXG4gICAgfVxuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLnZhcmlhYmxlXSA9IHtcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0udmFyaWFibGVcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGB2YXIke2dldFRpbWUoKX1gXG4gICAgICB9LFxuICAgICAgdHlwZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiAndGV4dCdcbiAgICAgIH0sXG4gICAgICBzY29wZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBTY29wZVJvb3RcbiAgICAgIH0sXG4gICAgICBpbml0YWxWYWx1ZToge1xuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfSxcbiAgICB9XG4gICAgdGhpcy5vblNhZmUoRXZlbnRFbnVtLmdyb3VwQ2hhbmdlLCAoeyBncm91cCB9OiBhbnkpID0+IHtcbiAgICAgIHRoaXMuJGdyb3VwID0gZ3JvdXA7XG4gICAgfSlcbiAgfVxuICBuZXdTb2x1dGlvbigkbmFtZTogc3RyaW5nID0gJycpOiB2b2lkIHtcbiAgICB0aGlzLiRpbmRleFByb2plY3QgPSAxO1xuICAgIHRoaXMub3BlblNvbHV0aW9uKHsgbmFtZTogJG5hbWUgfSk7XG4gIH1cbiAgb3BlblNvbHV0aW9uKCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLiRkYXRhLkluaXREYXRhKCRkYXRhLCB0aGlzLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLnNvbHV0aW9uKSk7XG4gICAgdGhpcy5vcGVuUHJvamVjdCh0aGlzLiRkYXRhLkdldCgncHJvamVjdHMnKT8uWzBdID8/IHt9KTtcbiAgfVxuICByZW1vdmVWYXJpYWJsZSh2YXJpYmFsZTogRGF0YUZsb3cpOiB2b2lkIHtcbiAgICB0aGlzLiRwcm9qZWN0T3Blbj8uUmVtb3ZlKCd2YXJpYWJsZScsIHZhcmliYWxlKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgeyBkYXRhOiB2YXJpYmFsZSB9KTtcbiAgfVxuICBhZGRWYXJpYWJsZSgpOiBEYXRhRmxvdyB7XG4gICAgbGV0IHZhcmliYWxlID0gbmV3IERhdGFGbG93KHRoaXMsIHsga2V5OiBQcm9wZXJ0eUVudW0udmFyaWFibGUsIHNjb3BlOiB0aGlzLmdldEdyb3VwQ3VycmVudCgpPy5bMF0/LmlkIH0pO1xuICAgIHRoaXMuJHByb2plY3RPcGVuPy5BcHBlbmQoJ3ZhcmlhYmxlJywgdmFyaWJhbGUpO1xuICAgIHJldHVybiB2YXJpYmFsZTtcbiAgfVxuICBuZXdWYXJpYWJsZSgpOiBEYXRhRmxvdyB7XG4gICAgbGV0IHZhcmliYWxlID0gdGhpcy5hZGRWYXJpYWJsZSgpO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZVZhcmlhYmxlLCB7IGRhdGE6IHZhcmliYWxlIH0pO1xuICAgIHJldHVybiB2YXJpYmFsZTtcbiAgfVxuICBnZXRWYXJpYWJsZSgpOiBEYXRhRmxvd1tdIHtcbiAgICBsZXQgYXJyOiBhbnkgPSBbXTtcbiAgICBpZiAodGhpcy4kcHJvamVjdE9wZW4pIHtcbiAgICAgIGFyciA9IHRoaXMuJHByb2plY3RPcGVuLkdldChcInZhcmlhYmxlXCIpO1xuICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIHRoaXMuJHByb2plY3RPcGVuLlNldCgndmFyaWFibGUnLCBhcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyLmZpbHRlcigoaXRlbTogYW55KSA9PiB0aGlzLmdldEdyb3VwQ3VycmVudCgpLmZpbmRJbmRleCgoX2dyb3VwOiBhbnkpID0+IF9ncm91cC5pZCA9PSBpdGVtLkdldCgnc2NvcGUnKSkgPiAtMSk7XG4gIH1cbiAgZ2V0R3JvdXBDdXJyZW50KCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuJGdyb3VwID8/IFtdO1xuICB9XG4gIGV4cG9ydEpzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEudG9Kc29uKCk7XG4gIH1cbiAgcHVibGljIGNoZWNrSW5pdE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kY2hlY2tPcHRpb247XG4gIH1cbiAgaW5pdE9wdGlvbihvcHRpb246IGFueSwgaXNEZWZhdWx0OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIHRoaXMuJGNoZWNrT3B0aW9uID0gdHJ1ZTtcbiAgICAvLyBzZXQgY29udHJvbFxuICAgIHRoaXMuJGNvbnRyb2wgPSBpc0RlZmF1bHQgPyB7IC4uLm9wdGlvbj8uY29udHJvbCB8fCB7fSwgLi4uQ29udHJvbCB9IDogeyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30gfTtcbiAgICBsZXQgY29udHJvbFRlbXA6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMuJGNvbnRyb2wpLm1hcCgoa2V5KSA9PiAoeyAuLi50aGlzLiRjb250cm9sW2tleV0sIGtleSwgc29ydDogKHRoaXMuJGNvbnRyb2xba2V5XS5zb3J0ID09PSB1bmRlZmluZWQgPyA5OTk5OSA6IHRoaXMuJGNvbnRyb2xba2V5XS5zb3J0KSB9KSkuc29ydChjb21wYXJlU29ydCkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBjb250cm9sVGVtcFtpdGVtLmtleV0gPSB7XG4gICAgICAgIC4uLml0ZW0sXG4gICAgICAgIGRvdDoge1xuICAgICAgICAgIGxlZnQ6IDEsXG4gICAgICAgICAgdG9wOiAxLFxuICAgICAgICAgIHJpZ2h0OiAxLFxuICAgICAgICAgIGJvdHRvbTogMSxcbiAgICAgICAgICAuLi5pdGVtPy5kb3RcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuJHByb3BlcnRpZXNbYCR7aXRlbS5rZXl9YF0gPSB7XG4gICAgICAgIC4uLihpdGVtLnByb3BlcnRpZXMgfHwge30pLFxuICAgICAgICBpZDoge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGdldFRpbWUoKVxuICAgICAgICB9LFxuICAgICAgICBrZXk6IHtcbiAgICAgICAgICBkZWZhdWx0OiBpdGVtLmtleVxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgZGVmYXVsdDogaXRlbS5rZXksXG4gICAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgeDoge1xuICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgeToge1xuICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBsaW5lczoge1xuICAgICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy4kY29udHJvbCA9IGNvbnRyb2xUZW1wO1xuICB9XG4gIHJlbmRlckh0bWwoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSB7XG4gICAgaWYgKGlzRnVuY3Rpb24obm9kZS5nZXRPcHRpb24oKT8uaHRtbCkpIHtcbiAgICAgIGVsTm9kZS5pbm5lckhUTUwgPSBub2RlLmdldE9wdGlvbigpPy5odG1sPy4oeyBlbE5vZGUsIG1haW4sIG5vZGUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsTm9kZS5pbm5lckhUTUwgPSBub2RlLmdldE9wdGlvbigpPy5odG1sXG4gICAgfVxuICB9XG4gIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDb250cm9sQWxsKCkge1xuICAgIHJldHVybiB0aGlzLiRjb250cm9sID8/IHt9O1xuICB9XG4gIGdldFByb2plY3RBbGwoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLkdldCgncHJvamVjdHMnKSA/PyBbXTtcbiAgfVxuICBpbXBvcnRKc29uKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMub3BlblNvbHV0aW9uKGRhdGEpO1xuICB9XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy4kcHJvamVjdE9wZW4gIT0gJGRhdGEpIHtcbiAgICAgIHRoaXMuJHByb2plY3RPcGVuID0gJGRhdGE7XG4gICAgICB0aGlzLiRkYXRhLlNldCgncHJvamVjdCcsIHRoaXMuJHByb2plY3RPcGVuPy5HZXQoJ2lkJykpXG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgICAgZGF0YTogJGRhdGFcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc2hvd1Byb3BlcnR5LCB7XG4gICAgICAgIGRhdGE6ICRkYXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB7XG4gICAgICAgIGRhdGE6ICRkYXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY2hlY2tQcm9qZWN0T3BlbigkZGF0YTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuJHByb2plY3RPcGVuID09ICRkYXRhO1xuICB9XG4gIG5ld1Byb2plY3QoKTogdm9pZCB7XG4gICAgdGhpcy5vcGVuUHJvamVjdCh7fSk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ubmV3UHJvamVjdCwge30pO1xuICB9XG4gIG9wZW5Qcm9qZWN0KCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgJHByb2plY3Q6IGFueSA9IG51bGw7XG4gICAgaWYgKCRkYXRhIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICRwcm9qZWN0ID0gdGhpcy5nZXRQcm9qZWN0QnlJZCgkZGF0YS5HZXQoJ2lkJykpO1xuICAgICAgaWYgKCEkcHJvamVjdCkge1xuICAgICAgICAkcHJvamVjdCA9ICRkYXRhO1xuICAgICAgICB0aGlzLiRkYXRhLkFwcGVuZCgncHJvamVjdHMnLCAkcHJvamVjdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICRwcm9qZWN0ID0gbmV3IERhdGFGbG93KHRoaXMpO1xuICAgICAgJHByb2plY3QuSW5pdERhdGEoJGRhdGEsIHRoaXMuZ2V0UHJvcGVydHlCeUtleShQcm9wZXJ0eUVudW0ubWFpbikpO1xuICAgICAgdGhpcy4kZGF0YS5BcHBlbmQoJ3Byb2plY3RzJywgJHByb2plY3QpO1xuICAgIH1cbiAgICB0aGlzLnNldFByb2plY3RPcGVuKCRwcm9qZWN0KTtcbiAgfVxuICBwdWJsaWMgcmVtb3ZlUHJvamVjdCgkZGF0YTogYW55KSB7XG4gICAgbGV0IHByb2plY3REYXRhID0gJGRhdGE7XG4gICAgaWYgKCRkYXRhIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgIHByb2plY3REYXRhID0gdGhpcy5nZXRQcm9qZWN0QnlJZCgkZGF0YS5HZXQoJ2lkJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9qZWN0RGF0YSA9IHRoaXMuZ2V0UHJvamVjdEJ5SWQoJGRhdGEuR2V0KCdpZCcpKTtcbiAgICB9XG4gICAgdGhpcy4kZGF0YS5SZW1vdmUoJ3Byb2plY3RzJywgcHJvamVjdERhdGEpO1xuICAgIGlmICh0aGlzLmNoZWNrUHJvamVjdE9wZW4ocHJvamVjdERhdGEpKSB7XG4gICAgICB0aGlzLiRwcm9qZWN0T3BlbiA9IHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpPy5bMF07XG4gICAgICBpZiAoIXRoaXMuJHByb2plY3RPcGVuKSB7XG4gICAgICAgIHRoaXMubmV3UHJvamVjdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge1xuICAgICAgZGF0YTogdGhpcy4kcHJvamVjdE9wZW5cbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHtcbiAgICAgIGRhdGE6IHRoaXMuJHByb2plY3RPcGVuXG4gICAgfSk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsIHtcbiAgICAgIGRhdGE6IHRoaXMuJHByb2plY3RPcGVuXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGdldFByb2plY3RCeUlkKCRpZDogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpLmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdpZCcpID09PSAkaWQpPy5bMF07XG4gIH1cbiAgc2V0Q29udHJvbENob29zZShrZXk6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLiRjb250cm9sQ2hvb3NlID0ga2V5O1xuICB9XG4gIGdldENvbnRyb2xDaG9vc2UoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xDaG9vc2U7XG4gIH1cbiAgZ2V0Q29udHJvbEJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2xba2V5XSB8fCB7fTtcbiAgfVxuICBnZXRDb250cm9sTm9kZUJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0Q29udHJvbEJ5S2V5KGtleSksXG4gICAgICBwcm9wZXJ0aWVzOiB0aGlzLmdldFByb3BlcnR5QnlLZXkoYCR7a2V5fWApXG4gICAgfVxuICB9XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvcGVydGllc1trZXldO1xuICB9XG4gIHByaXZhdGUgJHJ1bm5pbmcgPSBmYWxzZTtcbiAgcnVubmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4kcnVubmluZztcbiAgfVxuICBjYWxsYmFja1J1blByb2plY3QoY2FsbGJhY2tSdW46IGFueSkge1xuICAgIHRoaXMub24oRXZlbnRFbnVtLnJ1blByb2plY3QsICh7IGRhdGEsIGNhbGxiYWNrIH06IGFueSkgPT4ge1xuICAgICAgY2FsbGJhY2tSdW4/LihkYXRhLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cbiAgY2FsbGJhY2tTdG9wUHJvamVjdChjYWxsYmFja1J1bjogYW55KSB7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc3RvcFByb2plY3QsICh7IGNhbGxiYWNrIH06IGFueSkgPT4ge1xuICAgICAgY2FsbGJhY2tSdW4/LihjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cbiAgcnVuUHJvamVjdCgpOiB2b2lkIHtcbiAgICB0aGlzLiRydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5ydW5Qcm9qZWN0LCB7IGRhdGE6IHRoaXMuZXhwb3J0SnNvbigpLCBjYWxsYmFjazogKCkgPT4gdGhpcy4kcnVubmluZyA9IGZhbHNlIH0pO1xuICB9XG4gIHN0b3BQcm9qZWN0KCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnN0b3BQcm9qZWN0LCB7IGNhbGxiYWNrOiAoKSA9PiB0aGlzLiRydW5uaW5nID0gZmFsc2UgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBTeXN0ZW1CYXNlIH0gZnJvbSBcIi4vU3lzdGVtQmFzZVwiO1xuZXhwb3J0IGNsYXNzIFN5c3RlbVZ1ZSBleHRlbmRzIFN5c3RlbUJhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXI6IGFueSkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgcmVuZGVySHRtbCh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpIHtcbiAgICBpZiAocGFyc2VJbnQodGhpcy5yZW5kZXIudmVyc2lvbikgPT09IDMpIHtcbiAgICAgIC8vVnVlIDNcbiAgICAgIGxldCB3cmFwcGVyID0gdGhpcy5yZW5kZXIuaChub2RlLmdldE9wdGlvbigpPy5odG1sLCB7IC4uLihub2RlLmdldE9wdGlvbigpPy5wcm9wcyA/PyB7fSksIG5vZGUgfSwgKG5vZGUuZ2V0T3B0aW9uKCk/Lm9wdGlvbnMgPz8ge30pKTtcbiAgICAgIHdyYXBwZXIuYXBwQ29udGV4dCA9IGVsTm9kZTtcbiAgICAgIHRoaXMucmVuZGVyLnJlbmRlcih3cmFwcGVyLCBlbE5vZGUpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFZ1ZSAyXG4gICAgICBsZXQgd3JhcHBlciA9IG5ldyB0aGlzLnJlbmRlcih7XG4gICAgICAgIHBhcmVudDogZWxOb2RlLFxuICAgICAgICByZW5kZXI6IChoOiBhbnkpID0+IGgobm9kZS5nZXRPcHRpb24oKT8uaHRtbCwgeyBwcm9wczogeyAuLi4obm9kZS5nZXRPcHRpb24oKT8ucHJvcHMgPz8ge30pLCBub2RlIH0gfSksXG4gICAgICAgIC4uLihub2RlLmdldE9wdGlvbigpPy5vcHRpb25zID8/IHt9KVxuICAgICAgfSkuJG1vdW50KClcbiAgICAgIC8vXG4gICAgICBlbE5vZGUuYXBwZW5kQ2hpbGQod3JhcHBlci4kZWwpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIEV2ZW50RW51bSwgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgZG93bmxvYWRPYmplY3RBc0pzb24sIGdldFRpbWUsIHJlYWRGaWxlTG9jYWwgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgUHJvamVjdFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvUHJvamVjdFZpZXdcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3REb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1wcm9qZWN0Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9qZWN0JywgKGVsQ29udGVudDogYW55KSA9PiB7XG4gICAgICBuZXcgUHJvamVjdFZpZXcoZWxDb250ZW50LCBtYWluKTtcbiAgICB9KTtcbiAgICBsZXQgJG5vZGVSaWdodDogSFRNTEVsZW1lbnQgfCBudWxsID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9faGVhZGVyIC52cy1ib3hpbmZvX2J1dHRvbicpO1xuICAgIGlmICgkbm9kZVJpZ2h0KSB7XG4gICAgICAkbm9kZVJpZ2h0LmlubmVySFRNTCA9IGBgO1xuICAgICAgbGV0IGJ1dHRvbk5ldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uTmV3LmlubmVySFRNTCA9IGBOZXdgO1xuICAgICAgYnV0dG9uTmV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5tYWluLm5ld1Byb2plY3QoJycpKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbk5ldyk7XG5cbiAgICAgIGxldCBidXR0b25FeHBvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbkV4cG9ydC5pbm5lckhUTUwgPSBgRXhwb3J0YDtcbiAgICAgIGJ1dHRvbkV4cG9ydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRvd25sb2FkT2JqZWN0QXNKc29uKHRoaXMubWFpbi5leHBvcnRKc29uKCksIGB2cy1zb2x1dGlvbi0ke2dldFRpbWUoKX1gKSk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25FeHBvcnQpO1xuXG4gICAgICBsZXQgYnV0dG9uSW1wb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b25JbXBvcnQuaW5uZXJIVE1MID0gYEltcG9ydGA7XG4gICAgICBidXR0b25JbXBvcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHJlYWRGaWxlTG9jYWwoKHJzOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAocnMpIHtcbiAgICAgICAgICAgIHRoaXMubWFpbi5pbXBvcnRKc29uKEpTT04ucGFyc2UocnMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAkbm9kZVJpZ2h0Py5hcHBlbmRDaGlsZChidXR0b25JbXBvcnQpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgVmlzdWFsRmxvdyB9IGZyb20gXCIuL1Zpc3VhbEZsb3dcIjtcbmltcG9ydCAqIGFzIFN5c3RlbUJhc2UgZnJvbSBcIi4vc3lzdGVtcy9pbmRleFwiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuaW1wb3J0ICogYXMgRGVzZ2luZXIgZnJvbSBcIi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCAqIGFzIERvY2sgZnJvbSAnLi9kb2NrL2luZGV4JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgVmlzdWFsRmxvdyxcbiAgLi4uU3lzdGVtQmFzZSxcbiAgLi4uQ29yZSxcbiAgLi4uRG9jayxcbiAgLi4uRGVzZ2luZXJcbn07XG5cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSAnLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IERvY2tNYW5hZ2VyIH0gZnJvbSAnLi9kb2NrL0RvY2tNYW5hZ2VyJztcbmltcG9ydCB7IFN5c3RlbUJhc2UgfSBmcm9tICcuL3N5c3RlbXMvU3lzdGVtQmFzZSc7XG5leHBvcnQgY2xhc3MgVmlzdWFsRmxvdyB7XG4gIHByaXZhdGUgbWFpbjogSU1haW4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJGRvY2tNYW5hZ2VyOiBEb2NrTWFuYWdlcjtcbiAgcHVibGljIGdldERvY2tNYW5hZ2VyKCk6IERvY2tNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy4kZG9ja01hbmFnZXI7XG4gIH1cbiAgcHVibGljIHNldE9wdGlvbihkYXRhOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICB0aGlzLm1haW4/LmluaXRPcHRpb24oZGF0YSwgaXNEZWZhdWx0KTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlci5yZXNldCgpO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG1haW46IElNYWluIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5tYWluID0gbWFpbiA/PyBuZXcgU3lzdGVtQmFzZSgpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyID0gbmV3IERvY2tNYW5hZ2VyKHRoaXMuY29udGFpbmVyLCB0aGlzLm1haW4pO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/LmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcbiAgfVxuICBwdWJsaWMgZ2V0TWFpbigpOiBJTWFpbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFpbjtcbiAgfVxuICBuZXdTb2x1dGlvbigkbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm5ld1NvbHV0aW9uKCRuYW1lKTtcbiAgfVxuICBvcGVuU29sdXRpb24oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5vcGVuU29sdXRpb24oJGRhdGEpO1xuICB9XG4gIG5ld1Byb2plY3QoJG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5uZXdQcm9qZWN0KCRuYW1lKTtcbiAgfVxuICBvcGVuUHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm9wZW5Qcm9qZWN0KCRuYW1lKTtcbiAgfVxuICBnZXRQcm9qZWN0QWxsKCk6IGFueVtdIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYWluKCk/LmdldFByb2plY3RBbGwoKTtcbiAgfVxuICBzZXRQcm9qZWN0T3BlbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/LnNldFByb2plY3RPcGVuKCRkYXRhKTtcbiAgfVxuICBpbXBvcnRKc29uKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5pbXBvcnRKc29uKGRhdGEpO1xuICB9XG4gIGV4cG9ydEpzb24oKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYWluKCk/LmV4cG9ydEpzb24oKTtcbiAgfVxuICBjYWxsYmFja1J1blByb2plY3QoY2FsbGJhY2tSdW46IGFueSkge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5jYWxsYmFja1J1blByb2plY3QoY2FsbGJhY2tSdW4pO1xuICB9XG4gIGNhbGxiYWNrU3RvcFByb2plY3QoY2FsbGJhY2tSdW46IGFueSkge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5jYWxsYmFja1N0b3BQcm9qZWN0KGNhbGxiYWNrUnVuKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkV2ZW50RW51bSIsImluaXQiLCJkYXRhQ2hhbmdlIiwic2hvd1Byb3BlcnR5Iiwib3BlblByb2plY3QiLCJuZXdQcm9qZWN0IiwiY2hhbmdlVmFyaWFibGUiLCJjaGFuZ2UiLCJkaXNwb3NlIiwiZ3JvdXBDaGFuZ2UiLCJzZXRHcm91cCIsInpvb20iLCJydW5Qcm9qZWN0Iiwic3RvcFByb2plY3QiLCJEb2NrRW51bSIsImxlZnQiLCJ0b3AiLCJ2aWV3IiwiYm90dG9tIiwicmlnaHQiLCJQcm9wZXJ0eUVudW0iLCJtYWluIiwic29sdXRpb24iLCJsaW5lIiwidmFyaWFibGUiLCJncm91cENhdmFzIiwiU2NvcGVSb290IiwiRXZlbnRGbG93IiwiZXZlbnRzIiwiY29uc3RydWN0b3IiLCJvblNhZmUiLCJldmVudCIsImNhbGxiYWNrIiwidGhpcyIsInJlbW92ZUxpc3RlbmVyIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJsaXN0ZW5lcnMiLCJwdXNoIiwibGlzdGVuZXJJbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaCIsImRldGFpbHMiLCJmb3JFYWNoIiwibGlzdGVuZXIiLCJnZXREYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJjb21wYXJlU29ydCIsImEiLCJiIiwic29ydCIsImlzRnVuY3Rpb24iLCJmbiIsIkZ1bmN0aW9uIiwiRGF0YUZsb3ciLCJwcm9wZXJ0eSIsImRhdGEiLCJwcm9wZXJ0aWVzIiwiZ2V0UHJvcGVydGllcyIsImxvYWQiLCJJbml0RGF0YSIsImV2ZW50RGF0YUNoYW5nZSIsImtleSIsImtleUNoaWxkIiwidmFsdWVDaGlsZCIsInNlbmRlckNoaWxkIiwiaW5kZXgiLCJ2YWx1ZSIsInNlbmRlciIsIlJlbW92ZUV2ZW50RGF0YSIsIml0ZW0iLCJPbkV2ZW50RGF0YSIsIkJpbmRFdmVudCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIlNldCIsImlzRGlzcGF0Y2giLCJTZXREYXRhIiwiaXNDbGVhckRhdGEiLCIkZGF0YSIsIk9iamVjdCIsImtleXMiLCJHZXQiLCJJbmNyZWFzZSIsIkRlY3JlYXNlIiwiQXBwZW5kIiwiUmVtb3ZlIiwiZ2V0UHJvcGVydHlCeUtleSIsImZ1bmNTZXRWYWx1ZSIsInZhbHVlU2V0IiwibWFwIiwic3ViIiwiZmllbGQiLCJzdGFydHNXaXRoIiwiZGVmYXVsdCIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvSnNvbiIsInJzIiwic2V0UlMiLCJ2YWx1ZVJTIiwiZGVsZXRlIiwiRmxvd0NvcmUiLCJHZXRJZCIsIlNldElkIiwiaWQiLCJlbE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJDaGVja0VsZW1lbnRDaGlsZCIsImVsIiwiY29udGFpbnMiLCJTZXREYXRhRmxvdyIsIlJlbW92ZURhdGFFdmVudCIsInNldFRpbWVvdXQiLCJ0eXBlIiwiQmFzZUZsb3ciLCJwYXJlbnQiLCJzdXBlciIsIlRhZ1ZpZXciLCJEYXRhVmlldyIsImtleU5hbWUiLCJlbFN1Z2dlc3Rpb25zIiwiZWxTdWdnZXN0aW9uc0NvbnRlbnQiLCJub2RlRWRpdG9yIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiYWRkIiwiZWRpdCIsInNlbGVjdCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicGFyZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwic2hvd1N1Z2dlc3Rpb25zIiwiYmluZERhdGEiLCJjaGVja1Nob3dTdWdnZXN0aW9ucyIsImlubmVySFRNTCIsImFyciIsImdldFZhcmlhYmxlIiwiZWxVbCIsImVsTGkiLCJlbExpbmsiLCJhZGRFdmVudExpc3RlbmVyIiwiYWxlcnQiLCJ0eHQiLCJzZWxlY3Rpb25TdGFydCIsInN0YXJ0SW5kZXgiLCJsYXN0SW5kZXhPZiIsImZsZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJpbmRJbnB1dCIsImJpbmQiLCJiaW5kRXZlbnQiLCJkYXRhU2VsZWN0Iiwib3B0aW9ucyIsInRleHQiLCJvcHRpb24iLCJzY3JpcHQiLCJzZXROb2RlVmFsdWUiLCJpbmNsdWRlcyIsInRhZ05hbWUiLCJpbm5lclRleHQiLCJEZWxldGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3RhdGljIiwiY2hpbGRFbGVtZW50Q291bnQiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIk1vdmVUeXBlIiwicyIsImhleERpZ2l0cyIsImkiLCJzdWJzdHIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwibWVzc2FnZSIsIm9wdGlvbmFsUGFyYW1zIiwibG9nIiwiTGluZSIsImZyb21JbmRleCIsInRvIiwidG9JbmRleCIsImNyZWF0ZUVsZW1lbnROUyIsImVsUGF0aCIsImN1cnZhdHVyZSIsInRlbXAiLCJTdGFydFNlbGVjdGVkIiwic2V0QXR0cmlidXRlTlMiLCJlbENhbnZhcyIsIkFkZExpbmUiLCJ1cGRhdGVUbyIsInRvX3giLCJ0b195IiwieCIsImZyb21feCIsInkiLCJmcm9tX3kiLCJnZXRQb3N0aXNpb25Eb3QiLCJsaW5lQ3VydmUiLCJjcmVhdGVDdXJ2YXR1cmUiLCJVcGRhdGVVSSIsIkFjdGl2ZSIsInJlbW92ZSIsInN0YXJ0X3Bvc194Iiwic3RhcnRfcG9zX3kiLCJlbmRfcG9zX3giLCJlbmRfcG9zX3kiLCJjdXJ2YXR1cmVfdmFsdWUiLCJsaW5lX3giLCJsaW5lX3kiLCJoeDEiLCJhYnMiLCJoeDIiLCJub2RlVGhpcyIsIlJlbW92ZUxpbmUiLCJlIiwic2V0TGluZUNob29zZSIsInNldE5vZGVUbyIsIm5vZGUiLCJDbG9uZSIsImNoZWNrTGluZUV4aXN0cyIsIkRlc2dpbmVyVmlld19FdmVudCIsInRpbWVGYXN0Q2xpY2siLCJ0YWdJbmdvcmUiLCJtb3ZlVHlwZSIsIk5vbmUiLCJmbGdEcmFwIiwiZmxnTW92ZSIsImF2X3giLCJhdl95IiwicG9zX3giLCJwb3NfeSIsIm1vdXNlX3giLCJtb3VzZV95IiwidGVtcExpbmUiLCJFbmRNb3ZlIiwiTW92ZSIsIlN0YXJ0TW92ZSIsImNvbnRleHRtZW51Iiwibm9kZV9kcm9wRW5kIiwibm9kZV9kcmFnb3ZlciIsInpvb21fZW50ZXIiLCJrZXlkb3duIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsIiRsb2NrIiwia2V5Tm9kZSIsImdldENvbnRyb2xDaG9vc2UiLCJkYXRhVHJhbnNmZXIiLCJnZXREYXRhIiwiZV9wb3NfeCIsImVfcG9zX3kiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJDYWxjWCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkNhbGNZIiwiY2hlY2tPbmx5Tm9kZSIsIkFkZE5vZGUiLCJncm91cCIsIkN1cnJlbnRHcm91cCIsInVwZGF0ZVBvc2l0aW9uIiwiY3RybEtleSIsImRlbHRhWSIsInpvb21fb3V0Iiwiem9vbV9pbiIsInRhcmdldCIsInRvTG93ZXJDYXNlIiwiQ2FudmFzIiwibm9kZUNob29zZSIsImdldE5vZGVDaG9vc2UiLCJOb2RlIiwic2V0Tm9kZUNob29zZSIsImdldFgiLCJnZXRZIiwic2V0WCIsInNldFkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwibm9kZUVsIiwiY2xvc2VzdCIsIm5vZGVJZCIsIm5vZGVUbyIsIkdldE5vZGVCeUlkIiwicXVlcnlTZWxlY3RvciIsIm1ldGFLZXkiLCJnZXRMaW5lQ2hvb3NlIiwiTm9kZUl0ZW0iLCJnZXROYW1lIiwiQ2hlY2tLZXkiLCJnZXREYXRhTGluZSIsImFyckxpbmUiLCJmaWx0ZXIiLCJlbENvbnRlbnQiLCJhcnJEYXRhVmlldyIsImdldENvbnRyb2xOb2RlQnlLZXkiLCJuYW1lIiwicmVuZGVyVUkiLCJjbGFzcyIsImdldE9wdGlvbiIsImRldGFpbCIsImFjdGl2ZUVsZW1lbnQiLCJoaWRlVGl0bGUiLCJpY29uIiwiYWRkTm9kZURvdCIsIm51bSIsInN0YXJ0IiwicXVlcnkiLCJub2RlUXVlcnkiLCJub2RlRG90IiwiZG90IiwicmVuZGVySHRtbCIsIkJpbmRFbGVtZW50IiwiaUNoZWNrIiwidGVtcHgiLCJ0ZW1weSIsImVsRG90IiwiUmVtb3ZlTm9kZSIsIlJlbmRlckxpbmUiLCJab29tIiwiRGVzZ2luZXJWaWV3IiwiZ2V0Wm9vbSIsImdldERhdGFHcm91cCIsInNldFpvb20iLCJncm91cERhdGEiLCJsYXN0R3JvdXBOYW1lIiwiZ3JvdXBzIiwiZGF0YUdyb3VwIiwiR2V0RGF0YUJ5SWQiLCJjaGFuZ2VHcm91cCIsIkdldEdyb3VwTmFtZSIsIkJhY2tHcm91cCIsIlJlbmRlclVJIiwiQ3VycmVudEdyb3VwRGF0YSIsIm9wZW5Hcm91cCIsImxpbmVDaG9vc2UiLCJub2RlcyIsIkFkZE5vZGVJdGVtIiwiSW5zZXJ0Tm9kZSIsIkNsZWFyTm9kZSIsIkdldERhdGFBbGxOb2RlIiwiR2V0RGF0YU5vZGUiLCJ6b29tX2xhc3RfdmFsdWUiLCJ0YWJJbmRleCIsIk9wZW4iLCJ6b29tX3Jlc2V0IiwiZ3JvdXBJZCIsInVwZGF0ZVZpZXciLCJzdHlsZSIsInRyYW5zZm9ybSIsIkdldEFsbE5vZGUiLCJudW1iZXIiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbnRyb2xCeUtleSIsInpvb21fcmVmcmVzaCIsInRlbXBfem9vbSIsIlZhcmlhYmxlVmlldyIsInZhcmlhYmxlcyIsIlJlbmRlciIsIlZhcmlhYmxlSXRlbSIsIlJlbmRlclNjb3BlIiwiZ2V0R3JvdXBDdXJyZW50IiwibmFtZUlucHV0IiwidHlwZUlucHV0Iiwic2NvcGVJbnB1dCIsInZhbHVlRGVmYXVsdElucHV0IiwibmFtZUNvbHVtbiIsInR5cGVDb2x1bW4iLCJzY29wZUNvbHVtbiIsInZhbHVlRGVmYXVsdENvbHVtbiIsImJ1dHRvblJlbW92ZSIsInJlbW92ZVZhcmlhYmxlIiwiYnV0dG9uUmVtb3ZlQ29sdW1uIiwicHJlcGVuZCIsIlRvb2xib3hWaWV3IiwiY29udHJvbHMiLCJnZXRDb250cm9sQWxsIiwiZ3JvdXBOYW1lIiwiaXRlbUJveCIsIl9pdGVtIiwibm9kZUl0ZW0iLCJkcmFnU3RhcnQiLCJkcmFnZW5kIiwic2V0Q29udHJvbENob29zZSIsInNldERhdGEiLCJQcm9qZWN0VmlldyIsImdldFByb2plY3RBbGwiLCJjaGVja1Byb2plY3RPcGVuIiwic2V0UHJvamVjdE9wZW4iLCJUYWJQcm9qZWN0VmlldyIsIiRlbEJvYnkiLCIkZWxXYXJwIiwiJGJ0bk5leHQiLCIkYnRuQmFjayIsIiRidG5BZGQiLCIkYnRuWm9vbUluIiwiJGJ0blpvb21PdXQiLCIkYnRuWm9vbVJlc2V0IiwiJGJ0blJ1blByb2plY3QiLCJzY3JvbGxMZWZ0Q2FjaGUiLCJzY3JvbGxMZWZ0IiwiZm5VcGRhdGVTY3JvbGwiLCJwYXNzaXZlIiwiaXRlbUFjdGl2ZSIsInByb2plY3RzIiwicHJvamVjdCIsInByb2plY3RJdGVtIiwicHJvamVjdE5hbWUiLCJwcm9qZWN0QnV0dG9uIiwicHJvamVjdEJ1dHRvblJlbW92ZSIsInJlbW92ZVByb2plY3QiLCJCcmVhZGNydW1iR3JvdXBWaWV3IiwicmVuZGVyIiwiZWxVTCIsImlzRmlyc3QiLCJlbExJMiIsImVsTEkiLCJzZXRHcm91cElkIiwiZWxXYXJwIiwiZWxCb2R5IiwiZWxCdXR0dW5EaXYiLCJQcm9wZXJ0eVZpZXciLCJsYXN0RGF0YSIsImhpZGVLZXlzIiwic29ydEtleXMiLCJwcm9wZXJ0eUl0ZW0iLCJwcm9wZXJ0eUxhYmVsIiwicHJvcGVydHlWYWx1ZSIsIkRvY2tCYXNlIiwiY29udGFpbmVyIiwiQm94SW5mbyIsInRpdGxlIiwiJGNhbGxiYWNrIiwiQ29udHJvbERvY2siLCJWYXJpYWJsZURvY2siLCIkbm9kZVJpZ2h0IiwiYnV0dG9uTmV3IiwibmV3VmFyaWFibGUiLCJQcm9wZXJ0eURvY2siLCJWaWV3RG9jayIsIlRhYkRvY2siLCJCcmVhZGNydW1iR3JvdXBEb2NrIiwiRG9ja01hbmFnZXIiLCIkZG9ja01hbmFnZXIiLCJyZXNldCIsImFkZERvY2siLCIka2V5IiwiJHZpZXciLCIkaXRlbSIsIkNvbnRyb2wiLCJub2RlX2JlZ2luIiwiaHRtbCIsIm9ubHlOb2RlIiwibm9kZV9lbmQiLCJub2RlX2lmIiwiY29uZGl0aW9uIiwibm9kZV9ncm91cCIsIm91dHB1dCIsIm5vZGVfb3B0aW9uIiwibm9kZV9wcm9qZWN0IiwiU3lzdGVtQmFzZSIsIiRwcm9qZWN0T3BlbiIsIiRwcm9wZXJ0aWVzIiwiJGNvbnRyb2wiLCIkY29udHJvbENob29zZSIsIiRjaGVja09wdGlvbiIsIiRncm91cCIsIiRpbmRleFByb2plY3QiLCJzY29wZSIsImluaXRhbFZhbHVlIiwibmV3U29sdXRpb24iLCIkbmFtZSIsIm9wZW5Tb2x1dGlvbiIsInZhcmliYWxlIiwiYWRkVmFyaWFibGUiLCJmaW5kSW5kZXgiLCJfZ3JvdXAiLCJleHBvcnRKc29uIiwiY2hlY2tJbml0T3B0aW9uIiwiaW5pdE9wdGlvbiIsImlzRGVmYXVsdCIsImNvbnRyb2wiLCJjb250cm9sVGVtcCIsImxpbmVzIiwiaW1wb3J0SnNvbiIsIiRwcm9qZWN0IiwiZ2V0UHJvamVjdEJ5SWQiLCJwcm9qZWN0RGF0YSIsIiRpZCIsIiRydW5uaW5nIiwicnVubmluZyIsImNhbGxiYWNrUnVuUHJvamVjdCIsImNhbGxiYWNrUnVuIiwiY2FsbGJhY2tTdG9wUHJvamVjdCIsInBhcnNlSW50IiwidmVyc2lvbiIsIndyYXBwZXIiLCJoIiwicHJvcHMiLCJhcHBDb250ZXh0IiwiJG1vdW50IiwiJGVsIiwiYnV0dG9uRXhwb3J0IiwiZG93bmxvYWRPYmplY3RBc0pzb24iLCJleHBvcnRPYmoiLCJleHBvcnROYW1lIiwiZGF0YVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsImRvd25sb2FkQW5jaG9yTm9kZSIsImJvZHkiLCJjbGljayIsImJ1dHRvbkltcG9ydCIsImlucHV0RWwiLCJwYXJzZSIsImZyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsImZpbGVzIiwicmVhZEFzVGV4dCIsIlZpc3VhbEZsb3ciLCJnZXREb2NrTWFuYWdlciIsInNldE9wdGlvbiIsImdldE1haW4iLCJDb3JlIiwiRG9jayIsIkRlc2dp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
