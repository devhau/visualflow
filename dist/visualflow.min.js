/**
   * @license
   * author: [object Object]
   * visualflow.js v0.0.1
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const t="dataChange",e="showProperty",s="openProject",i="newProject",n="change",o="dispose",a="vs-left",r="vs-view",d="vs-bottom",h="vs-right",l="main_project",p="main_solution",c="main_line",u="main_groupCavas",v=(t,e)=>t.sort<e.sort?-1:t.sort>e.sort?1:0;class m{main;elNode=document.createElement("div");elContent;constructor(t,e){this.main=e,t.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(t,e){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${t}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),e&&e(this.elContent)}}class f extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(t=>{let e=this.main.getControlAll();Object.keys(e).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${e[s].icon} <span>${e[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),t.appendChild(i)}))}))}dragend(t){this.main.setControlChoose(null)}dragStart(t){let e=t.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(e),"touchstart"!==t.type&&t.dataTransfer.setData("node",e)}}class y extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(n,this.renderUI.bind(this)),this.main.on(s,(t=>{this.elContent?.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")})),this.elContent&&t?.data?.Get("id")&&this.elContent.querySelector(`[data-project-id="${t?.data?.Get("id")}"]`)?.classList.add("active")}))}renderUI(){let i=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(this.elContent){if(this.elContent.innerHTML="",i){i.innerHTML="";let t=document.createElement("button");i?.appendChild(t),t.innerHTML="New",t.addEventListener("click",(()=>this.main.newProject("")))}this.main.getProjectAll().forEach((i=>{let n=document.createElement("div");n.classList.add("node-item"),n.innerHTML=`${i.Get("name")}`,n.setAttribute("data-project-id",i.Get("id")),i.removeListener(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),i.on(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),this.main.CheckProjectOpen(i)&&n.classList.add("active"),n.addEventListener("click",(()=>{this.main.dispatch(s,{data:i}),this.main.dispatch(e,{data:i})})),this.elContent?.appendChild(n)}))}}}var g;!function(t){t[t.Label=0]="Label",t[t.Text=1]="Text",t[t.Inline=2]="Inline"}(g||(g={}));const b=["SPAN","DIV","P","TEXTAREA"];class L{data;el;keyName="";constructor(t,e=null){this.data=t,this.el=e,this.keyName=e?.getAttribute("node:model"),this.bindData()}bindData(){this.keyName&&this.el&&(this.data.on(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.addEventListener("change",this.bindEvent.bind(this)),this.el.addEventListener("keydown",this.bindEvent.bind(this)))}unBindData(){this.keyName&&this.el&&(this.data.removeListener(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.removeEventListener("change",this.bindEvent.bind(this)),this.el.removeEventListener("keydown",this.bindEvent.bind(this)))}bindInput({value:t,sender:e}){e!==this&&this.el&&e.el!==this.el&&(console.log(this.el.tagName),console.log(e),b.includes(this.el.tagName)?this.el.innerText=`${t}`:this.el.value=t)}bindEvent(){this.keyName&&this.el&&(console.log(this.keyName),this.data.Set(this.keyName,this.el.value,this))}static BindView(t,e){return e?Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new L(t,e))):[]}}class N{data;key;type;isEdit=!1;elInput=null;elLabel=null;elNode=document.createElement("div");constructor(e,s,i=null,n=g.Label,a=!1){this.data=e,this.key=s,this.type=n,this.data=e,this.data.onSafe(`${t}_${s}`,this.changeData.bind(this)),this.data.onSafe(o,this.dispose.bind(this)),this.isEdit=n===g.Text,this.elNode.classList.add("node-editor"),a&&i?(i.parentElement?.insertBefore(this.elNode,i),i.parentElement?.removeChild(i),i?.remove()):i&&i.appendChild(this.elNode),this.render()}render(){let t=this.data.Get(this.key);if(this.isEdit){if(this.elLabel&&(this.elLabel.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.remove(),this.elLabel=null),this.elInput)return void(this.elInput.value=t);this.elInput=document.createElement("input"),this.elInput.classList.add("node-form-control"),this.elInput.addEventListener("keydown",this.inputData.bind(this)),this.elInput.value=t,this.elInput.setAttribute("node:model",this.key),this.elNode.appendChild(this.elInput)}else{if(this.elInput&&(this.elInput.removeEventListener("keyup",this.inputData.bind(this)),this.elInput.remove(),this.elInput=null),this.elLabel)return void(this.elLabel.innerHTML=t);this.elLabel=document.createElement("span"),this.type==g.Inline&&this.elLabel.addEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.setAttribute("node:model",this.key),this.elLabel.innerHTML=t,this.elNode.appendChild(this.elLabel)}}switchModeEdit(){this.isEdit=!0,this.render()}inputData(t){setTimeout((()=>{this.data.Set(this.key,t.target.value,this)}))}changeData({key:t,value:e,sender:s}){this.render()}dispose(){this.elInput?.removeEventListener("keydown",this.inputData.bind(this)),this.elLabel?.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.data.removeListener(`${t}_${this.key}`,this.changeData.bind(this)),this.data.removeListener(o,this.dispose.bind(this))}}class C extends m{main;lastData;labelKeys=["id","key","group"];dataJson=document.createElement("textarea");constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,s){if(this.lastData==s)return;this.lastData=s,e.innerHTML="";let i=s.getProperties();Object.keys(i).forEach((t=>{let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=t;let o=document.createElement("div");o.classList.add("property-value"),this.labelKeys.includes(t)?new N(s,t,o,g.Label):new N(s,t,o,g.Text),i.appendChild(n),i.appendChild(o),e.appendChild(i)})),e.appendChild(this.dataJson),this.dataJson.value=s.toString(),this.dataJson.classList.add("node-form-control"),s.on(t,(()=>this.dataJson.value=s.toString()))}}class k{events={};constructor(){}onSafe(t,e){this.removeListener(t,e),this.on(t,e)}on(t,e){return"function"!=typeof e?(console.error("The listener callback must be a function, the given type is "+typeof e),!1):"string"!=typeof t?(console.error("The event name must be a string, the given type is "+typeof t),!1):(void 0===this.events[t]&&(this.events[t]={listeners:[]}),void this.events[t].listeners.push(e))}removeListener(t,e){if(!this.events[t])return!1;const s=this.events[t].listeners,i=s.indexOf(e);i>-1&&s.splice(i,1)}dispatch(t,e){if(void 0===this.events[t])return!1;this.events[t].listeners.forEach((t=>{t(e)}))}}class E{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}constructor(t,e){this.property=t,this.events=new k,e&&this.load(e)}InitData(t=null,e=-1){-1!==e&&(this.properties=e),this.load(t)}eventDataChange(e,s,i,n,o){o?(this.dispatch(`${t}_${e}_${o}_${s}`,{key:e,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${t}_${e}_${o}`,{key:e,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${t}_${e}_${s}`,{key:e,keyChild:s,value:i,sender:n}),this.dispatch(`${t}_${e}`,{key:e,keyChild:s,value:i,sender:n})}RemoveEventData(e,s,i){e&&e.removeListener(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}OnEventData(e,s,i){e&&e.on(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}BindEvent(t,e){t&&(t instanceof E&&this.OnEventData(t,e),Array.isArray(t)&&t.length>0&&t[0]instanceof E&&t.forEach(((t,s)=>this.OnEventData(t,e,s))))}Set(e,s,i=null,o=!0){this.data[e]!=s&&(this.data[e]&&(this.data[e]instanceof E&&this.RemoveEventData(this.data[e],e),Array.isArray(this.data[e])&&this.data[e].length>0&&this.data[e][0]instanceof E&&this.data[e].forEach(((t,s)=>this.RemoveEventData(t,e,s)))),this.BindEvent(s,e)),this.data[e]=s,o&&(this.dispatch(`${t}_${e}`,{key:e,value:s,sender:i}),this.dispatch(t,{key:e,value:s,sender:i}),this.dispatch(n,{key:e,value:s,sender:i}))}SetData(t,e=null,s=!1){if(s&&(this.data={}),t instanceof E){let s=t;if(!this.property&&s.property&&(this.property=s.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,s.Get(t),e,!1);else for(let t of Object.keys(s.getProperties()))this.Set(t,s.Get(t),e,!1)}else Object.keys(t).forEach((s=>{this.Set(s,t[s],e,!1)}));this.dispatch(n,{data:t})}Get(t){return this.data[t]}Append(t,e){this.data[t]||(this.data[t]=[]),this.data[t]=[...this.data[t],e],this.BindEvent(e,t)}Remove(t,e){this.data[t].indexOf(e);var s=this.data[t].indexOf(e);s>-1&&(this.RemoveEventData(this.data[t][s],t),this.data[t].splice(s,1))}load(t){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(t.key)),this.properties)for(let e of Object.keys(this.properties))this.data[e]=t?.[e]??("function"==typeof this.properties[e]?.default?this.properties[e]?.default():this.properties[e]?.default)??"",this.data[e]instanceof E||!this.data[e].key||(this.data[e]=new E(this.property,this.data[e])),!Array.isArray(this.data[e])||!this.property||this.data[e][0]instanceof E||(this.data[e]=this.data[e].map((t=>t instanceof E||!t.key?t:new E(this.property,t)))),this.BindEvent(this.data[e],e)}toString(){return JSON.stringify(this.toJson())}toJson(){let t={};for(let e of Object.keys(this.properties))t[e]=this.Get(e),t[e]instanceof E&&(t[e]=t[e].toJson()),Array.isArray(t[e])&&t[e].length>0&&t[e][0]instanceof E&&(t[e]=t[e].map((t=>t.toJson())));return t}delete(){this.events=new k,this.data={}}}class ${GetId(){return this.data.Get("id")}SetId(t){return this.data.Set("id",t)}properties={};data=new E;elNode=document.createElement("div");CheckElementChild(t){return this.elNode==t||this.elNode.contains(t)}events;SetData(t,e=null){this.data.SetData(t,e)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(n,{data:t,sender:this})}onSafe(t,e){return this.events.onSafe(t,e),this}on(t,e){return this.events.on(t,e),this}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}BindDataEvent(){this.data.on(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.on(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}RemoveDataEvent(){this.data.removeListener(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.removeListener(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}constructor(){this.events=new k,this.BindDataEvent()}}class G extends ${parent;constructor(t){super(),this.parent=t}}const I=()=>(new Date).getTime();class D{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new E;curvature=.5;constructor(t,e=0,s,i=0,n=null){this.from=t,this.fromIndex=e,this.to=s,this.toIndex=i,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),n?this.data=n:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(c)||{}}),this.from.data.Append("lines",this.data))}updateTo(t,e){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,t,e,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:t,y:e}=this.to.getPostisionDot(this.toIndex);this.updateTo(t,e)}return this}Active(t=!0){t?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(t,e,s,i,n,o){let a=t,r=e,d=s,h=i,l=n;switch(o){case"open":if(t>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(t=null,e=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),e&&this.from.data.Remove("lines",this.data),this.from!=t&&this.from.RemoveLine(this),this.to!=t&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(t){this.from.parent.setLineChoose(this)}setNodeTo(t,e){this.to=t,this.toIndex=e}Clone(){if(this.to&&this.toIndex&&this.from!=this.to)return new D(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}var _;!function(t){t[t.None=0]="None",t[t.Node=1]="Node",t[t.Canvas=2]="Canvas",t[t.Line=3]="Line"}(_||(_={}));class x{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=_.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(t){this.parent=t,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(t){t.preventDefault()}node_dragover(t){t.preventDefault()}node_dropEnd(t){if(t.preventDefault(),this.parent.$lock)return;let e=this.parent.main.getControlChoose();if(e||"touchend"===t.type||(e=t.dataTransfer.getData("node")),!e)return;let s=0,i=0;"touchmove"===t.type?(s=t.touches[0].clientX,i=t.touches[0].clientY):(s=t.clientX,i=t.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(e)||this.parent.AddNode(e,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(t){this.parent.$lock||t.ctrlKey&&(t.preventDefault(),t.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(t){if(this.parent.$lock)return;if(this.tagIngore.includes(t.target.tagName.toLowerCase()))return;if(this.timeFastClick=I(),t.target.classList.contains("main-path"))return;"touchstart"===t.type?(this.pos_x=t.touches[0].clientX,this.pos_y=t.touches[0].clientY):(this.pos_x=t.clientX,this.pos_y=t.clientY),this.moveType=_.Canvas;let e=this.parent.getNodeChoose();if(e&&e.CheckElementChild(t.target)?this.moveType=_.Node:this.parent.setNodeChoose(void 0),e&&this.moveType==_.Node&&t.target.classList.contains("node-dot")){this.moveType=_.Line;let s=t.target.getAttribute("node");this.tempLine=new D(e,s)}this.moveType==_.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(t){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let e=0,s=0;switch("touchmove"===t.type?(e=t.touches[0].clientX,s=t.touches[0].clientY):(e=t.clientX,s=t.clientY),this.moveType){case _.Canvas:{let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i);break}case _.Node:{let t=this.parent.CalcX(this.pos_x-e),i=this.parent.CalcY(this.pos_y-s);this.pos_x=e,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(t,i);break}case _.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-e),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=t.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&t.target.classList.contains("node-dot")){let e=t.target.getAttribute("node");this.tempLine.setNodeTo(r,e)}else{let t=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,t)}}}"touchmove"===t.type&&(this.mouse_x=e,this.mouse_y=s)}EndMove(t){if(this.parent.$lock)return;if(!this.flgDrap)return;if(I()-this.timeFastClick<100||!this.flgMove)return this.moveType=_.None,this.flgDrap=!1,void(this.flgMove=!1);let e=0,s=0;if("touchend"===t.type?(e=this.mouse_x,s=this.mouse_y):(e=t.clientX,s=t.clientY),this.moveType===_.Canvas){let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=e,this.pos_y=s,this.moveType=_.None,this.flgDrap=!1,this.flgMove=!1}keydown(t){this.parent.$lock||(("Delete"===t.key||"Backspace"===t.key&&t.metaKey)&&(t.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===t.key&&t.preventDefault())}}class w{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(t){this.parent=t,this.elNode=t.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let t=this.parent.GetGroupName(),e=t.length-1;if(e<0)return;let s=document.createElement("span");s.innerHTML="Root",this.elPathGroup.appendChild(s),this.btnBack.removeAttribute("style");for(let s=e;s>=0;s--){let e=document.createElement("span");e.innerHTML=`>>${t[s]}`,this.elPathGroup.appendChild(e)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_in())),t.innerHTML="+";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_out())),e.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(t),i.appendChild(e),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}const M=eval;class S extends G{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}CheckKey(t){return this.data.Get("key")==t}getDataLine(){return this.data.Get("lines")??[]}elContent;arrLine=[];option={};arrDataView=[];constructor(e,s,i={}){super(e),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof E?this.data=i:(this.data.InitData(i,this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(t,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.renderUI()}renderUI(){if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n        <div class="title">${this.option.icon} ${this.getName()}</div>\n        <div class="body">${this.option.html}</div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(t,e,s)=>{if(t){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<t;s++){let t=document.createElement("div");t.classList.add("node-dot"),t.setAttribute("node",`${e+s}`),i.appendChild(t)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body"),this.UpdateUI(),M(`(node,view)=>{${this.option.script}}`)(this,this.parent),this.arrDataView.forEach((t=>t.unBindData())),this.elContent&&(this.arrDataView=L.BindView(this.data,this.elContent))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(t,e,s=!1){if(this.elNode){let i=t,n=e;s||(n=this.elNode.offsetTop-e,i=this.elNode.offsetLeft-t),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(t=!0){t?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(t){var e=this.arrLine.indexOf(t);return e>-1&&this.arrLine.splice(e,1),this.arrLine}AddLine(t){this.arrLine=[...this.arrLine,t]}getPostisionDot(t=0){let e=this.elNode?.querySelector(`.node-dot[node="${t}"]`);if(e){let t=this.elNode.offsetTop+e.offsetTop+10;return{x:this.elNode.offsetLeft+e.offsetLeft+10,y:t}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((t=>{t.UpdateUI()}))}delete(e=!0){this.arrLine.forEach((t=>t.delete(this,e))),e?this.data.delete():(this.data.removeListener(t,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(n,{})}RenderLine(){this.getDataLine().forEach((t=>{let e=this.parent.GetNodeById(t.Get("to")),s=t.Get("toIndex"),i=t.Get("fromIndex");new D(this,i,e,s,t).UpdateUI()}))}}const P=1.6,T=.6,A=.1,j=1;class B extends ${main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(t){return this.getDataGroup().Set("zoom",t,this)}getY(){return+this.getDataGroup().Get("y")}setY(t){return this.getDataGroup().Set("y",t,this)}getX(){return+this.getDataGroup().Get("x")}setX(t){return this.getDataGroup().Set("x",t,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let e=this.data.Get("groups");return this.groupData=e?.filter((t=>t.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new E(this.main,{key:u,group:this.lastGroupName}),this.data.Append("groups",this.groupData)),this.groupData.onSafe(t,this.UpdateUI.bind(this)),this.groupData}group=[];GetGroupName(){return this.group.map((t=>this.GetDataById(t)?.Get("name")))}BackGroup(){this.group.splice(0,1),this.toolbar.renderPathGroup(),this.RenderUI()}CurrentGroup(){let t=this.group?.[0];return t&&""!=t?t:"root"}openGroup(t){this.group=[t,...this.group],this.toolbar.renderPathGroup(),this.RenderUI()}lineChoose;setLineChoose(t){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=t,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e,{data:this.nodeChoose.data})):this.dispatch(e,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNodeItem(t){return this.AddNode(t.Get("key"),t)}AddNode(t,e={}){return this.InsertNode(new S(this,t,e))}InsertNode(t){return this.nodes=[...this.nodes,t],t}RemoveNode(t){var e=this.nodes.indexOf(t);return this.data.Remove("nodes",t),e>-1&&this.nodes.splice(e,1),this.nodes}ClearNode(){this.nodes?.forEach((t=>t.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((t=>t.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(e,s){super(),this.main=s,this.elNode=e;let i=this.main.getPropertyByKey(l);this.data.InitData({},i),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,this.RenderUI(),this.on(t,this.RenderUI.bind(this)),new x(this),this.toolbar=new w(this)}updateView(t,e,s){this.elCanvas.style.transform=`translate(${t}px, ${e}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(t={}){t.sender&&t.sender instanceof S||(t.sender&&t.sender instanceof B||(this.ClearNode(),this.GetDataNode().forEach((t=>{this.AddNodeItem(t)})),this.GetAllNode().forEach((t=>{t.RenderLine()}))),this.UpdateUI())}Open(t){this.data=t,this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.toolbar.renderPathGroup(),this.BindDataEvent(),this.RenderUI()}CalcX(t){return t*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(t){return t*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(t){return this.GetAllNode().filter((e=>e.GetId()==t))?.[0]}GetDataById(t){return this.GetDataAllNode().filter((e=>e.Get("id")===t))?.[0]}checkOnlyNode(t){return this.main.getControlByKey(t).onlyNode&&this.nodes.filter((e=>e.CheckKey(t))).length>0}zoom_refresh(t=0){let e=0==t?j:this.getZoom()+A*t;P>=e&&e>=T&&(this.setX(this.getX()/this.zoom_last_value*e),this.setY(this.getY()/this.zoom_last_value*e),this.zoom_last_value=e,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class U extends m{main;view;constructor(t,i){super(t,i),this.main=i,this.view=new B(this.elNode,i),this.view.on(e,(t=>{i.dispatch(e,t)})),this.main.on(s,(t=>{this.view?.Open(t.data),this.main.SetProjectOpen(t.data)}))}}class H{container;main;$dockManager={};constructor(t,e){this.container=t,this.main=e}reset(){this.$dockManager={},this.addDock(a,f),this.addDock(a,y),this.addDock(h,C),this.addDock(r,U),this.addDock(d,m),this.RenderUI()}addDock(t,e){this.$dockManager[t]||(this.$dockManager[t]=[]),this.$dockManager[t]=[...this.$dockManager[t],e]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((t=>{let e=this.container.querySelector(`.${t}`);e&&this.$dockManager[t].forEach((t=>{new t(e,this.main)}))}))}}return class{container;$data=new E(this);$projectOpen;$properties={};$control={};$controlDefault={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",class:"node-test",html:"",dot:{top:0,right:5,left:1,bottom:5},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",html:"",dot:{left:1,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",html:'<div>condition:<br/><input node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},html:'\n      <div>\n        <div class="node-content-row"><span>Họ tên :</span><span class="node-dot" node="50001"></span></div>\n        <div class="node-content-row"><span>Họ tên :</span><span class="node-dot" node="50002"></span></div>\n        <div class="node-content-row"><span>Họ tên :</span><span class="node-dot" node="50003"></span></div>\n        <div class="node-content-row"><span>Họ tên :</span><span class="node-dot" node="50004"></span></div>\n        <div class="node-content-row"><span>Họ tên :</span><span class="node-dot" node="50005"></span></div>\n\n\n      </div>\n      ',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",html:'<div class="text-center p3"><select class="listProject node-form-control" node:model="project"></select></div>',script:"\n      const reloadProject = ()=>{\n        node.elNode.querySelector('.listProject').innerHtml='';\n        let option = document.createElement('option');\n        option.text='none';\n        option.value='';\n        node.elNode.querySelector('.listProject').appendChild(option);\n        node.parent.main.getProjectAll().forEach((item)=>{\n          let option = document.createElement('option');\n          option.text=item.Get('name');\n          option.value=item.Get('id');\n          node.elNode.querySelector('.listProject').appendChild(option);\n        });\n        node.elNode.querySelector('.listProject').value= node.data.Get('project')\n      }\n      reloadProject();\n\n     ;",properties:{project:{key:"project",default:""}},output:2}};$controlChoose=null;$dockManager;events;getDockManager(){return this.$dockManager}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}getControlAll(){return this.$control??{}}constructor(t,e=null){this.container=t,this.events=new k,this.$properties[p]={id:{default:()=>I()},key:{default:p},name:{default:()=>`solution-${I()}`},projects:{default:[]}},this.$properties[c]={key:{default:c},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[l]={...e?.properties||{},id:{default:()=>I()},name:{default:()=>`app-${I()}`},key:{default:l},groups:{default:[]},nodes:{default:[]}},this.$control={...e?.control||{},...this.$controlDefault};let s={};Object.keys(this.$control).map((t=>({...this.$control[t],key:t,sort:void 0===this.$control[t].sort?99999:this.$control[t].sort}))).sort(v).forEach((t=>{s[t.key]={dot:{left:1,top:1,right:1,bottom:1},...t},this.$properties[`node_${t.key}`]={...t.properties||{},id:{default:()=>I()},key:{default:t.key},name:{default:t.key},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$properties[u]={key:{default:u},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$control=s,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new H(this.container,this),this.$dockManager.reset(),this.$data.InitData({},this.getPropertyByKey(p))}getProjectAll(){return this.$data.Get("projects")??[]}open(t){this.$data.InitData(t,this.getPropertyByKey(p))}SetProjectOpen(t){this.$projectOpen=t}CheckProjectOpen(t){return this.$projectOpen==t}newProject(){this.openProject({}),this.dispatch(i,{})}openProject(t){if(t instanceof E){let e=this.getProjectById(t.Get("id"));e||(e=t,this.$data.Append("projects",e)),this.dispatch(s,e)}else{let i=new E(this);i.InitData(t,this.getPropertyByKey(l)),this.$data.Append("projects",i),this.dispatch(s,{data:i}),this.dispatch(e,{data:i}),this.dispatch(n,{data:i})}}getProjectById(t){return this.$data.Get("projects").filter((e=>e.Get("id")===t))?.[0]}setControlChoose(t){this.$controlChoose=t}getControlChoose(){return this.$controlChoose}getControlByKey(t){return this.$control[t]||{}}getControlNodeByKey(t){return{...this.getControlByKey(t),properties:this.getPropertyByKey(`node_${t}`)}}getPropertyByKey(t){return this.$properties[t]}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
