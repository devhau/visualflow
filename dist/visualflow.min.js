/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.1
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const t="dataChange",e="showProperty",s="openProject",i="newProject",n="change",o="dispose",a="vs-left",r="vs-view",d="vs-bottom",h="vs-right",l="main_project",p="main_solution",c="main_line",u="main_groupCavas",v=(t,e)=>t.sort<e.sort?-1:t.sort>e.sort?1:0;class m{main;elNode=document.createElement("div");elContent;constructor(t,e){this.main=e,t.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(t,e){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${t}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),e&&e(this.elContent)}}class f extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(t=>{let e=this.main.getControlAll();console.log(e),Object.keys(e).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${e[s].icon} <span>${e[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),t.appendChild(i)}))}))}dragend(t){this.main.setControlChoose(null)}dragStart(t){let e=t.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(e),"touchstart"!==t.type&&t.dataTransfer.setData("node",e)}}class y extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(n,this.renderUI.bind(this)),this.main.on(s,(t=>{this.elContent?.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")})),this.elContent&&t?.data?.Get("id")&&this.elContent.querySelector(`[data-project-id="${t?.data?.Get("id")}"]`)?.classList.add("active")}))}renderUI(){let i=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(this.elContent){if(this.elContent.innerHTML="",i){i.innerHTML="";let t=document.createElement("button");i?.appendChild(t),t.innerHTML="New",t.addEventListener("click",(()=>this.main.newProject("")))}this.main.getProjectAll().forEach((i=>{let n=document.createElement("div");n.classList.add("node-item"),n.innerHTML=`${i.Get("name")}`,n.setAttribute("data-project-id",i.Get("id")),i.removeListener(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),i.on(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),this.main.checkProjectOpen(i)&&n.classList.add("active"),n.addEventListener("click",(()=>{this.main.dispatch(s,{data:i}),this.main.dispatch(e,{data:i})})),this.elContent?.appendChild(n)}))}}}var g;!function(t){t[t.Label=0]="Label",t[t.Text=1]="Text",t[t.Inline=2]="Inline"}(g||(g={}));const L=["SPAN","DIV","P","TEXTAREA"];class b{data;el;keyName="";constructor(t,e=null){this.data=t,this.el=e,this.keyName=e?.getAttribute("node:model"),this.bindData()}bindData(){this.keyName&&this.el&&(this.data.on(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.addEventListener("change",this.bindEvent.bind(this)),this.el.addEventListener("keydown",this.bindEvent.bind(this)))}unBindData(){this.keyName&&this.el&&(this.data.removeListener(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.removeEventListener("change",this.bindEvent.bind(this)),this.el.removeEventListener("keydown",this.bindEvent.bind(this)))}bindInput({value:t,sender:e}){e!==this&&this.el&&e.el!==this.el&&(console.log(this.el.tagName),console.log(e),L.includes(this.el.tagName)?this.el.innerText=`${t}`:this.el.value=t)}bindEvent(){this.keyName&&this.el&&(console.log(this.keyName),this.data.Set(this.keyName,this.el.value,this))}static BindView(t,e){return e?Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new b(t,e))):[]}}class N{data;key;type;isEdit=!1;elInput=null;elLabel=null;elNode=document.createElement("div");constructor(e,s,i=null,n=g.Label,a=!1){this.data=e,this.key=s,this.type=n,this.data=e,this.data.onSafe(`${t}_${s}`,this.changeData.bind(this)),this.data.onSafe(o,this.dispose.bind(this)),this.isEdit=n===g.Text,this.elNode.classList.add("node-editor"),a&&i?(i.parentElement?.insertBefore(this.elNode,i),i.parentElement?.removeChild(i),i?.remove()):i&&i.appendChild(this.elNode),this.render()}render(){let t=this.data.Get(this.key);if(this.isEdit){if(this.elLabel&&(this.elLabel.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.remove(),this.elLabel=null),this.elInput)return void(this.elInput.value=t);this.elInput=document.createElement("input"),this.elInput.classList.add("node-form-control"),this.elInput.addEventListener("keydown",this.inputData.bind(this)),this.elInput.value=t,this.elInput.setAttribute("node:model",this.key),this.elNode.appendChild(this.elInput)}else{if(this.elInput&&(this.elInput.removeEventListener("keyup",this.inputData.bind(this)),this.elInput.remove(),this.elInput=null),this.elLabel)return void(this.elLabel.innerHTML=t);this.elLabel=document.createElement("span"),this.type==g.Inline&&this.elLabel.addEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.setAttribute("node:model",this.key),this.elLabel.innerHTML=t,this.elNode.appendChild(this.elLabel)}}switchModeEdit(){this.isEdit=!0,this.render()}inputData(t){setTimeout((()=>{this.data.Set(this.key,t.target.value,this)}))}changeData({key:t,value:e,sender:s}){this.render()}dispose(){this.elInput?.removeEventListener("keydown",this.inputData.bind(this)),this.elLabel?.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.data.removeListener(`${t}_${this.key}`,this.changeData.bind(this)),this.data.removeListener(o,this.dispose.bind(this))}}class C extends m{main;lastData;labelKeys=["id","key","group","lines","nodes","project","x","y"];hideKeys=["lines","nodes","groups"];sortKeys=["id","key","name","group"];dataJson=document.createElement("textarea");constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e,(e=>{this.renderUI(t,e.data)}))}))}renderUI(t,e){if(this.lastData==e)return;this.lastData=e,t.innerHTML="";let s=e.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),this.labelKeys.includes(i)?new N(e,i,a,g.Label):new N(e,i,a,g.Text),n.appendChild(o),n.appendChild(a),t.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),this.labelKeys.includes(s)?new N(e,s,o,g.Label):new N(e,s,o,g.Text),i.appendChild(n),i.appendChild(o),t.appendChild(i)}))}}class k{events={};constructor(){}onSafe(t,e){this.removeListener(t,e),this.on(t,e)}on(t,e){return"function"!=typeof e?(console.error("The listener callback must be a function, the given type is "+typeof e),!1):"string"!=typeof t?(console.error("The event name must be a string, the given type is "+typeof t),!1):(void 0===this.events[t]&&(this.events[t]={listeners:[]}),void this.events[t].listeners.push(e))}removeListener(t,e){if(!this.events[t])return!1;const s=this.events[t].listeners,i=s.indexOf(e);i>-1&&s.splice(i,1)}dispatch(t,e){if(void 0===this.events[t])return!1;this.events[t].listeners.forEach((t=>{t(e)}))}}class E{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}constructor(t,e){this.property=t,this.events=new k,e&&this.load(e)}InitData(t=null,e=-1){-1!==e&&(this.properties=e),this.load(t)}eventDataChange(e,s,i,n,o){o?(this.dispatch(`${t}_${e}_${o}_${s}`,{key:e,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${t}_${e}_${o}`,{key:e,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${t}_${e}_${s}`,{key:e,keyChild:s,value:i,sender:n}),this.dispatch(`${t}_${e}`,{key:e,keyChild:s,value:i,sender:n})}RemoveEventData(e,s,i){e&&e.removeListener(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}OnEventData(e,s,i){e&&e.on(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}BindEvent(t,e){t&&(t instanceof E&&this.OnEventData(t,e),Array.isArray(t)&&t.length>0&&t[0]instanceof E&&t.forEach(((t,s)=>this.OnEventData(t,e,s))))}Set(e,s,i=null,o=!0){this.data[e]!=s&&(this.data[e]&&(this.data[e]instanceof E&&this.RemoveEventData(this.data[e],e),Array.isArray(this.data[e])&&this.data[e].length>0&&this.data[e][0]instanceof E&&this.data[e].forEach(((t,s)=>this.RemoveEventData(t,e,s)))),this.BindEvent(s,e)),this.data[e]=s,o&&(this.dispatch(`${t}_${e}`,{key:e,value:s,sender:i}),this.dispatch(t,{key:e,value:s,sender:i}),this.dispatch(n,{key:e,value:s,sender:i}))}SetData(t,e=null,s=!1){if(s&&(this.data={}),t instanceof E){let s=t;if(!this.property&&s.property&&(this.property=s.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,s.Get(t),e,!1);else for(let t of Object.keys(s.getProperties()))this.Set(t,s.Get(t),e,!1)}else Object.keys(t).forEach((s=>{this.Set(s,t[s],e,!1)}));this.dispatch(n,{data:t})}Get(t){return this.data[t]}Append(t,e){this.data[t]||(this.data[t]=[]),this.data[t]=[...this.data[t],e],this.BindEvent(e,t)}Remove(t,e){this.data[t].indexOf(e);var s=this.data[t].indexOf(e);s>-1&&(this.RemoveEventData(this.data[t][s],t),this.data[t].splice(s,1))}load(t){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(t.key)),this.properties)for(let e of Object.keys(this.properties))this.data[e]=t?.[e]??("function"==typeof this.properties[e]?.default?this.properties[e]?.default():this.properties[e]?.default)??"",this.data[e]instanceof E||!this.data[e].key||(this.data[e]=new E(this.property,this.data[e])),!Array.isArray(this.data[e])||!this.property||this.data[e][0]instanceof E||(this.data[e]=this.data[e].map((t=>t instanceof E||!t.key?t:new E(this.property,t)))),this.BindEvent(this.data[e],e)}toString(){return JSON.stringify(this.toJson())}toJson(){let t={};for(let e of Object.keys(this.properties))t[e]=this.Get(e),t[e]instanceof E&&(t[e]=t[e].toJson()),Array.isArray(t[e])&&t[e].length>0&&t[e][0]instanceof E&&(t[e]=t[e].map((t=>t.toJson())));return t}delete(){this.events=new k,this.data={}}}class ${GetId(){return this.data.Get("id")}SetId(t){return this.data.Set("id",t)}properties={};data=new E;elNode=document.createElement("div");CheckElementChild(t){return this.elNode==t||this.elNode.contains(t)}events;SetData(t,e=null){this.data.SetData(t,e)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(n,{data:t,sender:this})}onSafe(t,e){return this.events.onSafe(t,e),this}on(t,e){return this.events.on(t,e),this}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}BindDataEvent(){this.data.on(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.on(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}RemoveDataEvent(){this.data.removeListener(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.removeListener(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}constructor(){this.events=new k,this.BindDataEvent()}}class G extends ${parent;constructor(t){super(),this.parent=t}}const I=()=>(new Date).getTime();class _{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new E;curvature=.5;constructor(t,e=0,s,i=0,n=null){this.from=t,this.fromIndex=e,this.to=s,this.toIndex=i,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),n?this.data=n:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(c)||{}}),this.from.data.Append("lines",this.data))}updateTo(t,e){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,t,e,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:t,y:e}=this.to.getPostisionDot(this.toIndex);this.updateTo(t,e)}return this}Active(t=!0){t?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(t,e,s,i,n,o){let a=t,r=e,d=s,h=i,l=n;switch(o){case"open":if(t>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(t=null,e=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),e&&this.from.data.Remove("lines",this.data),this.from!=t&&this.from.RemoveLine(this),this.to!=t&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(t){this.from.parent.setLineChoose(this)}setNodeTo(t,e){this.to=t,this.toIndex=e}Clone(){if(this.to&&this.toIndex&&this.from!=this.to)return new _(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}var D;!function(t){t[t.None=0]="None",t[t.Node=1]="Node",t[t.Canvas=2]="Canvas",t[t.Line=3]="Line"}(D||(D={}));class x{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=D.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(t){this.parent=t,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(t){t.preventDefault()}node_dragover(t){t.preventDefault()}node_dropEnd(t){if(t.preventDefault(),this.parent.$lock)return;let e=this.parent.main.getControlChoose();if(e||"touchend"===t.type||(e=t.dataTransfer.getData("node")),!e)return;let s=0,i=0;"touchmove"===t.type?(s=t.touches[0].clientX,i=t.touches[0].clientY):(s=t.clientX,i=t.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(e)||this.parent.AddNode(e,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(t){this.parent.$lock||t.ctrlKey&&(t.preventDefault(),t.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(t){if(this.parent.$lock)return;if(this.tagIngore.includes(t.target.tagName.toLowerCase()))return;if(this.timeFastClick=I(),t.target.classList.contains("main-path"))return;"touchstart"===t.type?(this.pos_x=t.touches[0].clientX,this.pos_y=t.touches[0].clientY):(this.pos_x=t.clientX,this.pos_y=t.clientY),this.moveType=D.Canvas;let e=this.parent.getNodeChoose();if(e&&e.CheckElementChild(t.target)?this.moveType=D.Node:this.parent.setNodeChoose(void 0),e&&this.moveType==D.Node&&t.target.classList.contains("node-dot")){this.moveType=D.Line;let s=t.target.getAttribute("node");this.tempLine=new _(e,s)}this.moveType==D.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(t){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let e=0,s=0;switch("touchmove"===t.type?(e=t.touches[0].clientX,s=t.touches[0].clientY):(e=t.clientX,s=t.clientY),this.moveType){case D.Canvas:{let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i);break}case D.Node:{let t=this.parent.CalcX(this.pos_x-e),i=this.parent.CalcY(this.pos_y-s);this.pos_x=e,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(t,i);break}case D.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-e),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=t.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&t.target.classList.contains("node-dot")){let e=t.target.getAttribute("node");this.tempLine.setNodeTo(r,e)}else{let t=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,t)}}}"touchmove"===t.type&&(this.mouse_x=e,this.mouse_y=s)}EndMove(t){if(this.parent.$lock)return;if(!this.flgDrap)return;if(I()-this.timeFastClick<100||!this.flgMove)return this.moveType=D.None,this.flgDrap=!1,void(this.flgMove=!1);let e=0,s=0;if("touchend"===t.type?(e=this.mouse_x,s=this.mouse_y):(e=t.clientX,s=t.clientY),this.moveType===D.Canvas){let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=e,this.pos_y=s,this.moveType=D.None,this.flgDrap=!1,this.flgMove=!1}keydown(t){this.parent.$lock||(("Delete"===t.key||"Backspace"===t.key&&t.metaKey)&&(t.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===t.key&&t.preventDefault())}}class w{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(t){this.parent=t,this.elNode=t.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let t=this.parent.GetGroupName(),e=t.length-1;if(e<0)return;let s=document.createElement("span");s.innerHTML="Root",this.elPathGroup.appendChild(s),this.btnBack.removeAttribute("style");for(let s=e;s>=0;s--){let e=document.createElement("span");e.innerHTML=`>>${t[s]}`,this.elPathGroup.appendChild(e)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_in())),t.innerHTML="+";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_out())),e.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(t),i.appendChild(e),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}const M=eval;class S extends G{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}CheckKey(t){return this.data.Get("key")==t}getDataLine(){return this.data.Get("lines")??[]}elContent;arrLine=[];option={};arrDataView=[];constructor(e,s,i={}){super(e),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof E?this.data=i:(this.data.InitData(i,this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(t,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.renderUI()}getOption(){return this.option}renderUI(){if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n        <div class="title">${this.option.icon} ${this.getName()}</div>\n        <div class="body">${this.option.html}</div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(t,e,s)=>{if(t){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<t;s++){let t=document.createElement("div");t.classList.add("node-dot"),t.setAttribute("node",`${e+s}`),i.appendChild(t)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body"),this.UpdateUI(),M(`(node,view)=>{${this.option.script}}`)(this,this.parent),this.arrDataView.forEach((t=>t.unBindData())),this.elContent&&(this.arrDataView=b.BindView(this.data,this.elContent))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(t,e,s=!1){if(this.elNode){let i=t,n=e;s||(n=this.elNode.offsetTop-e,i=this.elNode.offsetLeft-t),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(t=!0){t?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(t){var e=this.arrLine.indexOf(t);return e>-1&&this.arrLine.splice(e,1),this.arrLine}AddLine(t){this.arrLine=[...this.arrLine,t]}getPostisionDot(t=0){let e=this.elNode?.querySelector(`.node-dot[node="${t}"]`);if(e){let t=this.elNode.offsetTop+e.offsetTop+10;return{x:this.elNode.offsetLeft+e.offsetLeft+10,y:t}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((t=>{t.UpdateUI()}))}delete(e=!0){this.arrLine.forEach((t=>t.delete(this,e))),e?this.data.delete():(this.data.removeListener(t,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(n,{})}RenderLine(){this.getDataLine().forEach((t=>{let e=this.parent.GetNodeById(t.Get("to")),s=t.Get("toIndex"),i=t.Get("fromIndex");new _(this,i,e,s,t).UpdateUI()}))}}const T=1.6,P=.6,A=.1,j=1;class B extends ${main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(t){return this.getDataGroup().Set("zoom",t,this)}getY(){return+this.getDataGroup().Get("y")}setY(t){return this.getDataGroup().Set("y",t,this)}getX(){return+this.getDataGroup().Get("x")}setX(t){return this.getDataGroup().Set("x",t,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let e=this.data.Get("groups");return this.groupData=e?.filter((t=>t.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new E(this.main,{key:u,group:this.lastGroupName}),this.data.Append("groups",this.groupData)),this.groupData.onSafe(t,this.UpdateUI.bind(this)),this.groupData}group=[];GetGroupName(){return this.group.map((t=>this.GetDataById(t)?.Get("name")))}BackGroup(){this.group.splice(0,1),this.toolbar.renderPathGroup(),this.RenderUI()}CurrentGroup(){let t=this.group?.[0];return t&&""!=t?t:"root"}openGroup(t){this.group=[t,...this.group],this.toolbar.renderPathGroup(),this.RenderUI()}lineChoose;setLineChoose(t){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=t,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e,{data:this.nodeChoose.data})):this.dispatch(e,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNodeItem(t){return this.AddNode(t.Get("key"),t)}AddNode(t,e={}){return this.InsertNode(new S(this,t,e))}InsertNode(t){return this.nodes=[...this.nodes,t],t}RemoveNode(t){var e=this.nodes.indexOf(t);return this.data.Remove("nodes",t),e>-1&&this.nodes.splice(e,1),this.nodes}ClearNode(){this.nodes?.forEach((t=>t.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((t=>t.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(e,s){super(),this.main=s,this.elNode=e;let i=this.main.getPropertyByKey(l);this.data.InitData({},i),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,this.RenderUI(),this.on(t,this.RenderUI.bind(this)),new x(this),this.toolbar=new w(this)}updateView(t,e,s){this.elCanvas.style.transform=`translate(${t}px, ${e}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(t={}){t.sender&&t.sender instanceof S||(t.sender&&t.sender instanceof B||(this.ClearNode(),this.GetDataNode().forEach((t=>{this.AddNodeItem(t)})),this.GetAllNode().forEach((t=>{t.RenderLine()}))),this.UpdateUI())}Open(t){this.data=t,this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.toolbar.renderPathGroup(),this.BindDataEvent(),this.RenderUI()}CalcX(t){return t*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(t){return t*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(t){return this.GetAllNode().filter((e=>e.GetId()==t))?.[0]}GetDataById(t){return this.GetDataAllNode().filter((e=>e.Get("id")===t))?.[0]}checkOnlyNode(t){return this.main.getControlByKey(t).onlyNode&&this.nodes.filter((e=>e.CheckKey(t))).length>0}zoom_refresh(t=0){let e=0==t?j:this.getZoom()+A*t;T>=e&&e>=P&&(this.setX(this.getX()/this.zoom_last_value*e),this.setY(this.getY()/this.zoom_last_value*e),this.zoom_last_value=e,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class O extends m{main;view;constructor(t,i){super(t,i),this.main=i,this.view=new B(this.elNode,i),this.view.on(e,(t=>{i.dispatch(e,t)})),this.main.on(s,(t=>{this.view?.Open(t.data),this.main.setProjectOpen(t.data)}))}}class U{container;main;$dockManager={};constructor(t,e){this.container=t,this.main=e}reset(){this.$dockManager={},this.addDock(a,f),this.addDock(a,y),this.addDock(h,C),this.addDock(r,O),this.addDock(d,m),this.RenderUI()}addDock(t,e){this.$dockManager[t]||(this.$dockManager[t]=[]),this.$dockManager[t]=[...this.$dockManager[t],e]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((t=>{let e=this.container.querySelector(`.${t}`);e&&this.$dockManager[t].forEach((t=>{new t(e,this.main)}))}))}}const H={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"node-test",html:"",dot:{top:0,right:1,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:1,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="listProject node-form-control" node:model="project"></select></div>',script:"\n    const reloadProject = ()=>{\n      node.elNode.querySelector('.listProject').innerHtml='';\n      let option = document.createElement('option');\n      option.text='none';\n      option.value='';\n      node.elNode.querySelector('.listProject').appendChild(option);\n      node.parent.main.getProjectAll().forEach((item)=>{\n        let option = document.createElement('option');\n        option.text=item.Get('name');\n        option.value=item.Get('id');\n        node.elNode.querySelector('.listProject').appendChild(option);\n      });\n      node.elNode.querySelector('.listProject').value= node.data.Get('project')\n    }\n    reloadProject();\n\n   ;",properties:{project:{key:"project",default:""}}}};class R{$data=new E(this);$projectOpen;$properties={};$control={};events=new k;$controlChoose=null;$checkOption=!1;constructor(){this.$properties[p]={id:{default:()=>I()},key:{default:p},name:{default:()=>`solution-${I()}`},projects:{default:[]}},this.$properties[c]={key:{default:c},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[l]={id:{default:()=>I()},name:{default:()=>`Flow-${I()}`},key:{default:l},groups:{default:[]},nodes:{default:[]}},this.$properties[u]={key:{default:u},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}}}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(t,e=!0){this.$checkOption=!0,this.$control=e?{...t?.control||{}}:{...t?.control||{},...H};let s={};Object.keys(this.$control).map((t=>({...this.$control[t],key:t,sort:void 0===this.$control[t].sort?99999:this.$control[t].sort}))).sort(v).forEach((t=>{s[t.key]={dot:{left:1,top:1,right:1,bottom:1},...t},this.$properties[`node_${t.key}`]={...t.properties||{},id:{default:()=>I()},key:{default:t.key},name:{default:t.key},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(t){return t.getOption()?.html}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(t){this.$data.InitData(t,this.getPropertyByKey(p))}setProjectOpen(t){this.$projectOpen=t}checkProjectOpen(t){return this.$projectOpen==t}newProject(){this.openProject({}),this.dispatch(i,{})}openProject(t){if(t instanceof E){let e=this.getProjectById(t.Get("id"));e||(e=t,this.$data.Append("projects",e)),this.dispatch(s,e)}else{let i=new E(this);i.InitData(t,this.getPropertyByKey(l)),this.$data.Append("projects",i),this.dispatch(s,{data:i}),this.dispatch(e,{data:i}),this.dispatch(n,{data:i})}}getProjectById(t){return this.$data.Get("projects").filter((e=>e.Get("id")===t))?.[0]}setControlChoose(t){this.$controlChoose=t}getControlChoose(){return this.$controlChoose}getControlByKey(t){return this.$control[t]||{}}getControlNodeByKey(t){return{...this.getControlByKey(t),properties:this.getPropertyByKey(`node_${t}`)}}getPropertyByKey(t){return this.$properties[t]}}return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(t){this.main?.initOption(t),this.$dockManager.reset()}constructor(t,e){this.container=t,this.main=e??new R,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new U(this.container,this.main),this.$dockManager.reset()}onSafe(t,e){this.main?.onSafe(t,e)}on(t,e){this.main?.on(t,e)}removeListener(t,e){this.main?.removeListener(t,e)}dispatch(t,e){this.main?.dispatch(t,e)}getMain(){return this.main}},DesginerView:B,DataFlow:E}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2RvY2svRG9ja0Jhc2UudHMiLCIuLi9zcmMvZG9jay9Db250cm9sRG9jay50cyIsIi4uL3NyYy9kb2NrL1Byb2plY3REb2NrLnRzIiwiLi4vc3JjL2NvcmUvRWRpdG9yLnRzIiwiLi4vc3JjL2RvY2svUHJvcGVydHlEb2NrLnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YUZsb3cudHMiLCIuLi9zcmMvY29yZS9CYXNlRmxvdy50cyIsIi4uL3NyYy9jb3JlL1V0aWxzLnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0Rlc2dpbmVyVmlld19Ub29sYmFyLnRzIiwiLi4vc3JjL2Rlc2dpbmVyL05vZGUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2RvY2svVmlld0RvY2sudHMiLCIuLi9zcmMvZG9jay9Eb2NrTWFuYWdlci50cyIsIi4uL3NyYy9zeXN0ZW1zL2NvbnRyb2wudHMiLCIuLi9zcmMvc3lzdGVtcy9TeXN0ZW1CYXNlLnRzIiwiLi4vc3JjL2luZGV4LnRzIiwiLi4vc3JjL1Zpc3VhbEZsb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEV2ZW50RW51bSA9IHtcbiAgaW5pdDogXCJpbml0XCIsXG4gIGRhdGFDaGFuZ2U6IFwiZGF0YUNoYW5nZVwiLFxuICBzaG93UHJvcGVydHk6IFwic2hvd1Byb3BlcnR5XCIsXG4gIG9wZW5Qcm9qZWN0OiBcIm9wZW5Qcm9qZWN0XCIsXG4gIG5ld1Byb2plY3Q6IFwibmV3UHJvamVjdFwiLFxuICBjaGFuZ2U6IFwiY2hhbmdlXCIsXG4gIGRpc3Bvc2U6IFwiZGlzcG9zZVwiXG59XG5cbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcbiAgbGVmdDogXCJ2cy1sZWZ0XCIsXG4gIHRvcDogXCJ2cy10b3BcIixcbiAgdmlldzogXCJ2cy12aWV3XCIsXG4gIGJvdHRvbTogXCJ2cy1ib3R0b21cIixcbiAgcmlnaHQ6IFwidnMtcmlnaHRcIixcbn1cblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5RW51bSA9IHtcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcbiAgc29sdXRpb246ICdtYWluX3NvbHV0aW9uJyxcbiAgbGluZTogJ21haW5fbGluZScsXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXG4gIGdyb3VwQ2F2YXM6IFwibWFpbl9ncm91cENhdmFzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgY29tcGFyZVNvcnQgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgaWYgKGEuc29ydCA8IGIuc29ydCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5zb3J0ID4gYi5zb3J0KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJvdGVjdGVkIGVsQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICdEb2NrQmFzZSc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgQm94SW5mbyh0aXRsZTogc3RyaW5nLCAkY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX2hlYWRlclwiPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb190aXRsZVwiPiR7dGl0bGV9PC9zcGFuPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb19idXR0b25cIj48L3NwYW4+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb19jb250ZW50XCI+PC9kaXY+YDtcclxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9fY29udGVudCcpO1xyXG4gICAgaWYgKCRjYWxsYmFjaykge1xyXG4gICAgICAkY2FsbGJhY2sodGhpcy5lbENvbnRlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sRG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtY29udHJvbCcpO1xuICAgIHRoaXMuQm94SW5mbygnQ29udHJvbCcsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbGV0IGNvbnRyb2xzID0gdGhpcy5tYWluLmdldENvbnRyb2xBbGwoKTtcbiAgICAgIGNvbnNvbGUubG9nKGNvbnRyb2xzKTtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2xzKS5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IG5vZGVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ25vZGUtaXRlbScpO1xuICAgICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsICd0cnVlJyk7XG4gICAgICAgIG5vZGVJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJywgaXRlbSk7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2NvbnRyb2xzW2l0ZW1dLmljb259IDxzcGFuPiR7Y29udHJvbHNbaXRlbV0ubmFtZX08L3NwYW5gO1xuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmRyYWdTdGFydC5iaW5kKHRoaXMpKVxuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgdGhpcy5kcmFnZW5kLmJpbmQodGhpcykpXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcHJpdmF0ZSBkcmFnZW5kKGU6IGFueSkge1xuICAgIHRoaXMubWFpbi5zZXRDb250cm9sQ2hvb3NlKG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBkcmFnU3RhcnQoZTogYW55KSB7XG4gICAgbGV0IGtleSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIubm9kZS1pdGVtXCIpLmdldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJyk7XG4gICAgdGhpcy5tYWluLnNldENvbnRyb2xDaG9vc2Uoa2V5KTtcbiAgICBpZiAoZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcIm5vZGVcIiwga2V5KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtcHJvamVjdCcpO1xuICAgIHRoaXMuQm94SW5mbygnUHJvamVjdCcsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5jaGFuZ2UsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgKGRldGFpbDogYW55KSA9PiB7XG4gICAgICB0aGlzLmVsQ29udGVudD8ucXVlcnlTZWxlY3RvckFsbCgnLmFjdGl2ZScpLmZvckVhY2goKF9ub2RlKSA9PiB7XG4gICAgICAgIF9ub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5lbENvbnRlbnQgJiYgZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJykpIHtcbiAgICAgICAgdGhpcy5lbENvbnRlbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcHJvamVjdC1pZD1cIiR7ZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJyl9XCJdYCk/LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcHJpdmF0ZSByZW5kZXJVSSgpIHtcbiAgICBsZXQgJG5vZGVSaWdodDogSFRNTEVsZW1lbnQgfCBudWxsID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9faGVhZGVyIC52cy1ib3hpbmZvX2J1dHRvbicpO1xuICAgIGlmICghdGhpcy5lbENvbnRlbnQpIHJldHVybjtcbiAgICB0aGlzLmVsQ29udGVudC5pbm5lckhUTUwgPSBgYDtcbiAgICBpZiAoJG5vZGVSaWdodCkge1xuICAgICAgJG5vZGVSaWdodC5pbm5lckhUTUwgPSBgYDtcbiAgICAgIGxldCBidXR0b25OZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbk5ldyk7XG4gICAgICBidXR0b25OZXcuaW5uZXJIVE1MID0gYE5ld2A7XG4gICAgICBidXR0b25OZXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm1haW4ubmV3UHJvamVjdCgnJykpO1xuICAgIH1cblxuICAgIGxldCBwcm9qZWN0cyA9IHRoaXMubWFpbi5nZXRQcm9qZWN0QWxsKCk7XG4gICAgcHJvamVjdHMuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnbm9kZS1pdGVtJyk7XG4gICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcbiAgICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9X25hbWVgLCAoKSA9PiB7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIH0pO1xuICAgICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tYWluLmNoZWNrUHJvamVjdE9wZW4oaXRlbSkpIHtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLmRpc3BhdGNoKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgeyBkYXRhOiBpdGVtIH0pO1xuICAgICAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiBpdGVtIH0pO1xuXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxDb250ZW50Py5hcHBlbmRDaGlsZChub2RlSXRlbSk7XG4gICAgfSk7XG5cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZUZsb3csIEZsb3dDb3JlIH0gZnJvbSBcIi4vQmFzZUZsb3dcIlxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmV4cG9ydCBlbnVtIEVkaXRvclR5cGUge1xuICBMYWJlbCxcbiAgVGV4dCxcbiAgSW5saW5lXG59XG5leHBvcnQgY29uc3QgVGFnVmlldyA9IFsnU1BBTicsICdESVYnLCAnUCcsICdURVhUQVJFQSddO1xuZXhwb3J0IGNsYXNzIERhdGFWaWV3IHtcbiAgcHJpdmF0ZSBrZXlOYW1lOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkID0gXCJcIjtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhOiBEYXRhRmxvdywgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCkge1xuICAgIHRoaXMua2V5TmFtZSA9IGVsPy5nZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnKTtcbiAgICB0aGlzLmJpbmREYXRhKCk7XG4gIH1cbiAgcHJpdmF0ZSBiaW5kRGF0YSgpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWwpIHtcbiAgICAgIHRoaXMuZGF0YS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHt0aGlzLmtleU5hbWV9YCwgdGhpcy5iaW5kSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB1bkJpbmREYXRhKCkge1xuICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbCkge1xuICAgICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke3RoaXMua2V5TmFtZX1gLCB0aGlzLmJpbmRJbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kSW5wdXQoeyB2YWx1ZSwgc2VuZGVyIH06IGFueSkge1xuXG4gICAgaWYgKHNlbmRlciAhPT0gdGhpcyAmJiB0aGlzLmVsICYmIHNlbmRlci5lbCAhPT0gdGhpcy5lbCkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5lbC50YWdOYW1lKTtcbiAgICAgIGNvbnNvbGUubG9nKHNlbmRlcik7XG4gICAgICBpZiAoVGFnVmlldy5pbmNsdWRlcyh0aGlzLmVsLnRhZ05hbWUpKSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJUZXh0ID0gYCR7dmFsdWV9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh0aGlzLmVsIGFzIGFueSkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMua2V5TmFtZSAmJiB0aGlzLmVsKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmtleU5hbWUpO1xuICAgICAgdGhpcy5kYXRhLlNldCh0aGlzLmtleU5hbWUsICh0aGlzLmVsIGFzIGFueSkudmFsdWUsIHRoaXMpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc3RhdGljIEJpbmRWaWV3KGRhdGE6IERhdGFGbG93LCByb290OiBFbGVtZW50KSB7XG4gICAgaWYgKHJvb3QpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbCgnW25vZGVcXFxcOm1vZGVsXScpKS5tYXAoKGVsKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcoZGF0YSwgZWwgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEVkaXRvciB7XG4gIHByaXZhdGUgaXNFZGl0OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZWxJbnB1dDogSFRNTERhdGFFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgZWxMYWJlbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZGF0YTogRGF0YUZsb3csIHByaXZhdGUga2V5OiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLCBwcml2YXRlIHR5cGU6IEVkaXRvclR5cGUgPSBFZGl0b3JUeXBlLkxhYmVsLCBjaGFnbmU6IGJvb2xlYW4gPSBmYWxzZSkge1xuXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmRhdGEub25TYWZlKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB0aGlzLmNoYW5nZURhdGEuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5kYXRhLm9uU2FmZShFdmVudEVudW0uZGlzcG9zZSwgdGhpcy5kaXNwb3NlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaXNFZGl0ID0gdHlwZSA9PT0gRWRpdG9yVHlwZS5UZXh0O1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XG4gICAgaWYgKGNoYWduZSAmJiBlbCkge1xuICAgICAgZWwucGFyZW50RWxlbWVudD8uaW5zZXJ0QmVmb3JlKHRoaXMuZWxOb2RlLCBlbCk7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChlbCk7XG4gICAgICBlbD8ucmVtb3ZlKCk7XG4gICAgfSBlbHNlIGlmIChlbCkge1xuICAgICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLmRhdGEuR2V0KHRoaXMua2V5KTtcblxuICAgIGlmICh0aGlzLmlzRWRpdCkge1xuICAgICAgaWYgKHRoaXMuZWxMYWJlbCkge1xuICAgICAgICB0aGlzLmVsTGFiZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLnN3aXRjaE1vZGVFZGl0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVsTGFiZWwucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuZWxMYWJlbCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbElucHV0KSB7XG4gICAgICAgIHRoaXMuZWxJbnB1dC52YWx1ZSA9IGRhdGE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICB0aGlzLmVsSW5wdXQuY2xhc3NMaXN0LmFkZCgnbm9kZS1mb3JtLWNvbnRyb2wnKTtcbiAgICAgIHRoaXMuZWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5pbnB1dERhdGEuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsSW5wdXQudmFsdWUgPSBkYXRhO1xuICAgICAgdGhpcy5lbElucHV0LnNldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcsIHRoaXMua2V5KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxJbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmVsSW5wdXQpIHtcbiAgICAgICAgdGhpcy5lbElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5pbnB1dERhdGEuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxJbnB1dC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5lbElucHV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVsTGFiZWwpIHtcbiAgICAgICAgdGhpcy5lbExhYmVsLmlubmVySFRNTCA9IGRhdGE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT0gRWRpdG9yVHlwZS5JbmxpbmUpIHtcbiAgICAgICAgdGhpcy5lbExhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5zd2l0Y2hNb2RlRWRpdC5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxMYWJlbC5zZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnLCB0aGlzLmtleSk7XG4gICAgICB0aGlzLmVsTGFiZWwuaW5uZXJIVE1MID0gZGF0YTtcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxMYWJlbCk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBzd2l0Y2hNb2RlRWRpdCgpIHtcbiAgICB0aGlzLmlzRWRpdCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBwdWJsaWMgaW5wdXREYXRhKGU6IGFueSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kYXRhLlNldCh0aGlzLmtleSwgZS50YXJnZXQudmFsdWUsIHRoaXMpO1xuICAgIH0pXG4gIH1cbiAgcHVibGljIGNoYW5nZURhdGEoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmVsSW5wdXQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmlucHV0RGF0YS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTGFiZWw/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5zd2l0Y2hNb2RlRWRpdC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7dGhpcy5rZXl9YCwgdGhpcy5jaGFuZ2VEYXRhLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGlzcG9zZSwgdGhpcy5kaXNwb3NlLmJpbmQodGhpcykpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBFZGl0b3IsIEVkaXRvclR5cGUgfSBmcm9tIFwiLi4vY29yZS9FZGl0b3JcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHJpdmF0ZSBsYXN0RGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGFiZWxLZXlzOiBzdHJpbmdbXSA9IFsnaWQnLCAna2V5JywgJ2dyb3VwJywgJ2xpbmVzJywgJ25vZGVzJywgJ3Byb2plY3QnLCAneCcsICd5J107XG4gIHByaXZhdGUgaGlkZUtleXM6IHN0cmluZ1tdID0gWydsaW5lcycsICdub2RlcycsICdncm91cHMnXTtcbiAgcHJpdmF0ZSBzb3J0S2V5czogc3RyaW5nW10gPSBbJ2lkJywgJ2tleScsICduYW1lJywgJ2dyb3VwJ107XG4gIHByaXZhdGUgZGF0YUpzb246IEhUTUxUZXh0QXJlYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcblxuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9wZXJ0eScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbWFpbi5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGV0YWlsOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJVSShub2RlLCBkZXRhaWwuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJVSShub2RlOiBIVE1MRWxlbWVudCwgZGF0YTogRGF0YUZsb3cpIHtcbiAgICBpZiAodGhpcy5sYXN0RGF0YSA9PSBkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGFzdERhdGEgPSBkYXRhO1xuICAgIG5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IGRhdGEuZ2V0UHJvcGVydGllcygpO1xuICAgIHRoaXMuc29ydEtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh0aGlzLmhpZGVLZXlzLmluY2x1ZGVzKGtleSkgfHwgIXByb3BlcnRpZXNba2V5XSkgcmV0dXJuO1xuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XG4gICAgICBpZiAodGhpcy5sYWJlbEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBuZXcgRWRpdG9yKGRhdGEsIGtleSwgcHJvcGVydHlWYWx1ZSwgRWRpdG9yVHlwZS5MYWJlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXcgRWRpdG9yKGRhdGEsIGtleSwgcHJvcGVydHlWYWx1ZSwgRWRpdG9yVHlwZS5UZXh0KTtcbiAgICAgIH1cbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eUxhYmVsKTtcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eVZhbHVlKTtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocHJvcGVydHlJdGVtKTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHRoaXMuaGlkZUtleXMuaW5jbHVkZXMoa2V5KSB8fCB0aGlzLnNvcnRLZXlzLmluY2x1ZGVzKGtleSkpIHJldHVybjtcbiAgICAgIGxldCBwcm9wZXJ0eUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHByb3BlcnR5SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1pdGVtJyk7XG4gICAgICBsZXQgcHJvcGVydHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlMYWJlbC5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1sYWJlbCcpO1xuICAgICAgcHJvcGVydHlMYWJlbC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlWYWx1ZS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS12YWx1ZScpO1xuICAgICAgaWYgKHRoaXMubGFiZWxLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgbmV3IEVkaXRvcihkYXRhLCBrZXksIHByb3BlcnR5VmFsdWUsIEVkaXRvclR5cGUuTGFiZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3IEVkaXRvcihkYXRhLCBrZXksIHByb3BlcnR5VmFsdWUsIEVkaXRvclR5cGUuVGV4dCk7XG4gICAgICB9XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHByb3BlcnR5SXRlbSk7XG4gICAgfSk7XG4gICAgLy8gbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmRhdGFKc29uKTtcbiAgICAvLyB0aGlzLmRhdGFKc29uLnZhbHVlID0gZGF0YS50b1N0cmluZygpO1xuICAgIC8vIHRoaXMuZGF0YUpzb24uY2xhc3NMaXN0LmFkZCgnbm9kZS1mb3JtLWNvbnRyb2wnKTtcblxuICAgIC8vZGF0YS5vbihFdmVudEVudW0uZGF0YUNoYW5nZSwgKCkgPT4gdGhpcy5kYXRhSnNvbi52YWx1ZSA9IGRhdGEudG9TdHJpbmcoKSlcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyB7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gIHB1YmxpYyBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgdGhpcy5vbihldmVudCwgY2FsbGJhY2spO1xyXG4gIH1cclxuICAvKiBFdmVudHMgKi9cclxuICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBsaXN0ZW5lciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24sIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGNhbGxiYWNrfWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaXMgbm90IGEgc3RyaW5nXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBUaGUgZXZlbnQgbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCB0aGUgZ2l2ZW4gdHlwZSBpcyAke3R5cGVvZiBldmVudH1gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0ge1xyXG4gICAgICAgIGxpc3RlbmVyczogW11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuXHJcbiAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50XSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVyc1xyXG4gICAgY29uc3QgbGlzdGVuZXJJbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKVxyXG4gICAgY29uc3QgaGFzTGlzdGVuZXIgPSBsaXN0ZW5lckluZGV4ID4gLTFcclxuICAgIGlmIChoYXNMaXN0ZW5lcikgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LCAxKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiB7XHJcbiAgICAgIGxpc3RlbmVyKGRldGFpbHMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuL0Jhc2VGbG93XCI7XHJcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XHJcbmltcG9ydCB7IEV2ZW50RmxvdyB9IGZyb20gXCIuL0V2ZW50Rmxvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFGbG93IHtcclxuICBwcml2YXRlIGRhdGE6IGFueSA9IHt9O1xyXG4gIHByaXZhdGUgcHJvcGVydGllczogYW55ID0gbnVsbDtcclxuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xyXG4gIHB1YmxpYyBnZXRQcm9wZXJ0aWVzKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzO1xyXG4gIH1cclxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xyXG5cclxuICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcclxuICB9XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHRoaXMubG9hZChkYXRhKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIEluaXREYXRhKGRhdGE6IGFueSA9IG51bGwsIHByb3BlcnRpZXM6IGFueSA9IC0xKSB7XHJcbiAgICBpZiAocHJvcGVydGllcyAhPT0gLTEpIHtcclxuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcclxuICAgIH1cclxuICAgIHRoaXMubG9hZChkYXRhKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBldmVudERhdGFDaGFuZ2Uoa2V5OiBzdHJpbmcsIGtleUNoaWxkOiBzdHJpbmcsIHZhbHVlQ2hpbGQ6IGFueSwgc2VuZGVyQ2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGluZGV4KSB7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fV8ke2tleUNoaWxkfWAsIHtcclxuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fWAsIHtcclxuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1fJHtrZXlDaGlsZH1gLCB7XHJcbiAgICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIFJlbW92ZUV2ZW50RGF0YShpdGVtOiBEYXRhRmxvdywga2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgIGlmICghaXRlbSkgcmV0dXJuO1xyXG4gICAgaXRlbS5yZW1vdmVMaXN0ZW5lcihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1gLCAoeyBrZXk6IGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCB9OiBhbnkpID0+IHRoaXMuZXZlbnREYXRhQ2hhbmdlKGtleSwga2V5Q2hpbGQsIHZhbHVlQ2hpbGQsIHNlbmRlckNoaWxkLCBpbmRleCkpO1xyXG4gIH1cclxuICBwdWJsaWMgT25FdmVudERhdGEoaXRlbTogRGF0YUZsb3csIGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoIWl0ZW0pIHJldHVybjtcclxuICAgIGl0ZW0ub24oYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBCaW5kRXZlbnQodmFsdWU6IGFueSwga2V5OiBzdHJpbmcpIHtcclxuICAgIGlmICghdmFsdWUpIHJldHVybjtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgIHRoaXMuT25FdmVudERhdGEodmFsdWUgYXMgRGF0YUZsb3csIGtleSk7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKHZhbHVlIGFzIFtdKS5sZW5ndGggPiAwICYmIHZhbHVlWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcclxuICAgICAgKHZhbHVlIGFzIERhdGFGbG93W10pLmZvckVhY2goKGl0ZW06IERhdGFGbG93LCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLk9uRXZlbnREYXRhKGl0ZW0sIGtleSwgaW5kZXgpKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIFNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsLCBpc0Rpc3BhdGNoOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgaWYgKHRoaXMuZGF0YVtrZXldICE9IHZhbHVlKSB7XHJcbiAgICAgIGlmICh0aGlzLmRhdGFba2V5XSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFba2V5XSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgICB0aGlzLlJlbW92ZUV2ZW50RGF0YSgodGhpcy5kYXRhW2tleV0gYXMgRGF0YUZsb3cpLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFba2V5XSkgJiYgKHRoaXMuZGF0YVtrZXldIGFzIFtdKS5sZW5ndGggPiAwICYmIHRoaXMuZGF0YVtrZXldWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcclxuICAgICAgICAgICh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5SZW1vdmVFdmVudERhdGEoaXRlbSwga2V5LCBpbmRleCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLkJpbmRFdmVudCh2YWx1ZSwga2V5KTtcclxuICAgIH1cclxuICAgIHRoaXMuZGF0YVtrZXldID0gdmFsdWU7XHJcbiAgICBpZiAoaXNEaXNwYXRjaCkge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XHJcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcclxuICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBwdWJsaWMgU2V0RGF0YShkYXRhOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSBmYWxzZSkge1xyXG5cclxuICAgIGlmIChpc0NsZWFyRGF0YSkgdGhpcy5kYXRhID0ge307XHJcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgIGxldCAkZGF0YTogRGF0YUZsb3cgPSBkYXRhIGFzIERhdGFGbG93O1xyXG4gICAgICBpZiAoIXRoaXMucHJvcGVydHkgJiYgJGRhdGEucHJvcGVydHkpIHRoaXMucHJvcGVydHkgPSAkZGF0YS5wcm9wZXJ0eTtcclxuICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgICB0aGlzLlNldChrZXksICRkYXRhLkdldChrZXkpLCBzZW5kZXIsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKCRkYXRhLmdldFByb3BlcnRpZXMoKSkpIHtcclxuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICB0aGlzLlNldChrZXksIGRhdGFba2V5XSwgc2VuZGVyLCBmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge1xyXG4gICAgICBkYXRhXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIEdldChrZXk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xyXG4gIH1cclxuICBwdWJsaWMgQXBwZW5kKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAoIXRoaXMuZGF0YVtrZXldKSB0aGlzLmRhdGFba2V5XSA9IFtdO1xyXG4gICAgdGhpcy5kYXRhW2tleV0gPSBbLi4udGhpcy5kYXRhW2tleV0sIHZhbHVlXTtcclxuICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xyXG4gIH1cclxuICBwdWJsaWMgUmVtb3ZlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdGhpcy5SZW1vdmVFdmVudERhdGEodGhpcy5kYXRhW2tleV1baW5kZXhdLCBrZXkpO1xyXG4gICAgICB0aGlzLmRhdGFba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwdWJsaWMgbG9hZChkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZGF0YSA9IHt9O1xyXG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcclxuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eT8uZ2V0UHJvcGVydHlCeUtleShkYXRhLmtleSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhW2tleV0gPSAoZGF0YT8uW2tleV0gPz8gKCh0eXBlb2YgdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMucHJvcGVydGllc1trZXldPy5kZWZhdWx0KCkgOiB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCkgPz8gXCJcIikpO1xyXG4gICAgICAgIGlmICghKHRoaXMuZGF0YVtrZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpICYmIHRoaXMuZGF0YVtrZXldLmtleSkge1xyXG4gICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgdGhpcy5kYXRhW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFba2V5XSkgJiYgdGhpcy5wcm9wZXJ0eSAmJiAhKHRoaXMuZGF0YVtrZXldWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHRoaXMuZGF0YVtrZXldLm1hcCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBEYXRhRmxvdykgJiYgaXRlbS5rZXkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFGbG93KHRoaXMucHJvcGVydHksIGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5CaW5kRXZlbnQodGhpcy5kYXRhW2tleV0sIGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9Kc29uKCkpO1xyXG4gIH1cclxuICBwdWJsaWMgdG9Kc29uKCkge1xyXG4gICAgbGV0IHJzOiBhbnkgPSB7fTtcclxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgIHJzW2tleV0gPSB0aGlzLkdldChrZXkpO1xyXG4gICAgICBpZiAocnNba2V5XSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0udG9Kc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocnNba2V5XSkgJiYgKHJzW2tleV0gYXMgW10pLmxlbmd0aCA+IDAgJiYgcnNba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0ubWFwKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS50b0pzb24oKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBycztcclxuICB9XHJcbiAgcHVibGljIGRlbGV0ZSgpIHtcclxuICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50RmxvdygpO1xyXG4gICAgdGhpcy5kYXRhID0ge307XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi4vZGVzZ2luZXIvTm9kZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wZXJ0eSB7XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElDb250cm9sTm9kZSBleHRlbmRzIElQcm9wZXJ0eSB7XG4gIGdldENvbnRyb2xOb2RlQnlLZXkoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElFdmVudCB7XG4gIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KTogdm9pZDtcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTWFpbiBleHRlbmRzIElDb250cm9sTm9kZSwgSUV2ZW50IHtcbiAgbmV3UHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZDtcbiAgb3BlblByb2plY3QoJG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gIGdldFByb2plY3RBbGwoKTogYW55W107XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkO1xuICBjaGVja1Byb2plY3RPcGVuKCRkYXRhOiBhbnkpOiBib29sZWFuO1xuICBnZXRDb250cm9sQWxsKCk6IGFueVtdO1xuICBzZXRDb250cm9sQ2hvb3NlKGtleTogc3RyaW5nIHwgbnVsbCk6IHZvaWQ7XG4gIGdldENvbnRyb2xDaG9vc2UoKTogc3RyaW5nIHwgbnVsbDtcbiAgZ2V0Q29udHJvbEJ5S2V5KGtleTogc3RyaW5nKTogYW55O1xuICByZW5kZXJIdG1sKG5vZGU6IE5vZGUpOiBzdHJpbmc7XG4gIGluaXRPcHRpb24ob3B0aW9uOiBhbnkpOiB2b2lkO1xuICBjaGVja0luaXRPcHRpb24oKTogYm9vbGVhbjtcbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkO1xuICBleHBvcnRKc29uKCk6IGFueTtcbn1cbmV4cG9ydCBjbGFzcyBGbG93Q29yZSBpbXBsZW1lbnRzIElFdmVudCB7XG4gIHB1YmxpYyBHZXRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnaWQnKTtcbiAgfVxuICBwdWJsaWMgU2V0SWQoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCdpZCcsIGlkKTtcbiAgfVxuICBwdWJsaWMgcHJvcGVydGllczogYW55ID0ge307XG4gIHB1YmxpYyBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHB1YmxpYyBDaGVja0VsZW1lbnRDaGlsZChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5lbE5vZGUgPT0gZWwgfHwgdGhpcy5lbE5vZGUuY29udGFpbnMoZWwpO1xuICB9XG4gIHByaXZhdGUgZXZlbnRzOiBFdmVudEZsb3c7XG4gIHB1YmxpYyBTZXREYXRhKGRhdGE6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5kYXRhLlNldERhdGEoZGF0YSwgc2VuZGVyKTtcbiAgfVxuICBwdWJsaWMgU2V0RGF0YUZsb3coZGF0YTogRGF0YUZsb3cpIHtcbiAgICB0aGlzLmRhdGEuU2V0RGF0YShkYXRhLCB0aGlzLCB0cnVlKTtcblxuICAgIHRoaXMuZGlzcGF0Y2goYGJpbmRfZGF0YV9ldmVudGAsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwgeyBkYXRhLCBzZW5kZXI6IHRoaXMgfSk7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgQmluZERhdGFFdmVudCgpIHtcbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwge1xuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIHRoaXMuZGF0YS5vbihFdmVudEVudW0uY2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIFJlbW92ZURhdGFFdmVudCgpIHtcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmRhdGFDaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwge1xuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uY2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcbiAgICB0aGlzLkJpbmREYXRhRXZlbnQoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmFzZUZsb3c8VFBhcmVudCBleHRlbmRzIEZsb3dDb3JlPiBleHRlbmRzIEZsb3dDb3JlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXJlbnQ6IFRQYXJlbnQpIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgTE9HID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xyXG5leHBvcnQgY29uc3QgZ2V0RGF0ZSA9ICgpID0+IChuZXcgRGF0ZSgpKTtcclxuZXhwb3J0IGNvbnN0IGdldFRpbWUgPSAoKSA9PiBnZXREYXRlKCkuZ2V0VGltZSgpO1xyXG5leHBvcnQgY29uc3QgZ2V0VXVpZCA9ICgpID0+IHtcclxuICAvLyBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dFxyXG4gIGxldCBzOiBhbnkgPSBbXTtcclxuICBsZXQgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XHJcbiAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XHJcbiAgfVxyXG4gIHNbMTRdID0gXCI0XCI7ICAvLyBiaXRzIDEyLTE1IG9mIHRoZSB0aW1lX2hpX2FuZF92ZXJzaW9uIGZpZWxkIHRvIDAwMTBcclxuICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHNbMTldICYgMHgzKSB8IDB4OCwgMSk7ICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxyXG4gIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcclxuXHJcbiAgbGV0IHV1aWQgPSBzLmpvaW4oXCJcIik7XHJcbiAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvcGVydHlFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi9Ob2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBMaW5lIHtcbiAgcHVibGljIGVsTm9kZTogU1ZHRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKTtcbiAgcHVibGljIGVsUGF0aDogU1ZHUGF0aEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJwYXRoXCIpO1xuICBwcml2YXRlIGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KCk7XG4gIHByaXZhdGUgY3VydmF0dXJlOiBudW1iZXIgPSAwLjU7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZnJvbTogTm9kZSwgcHVibGljIGZyb21JbmRleDogbnVtYmVyID0gMCwgcHVibGljIHRvOiBOb2RlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBwdWJsaWMgdG9JbmRleDogbnVtYmVyID0gMCwgZGF0YTogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoXCJtYWluLXBhdGhcIik7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnJyk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcImNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFBhdGgpO1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gICAgdGhpcy5mcm9tLkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy50bz8uQWRkTGluZSh0aGlzKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLkluaXREYXRhKFxuICAgICAge1xuICAgICAgICBmcm9tOiB0aGlzLmZyb20uR2V0SWQoKSxcbiAgICAgICAgZnJvbUluZGV4OiB0aGlzLmZyb21JbmRleCxcbiAgICAgICAgdG86IHRoaXMudG8/LkdldElkKCksXG4gICAgICAgIHRvSW5kZXg6IHRoaXMudG9JbmRleFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLi4uIHRoaXMuZnJvbS5wYXJlbnQubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5saW5lKSB8fCB7fVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5mcm9tLmRhdGEuQXBwZW5kKCdsaW5lcycsIHRoaXMuZGF0YSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRvKHRvX3g6IG51bWJlciwgdG9feTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmZyb20gfHwgdGhpcy5mcm9tLmVsTm9kZSA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHsgeDogZnJvbV94LCB5OiBmcm9tX3kgfTogYW55ID0gdGhpcy5mcm9tLmdldFBvc3Rpc2lvbkRvdCh0aGlzLmZyb21JbmRleCk7XG4gICAgdmFyIGxpbmVDdXJ2ZSA9IHRoaXMuY3JlYXRlQ3VydmF0dXJlKGZyb21feCwgZnJvbV95LCB0b194LCB0b195LCB0aGlzLmN1cnZhdHVyZSwgJ29wZW5jbG9zZScpO1xuICAgIHRoaXMuZWxQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgbGluZUN1cnZlKTtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKTogTGluZSB7XG4gICAgLy9Qb3N0aW9uIG91dHB1dFxuICAgIGlmICh0aGlzLnRvICYmIHRoaXMudG8uZWxOb2RlKSB7XG4gICAgICBsZXQgeyB4OiB0b194LCB5OiB0b195IH06IGFueSA9IHRoaXMudG8uZ2V0UG9zdGlzaW9uRG90KHRoaXMudG9JbmRleCk7XG4gICAgICB0aGlzLnVwZGF0ZVRvKHRvX3gsIHRvX3kpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwdWJsaWMgQWN0aXZlKGZsZzogYW55ID0gdHJ1ZSkge1xuICAgIGlmIChmbGcpIHtcbiAgICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsUGF0aC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBjcmVhdGVDdXJ2YXR1cmUoc3RhcnRfcG9zX3g6IG51bWJlciwgc3RhcnRfcG9zX3k6IG51bWJlciwgZW5kX3Bvc194OiBudW1iZXIsIGVuZF9wb3NfeTogbnVtYmVyLCBjdXJ2YXR1cmVfdmFsdWU6IG51bWJlciwgdHlwZTogc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVfeCA9IHN0YXJ0X3Bvc194O1xuICAgIGxldCBsaW5lX3kgPSBzdGFydF9wb3NfeTtcbiAgICBsZXQgeCA9IGVuZF9wb3NfeDtcbiAgICBsZXQgeSA9IGVuZF9wb3NfeTtcbiAgICBsZXQgY3VydmF0dXJlID0gY3VydmF0dXJlX3ZhbHVlO1xuICAgIC8vdHlwZSBvcGVuY2xvc2Ugb3BlbiBjbG9zZSBvdGhlclxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ290aGVyJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuXG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGRlbGV0ZShub2RlVGhpczogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSB0cnVlKSB7XG4gICAgdGhpcy5lbFBhdGg/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLmZyb20uZGF0YS5SZW1vdmUoJ2xpbmVzJywgdGhpcy5kYXRhKTtcbiAgICBpZiAodGhpcy5mcm9tICE9IG5vZGVUaGlzKVxuICAgICAgdGhpcy5mcm9tLlJlbW92ZUxpbmUodGhpcyk7XG4gICAgaWYgKHRoaXMudG8gIT0gbm9kZVRoaXMpXG4gICAgICB0aGlzLnRvPy5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIHRoaXMuZWxQYXRoLnJlbW92ZSgpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZSgpO1xuICB9XG4gIHB1YmxpYyBTdGFydFNlbGVjdGVkKGU6IGFueSkge1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuc2V0TGluZUNob29zZSh0aGlzKVxuICB9XG4gIHB1YmxpYyBzZXROb2RlVG8obm9kZTogTm9kZSB8IHVuZGVmaW5lZCwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50byA9IG5vZGU7XG4gICAgdGhpcy50b0luZGV4ID0gdG9JbmRleDtcbiAgfVxuICBwdWJsaWMgQ2xvbmUoKSB7XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50b0luZGV4ICYmIHRoaXMuZnJvbSAhPSB0aGlzLnRvKSB7XG4gICAgICByZXR1cm4gbmV3IExpbmUodGhpcy5mcm9tLCB0aGlzLmZyb21JbmRleCwgdGhpcy50bywgdGhpcy50b0luZGV4KS5VcGRhdGVVSSgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vTm9kZVwiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X0V2ZW50IHtcblxuICBwcml2YXRlIHRpbWVGYXN0Q2xpY2s6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgdGFnSW5nb3JlID0gWydpbnB1dCcsICdidXR0b24nLCAnYScsICd0ZXh0YXJlYSddO1xuXG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZmxnTW92ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYXZfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdl95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgcG9zX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcG9zX3k6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgLyogTW91c2UgYW5kIFRvdWNoIEFjdGlvbnMgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpKTtcblxuICAgIC8qIERyb3AgRHJhcCAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5ub2RlX2Ryb3BFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5ub2RlX2RyYWdvdmVyLmJpbmQodGhpcykpO1xuICAgIC8qIFpvb20gTW91c2UgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLnpvb21fZW50ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogRGVsZXRlICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHRtZW51KGV2OiBhbnkpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfVxuICBwcml2YXRlIG5vZGVfZHJhZ292ZXIoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcm9wRW5kKGV2OiBhbnkpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGxldCBrZXlOb2RlOiBhbnkgPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xDaG9vc2UoKTtcbiAgICBpZiAoIWtleU5vZGUgJiYgZXYudHlwZSAhPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tPbmx5Tm9kZShrZXlOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9kZUl0ZW0gPSB0aGlzLnBhcmVudC5BZGROb2RlKGtleU5vZGUsIHtcbiAgICAgIGdyb3VwOiB0aGlzLnBhcmVudC5DdXJyZW50R3JvdXAoKVxuICAgIH0pO1xuICAgIG5vZGVJdGVtLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9pbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIFN0YXJ0TW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMudGFnSW5nb3JlLmluY2x1ZGVzKGV2LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGltZUZhc3RDbGljayA9IGdldFRpbWUoKTtcbiAgICBpZiAoZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWFpbi1wYXRoJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkNhbnZhcztcbiAgICBsZXQgbm9kZUNob29zZSA9IHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKTtcbiAgICBpZiAobm9kZUNob29zZSAmJiBub2RlQ2hvb3NlLkNoZWNrRWxlbWVudENoaWxkKGV2LnRhcmdldCkpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmIChub2RlQ2hvb3NlICYmIHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuTm9kZSAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5MaW5lO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBuZXcgTGluZShub2RlQ2hvb3NlLCBmcm9tSW5kZXgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PSBNb3ZlVHlwZS5DYW52YXMpIHtcbiAgICAgIHRoaXMuYXZfeCA9IHRoaXMucGFyZW50LmdldFgoKTtcbiAgICAgIHRoaXMuYXZfeSA9IHRoaXMucGFyZW50LmdldFkoKTtcbiAgICB9XG4gICAgdGhpcy5mbGdEcmFwID0gdHJ1ZTtcbiAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgfVxuICBwdWJsaWMgTW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZsZ0RyYXApIHJldHVybjtcbiAgICB0aGlzLmZsZ01vdmUgPSB0cnVlO1xuICAgIGxldCBlX3Bvc194ID0gMDtcbiAgICBsZXQgZV9wb3NfeSA9IDA7XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgIGVfcG9zX3ggPSBldi50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICBlX3Bvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMubW92ZVR5cGUpIHtcbiAgICAgIGNhc2UgTW92ZVR5cGUuQ2FudmFzOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLmF2X3ggKyB0aGlzLnBhcmVudC5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgICAgICBsZXQgeSA9IHRoaXMuYXZfeSArIHRoaXMucGFyZW50LkNhbGNZKC0odGhpcy5wb3NfeSAtIGVfcG9zX3kpKVxuICAgICAgICAgIHRoaXMucGFyZW50LnNldFgoeCk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuc2V0WSh5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5Ob2RlOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBvc194IC0gZV9wb3NfeCk7XG4gICAgICAgICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBvc195IC0gZV9wb3NfeSk7XG4gICAgICAgICAgdGhpcy5wb3NfeCA9IGVfcG9zX3g7XG4gICAgICAgICAgdGhpcy5wb3NfeSA9IGVfcG9zX3k7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpPy51cGRhdGVQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBNb3ZlVHlwZS5MaW5lOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHRoaXMudGVtcExpbmUpIHtcbiAgICAgICAgICAgIGxldCB4ID0gdGhpcy5wYXJlbnQuQ2FsY1godGhpcy5wYXJlbnQuZWxDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueCAtIGVfcG9zX3gpO1xuICAgICAgICAgICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG4gICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnVwZGF0ZVRvKHRoaXMucGFyZW50LmVsQ2FudmFzLm9mZnNldExlZnQgLSB4LCB0aGlzLnBhcmVudC5lbENhbnZhcy5vZmZzZXRUb3AgLSB5KTtcbiAgICAgICAgICAgIGxldCBub2RlRWwgPSBldi50YXJnZXQuY2xvc2VzdCgnW25vZGUtaWRdJyk7XG4gICAgICAgICAgICBsZXQgbm9kZUlkID0gbm9kZUVsPy5nZXRBdHRyaWJ1dGUoJ25vZGUtaWQnKTtcbiAgICAgICAgICAgIGxldCBub2RlVG8gPSBub2RlSWQgPyB0aGlzLnBhcmVudC5HZXROb2RlQnlJZChub2RlSWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKG5vZGVUbyAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgICAgICAgICAgbGV0IHRvSW5kZXggPSBldi50YXJnZXQuZ2V0QXR0cmlidXRlKCdub2RlJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVtcExpbmUuc2V0Tm9kZVRvKG5vZGVUbywgdG9JbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZXQgdG9JbmRleCA9IG5vZGVFbD8ucXVlcnlTZWxlY3RvcignLm5vZGUtZG90Jyk/LlswXT8uZ2V0QXR0cmlidXRlKCdub2RlJyk7XG4gICAgICAgICAgICAgIHRoaXMudGVtcExpbmUuc2V0Tm9kZVRvKG5vZGVUbywgdG9JbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgIHRoaXMubW91c2VfeCA9IGVfcG9zX3g7XG4gICAgICB0aGlzLm1vdXNlX3kgPSBlX3Bvc195O1xuICAgIH1cbiAgfVxuICBwcml2YXRlIEVuZE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgLy9maXggRmFzdCBDbGlja1xuICAgIGlmICgoKGdldFRpbWUoKSAtIHRoaXMudGltZUZhc3RDbGljaykgPCAxMDApIHx8ICF0aGlzLmZsZ01vdmUpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICAgICAgdGhpcy5mbGdEcmFwID0gZmFsc2U7XG4gICAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNoZW5kXCIpIHtcbiAgICAgIGVfcG9zX3ggPSB0aGlzLm1vdXNlX3g7XG4gICAgICBlX3Bvc195ID0gdGhpcy5tb3VzZV95O1xuICAgIH0gZWxzZSB7XG4gICAgICBlX3Bvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICBsZXQgeCA9IHRoaXMuYXZfeCArIHRoaXMucGFyZW50LkNhbGNYKC0odGhpcy5wb3NfeCAtIGVfcG9zX3gpKVxuICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgIHRoaXMucGFyZW50LnNldFgoeCk7XG4gICAgICB0aGlzLnBhcmVudC5zZXRZKHkpO1xuICAgICAgdGhpcy5hdl94ID0gMDtcbiAgICAgIHRoaXMuYXZfeSA9IDA7XG4gICAgfVxuICAgIGlmICh0aGlzLnRlbXBMaW5lKSB7XG4gICAgICB0aGlzLnRlbXBMaW5lLkNsb25lKCk7XG4gICAgICB0aGlzLnRlbXBMaW5lLmRlbGV0ZSgpO1xuICAgICAgdGhpcy50ZW1wTGluZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5wb3NfeCA9IGVfcG9zX3g7XG4gICAgdGhpcy5wb3NfeSA9IGVfcG9zX3k7XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vbmU7XG4gICAgdGhpcy5mbGdEcmFwID0gZmFsc2U7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHJpdmF0ZSBrZXlkb3duKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXYua2V5ID09PSAnRGVsZXRlJyB8fCAoZXYua2V5ID09PSAnQmFja3NwYWNlJyAmJiBldi5tZXRhS2V5KSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKVxuXG4gICAgICB0aGlzLnBhcmVudC5nZXROb2RlQ2hvb3NlKCk/LmRlbGV0ZSgpO1xuICAgICAgdGhpcy5wYXJlbnQuZ2V0TGluZUNob29zZSgpPy5kZWxldGUoKTtcbiAgICB9XG4gICAgaWYgKGV2LmtleSA9PT0gJ0YyJykge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBEZXNnaW5lclZpZXdfVG9vbGJhciB7XG4gIHByaXZhdGUgZWxOb2RlOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFBhdGhHcm91cDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHJpdmF0ZSBidG5CYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgdGhpcy5lbE5vZGUgPSBwYXJlbnQuZWxUb29sYmFyO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuY2xhc3NMaXN0LmFkZCgndG9vbGJhci1ncm91cCcpO1xuICAgIHRoaXMucmVuZGVyVUkoKTtcbiAgICB0aGlzLnJlbmRlclBhdGhHcm91cCgpO1xuICB9XG4gIHB1YmxpYyByZW5kZXJQYXRoR3JvdXAoKSB7XG4gICAgdGhpcy5idG5CYWNrLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuaW5uZXJIVE1MID0gYGA7XG4gICAgbGV0IGdyb3VwcyA9IHRoaXMucGFyZW50LkdldEdyb3VwTmFtZSgpO1xuICAgIGxldCBsZW4gPSBncm91cHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGVuIDwgMCkgcmV0dXJuO1xuICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRleHQuaW5uZXJIVE1MID0gYFJvb3RgO1xuICAgIHRoaXMuZWxQYXRoR3JvdXAuYXBwZW5kQ2hpbGQodGV4dCk7XG4gICAgdGhpcy5idG5CYWNrLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IGxlbjsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICB0ZXh0LmlubmVySFRNTCA9IGA+PiR7Z3JvdXBzW2luZGV4XX1gO1xuICAgICAgdGhpcy5lbFBhdGhHcm91cC5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHJlbmRlclVJKCkge1xuICAgIGlmICghdGhpcy5lbE5vZGUpIHJldHVybjtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgYDtcbiAgICB0aGlzLmJ0bkJhY2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC5CYWNrR3JvdXAoKSk7XG4gICAgdGhpcy5idG5CYWNrLmlubmVySFRNTCA9IGBCYWNrYDtcbiAgICBsZXQgYnRuWm9vbUluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnRuWm9vbUluLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wYXJlbnQuem9vbV9pbigpKTtcbiAgICBidG5ab29tSW4uaW5uZXJIVE1MID0gYCtgO1xuICAgIGxldCBidG5ab29tT3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnRuWm9vbU91dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMucGFyZW50Lnpvb21fb3V0KCkpO1xuICAgIGJ0blpvb21PdXQuaW5uZXJIVE1MID0gYC1gO1xuICAgIGxldCBidG5ab29tUmVzZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidG5ab29tUmVzZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC56b29tX3Jlc2V0KCkpO1xuICAgIGJ0blpvb21SZXNldC5pbm5lckhUTUwgPSBgKmA7XG4gICAgbGV0IGJ1dHRvbkdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYnV0dG9uR3JvdXAuY2xhc3NMaXN0LmFkZCgndG9vbGJhci1idXR0b24nKVxuICAgIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKHRoaXMuYnRuQmFjayk7XG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuWm9vbUluKTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5ab29tT3V0KTtcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5ab29tUmVzZXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxQYXRoR3JvdXApO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZUZsb3cgfSBmcm9tIFwiLi4vY29yZS9CYXNlRmxvd1wiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld1wiO1xuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IERhdGFWaWV3IH0gZnJvbSBcIi4uL2NvcmUvRWRpdG9yXCI7XG5cbmNvbnN0IGdldmFsID0gZXZhbDtcbmV4cG9ydCBjbGFzcyBOb2RlIGV4dGVuZHMgQmFzZUZsb3c8RGVzZ2luZXJWaWV3PiB7XG4gIC8qKlxuICAgKiBHRVQgU0VUIGZvciBEYXRhXG4gICAqL1xuICBwdWJsaWMgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnbmFtZScpO1xuICB9XG4gIHB1YmxpYyBnZXRZKCkge1xuICAgIHJldHVybiArdGhpcy5kYXRhLkdldCgneScpO1xuICB9XG4gIHB1YmxpYyBzZXRZKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLlNldCgneScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WCgpIHtcbiAgICByZXR1cm4gK3RoaXMuZGF0YS5HZXQoJ3gnKTtcbiAgfVxuICBwdWJsaWMgc2V0WCh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5TZXQoJ3gnLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIENoZWNrS2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2tleScpID09IGtleTtcbiAgfVxuICBwdWJsaWMgZ2V0RGF0YUxpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ2xpbmVzJykgPz8gW107XG4gIH1cbiAgcHVibGljIGVsQ29udGVudDogRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBhcnJMaW5lOiBMaW5lW10gPSBbXTtcbiAgcHJpdmF0ZSBvcHRpb246IGFueSA9IHt9O1xuICBwcml2YXRlIGFyckRhdGFWaWV3OiBEYXRhVmlld1tdID0gW107XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IERlc2dpbmVyVmlldywgcHJpdmF0ZSBrZXlOb2RlOiBhbnksIGRhdGE6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMucGFyZW50Lm1haW4uZ2V0Q29udHJvbE5vZGVCeUtleShrZXlOb2RlKTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLm9wdGlvbj8ucHJvcGVydGllcztcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuSW5pdERhdGEoZGF0YSwgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICAgIHRoaXMucGFyZW50LmRhdGEuQXBwZW5kKCdub2RlcycsIHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIHRoaXMuZGF0YS5vbihFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5yZW5kZXJVSS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1ub2RlJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb24uY2xhc3MpIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb24uY2xhc3MpO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudC5lbENhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdub2RlLWlkJywgdGhpcy5HZXRJZCgpKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5yZW5kZXJVSSgpO1xuICB9XG4gIHB1YmxpYyBnZXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uO1xuICB9XG4gIHByaXZhdGUgcmVuZGVyVUkoKSB7XG4gICAgaWYgKHRoaXMuZWxOb2RlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSByZXR1cm47XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YCk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtbGVmdFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLXRvcFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiR7dGhpcy5vcHRpb24uaWNvbn0gJHt0aGlzLmdldE5hbWUoKX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJvZHlcIj4ke3RoaXMub3B0aW9uLmh0bWx9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1ib3R0b21cIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtcmlnaHRcIj48L2Rpdj5cbiAgICBgO1xuICAgIGNvbnN0IGFkZE5vZGVEb3QgPSAobnVtOiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkLCBzdGFydDogbnVtYmVyLCBxdWVyeTogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAobnVtKSB7XG4gICAgICAgIGxldCBub2RlUXVlcnkgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKHF1ZXJ5KTtcbiAgICAgICAgaWYgKG5vZGVRdWVyeSkge1xuICAgICAgICAgIG5vZGVRdWVyeS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlRG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBub2RlRG90LmNsYXNzTGlzdC5hZGQoJ25vZGUtZG90Jyk7XG4gICAgICAgICAgICBub2RlRG90LnNldEF0dHJpYnV0ZSgnbm9kZScsIGAke3N0YXJ0ICsgaX1gKTtcbiAgICAgICAgICAgIG5vZGVRdWVyeS5hcHBlbmRDaGlsZChub2RlRG90KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py5sZWZ0LCAxMDAwLCAnLm5vZGUtbGVmdCcpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8udG9wLCAyMDAwLCAnLm5vZGUtdG9wJyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py5ib3R0b20sIDMwMDAsICcubm9kZS1ib3R0b20nKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LnJpZ2h0LCA0MDAwLCAnLm5vZGUtcmlnaHQnKTtcblxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLm5vZGUtY29udGVudCAuYm9keScpO1xuICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgICBnZXZhbChgKG5vZGUsdmlldyk9Pnske3RoaXMub3B0aW9uLnNjcmlwdH19YCkodGhpcywgdGhpcy5wYXJlbnQpO1xuICAgIHRoaXMuYXJyRGF0YVZpZXcuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS51bkJpbmREYXRhKCkpO1xuICAgIGlmICh0aGlzLmVsQ29udGVudClcbiAgICAgIHRoaXMuYXJyRGF0YVZpZXcgPSBEYXRhVmlldy5CaW5kVmlldyh0aGlzLmRhdGEsIHRoaXMuZWxDb250ZW50KTtcbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKCkge1xuICAgIGlmICh0aGlzLkNoZWNrS2V5KCdub2RlX2dyb3VwJykpIHtcbiAgICAgIHRoaXMucGFyZW50Lm9wZW5Hcm91cCh0aGlzLkdldElkKCkpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgdXBkYXRlUG9zaXRpb24oeDogYW55LCB5OiBhbnksIGlDaGVjayA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuZWxOb2RlKSB7XG4gICAgICBsZXQgdGVtcHggPSB4O1xuICAgICAgbGV0IHRlbXB5ID0geTtcbiAgICAgIGlmICghaUNoZWNrKSB7XG4gICAgICAgIHRlbXB5ID0gKHRoaXMuZWxOb2RlLm9mZnNldFRvcCAtIHkpO1xuICAgICAgICB0ZW1weCA9ICh0aGlzLmVsTm9kZS5vZmZzZXRMZWZ0IC0geCk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcHggIT09IHRoaXMuZ2V0WCgpKSB7XG4gICAgICAgIHRoaXMuc2V0WCh0ZW1weCk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcHkgIT09IHRoaXMuZ2V0WSgpKSB7XG4gICAgICAgIHRoaXMuc2V0WSh0ZW1weSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1YmxpYyBBY3RpdmUoZmxnOiBhbnkgPSB0cnVlKSB7XG4gICAgaWYgKGZsZykge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgUmVtb3ZlTGluZShsaW5lOiBMaW5lKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5hcnJMaW5lLmluZGV4T2YobGluZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuYXJyTGluZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hcnJMaW5lO1xuICB9XG4gIHB1YmxpYyBBZGRMaW5lKGxpbmU6IExpbmUpIHtcbiAgICB0aGlzLmFyckxpbmUgPSBbLi4udGhpcy5hcnJMaW5lLCBsaW5lXTtcbiAgfVxuICBwdWJsaWMgZ2V0UG9zdGlzaW9uRG90KGluZGV4OiBudW1iZXIgPSAwKSB7XG4gICAgbGV0IGVsRG90OiBhbnkgPSB0aGlzLmVsTm9kZT8ucXVlcnlTZWxlY3RvcihgLm5vZGUtZG90W25vZGU9XCIke2luZGV4fVwiXWApO1xuICAgIGlmIChlbERvdCkge1xuICAgICAgbGV0IHkgPSAodGhpcy5lbE5vZGUub2Zmc2V0VG9wICsgZWxEb3Qub2Zmc2V0VG9wICsgMTApO1xuICAgICAgbGV0IHggPSAodGhpcy5lbE5vZGUub2Zmc2V0TGVmdCArIGVsRG90Lm9mZnNldExlZnQgKyAxMCk7XG4gICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKSB7XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGB0b3A6ICR7dGhpcy5nZXRZKCl9cHg7IGxlZnQ6ICR7dGhpcy5nZXRYKCl9cHg7YCk7XG4gICAgdGhpcy5hcnJMaW5lLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uVXBkYXRlVUkoKTtcbiAgICB9KVxuICB9XG4gIHB1YmxpYyBkZWxldGUoaXNDbGVhckRhdGEgPSB0cnVlKSB7XG4gICAgdGhpcy5hcnJMaW5lLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0uZGVsZXRlKHRoaXMsIGlzQ2xlYXJEYXRhKSk7XG4gICAgaWYgKGlzQ2xlYXJEYXRhKVxuICAgICAgdGhpcy5kYXRhLmRlbGV0ZSgpO1xuICAgIGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLnJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5SZW1vdmVEYXRhRXZlbnQoKTtcbiAgICB9XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZSgpO1xuICAgIHRoaXMuYXJyTGluZSA9IFtdO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMucGFyZW50LlJlbW92ZU5vZGUodGhpcyk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7fSk7XG4gIH1cbiAgcHVibGljIFJlbmRlckxpbmUoKSB7XG4gICAgdGhpcy5nZXREYXRhTGluZSgpLmZvckVhY2goKGl0ZW06IERhdGFGbG93KSA9PiB7XG4gICAgICBsZXQgbm9kZUZyb20gPSB0aGlzO1xuICAgICAgbGV0IG5vZGVUbyA9IHRoaXMucGFyZW50LkdldE5vZGVCeUlkKGl0ZW0uR2V0KCd0bycpKTtcbiAgICAgIGxldCB0b0luZGV4ID0gaXRlbS5HZXQoJ3RvSW5kZXgnKTtcbiAgICAgIGxldCBmcm9tSW5kZXggPSBpdGVtLkdldCgnZnJvbUluZGV4Jyk7XG4gICAgICBuZXcgTGluZShub2RlRnJvbSwgZnJvbUluZGV4LCBub2RlVG8sIHRvSW5kZXgsIGl0ZW0pLlVwZGF0ZVVJKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZsb3dDb3JlLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBFdmVudEVudW0sIFByb3BlcnR5RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXdfRXZlbnQgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdfRXZlbnRcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlld19Ub29sYmFyIH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3X1Rvb2xiYXJcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vTm9kZVwiO1xuXG5leHBvcnQgY29uc3QgWm9vbSA9IHtcbiAgbWF4OiAxLjYsXG4gIG1pbjogMC42LFxuICB2YWx1ZTogMC4xLFxuICBkZWZhdWx0OiAxXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3IGV4dGVuZHMgRmxvd0NvcmUge1xuXG4gIC8qKlxuICAgKiBHRVQgU0VUIGZvciBEYXRhXG4gICAqL1xuICBwdWJsaWMgZ2V0Wm9vbSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd6b29tJyk7XG4gIH1cbiAgcHVibGljIHNldFpvb20odmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgnem9vbScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd5Jyk7XG4gIH1cbiAgcHVibGljIHNldFkodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WCgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd4Jyk7XG4gIH1cbiAgcHVibGljIHNldFgodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneCcsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwcml2YXRlIGdyb3VwRGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGFzdEdyb3VwTmFtZTogc3RyaW5nID0gXCJcIjtcbiAgcHJpdmF0ZSBnZXREYXRhR3JvdXAoKTogRGF0YUZsb3cge1xuICAgIGlmICh0aGlzLiRsb2NrKSByZXR1cm4gdGhpcy5kYXRhO1xuICAgIC8vIGNhY2hlIGdyb3VwRGF0YVxuICAgIGlmICh0aGlzLmxhc3RHcm91cE5hbWUgPT09IHRoaXMuQ3VycmVudEdyb3VwKCkpIHJldHVybiB0aGlzLmdyb3VwRGF0YSA/PyB0aGlzLmRhdGE7XG4gICAgdGhpcy5sYXN0R3JvdXBOYW1lID0gdGhpcy5DdXJyZW50R3JvdXAoKTtcbiAgICBsZXQgZ3JvdXBzID0gdGhpcy5kYXRhLkdldCgnZ3JvdXBzJyk7XG4gICAgdGhpcy5ncm91cERhdGEgPSBncm91cHM/LmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdncm91cCcpID09IHRoaXMubGFzdEdyb3VwTmFtZSk/LlswXTtcblxuICAgIGlmICghdGhpcy5ncm91cERhdGEpIHtcbiAgICAgIHRoaXMuZ3JvdXBEYXRhID0gbmV3IERhdGFGbG93KHRoaXMubWFpbiwge1xuICAgICAgICBrZXk6IFByb3BlcnR5RW51bS5ncm91cENhdmFzLFxuICAgICAgICBncm91cDogdGhpcy5sYXN0R3JvdXBOYW1lXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGF0YS5BcHBlbmQoJ2dyb3VwcycsIHRoaXMuZ3JvdXBEYXRhKTtcbiAgICAgIHRoaXMuZ3JvdXBEYXRhLm9uU2FmZShFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5VcGRhdGVVSS5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ncm91cERhdGEub25TYWZlKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLlVwZGF0ZVVJLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ncm91cERhdGE7XG4gIH1cbiAgcHJpdmF0ZSBncm91cDogYW55W10gPSBbXTtcbiAgcHVibGljIEdldEdyb3VwTmFtZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAubWFwKChpdGVtKSA9PiB0aGlzLkdldERhdGFCeUlkKGl0ZW0pPy5HZXQoJ25hbWUnKSk7XG4gIH1cbiAgcHVibGljIEJhY2tHcm91cCgpIHtcbiAgICB0aGlzLmdyb3VwLnNwbGljZSgwLCAxKTtcbiAgICB0aGlzLnRvb2xiYXIucmVuZGVyUGF0aEdyb3VwKCk7XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICB9XG4gIHB1YmxpYyBDdXJyZW50R3JvdXAoKSB7XG4gICAgbGV0IG5hbWUgPSB0aGlzLmdyb3VwPy5bMF07XG5cbiAgICBpZiAobmFtZSAmJiBuYW1lICE9ICcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuICdyb290JztcbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKGlkOiBhbnkpIHtcbiAgICB0aGlzLmdyb3VwID0gW2lkLCAuLi50aGlzLmdyb3VwXTtcbiAgICB0aGlzLnRvb2xiYXIucmVuZGVyUGF0aEdyb3VwKCk7XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICB9XG4gIHByaXZhdGUgbGluZUNob29zZTogTGluZSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHNldExpbmVDaG9vc2Uobm9kZTogTGluZSB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpbmVDaG9vc2UpIHRoaXMubGluZUNob29zZS5BY3RpdmUoZmFsc2UpO1xuICAgIHRoaXMubGluZUNob29zZSA9IG5vZGU7XG4gICAgaWYgKHRoaXMubGluZUNob29zZSkge1xuICAgICAgdGhpcy5saW5lQ2hvb3NlLkFjdGl2ZSgpO1xuICAgICAgdGhpcy5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXRMaW5lQ2hvb3NlKCk6IExpbmUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmxpbmVDaG9vc2U7XG4gIH1cbiAgcHJpdmF0ZSBub2RlczogTm9kZVtdID0gW107XG4gIHByaXZhdGUgbm9kZUNob29zZTogTm9kZSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHNldE5vZGVDaG9vc2Uobm9kZTogTm9kZSB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm5vZGVDaG9vc2UpIHRoaXMubm9kZUNob29zZS5BY3RpdmUoZmFsc2UpO1xuICAgIHRoaXMubm9kZUNob29zZSA9IG5vZGU7XG4gICAgaWYgKHRoaXMubm9kZUNob29zZSkge1xuICAgICAgdGhpcy5ub2RlQ2hvb3NlLkFjdGl2ZSgpO1xuICAgICAgdGhpcy5zZXRMaW5lQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHsgZGF0YTogdGhpcy5ub2RlQ2hvb3NlLmRhdGEgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiB0aGlzLmRhdGEgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXROb2RlQ2hvb3NlKCk6IE5vZGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm5vZGVDaG9vc2U7XG4gIH1cbiAgcHVibGljIEFkZE5vZGVJdGVtKGRhdGE6IGFueSk6IE5vZGUge1xuICAgIHJldHVybiB0aGlzLkFkZE5vZGUoZGF0YS5HZXQoJ2tleScpLCBkYXRhKTtcbiAgfVxuICBwdWJsaWMgQWRkTm9kZShrZXlOb2RlOiBzdHJpbmcsIGRhdGE6IGFueSA9IHt9KTogTm9kZSB7XG4gICAgcmV0dXJuIHRoaXMuSW5zZXJ0Tm9kZShuZXcgTm9kZSh0aGlzLCBrZXlOb2RlLCBkYXRhKSk7XG4gIH1cbiAgcHVibGljIEluc2VydE5vZGUobm9kZTogTm9kZSk6IE5vZGUge1xuICAgIHRoaXMubm9kZXMgPSBbLi4udGhpcy5ub2Rlcywgbm9kZV07XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcHVibGljIFJlbW92ZU5vZGUobm9kZTogTm9kZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMubm9kZXMuaW5kZXhPZihub2RlKTtcbiAgICB0aGlzLmRhdGEuUmVtb3ZlKCdub2RlcycsIG5vZGUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLm5vZGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vZGVzO1xuICB9XG4gIHB1YmxpYyBDbGVhck5vZGUoKSB7XG4gICAgdGhpcy5ub2Rlcz8uZm9yRWFjaChpdGVtID0+IGl0ZW0uZGVsZXRlKGZhbHNlKSk7XG4gICAgdGhpcy5ub2RlcyA9IFtdO1xuICB9XG4gIHB1YmxpYyBHZXREYXRhQWxsTm9kZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuICh0aGlzLmRhdGEuR2V0KCdub2RlcycpID8/IFtdKTtcbiAgfVxuICBwdWJsaWMgR2V0RGF0YU5vZGUoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLkdldERhdGFBbGxOb2RlKCkuZmlsdGVyKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS5HZXQoXCJncm91cFwiKSA9PT0gdGhpcy5DdXJyZW50R3JvdXAoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlidXRlXG4gICovXG4gIHB1YmxpYyBlbENhbnZhczogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHVibGljIGVsVG9vbGJhcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHVibGljIHRvb2xiYXI6IERlc2dpbmVyVmlld19Ub29sYmFyO1xuICBwdWJsaWMgJGxvY2s6IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIHpvb21fbGFzdF92YWx1ZTogYW55ID0gMTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsTm9kZTogSFRNTEVsZW1lbnQsIHB1YmxpYyBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5lbE5vZGUgPSBlbE5vZGU7XG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IHRoaXMubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5tYWluKTtcbiAgICB0aGlzLmRhdGEuSW5pdERhdGEoe30sIHByb3BlcnRpZXMpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LnJlbW92ZShcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCdkZXNnaW5lci12aWV3JylcbiAgICB0aGlzLmVsQ2FudmFzLmNsYXNzTGlzdC5hZGQoXCJkZXNnaW5lci1jYW52YXNcIik7XG4gICAgdGhpcy5lbFRvb2xiYXIuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLXRvb2xiYXJcIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbENhbnZhcyk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFRvb2xiYXIpO1xuICAgIHRoaXMuZWxOb2RlLnRhYkluZGV4ID0gMDtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgdGhpcy5vbihFdmVudEVudW0uZGF0YUNoYW5nZSwgdGhpcy5SZW5kZXJVSS5iaW5kKHRoaXMpKTtcbiAgICBuZXcgRGVzZ2luZXJWaWV3X0V2ZW50KHRoaXMpO1xuICAgIHRoaXMudG9vbGJhciA9IG5ldyBEZXNnaW5lclZpZXdfVG9vbGJhcih0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWaWV3KHg6IGFueSwgeTogYW55LCB6b29tOiBhbnkpIHtcbiAgICB0aGlzLmVsQ2FudmFzLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7em9vbX0pYDtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKSB7XG4gICAgdGhpcy51cGRhdGVWaWV3KHRoaXMuZ2V0WCgpLCB0aGlzLmdldFkoKSwgdGhpcy5nZXRab29tKCkpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXJVSShkZXRhaWw6IGFueSA9IHt9KSB7XG4gICAgaWYgKGRldGFpbC5zZW5kZXIgJiYgZGV0YWlsLnNlbmRlciBpbnN0YW5jZW9mIE5vZGUpIHJldHVybjtcbiAgICBpZiAoZGV0YWlsLnNlbmRlciAmJiBkZXRhaWwuc2VuZGVyIGluc3RhbmNlb2YgRGVzZ2luZXJWaWV3KSB7XG4gICAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuQ2xlYXJOb2RlKCk7XG4gICAgdGhpcy5HZXREYXRhTm9kZSgpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgdGhpcy5BZGROb2RlSXRlbShpdGVtKTtcbiAgICB9KTtcbiAgICB0aGlzLkdldEFsbE5vZGUoKS5mb3JFYWNoKChpdGVtOiBOb2RlKSA9PiB7XG4gICAgICBpdGVtLlJlbmRlckxpbmUoKTtcbiAgICB9KVxuICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgfVxuICBwdWJsaWMgT3BlbigkZGF0YTogRGF0YUZsb3cpIHtcbiAgICB0aGlzLmRhdGEgPSAkZGF0YTtcbiAgICB0aGlzLiRsb2NrID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0R3JvdXBOYW1lID0gJyc7XG4gICAgdGhpcy5ncm91cERhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ncm91cCA9IFtdO1xuICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICB0aGlzLkJpbmREYXRhRXZlbnQoKTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIENhbGNYKG51bWJlcjogYW55KSB7XG4gICAgcmV0dXJuIG51bWJlciAqICh0aGlzLmVsQ2FudmFzLmNsaWVudFdpZHRoIC8gKHRoaXMuZWxOb2RlPy5jbGllbnRXaWR0aCAqIHRoaXMuZ2V0Wm9vbSgpKSk7XG4gIH1cbiAgcHVibGljIENhbGNZKG51bWJlcjogYW55KSB7XG4gICAgcmV0dXJuIG51bWJlciAqICh0aGlzLmVsQ2FudmFzLmNsaWVudEhlaWdodCAvICh0aGlzLmVsTm9kZT8uY2xpZW50SGVpZ2h0ICogdGhpcy5nZXRab29tKCkpKTtcbiAgfVxuICBwdWJsaWMgR2V0QWxsTm9kZSgpOiBOb2RlW10ge1xuICAgIHJldHVybiB0aGlzLm5vZGVzIHx8IFtdO1xuICB9XG4gIHB1YmxpYyBHZXROb2RlQnlJZChpZDogc3RyaW5nKTogTm9kZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuR2V0QWxsTm9kZSgpLmZpbHRlcihub2RlID0+IG5vZGUuR2V0SWQoKSA9PSBpZCk/LlswXTtcbiAgfVxuXG4gIHB1YmxpYyBHZXREYXRhQnlJZChpZDogc3RyaW5nKTogRGF0YUZsb3cgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5HZXREYXRhQWxsTm9kZSgpLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5HZXQoJ2lkJykgPT09IGlkKT8uWzBdO1xuICB9XG4gIGNoZWNrT25seU5vZGUoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHRoaXMubWFpbi5nZXRDb250cm9sQnlLZXkoa2V5KS5vbmx5Tm9kZSkgJiYgdGhpcy5ub2Rlcy5maWx0ZXIoaXRlbSA9PiBpdGVtLkNoZWNrS2V5KGtleSkpLmxlbmd0aCA+IDA7XG4gIH1cbiAgcHVibGljIHpvb21fcmVmcmVzaChmbGc6IGFueSA9IDApIHtcbiAgICBsZXQgdGVtcF96b29tID0gZmxnID09IDAgPyBab29tLmRlZmF1bHQgOiAodGhpcy5nZXRab29tKCkgKyBab29tLnZhbHVlICogZmxnKTtcbiAgICBpZiAoWm9vbS5tYXggPj0gdGVtcF96b29tICYmIHRlbXBfem9vbSA+PSBab29tLm1pbikge1xuICAgICAgdGhpcy5zZXRYKCh0aGlzLmdldFgoKSAvIHRoaXMuem9vbV9sYXN0X3ZhbHVlKSAqIHRlbXBfem9vbSk7XG4gICAgICB0aGlzLnNldFkoKHRoaXMuZ2V0WSgpIC8gdGhpcy56b29tX2xhc3RfdmFsdWUpICogdGVtcF96b29tKTtcbiAgICAgIHRoaXMuem9vbV9sYXN0X3ZhbHVlID0gdGVtcF96b29tO1xuICAgICAgdGhpcy5zZXRab29tKHRoaXMuem9vbV9sYXN0X3ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21faW4oKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goMSk7XG4gIH1cbiAgcHVibGljIHpvb21fb3V0KCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKC0xKTtcbiAgfVxuICBwdWJsaWMgem9vbV9yZXNldCgpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9CYXNlRmxvd1wiO1xuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXdEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwcml2YXRlIHZpZXc6IERlc2dpbmVyVmlldyB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG5cbiAgICB0aGlzLnZpZXcgPSBuZXcgRGVzZ2luZXJWaWV3KHRoaXMuZWxOb2RlLCBtYWluKTtcbiAgICB0aGlzLnZpZXcub24oRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgKGRhdGE6IGFueSkgPT4geyBtYWluLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIGRhdGEpOyB9KTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCAoaXRlbTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZpZXc/Lk9wZW4oaXRlbS5kYXRhKTtcbiAgICAgIHRoaXMubWFpbi5zZXRQcm9qZWN0T3BlbihpdGVtLmRhdGEpO1xuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IERvY2tFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IENvbnRyb2xEb2NrIH0gZnJvbSBcIi4vQ29udHJvbERvY2tcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcbmltcG9ydCB7IFByb2plY3REb2NrIH0gZnJvbSBcIi4vUHJvamVjdERvY2tcIjtcbmltcG9ydCB7IFByb3BlcnR5RG9jayB9IGZyb20gXCIuL1Byb3BlcnR5RG9ja1wiO1xuaW1wb3J0IHsgVGFiRG9jayB9IGZyb20gXCIuL1RhYkRvY2tcIjtcbmltcG9ydCB7IFZpZXdEb2NrIH0gZnJvbSBcIi4vVmlld0RvY2tcIjtcblxuZXhwb3J0IGNsYXNzIERvY2tNYW5hZ2VyIHtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IGFueSA9IHt9O1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHsgfVxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSB7fTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ubGVmdCwgQ29udHJvbERvY2spO1xuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5sZWZ0LCBQcm9qZWN0RG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnJpZ2h0LCBQcm9wZXJ0eURvY2spO1xuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS52aWV3LCBWaWV3RG9jayk7XG4gIC8vICB0aGlzLmFkZERvY2soRG9ja0VudW0udG9wLCBUYWJEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0uYm90dG9tLCBEb2NrQmFzZSk7XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICB9XG4gIHB1YmxpYyBhZGREb2NrKCRrZXk6IHN0cmluZywgJHZpZXc6IGFueSkge1xuICAgIGlmICghdGhpcy4kZG9ja01hbmFnZXJbJGtleV0pXG4gICAgICB0aGlzLiRkb2NrTWFuYWdlclska2V5XSA9IFtdO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldID0gWy4uLnRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldLCAkdmlld107XG4gIH1cblxuICBwdWJsaWMgUmVuZGVyVUkoKSB7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cInZzLWxlZnQgdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInZzLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLXRvcCB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy12aWV3IHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLWJvdHRvbSB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1yaWdodCB2cy1kb2NrXCI+PC9kaXY+XG4gICAgYDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRkb2NrTWFuYWdlcikuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGxldCBxdWVyeVNlbGVjdG9yID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7a2V5fWApO1xuICAgICAgaWYgKHF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy4kZG9ja01hbmFnZXJba2V5XS5mb3JFYWNoKCgkaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgbmV3ICRpdGVtKHF1ZXJ5U2VsZWN0b3IsIHRoaXMubWFpbik7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBDb250cm9sID0ge1xuICBub2RlX2JlZ2luOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXBsYXlcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdCZWdpbicsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGNsYXNzOiAnbm9kZS10ZXN0JyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAxLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMSxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfZW5kOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXN0b3BcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdFbmQnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnJyxcbiAgICBkb3Q6IHtcbiAgICAgIGxlZnQ6IDEsXG4gICAgICB0b3A6IDEsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIG9ubHlOb2RlOiB0cnVlXG4gIH0sXG4gIG5vZGVfaWY6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtZXF1YWxzXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnSWYnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdj5jb25kaXRpb246PGJyLz48aW5wdXQgbm9kZTptb2RlbD1cImNvbmRpdGlvblwiLz48L2Rpdj4nLFxuICAgIHNjcmlwdDogYGAsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIG91dHB1dDogMlxuICB9LFxuICBub2RlX2dyb3VwOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLW9iamVjdC1ncm91cFwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ0dyb3VwJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogJzxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBwM1wiPjxidXR0b24gY2xhc3M9XCJidG5Hb0dyb3VwIG5vZGUtZm9ybS1jb250cm9sXCI+R288L2J1dHRvbj48L2Rpdj4nLFxuICAgIHNjcmlwdDogYG5vZGUuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5idG5Hb0dyb3VwJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge25vZGUub3Blbkdyb3VwKCl9KTtgLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICBrZXk6IFwiY29uZGl0aW9uXCIsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9vcHRpb246IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnT3B0aW9uJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMSxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiBgXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAzXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNFwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDVcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc2NyaXB0OiBgbm9kZS5lbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7bm9kZS5vcGVuR3JvdXAoKX0pO2AsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIG91dHB1dDogMlxuICB9LFxuICBub2RlX3Byb2plY3Q6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnUHJvamVjdCcsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6ICc8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgcDNcIj48c2VsZWN0IGNsYXNzPVwibGlzdFByb2plY3Qgbm9kZS1mb3JtLWNvbnRyb2xcIiBub2RlOm1vZGVsPVwicHJvamVjdFwiPjwvc2VsZWN0PjwvZGl2PicsXG4gICAgc2NyaXB0OiBgXG4gICAgY29uc3QgcmVsb2FkUHJvamVjdCA9ICgpPT57XG4gICAgICBub2RlLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcubGlzdFByb2plY3QnKS5pbm5lckh0bWw9Jyc7XG4gICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udGV4dD0nbm9uZSc7XG4gICAgICBvcHRpb24udmFsdWU9Jyc7XG4gICAgICBub2RlLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcubGlzdFByb2plY3QnKS5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgbm9kZS5wYXJlbnQubWFpbi5nZXRQcm9qZWN0QWxsKCkuZm9yRWFjaCgoaXRlbSk9PntcbiAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvcHRpb24udGV4dD1pdGVtLkdldCgnbmFtZScpO1xuICAgICAgICBvcHRpb24udmFsdWU9aXRlbS5HZXQoJ2lkJyk7XG4gICAgICAgIG5vZGUuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5saXN0UHJvamVjdCcpLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICB9KTtcbiAgICAgIG5vZGUuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5saXN0UHJvamVjdCcpLnZhbHVlPSBub2RlLmRhdGEuR2V0KCdwcm9qZWN0JylcbiAgICB9XG4gICAgcmVsb2FkUHJvamVjdCgpO1xuXG4gICA7YCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGtleTogXCJwcm9qZWN0XCIsXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cbiIsImltcG9ydCB7IGNvbXBhcmVTb3J0LCBFdmVudEVudW0sIFByb3BlcnR5RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi4vY29yZS9FdmVudEZsb3dcIjtcbmltcG9ydCB7IGdldFRpbWUgfSBmcm9tIFwiLi4vY29yZS9VdGlsc1wiO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCIuLi9kZXNnaW5lci9Ob2RlXCI7XG5pbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xuXG5leHBvcnQgY2xhc3MgU3lzdGVtQmFzZSBpbXBsZW1lbnRzIElNYWluIHtcbiAgcHJpdmF0ZSAkZGF0YTogRGF0YUZsb3cgPSBuZXcgRGF0YUZsb3codGhpcyk7XG4gIHByaXZhdGUgJHByb2plY3RPcGVuOiBhbnk7XG4gIHByaXZhdGUgJHByb3BlcnRpZXM6IGFueSA9IHt9O1xuICBwcml2YXRlICRjb250cm9sOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdyA9IG5ldyBFdmVudEZsb3coKTtcbiAgcHJpdmF0ZSAkY29udHJvbENob29zZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgJGNoZWNrT3B0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0uc29sdXRpb25dID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5zb2x1dGlvblxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYHNvbHV0aW9uLSR7Z2V0VGltZSgpfWBcbiAgICAgIH0sXG4gICAgICBwcm9qZWN0czoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0ubGluZV0gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLmxpbmVcbiAgICAgIH0sXG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICBmcm9tSW5kZXg6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHRvOiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB0b0luZGV4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vc2V0IHByb2plY3RcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5tYWluXSA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGdldFRpbWUoKVxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYEZsb3ctJHtnZXRUaW1lKCl9YFxuICAgICAgfSxcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0ubWFpblxuICAgICAgfSxcbiAgICAgIGdyb3Vwczoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfSxcbiAgICAgIG5vZGVzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5ncm91cENhdmFzXSA9IHtcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhc1xuICAgICAgfSxcbiAgICAgIGdyb3VwOiB7XG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LFxuICAgICAgeDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgem9vbToge1xuICAgICAgICBkZWZhdWx0OiAxXG4gICAgICB9LFxuICAgIH1cbiAgfVxuICBleHBvcnRKc29uKCkge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLnRvSnNvbigpO1xuICB9XG4gIHB1YmxpYyBjaGVja0luaXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNoZWNrT3B0aW9uO1xuICB9XG4gIGluaXRPcHRpb24ob3B0aW9uOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLiRjaGVja09wdGlvbiA9IHRydWU7XG4gICAgLy8gc2V0IGNvbnRyb2xcbiAgICB0aGlzLiRjb250cm9sID0gaXNEZWZhdWx0ID8geyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30gfSA6IHsgLi4ub3B0aW9uPy5jb250cm9sIHx8IHt9LCAuLi5Db250cm9sIH07XG4gICAgbGV0IGNvbnRyb2xUZW1wOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRjb250cm9sKS5tYXAoKGtleSkgPT4gKHsgLi4udGhpcy4kY29udHJvbFtrZXldLCBrZXksIHNvcnQ6ICh0aGlzLiRjb250cm9sW2tleV0uc29ydCA9PT0gdW5kZWZpbmVkID8gOTk5OTkgOiB0aGlzLiRjb250cm9sW2tleV0uc29ydCkgfSkpLnNvcnQoY29tcGFyZVNvcnQpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgY29udHJvbFRlbXBbaXRlbS5rZXldID0ge1xuICAgICAgICBkb3Q6IHtcbiAgICAgICAgICBsZWZ0OiAxLFxuICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICByaWdodDogMSxcbiAgICAgICAgICBib3R0b206IDEsXG4gICAgICAgIH0sXG4gICAgICAgIC4uLml0ZW1cbiAgICAgIH07XG4gICAgICB0aGlzLiRwcm9wZXJ0aWVzW2Bub2RlXyR7aXRlbS5rZXl9YF0gPSB7XG4gICAgICAgIC4uLihpdGVtLnByb3BlcnRpZXMgfHwge30pLFxuICAgICAgICBpZDoge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IGdldFRpbWUoKVxuICAgICAgICB9LFxuICAgICAgICBrZXk6IHtcbiAgICAgICAgICBkZWZhdWx0OiBpdGVtLmtleVxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgZGVmYXVsdDogaXRlbS5rZXlcbiAgICAgICAgfSxcbiAgICAgICAgeDoge1xuICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgeToge1xuICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBsaW5lczoge1xuICAgICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICB0aGlzLiRjb250cm9sID0gY29udHJvbFRlbXA7XG4gIH1cbiAgcmVuZGVySHRtbChub2RlOiBOb2RlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbm9kZS5nZXRPcHRpb24oKT8uaHRtbDtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcbiAgfVxuXG4gIGdldENvbnRyb2xBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2wgPz8ge307XG4gIH1cbiAgZ2V0UHJvamVjdEFsbCgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpID8/IFtdO1xuICB9XG4gIGltcG9ydEpzb24oZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy4kZGF0YS5Jbml0RGF0YShkYXRhLCB0aGlzLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLnNvbHV0aW9uKSk7XG4gIH1cbiAgc2V0UHJvamVjdE9wZW4oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuJHByb2plY3RPcGVuID0gJGRhdGE7XG4gIH1cbiAgY2hlY2tQcm9qZWN0T3BlbigkZGF0YTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuJHByb2plY3RPcGVuID09ICRkYXRhO1xuICB9XG4gIG5ld1Byb2plY3QoKTogdm9pZCB7XG4gICAgdGhpcy5vcGVuUHJvamVjdCh7fSk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ubmV3UHJvamVjdCwge30pO1xuICB9XG4gIG9wZW5Qcm9qZWN0KCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoJGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgbGV0ICRwcm9qZWN0OiBhbnkgPSB0aGlzLmdldFByb2plY3RCeUlkKCRkYXRhLkdldCgnaWQnKSk7XG4gICAgICBpZiAoISRwcm9qZWN0KSB7XG4gICAgICAgICRwcm9qZWN0ID0gJGRhdGE7XG4gICAgICAgIHRoaXMuJGRhdGEuQXBwZW5kKCdwcm9qZWN0cycsICRwcm9qZWN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCAkcHJvamVjdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkYXRhID0gbmV3IERhdGFGbG93KHRoaXMpO1xuICAgICAgZGF0YS5Jbml0RGF0YSgkZGF0YSwgdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5tYWluKSk7XG4gICAgICB0aGlzLiRkYXRhLkFwcGVuZCgncHJvamVjdHMnLCBkYXRhKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB7IGRhdGEgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHsgZGF0YSB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwgeyBkYXRhIH0pO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0UHJvamVjdEJ5SWQoJGlkOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJykuZmlsdGVyKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS5HZXQoJ2lkJykgPT09ICRpZCk/LlswXTtcbiAgfVxuICBzZXRDb250cm9sQ2hvb3NlKGtleTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMuJGNvbnRyb2xDaG9vc2UgPSBrZXk7XG4gIH1cbiAgZ2V0Q29udHJvbENob29zZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbENob29zZTtcbiAgfVxuICBnZXRDb250cm9sQnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbFtrZXldIHx8IHt9O1xuICB9XG4gIGdldENvbnRyb2xOb2RlQnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5nZXRDb250cm9sQnlLZXkoa2V5KSxcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMuZ2V0UHJvcGVydHlCeUtleShgbm9kZV8ke2tleX1gKVxuICAgIH1cbiAgfVxuICBnZXRQcm9wZXJ0eUJ5S2V5KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuJHByb3BlcnRpZXNba2V5XTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBWaXN1YWxGbG93IH0gZnJvbSBcIi4vVmlzdWFsRmxvd1wiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSAnLi9kZXNnaW5lci9EZXNnaW5lclZpZXcnO1xuZXhwb3J0IHsgSU1haW4gfSBmcm9tICcuL2NvcmUvQmFzZUZsb3cnO1xuaW1wb3J0IHsgRGF0YUZsb3cgfSBmcm9tICcuL2NvcmUvRGF0YUZsb3cnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBWaXN1YWxGbG93LFxuICBEZXNnaW5lclZpZXcsXG4gIERhdGFGbG93XG59O1xuXG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gJy4vY29yZS9CYXNlRmxvdyc7XG5pbXBvcnQgeyBEb2NrTWFuYWdlciB9IGZyb20gJy4vZG9jay9Eb2NrTWFuYWdlcic7XG5pbXBvcnQgeyBTeXN0ZW1CYXNlIH0gZnJvbSAnLi9zeXN0ZW1zL1N5c3RlbUJhc2UnO1xuZXhwb3J0IGNsYXNzIFZpc3VhbEZsb3cge1xuICBwcml2YXRlIG1haW46IElNYWluIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlICRkb2NrTWFuYWdlcjogRG9ja01hbmFnZXI7XG4gIHB1YmxpYyBnZXREb2NrTWFuYWdlcigpOiBEb2NrTWFuYWdlciB7XG4gICAgcmV0dXJuIHRoaXMuJGRvY2tNYW5hZ2VyO1xuICB9XG4gIHB1YmxpYyBzZXRPcHRpb24oZGF0YSkge1xuICAgIHRoaXMubWFpbj8uaW5pdE9wdGlvbihkYXRhKTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlci5yZXNldCgpO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG1haW46IElNYWluIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5tYWluID0gbWFpbiA/PyBuZXcgU3lzdGVtQmFzZSgpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyID0gbmV3IERvY2tNYW5hZ2VyKHRoaXMuY29udGFpbmVyLCB0aGlzLm1haW4pO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/LmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcbiAgfVxuICBwdWJsaWMgZ2V0TWFpbigpOiBJTWFpbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFpbjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkV2ZW50RW51bSIsIkRvY2tFbnVtIiwiUHJvcGVydHlFbnVtIiwiY29tcGFyZVNvcnQiLCJhIiwiYiIsInNvcnQiLCJEb2NrQmFzZSIsIm1haW4iLCJlbE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbENvbnRlbnQiLCJjb25zdHJ1Y3RvciIsImNvbnRhaW5lciIsInRoaXMiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsIkJveEluZm8iLCJ0aXRsZSIsIiRjYWxsYmFjayIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInF1ZXJ5U2VsZWN0b3IiLCJDb250cm9sRG9jayIsInN1cGVyIiwibm9kZSIsImNvbnRyb2xzIiwiZ2V0Q29udHJvbEFsbCIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsIml0ZW0iLCJub2RlSXRlbSIsInNldEF0dHJpYnV0ZSIsImljb24iLCJuYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRyYWdTdGFydCIsImJpbmQiLCJkcmFnZW5kIiwiZSIsInNldENvbnRyb2xDaG9vc2UiLCJrZXkiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwidHlwZSIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJQcm9qZWN0RG9jayIsInJlbmRlclVJIiwib24iLCJkZXRhaWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX25vZGUiLCJkYXRhIiwiR2V0IiwiJG5vZGVSaWdodCIsImJ1dHRvbk5ldyIsIm5ld1Byb2plY3QiLCJnZXRQcm9qZWN0QWxsIiwicmVtb3ZlTGlzdGVuZXIiLCJjaGVja1Byb2plY3RPcGVuIiwiZGlzcGF0Y2giLCJFZGl0b3JUeXBlIiwiVGFnVmlldyIsIkRhdGFWaWV3IiwiZWwiLCJrZXlOYW1lIiwiYmluZERhdGEiLCJiaW5kSW5wdXQiLCJiaW5kRXZlbnQiLCJ1bkJpbmREYXRhIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInZhbHVlIiwic2VuZGVyIiwidGFnTmFtZSIsImluY2x1ZGVzIiwiaW5uZXJUZXh0IiwiU2V0Iiwic3RhdGljIiwicm9vdCIsIkFycmF5IiwiZnJvbSIsIm1hcCIsIkVkaXRvciIsImlzRWRpdCIsImVsSW5wdXQiLCJlbExhYmVsIiwiTGFiZWwiLCJjaGFnbmUiLCJvblNhZmUiLCJjaGFuZ2VEYXRhIiwiZGlzcG9zZSIsIlRleHQiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJyZW5kZXIiLCJzd2l0Y2hNb2RlRWRpdCIsImlucHV0RGF0YSIsIklubGluZSIsInNldFRpbWVvdXQiLCJQcm9wZXJ0eURvY2siLCJsYXN0RGF0YSIsImxhYmVsS2V5cyIsImhpZGVLZXlzIiwic29ydEtleXMiLCJkYXRhSnNvbiIsInByb3BlcnRpZXMiLCJnZXRQcm9wZXJ0aWVzIiwicHJvcGVydHlJdGVtIiwicHJvcGVydHlMYWJlbCIsInByb3BlcnR5VmFsdWUiLCJFdmVudEZsb3ciLCJldmVudHMiLCJldmVudCIsImNhbGxiYWNrIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJsaXN0ZW5lcnMiLCJwdXNoIiwibGlzdGVuZXJJbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkZXRhaWxzIiwibGlzdGVuZXIiLCJEYXRhRmxvdyIsInByb3BlcnR5IiwibG9hZCIsIkluaXREYXRhIiwiZXZlbnREYXRhQ2hhbmdlIiwia2V5Q2hpbGQiLCJ2YWx1ZUNoaWxkIiwic2VuZGVyQ2hpbGQiLCJpbmRleCIsIlJlbW92ZUV2ZW50RGF0YSIsIk9uRXZlbnREYXRhIiwiQmluZEV2ZW50IiwiaXNBcnJheSIsImxlbmd0aCIsImlzRGlzcGF0Y2giLCJTZXREYXRhIiwiaXNDbGVhckRhdGEiLCIkZGF0YSIsIkFwcGVuZCIsIlJlbW92ZSIsImdldFByb3BlcnR5QnlLZXkiLCJkZWZhdWx0IiwidG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwidG9Kc29uIiwicnMiLCJkZWxldGUiLCJGbG93Q29yZSIsIkdldElkIiwiU2V0SWQiLCJpZCIsIkNoZWNrRWxlbWVudENoaWxkIiwiY29udGFpbnMiLCJTZXREYXRhRmxvdyIsIkJpbmREYXRhRXZlbnQiLCJSZW1vdmVEYXRhRXZlbnQiLCJCYXNlRmxvdyIsInBhcmVudCIsImdldFRpbWUiLCJEYXRlIiwiTGluZSIsImZyb21JbmRleCIsInRvIiwidG9JbmRleCIsImNyZWF0ZUVsZW1lbnROUyIsImVsUGF0aCIsImN1cnZhdHVyZSIsIlN0YXJ0U2VsZWN0ZWQiLCJzZXRBdHRyaWJ1dGVOUyIsImVsQ2FudmFzIiwiQWRkTGluZSIsInVwZGF0ZVRvIiwidG9feCIsInRvX3kiLCJ4IiwiZnJvbV94IiwieSIsImZyb21feSIsImdldFBvc3Rpc2lvbkRvdCIsImxpbmVDdXJ2ZSIsImNyZWF0ZUN1cnZhdHVyZSIsIlVwZGF0ZVVJIiwiQWN0aXZlIiwiZmxnIiwic3RhcnRfcG9zX3giLCJzdGFydF9wb3NfeSIsImVuZF9wb3NfeCIsImVuZF9wb3NfeSIsImN1cnZhdHVyZV92YWx1ZSIsImxpbmVfeCIsImxpbmVfeSIsImh4MSIsIk1hdGgiLCJhYnMiLCJoeDIiLCJub2RlVGhpcyIsIlJlbW92ZUxpbmUiLCJzZXRMaW5lQ2hvb3NlIiwic2V0Tm9kZVRvIiwiQ2xvbmUiLCJNb3ZlVHlwZSIsIkRlc2dpbmVyVmlld19FdmVudCIsInRpbWVGYXN0Q2xpY2siLCJ0YWdJbmdvcmUiLCJtb3ZlVHlwZSIsIk5vbmUiLCJmbGdEcmFwIiwiZmxnTW92ZSIsImF2X3giLCJhdl95IiwicG9zX3giLCJwb3NfeSIsIm1vdXNlX3giLCJtb3VzZV95IiwidGVtcExpbmUiLCJFbmRNb3ZlIiwiTW92ZSIsIlN0YXJ0TW92ZSIsImNvbnRleHRtZW51Iiwibm9kZV9kcm9wRW5kIiwibm9kZV9kcmFnb3ZlciIsInpvb21fZW50ZXIiLCJrZXlkb3duIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsIiRsb2NrIiwia2V5Tm9kZSIsImdldENvbnRyb2xDaG9vc2UiLCJnZXREYXRhIiwiZV9wb3NfeCIsImVfcG9zX3kiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJDYWxjWCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkNhbGNZIiwiY2hlY2tPbmx5Tm9kZSIsIkFkZE5vZGUiLCJncm91cCIsIkN1cnJlbnRHcm91cCIsInVwZGF0ZVBvc2l0aW9uIiwiY3RybEtleSIsImRlbHRhWSIsInpvb21fb3V0Iiwiem9vbV9pbiIsInRvTG93ZXJDYXNlIiwiQ2FudmFzIiwibm9kZUNob29zZSIsImdldE5vZGVDaG9vc2UiLCJOb2RlIiwic2V0Tm9kZUNob29zZSIsImdldFgiLCJnZXRZIiwic2V0WCIsInNldFkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwibm9kZUVsIiwibm9kZUlkIiwibm9kZVRvIiwiR2V0Tm9kZUJ5SWQiLCJtZXRhS2V5IiwiZ2V0TGluZUNob29zZSIsIkRlc2dpbmVyVmlld19Ub29sYmFyIiwiZWxQYXRoR3JvdXAiLCJidG5CYWNrIiwiZWxUb29sYmFyIiwicmVuZGVyUGF0aEdyb3VwIiwiZ3JvdXBzIiwiR2V0R3JvdXBOYW1lIiwibGVuIiwidGV4dCIsInJlbW92ZUF0dHJpYnV0ZSIsIkJhY2tHcm91cCIsImJ0blpvb21JbiIsImJ0blpvb21PdXQiLCJidG5ab29tUmVzZXQiLCJ6b29tX3Jlc2V0IiwiYnV0dG9uR3JvdXAiLCJnZXZhbCIsImV2YWwiLCJnZXROYW1lIiwiQ2hlY2tLZXkiLCJnZXREYXRhTGluZSIsImFyckxpbmUiLCJvcHRpb24iLCJhcnJEYXRhVmlldyIsImdldENvbnRyb2xOb2RlQnlLZXkiLCJjbGFzcyIsImdldE9wdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJodG1sIiwiYWRkTm9kZURvdCIsIm51bSIsInN0YXJ0IiwicXVlcnkiLCJub2RlUXVlcnkiLCJpIiwibm9kZURvdCIsImRvdCIsImxlZnQiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsInNjcmlwdCIsIkJpbmRWaWV3Iiwib3Blbkdyb3VwIiwiaUNoZWNrIiwidGVtcHgiLCJ0ZW1weSIsImxpbmUiLCJlbERvdCIsIlJlbW92ZU5vZGUiLCJSZW5kZXJMaW5lIiwiWm9vbSIsIkRlc2dpbmVyVmlldyIsImdldFpvb20iLCJnZXREYXRhR3JvdXAiLCJzZXRab29tIiwiZ3JvdXBEYXRhIiwibGFzdEdyb3VwTmFtZSIsImZpbHRlciIsIkdldERhdGFCeUlkIiwidG9vbGJhciIsIlJlbmRlclVJIiwibGluZUNob29zZSIsIm5vZGVzIiwiQWRkTm9kZUl0ZW0iLCJJbnNlcnROb2RlIiwiQ2xlYXJOb2RlIiwiR2V0RGF0YUFsbE5vZGUiLCJHZXREYXRhTm9kZSIsInpvb21fbGFzdF92YWx1ZSIsInRhYkluZGV4IiwidXBkYXRlVmlldyIsInpvb20iLCJzdHlsZSIsInRyYW5zZm9ybSIsIkdldEFsbE5vZGUiLCJPcGVuIiwibnVtYmVyIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDb250cm9sQnlLZXkiLCJ6b29tX3JlZnJlc2giLCJ0ZW1wX3pvb20iLCJWaWV3RG9jayIsInZpZXciLCJzZXRQcm9qZWN0T3BlbiIsIkRvY2tNYW5hZ2VyIiwiJGRvY2tNYW5hZ2VyIiwicmVzZXQiLCJhZGREb2NrIiwiJGtleSIsIiR2aWV3IiwiJGl0ZW0iLCJDb250cm9sIiwibm9kZV9iZWdpbiIsIm9ubHlOb2RlIiwibm9kZV9lbmQiLCJub2RlX2lmIiwiY29uZGl0aW9uIiwib3V0cHV0Iiwibm9kZV9ncm91cCIsIm5vZGVfb3B0aW9uIiwibm9kZV9wcm9qZWN0IiwicHJvamVjdCIsIlN5c3RlbUJhc2UiLCIkcHJvamVjdE9wZW4iLCIkcHJvcGVydGllcyIsIiRjb250cm9sIiwiJGNvbnRyb2xDaG9vc2UiLCIkY2hlY2tPcHRpb24iLCJwcm9qZWN0cyIsImV4cG9ydEpzb24iLCJjaGVja0luaXRPcHRpb24iLCJpbml0T3B0aW9uIiwiaXNEZWZhdWx0IiwiY29udHJvbCIsImNvbnRyb2xUZW1wIiwibGluZXMiLCJyZW5kZXJIdG1sIiwiaW1wb3J0SnNvbiIsIm9wZW5Qcm9qZWN0IiwiJHByb2plY3QiLCJnZXRQcm9qZWN0QnlJZCIsIiRpZCIsIlZpc3VhbEZsb3ciLCJnZXREb2NrTWFuYWdlciIsInNldE9wdGlvbiIsImdldE1haW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozt1Q0FBTyxNQUFNQSxFQUVDLGFBRkRBLEVBR0csZUFISEEsRUFJRSxjQUpGQSxFQUtDLGFBTERBLEVBTUgsU0FOR0EsRUFPRixVQUdFQyxFQUNMLFVBREtBLEVBR0wsVUFIS0EsRUFJSCxZQUpHQSxFQUtKLFdBR0lDLEVBQ0wsZUFES0EsRUFFRCxnQkFGQ0EsRUFHTCxZQUhLQSxFQUtDLGtCQUdEQyxFQUFjLENBQUNDLEVBQVFDLElBQzlCRCxFQUFFRSxLQUFPRCxFQUFFQyxNQUNMLEVBRU5GLEVBQUVFLEtBQU9ELEVBQUVDLEtBQ04sRUFFRixRQy9CSUMsRUFHMENDLEtBRjlDQyxPQUFzQkMsU0FBU0MsY0FBYyxPQUMxQ0MsVUFDVkMsWUFBbUJDLEVBQWtDTixHQUFBTyxLQUFJUCxLQUFKQSxFQUNuRE0sRUFBVUUsWUFBWUQsS0FBS04sUUFDM0JNLEtBQUtOLE9BQU9RLFVBQVksV0FHbkJDLFFBQVFDLEVBQWVDLEdBQzVCTCxLQUFLTixPQUFPWSxVQUFVQyxPQUFPLGNBQzdCUCxLQUFLTixPQUFPWSxVQUFVRSxJQUFJLGNBQzFCUixLQUFLTixPQUFPUSxVQUFZLGlFQUFpRUUsb0dBRXpGSixLQUFLSCxVQUFZRyxLQUFLTixPQUFPZSxjQUFjLHVCQUN2Q0osR0FDRkEsRUFBVUwsS0FBS0gsWUNkZixNQUFPYSxVQUFvQmxCLEVBQ3NCQyxLQUFyREssWUFBbUJDLEVBQWtDTixHQUNuRGtCLE1BQU1aLEVBQVdO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
