/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.5
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"},i="root";class n{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class o{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new n,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e.dataChange}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e.dataChange}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof o&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof o&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,n=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof o&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof o&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,n&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof o){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.data[t]instanceof o||!this.data[t].key||(this.data[t]=new o(this.property,this.data[t])),!Array.isArray(this.data[t])||!this.property||this.data[t][0]instanceof o||(this.data[t]=this.data[t].map((e=>e instanceof o||!e.key?e:new o(this.property,e)))),this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof o?e[t]=e[t].toJson():Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof o&&(e[t]=e[t].map((e=>e.toJson())));return e}delete(){this.events=new n,this.data={}}}class a{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new o;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new n}}class r extends a{parent;constructor(e){super(),this.parent=e}}const d=()=>new Date,h=()=>d().getTime(),l=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,p=e=>e&&e instanceof Function,c=["SPAN","DIV","P","TEXTAREA"];class u{el;data;main;keyName;elNode;property;elSuggestions;elSuggestionsContent;nodeEditor;constructor(e,t,s,i=null){this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName?e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.nodeEditor=e,this.nodeEditor.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode)):(this.keyName=e?.getAttribute("node:model"),this.keyName&&(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el,this.nodeEditor=document.createElement("span"),this.nodeEditor.classList.add("node-editor"),e.parentElement?.insertBefore(this.nodeEditor,e),e.parentElement?.removeChild(e),this.nodeEditor.appendChild(this.elNode))),this.elSuggestions=document.createElement("div"),this.elSuggestions.classList.add("node-editor_suggestions"),this.elSuggestionsContent=document.createElement("div"),this.elSuggestionsContent.classList.add("suggestions_content"),this.elSuggestions.appendChild(this.elSuggestionsContent),this.showSuggestions(!1),this.keyName&&this.bindData()}checkShowSuggestions(){if(this.elSuggestionsContent){this.elSuggestionsContent.innerHTML="";var e=this.main.getVariable();if(!e||0==e.length)return void this.showSuggestions(!1);let t=document.createElement("ul");for(let s of e){let e=document.createElement("li");e.innerHTML=s.Get("name"),t.appendChild(e)}this.elSuggestionsContent.appendChild(t)}let t=this.elNode.value,s=this.elNode.selectionStart;if(t){let e=t.lastIndexOf("${",s);t.lastIndexOf("}",s)<e?this.showSuggestions(!0):this.showSuggestions(!1)}}showSuggestions(e=!0){this.elSuggestions&&(e?this.elSuggestions.removeAttribute("style"):this.elSuggestions.setAttribute("style","display:none;"))}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.elNode.addEventListener("focus",(()=>{this.elSuggestions&&this.elNode?.parentElement?.appendChild(this.elSuggestions)})),this.elNode.addEventListener("blur",(()=>{this.elSuggestions&&this.elNode?.parentElement?.removeChild(this.elSuggestions)})),this.elNode.addEventListener("select",(()=>{this.checkShowSuggestions()})),this.property&&this.property.select&&p(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let s=document.createElement("option");return s.value=e,s.text=t,s}));for(let t of e)this.elNode.appendChild(t)}this.property&&p(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(e){this.elNode&&(c.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t.elNode!==this.elNode&&this.setNodeValue(e)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&(this.data.Set(this.keyName,this.elNode.value,this),this.checkShowSuggestions())}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new u(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new u(e,t,s)))}}var m,v=Object.freeze({__proto__:null,FlowCore:a,BaseFlow:r,DockEnum:t,EventEnum:e,PropertyEnum:s,ScopeRoot:i,DataFlow:o,DataView:u,EventFlow:n,compareSort:l,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:h,LOG:(e,...t)=>console.log(e,t),getDate:d,isFunction:p});class g{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new o;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,o=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,r=t,d=s,h=i,l=n;switch(o){case"open":if(e>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new g(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(m||(m={}));class f{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=m.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=h(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=m.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=m.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==m.Node&&e.target.classList.contains("node-dot")){this.moveType=m.Line;let s=e.target.getAttribute("node");this.tempLine=new g(t,s),this.tempLine.temp=!0}this.moveType==m.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case m.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i);break}case m.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case m.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n-20);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(h()-this.timeFastClick<100||!this.flgMove)return this.moveType=m.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===m.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=m.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class y{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(e){this.parent=e,this.elNode=e.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let e=this.parent.GetGroupName(),t=e.length-1;if(!(t<0)){for(let s=t;s>=0;s--){let t=document.createElement("span");t.innerHTML=0==s?`${e[s].text}`:`${e[s].text} >> `,t.setAttribute("group",e[s].id),t.addEventListener("click",(t=>this.parent.BackGroup(e[s].id))),this.elPathGroup.appendChild(t)}t>1&&this.btnBack.removeAttribute("style")}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_in())),e.innerHTML="+";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_out())),t.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(e),i.appendChild(t),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}class b extends r{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof o?this.data=i:(this.data.InitData({...i,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),p(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=u.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new g(this,i,t,s,e).UpdateUI()}))}}const N=1.6,C=.6,L=.1,k=1;class E extends a{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new o(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let i=this.GetDataById(this.lastGroupName);return i&&i.onSafe(e.dataChange,(()=>{this.UpdateUI.bind(this),this.toolbar.renderPathGroup(),this.changeGroup()})),this.groupData}group=[];GetGroupName(){return[...this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")}))),{id:i,text:i}]}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})})),this.toolbar.renderPathGroup()}openGroup(e){this.group=[e,...this.group],this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new b(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elToolbar),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,new f(this),this.toolbar=new y(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{i.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)})),this.changeGroup()}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof b||(e.sender&&e.sender instanceof E||(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()}))),this.UpdateUI())}Open(t){t!=this.data?(this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI(),this.changeGroup()):this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNodeItem&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?k:this.getZoom()+L*e;N>=t&&t>=C&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class ${elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.onSafe(e.changeVariable,(({data:e})=>{this.Render()})),this.main.onSafe(e.openProject,(()=>{this.Render()})),this.main.onSafe(e.groupChange,(()=>{this.Render()})),this.Render()}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',this.variables)for(let e of this.variables)new x(e,this).RenderScope(this.main.getGroupCurrent())}}class x{variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.Get("name"),this.valueDefaultInput.value=this.variable.Get("initalValue")??"",this.typeInput.value=this.variable.Get("type")??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let s=document.createElement("td");s.appendChild(this.nameInput),this.elNode.appendChild(s),this.nameInput.addEventListener("keydown",(e=>{this.variable.Set("name",e.target.value)})),this.nameInput.addEventListener("change",(e=>{this.variable.Set("name",e.target.value)}));let i=document.createElement("td");i.appendChild(this.typeInput),this.elNode.appendChild(i),this.typeInput.addEventListener("change",(e=>{this.variable.Set("type",e.target.value)}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let o=document.createElement("td");o.appendChild(this.valueDefaultInput),this.elNode.appendChild(o),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.Set("initalValue",e.target.value)})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.Set("initalValue",e.target.value)}));let a=document.createElement("button");a.innerHTML="-",a.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(a),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}this.scopeInput.value=this.variable.Get("scope"),this.scopeInput.addEventListener("change",(e=>{this.variable.Set("scope",e.target.value)}))}}class G{elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolbox"),this.Render()}Render(){let e=this.main.getControlAll(),t={};Object.keys(e).forEach((s=>{let i=e[s].group??"other";void 0===t[i]&&(t[i]=[]),t[i]=[...t[i],e[s]]})),Object.keys(t).forEach(((e,s)=>{let i=document.createElement("div");i.classList.add("node-box"),i.classList.add("active"),i.innerHTML=`\n        <p class="node-box_title">${e}</p>\n        <div class="node-box_boby"></div>\n      `,i.querySelector(".node-box_title")?.addEventListener("click",(()=>{i.classList.contains("active")?i.classList.remove("active"):i.classList.add("active")}));for(let s of t[e]){let e=document.createElement("div");e.classList.add("node-item"),e.setAttribute("draggable","true"),e.setAttribute("data-node",s.key),e.innerHTML=`${s.icon} <span>${s.name}</span`,e.addEventListener("dragstart",this.dragStart.bind(this)),e.addEventListener("dragend",this.dragend.bind(this)),i.querySelector(".node-box_boby")?.appendChild(e)}this.elNode.appendChild(i)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class _{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.onSafe(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(s)}))}}class S{elNode;main;$elBoby;$elWarp;$btnNext;$btnBack;$btnAdd;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-tab-project"),this.main.on(e.openProject,this.Render.bind(this)),this.Render()}Render(){let t=this.$elWarp?.scrollLeft??0;this.elNode.innerHTML='\n    <div class="tab-project__search"></div>\n    <div class="tab-project__list">\n      <div class="tab-project_button">\n        <button class="btn-back"><i class="fas fa-angle-left"></i></button>\n      </div>\n      <div class="tab-project_warp">\n        <div class="tab-project__body">\n        </div>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-next"><i class="fas fa-angle-right"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-add"><i class="fas fa-plus"></i></button>\n      </div>\n    </div>\n    ',this.$elWarp=this.elNode.querySelector(".tab-project_warp"),this.$elBoby=this.elNode.querySelector(".tab-project__body"),this.$btnBack=this.elNode.querySelector(".btn-back"),this.$btnNext=this.elNode.querySelector(".btn-next"),this.$btnAdd=this.elNode.querySelector(".btn-add");const s=()=>{this.$elWarp};this.$elWarp?.addEventListener("scroll",(e=>{s()}),{passive:!0}),s(),this.$btnBack?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft-=100)})),this.$btnNext?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft+=100)})),this.$btnAdd?.addEventListener("click",(()=>{this.main.newProject("")}));let i,n=this.main.getProjectAll();for(let t of n){let s=document.createElement("div"),n=document.createElement("span"),o=document.createElement("div"),a=document.createElement("button");s.setAttribute("data-project-id",t.Get("id")),n.innerHTML=t.Get("name"),n.classList.add("pro-name"),o.classList.add("pro-button"),a.innerHTML='<i class="fas fa-minus"></i>',o.appendChild(a),s.appendChild(n),s.appendChild(o),s.classList.add("project-item"),this.main.checkProjectOpen(t)&&(s.classList.add("active"),i=s),s.addEventListener("click",(e=>{a.contains(e.target)||e.target==a||this.main.setProjectOpen(t)})),a.addEventListener("click",(e=>{this.main.removeProject(t)})),this.$elBoby?.appendChild(s),t.onSafe(e.dataChange+"_name",(()=>{n.innerHTML=t.Get("name")}))}this.$elWarp&&(this.$elWarp.scrollLeft=null!=i?i.offsetLeft-20:t)}}var w=Object.freeze({__proto__:null,DesginerView:E,Line:g,NodeItem:b,VariableView:$,ToolboxView:G,ProjectView:_,TabProjectView:S});class I{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_warp"><div class="vs-boxinfo_content"></div></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class j extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new G(e,this.main)}))}}class D extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new $(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");s?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable()}))}}}class P extends I{main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e.showProperty,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let s=t.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),u.BindElement(a,t,this.main,i),n.appendChild(o),n.appendChild(a),e.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),u.BindElement(o,t,this.main,s),i.appendChild(n),i.appendChild(o),e.appendChild(i)}))}}class M extends I{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new E(this.elNode,t)}}class T extends I{main;constructor(e,t){super(e,t),this.main=t,new S(this.elNode,t)}}class A{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,j),this.addDock(t.right,P),this.addDock(t.view,M),this.addDock(t.top,T),this.addDock(t.bottom,D),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const O={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:1,left:0,bottom:0},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:1,top:0,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50001"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Else</span><span><span class="node-dot" node="50002"></span></span></div>\n            </div>\n      ',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},dot:{left:1,top:0,right:0,bottom:0}},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class B{$data=new o(this);$projectOpen;$properties={};$control={};events=new n;$controlChoose=null;$checkOption=!1;$group;$indexProject=-1;constructor(){this.$properties[s.solution]={id:{default:()=>h()},key:{default:()=>s.solution},name:{default:()=>`solution-${h()}`,edit:!0},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>h()},name:{default:()=>"Flow "+this.$indexProject++,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$properties[s.variable]={key:{default:s.variable},name:{default:()=>`var${h()}`},type:{default:()=>"text"},scope:{default:()=>i},initalValue:{default:""}},this.onSafe(e.groupChange,(({group:e})=>{this.$group=e}))}newSolution(e=""){this.$indexProject=1,this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(s.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(){let e=new o(this,{key:s.variable,scope:this.getGroupCurrent()?.[0]?.id});return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e.filter((e=>this.getGroupCurrent().findIndex((t=>t.id==e.Get("scope")))>-1))}getGroupCurrent(){return this.$group??[]}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...O}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(l).forEach((e=>{s[e.key]={...e,dot:{left:1,top:1,right:1,bottom:1,...e?.dot}},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>h()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(e,t){t.innerHTML=e.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof o?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new o(this),t.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}removeProject(t){let s=t;s=this.getProjectById(t.Get("id")),this.$data.Remove("projects",s),!this.checkProjectOpen(s)||(this.$projectOpen=this.$data.Get("projects")?.[0],this.$projectOpen)?(this.dispatch(e.change,{data:this.$projectOpen}),this.dispatch(e.showProperty,{data:this.$projectOpen}),this.dispatch(e.openProject,{data:this.$projectOpen})):this.newProject()}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}}var R=Object.freeze({__proto__:null,SystemBase:B,SystemVue:class extends B{render;constructor(e){super(),this.render=e}renderHtml(e,t){if(3===parseInt(this.render.version)){let s=this.render.h(e.getOption()?.html,{...e.getOption()?.props??{},node:e},e.getOption()?.options??{});s.appContext=t,this.render.render(s,t)}else{let s=new this.render({parent:t,render:t=>t(e.getOption()?.html,{props:{...e.getOption()?.props??{},node:e}}),...e.getOption()?.options??{}}).$mount();t.appendChild(s.$el)}}}});var H=Object.freeze({__proto__:null,DockEnum:t,ControlDock:j,DockBase:I,ProjectDock:class extends I{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new _(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),s?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${h()}`,s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(i=document.createElement("a")).setAttribute("href",s),i.setAttribute("download",t+".json"),document.body.appendChild(i),i.click(),void i.remove();var e,t,s,i})),s?.appendChild(t);let i=document.createElement("button");i.innerHTML="Import",i.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var s=new FileReader;s.onload=function(){e?.(s.result)},t&&t.files&&s.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),s?.appendChild(i)}}},PropertyDock:P,TabDock:T,ViewDock:M,VariableDock:D,DockManager:A});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new B,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new A(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}},...R,...v,...H,...w}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
