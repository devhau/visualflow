/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.1
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const t="dataChange",e="showProperty",s="openProject",i="newProject",n="change",o="dispose",a="vs-left",r="vs-view",d="vs-bottom",h="vs-right",l="main_project",p="main_solution",c="main_line",u="main_groupCavas",v=(t,e)=>t.sort<e.sort?-1:t.sort>e.sort?1:0;class m{main;elNode=document.createElement("div");elContent;constructor(t,e){this.main=e,t.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(t,e){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${t}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_content"></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),e&&e(this.elContent)}}class f extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(t=>{let e=this.main.getControlAll();console.log(e),Object.keys(e).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${e[s].icon} <span>${e[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),t.appendChild(i)}))}))}dragend(t){this.main.setControlChoose(null)}dragStart(t){let e=t.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(e),"touchstart"!==t.type&&t.dataTransfer.setData("node",e)}}class y extends m{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(n,this.renderUI.bind(this)),this.main.on(s,(t=>{this.elContent?.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")})),this.elContent&&t?.data?.Get("id")&&this.elContent.querySelector(`[data-project-id="${t?.data?.Get("id")}"]`)?.classList.add("active")}))}renderUI(){let i=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(this.elContent){if(this.elContent.innerHTML="",i){i.innerHTML="";let t=document.createElement("button");i?.appendChild(t),t.innerHTML="New",t.addEventListener("click",(()=>this.main.newProject("")))}this.main.getProjectAll().forEach((i=>{let n=document.createElement("div");n.classList.add("node-item"),n.innerHTML=`${i.Get("name")}`,n.setAttribute("data-project-id",i.Get("id")),i.removeListener(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),i.on(`${t}_name`,(()=>{n.innerHTML=`${i.Get("name")}`})),this.main.checkProjectOpen(i)&&n.classList.add("active"),n.addEventListener("click",(()=>{this.main.dispatch(s,{data:i}),this.main.dispatch(e,{data:i})})),this.elContent?.appendChild(n)}))}}}var g;!function(t){t[t.Label=0]="Label",t[t.Text=1]="Text",t[t.Inline=2]="Inline"}(g||(g={}));const L=["SPAN","DIV","P","TEXTAREA"];class b{data;el;keyName="";constructor(t,e=null){this.data=t,this.el=e,this.keyName=e?.getAttribute("node:model"),this.bindData()}bindData(){this.keyName&&this.el&&(this.data.on(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.addEventListener("change",this.bindEvent.bind(this)),this.el.addEventListener("keydown",this.bindEvent.bind(this)))}unBindData(){this.keyName&&this.el&&(this.data.removeListener(`${t}_${this.keyName}`,this.bindInput.bind(this)),this.el.removeEventListener("change",this.bindEvent.bind(this)),this.el.removeEventListener("keydown",this.bindEvent.bind(this)))}bindInput({value:t,sender:e}){e!==this&&this.el&&e.el!==this.el&&(console.log(this.el.tagName),console.log(e),L.includes(this.el.tagName)?this.el.innerText=`${t}`:this.el.value=t)}bindEvent(){this.keyName&&this.el&&(console.log(this.keyName),this.data.Set(this.keyName,this.el.value,this))}static BindView(t,e){return e?Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new b(t,e))):[]}}class N{data;key;type;isEdit=!1;elInput=null;elLabel=null;elNode=document.createElement("div");constructor(e,s,i=null,n=g.Label,a=!1){this.data=e,this.key=s,this.type=n,this.data=e,this.data.onSafe(`${t}_${s}`,this.changeData.bind(this)),this.data.onSafe(o,this.dispose.bind(this)),this.isEdit=n===g.Text,this.elNode.classList.add("node-editor"),a&&i?(i.parentElement?.insertBefore(this.elNode,i),i.parentElement?.removeChild(i),i?.remove()):i&&i.appendChild(this.elNode),this.render()}render(){let t=this.data.Get(this.key);if(this.isEdit){if(this.elLabel&&(this.elLabel.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.remove(),this.elLabel=null),this.elInput)return void(this.elInput.value=t);this.elInput=document.createElement("input"),this.elInput.classList.add("node-form-control"),this.elInput.addEventListener("keydown",this.inputData.bind(this)),this.elInput.value=t,this.elInput.setAttribute("node:model",this.key),this.elNode.appendChild(this.elInput)}else{if(this.elInput&&(this.elInput.removeEventListener("keyup",this.inputData.bind(this)),this.elInput.remove(),this.elInput=null),this.elLabel)return void(this.elLabel.innerHTML=t);this.elLabel=document.createElement("span"),this.type==g.Inline&&this.elLabel.addEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.setAttribute("node:model",this.key),this.elLabel.innerHTML=t,this.elNode.appendChild(this.elLabel)}}switchModeEdit(){this.isEdit=!0,this.render()}inputData(t){setTimeout((()=>{this.data.Set(this.key,t.target.value,this)}))}changeData({key:t,value:e,sender:s}){this.render()}dispose(){this.elInput?.removeEventListener("keydown",this.inputData.bind(this)),this.elLabel?.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.data.removeListener(`${t}_${this.key}`,this.changeData.bind(this)),this.data.removeListener(o,this.dispose.bind(this))}}class C extends m{main;lastData;labelKeys=["id","key","group","lines","nodes","project","x","y"];hideKeys=["lines","nodes","groups"];sortKeys=["id","key","name","group"];dataJson=document.createElement("textarea");constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e,(e=>{this.renderUI(t,e.data)}))}))}renderUI(t,e){if(this.lastData==e)return;this.lastData=e,t.innerHTML="";let s=e.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),this.labelKeys.includes(i)?new N(e,i,a,g.Label):new N(e,i,a,g.Text),n.appendChild(o),n.appendChild(a),t.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),this.labelKeys.includes(s)?new N(e,s,o,g.Label):new N(e,s,o,g.Text),i.appendChild(n),i.appendChild(o),t.appendChild(i)}))}}class k{events={};constructor(){}onSafe(t,e){this.removeListener(t,e),this.on(t,e)}on(t,e){return"function"!=typeof e?(console.error("The listener callback must be a function, the given type is "+typeof e),!1):"string"!=typeof t?(console.error("The event name must be a string, the given type is "+typeof t),!1):(void 0===this.events[t]&&(this.events[t]={listeners:[]}),void this.events[t].listeners.push(e))}removeListener(t,e){if(!this.events[t])return!1;const s=this.events[t].listeners,i=s.indexOf(e);i>-1&&s.splice(i,1)}dispatch(t,e){if(void 0===this.events[t])return!1;this.events[t].listeners.forEach((t=>{t(e)}))}}class E{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}constructor(t,e){this.property=t,this.events=new k,e&&this.load(e)}InitData(t=null,e=-1){-1!==e&&(this.properties=e),this.load(t)}eventDataChange(e,s,i,n,o){o?(this.dispatch(`${t}_${e}_${o}_${s}`,{key:e,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${t}_${e}_${o}`,{key:e,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${t}_${e}_${s}`,{key:e,keyChild:s,value:i,sender:n}),this.dispatch(`${t}_${e}`,{key:e,keyChild:s,value:i,sender:n})}RemoveEventData(e,s,i){e&&e.removeListener(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}OnEventData(e,s,i){e&&e.on(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}BindEvent(t,e){t&&(t instanceof E&&this.OnEventData(t,e),Array.isArray(t)&&t.length>0&&t[0]instanceof E&&t.forEach(((t,s)=>this.OnEventData(t,e,s))))}Set(e,s,i=null,o=!0){this.data[e]!=s&&(this.data[e]&&(this.data[e]instanceof E&&this.RemoveEventData(this.data[e],e),Array.isArray(this.data[e])&&this.data[e].length>0&&this.data[e][0]instanceof E&&this.data[e].forEach(((t,s)=>this.RemoveEventData(t,e,s)))),this.BindEvent(s,e)),this.data[e]=s,o&&(this.dispatch(`${t}_${e}`,{key:e,value:s,sender:i}),this.dispatch(t,{key:e,value:s,sender:i}),this.dispatch(n,{key:e,value:s,sender:i}))}SetData(t,e=null,s=!1){if(s&&(this.data={}),t instanceof E){let s=t;if(!this.property&&s.property&&(this.property=s.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,s.Get(t),e,!1);else for(let t of Object.keys(s.getProperties()))this.Set(t,s.Get(t),e,!1)}else Object.keys(t).forEach((s=>{this.Set(s,t[s],e,!1)}));this.dispatch(n,{data:t})}Get(t){return this.data[t]}Append(t,e){this.data[t]||(this.data[t]=[]),this.data[t]=[...this.data[t],e],this.BindEvent(e,t)}Remove(t,e){this.data[t].indexOf(e);var s=this.data[t].indexOf(e);s>-1&&(this.RemoveEventData(this.data[t][s],t),this.data[t].splice(s,1))}load(t){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(t.key)),this.properties)for(let e of Object.keys(this.properties))this.data[e]=t?.[e]??("function"==typeof this.properties[e]?.default?this.properties[e]?.default():this.properties[e]?.default)??"",this.data[e]instanceof E||!this.data[e].key||(this.data[e]=new E(this.property,this.data[e])),!Array.isArray(this.data[e])||!this.property||this.data[e][0]instanceof E||(this.data[e]=this.data[e].map((t=>t instanceof E||!t.key?t:new E(this.property,t)))),this.BindEvent(this.data[e],e)}toString(){return JSON.stringify(this.toJson())}toJson(){let t={};for(let e of Object.keys(this.properties))t[e]=this.Get(e),t[e]instanceof E&&(t[e]=t[e].toJson()),Array.isArray(t[e])&&t[e].length>0&&t[e][0]instanceof E&&(t[e]=t[e].map((t=>t.toJson())));return t}delete(){this.events=new k,this.data={}}}class ${GetId(){return this.data.Get("id")}SetId(t){return this.data.Set("id",t)}properties={};data=new E;elNode=document.createElement("div");CheckElementChild(t){return this.elNode==t||this.elNode.contains(t)}events;SetData(t,e=null){this.data.SetData(t,e)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(n,{data:t,sender:this})}onSafe(t,e){return this.events.onSafe(t,e),this}on(t,e){return this.events.on(t,e),this}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}BindDataEvent(){this.data.on(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.on(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}RemoveDataEvent(){this.data.removeListener(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.removeListener(n,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(n,{type:"data",key:t,value:e,sender:s})}))}))}constructor(){this.events=new k,this.BindDataEvent()}}class I extends ${parent;constructor(t){super(),this.parent=t}}const x=()=>(new Date).getTime();class G{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new E;curvature=.5;temp=!1;constructor(t,e=0,s,i=0,n=null){this.from=t,this.fromIndex=e,this.to=s,this.toIndex=i,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),n?this.data=n:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(c)||{}}),this.from.data.Append("lines",this.data))}updateTo(t,e){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,t,e,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:t,y:e}=this.to.getPostisionDot(this.toIndex);this.updateTo(t,e)}return this}Active(t=!0){t?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(t,e,s,i,n,o){let a=t,r=e,d=s,h=i,l=n;switch(o){case"open":if(t>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(t>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(t=null,e=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),e&&this.from.data.Remove("lines",this.data),this.from!=t&&this.from.RemoveLine(this),this.to!=t&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(t){this.from.parent.setLineChoose(this)}setNodeTo(t,e){this.to=t,this.toIndex=e}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new G(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}var _;!function(t){t[t.None=0]="None",t[t.Node=1]="Node",t[t.Canvas=2]="Canvas",t[t.Line=3]="Line"}(_||(_={}));class D{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=_.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(t){this.parent=t,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(t){t.preventDefault()}node_dragover(t){t.preventDefault()}node_dropEnd(t){if(t.preventDefault(),this.parent.$lock)return;let e=this.parent.main.getControlChoose();if(e||"touchend"===t.type||(e=t.dataTransfer.getData("node")),!e)return;let s=0,i=0;"touchmove"===t.type?(s=t.touches[0].clientX,i=t.touches[0].clientY):(s=t.clientX,i=t.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(e)||this.parent.AddNode(e,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(t){this.parent.$lock||t.ctrlKey&&(t.preventDefault(),t.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(t){if(this.parent.$lock)return;if(this.tagIngore.includes(t.target.tagName.toLowerCase()))return;if(this.timeFastClick=x(),t.target.classList.contains("main-path"))return;"touchstart"===t.type?(this.pos_x=t.touches[0].clientX,this.pos_y=t.touches[0].clientY):(this.pos_x=t.clientX,this.pos_y=t.clientY),this.moveType=_.Canvas;let e=this.parent.getNodeChoose();if(e&&e.CheckElementChild(t.target)?this.moveType=_.Node:this.parent.setNodeChoose(void 0),e&&this.moveType==_.Node&&t.target.classList.contains("node-dot")){this.moveType=_.Line;let s=t.target.getAttribute("node");this.tempLine=new G(e,s),this.tempLine.temp=!0}this.moveType==_.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(t){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let e=0,s=0;switch("touchmove"===t.type?(e=t.touches[0].clientX,s=t.touches[0].clientY):(e=t.clientX,s=t.clientY),this.moveType){case _.Canvas:{let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i);break}case _.Node:{let t=this.parent.CalcX(this.pos_x-e),i=this.parent.CalcY(this.pos_y-s);this.pos_x=e,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(t,i);break}case _.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-e),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=t.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&t.target.classList.contains("node-dot")){let e=t.target.getAttribute("node");this.tempLine.setNodeTo(r,e)}else{let t=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,t)}}}"touchmove"===t.type&&(this.mouse_x=e,this.mouse_y=s)}EndMove(t){if(this.parent.$lock)return;if(!this.flgDrap)return;if(x()-this.timeFastClick<100||!this.flgMove)return this.moveType=_.None,this.flgDrap=!1,void(this.flgMove=!1);let e=0,s=0;if("touchend"===t.type?(e=this.mouse_x,s=this.mouse_y):(e=t.clientX,s=t.clientY),this.moveType===_.Canvas){let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=e,this.pos_y=s,this.moveType=_.None,this.flgDrap=!1,this.flgMove=!1}keydown(t){this.parent.$lock||(("Delete"===t.key||"Backspace"===t.key&&t.metaKey)&&(t.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===t.key&&t.preventDefault())}}class w{parent;elNode;elPathGroup=document.createElement("div");btnBack=document.createElement("button");constructor(t){this.parent=t,this.elNode=t.elToolbar,this.elPathGroup.classList.add("toolbar-group"),this.renderUI(),this.renderPathGroup()}renderPathGroup(){this.btnBack.setAttribute("style","display:none;"),this.elPathGroup.innerHTML="";let t=this.parent.GetGroupName(),e=t.length-1;if(e<0)return;let s=document.createElement("span");s.innerHTML="Root",this.elPathGroup.appendChild(s),this.btnBack.removeAttribute("style");for(let s=e;s>=0;s--){let e=document.createElement("span");e.innerHTML=`>>${t[s]}`,this.elPathGroup.appendChild(e)}}renderUI(){if(!this.elNode)return;this.elNode.innerHTML="",this.btnBack.addEventListener("click",(()=>this.parent.BackGroup())),this.btnBack.innerHTML="Back";let t=document.createElement("button");t.addEventListener("click",(()=>this.parent.zoom_in())),t.innerHTML="+";let e=document.createElement("button");e.addEventListener("click",(()=>this.parent.zoom_out())),e.innerHTML="-";let s=document.createElement("button");s.addEventListener("click",(()=>this.parent.zoom_reset())),s.innerHTML="*";let i=document.createElement("div");i.classList.add("toolbar-button"),i.appendChild(this.btnBack),i.appendChild(t),i.appendChild(e),i.appendChild(s),this.elNode.appendChild(this.elPathGroup),this.elNode.appendChild(i)}}const M=eval;class P extends I{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}CheckKey(t){return this.data.Get("key")==t}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(t,e,s){return this.arrLine.filter((i=>!i.temp&&i.to==e&&i.toIndex==s&&i.fromIndex==t||!i.temp&&i.from==e&&i.fromIndex==s&&i.toIndex==t)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(e,s,i={}){super(e),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof E?this.data=i:(this.data.InitData(i,this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(t,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.renderUI()}getOption(){return this.option}renderUI(){if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n        <div class="title">${this.option.icon} ${this.getName()}</div>\n        <div class="body">${this.option.html}</div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(t,e,s)=>{if(t){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<t;s++){let t=document.createElement("div");t.classList.add("node-dot"),t.setAttribute("node",`${e+s}`),i.appendChild(t)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body"),this.UpdateUI(),M(`(node,view)=>{${this.option.script}}`)(this,this.parent),this.arrDataView.forEach((t=>t.unBindData())),this.elContent&&(this.arrDataView=b.BindView(this.data,this.elContent))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(t,e,s=!1){if(this.elNode){let i=t,n=e;s||(n=this.elNode.offsetTop-e,i=this.elNode.offsetLeft-t),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(t=!0){t?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(t){var e=this.arrLine.indexOf(t);return e>-1&&this.arrLine.splice(e,1),this.arrLine}AddLine(t){this.arrLine=[...this.arrLine,t]}getPostisionDot(t=0){let e=this.elNode?.querySelector(`.node-dot[node="${t}"]`);if(e){let t=this.elNode.offsetTop+e.offsetTop+10;return{x:this.elNode.offsetLeft+e.offsetLeft+10,y:t}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((t=>{t.UpdateUI()}))}delete(e=!0){this.arrLine.forEach((t=>t.delete(this,e))),e?this.data.delete():(this.data.removeListener(t,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],e&&this.parent.RemoveNode(this),this.dispatch(n,{})}RenderLine(){this.getDataLine().forEach((t=>{let e=this.parent.GetNodeById(t.Get("to")),s=t.Get("toIndex"),i=t.Get("fromIndex");new G(this,i,e,s,t).UpdateUI()}))}}const S=1.6,T=.6,A=.1,j=1;class B extends ${main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(t){return this.getDataGroup().Set("zoom",t,this)}getY(){return+this.getDataGroup().Get("y")}setY(t){return this.getDataGroup().Set("y",t,this)}getX(){return+this.getDataGroup().Get("x")}setX(t){return this.getDataGroup().Set("x",t,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let e=this.data.Get("groups");return this.groupData=e?.filter((t=>t.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new E(this.main,{key:u,group:this.lastGroupName}),this.data.Append("groups",this.groupData)),this.groupData.onSafe(t,this.UpdateUI.bind(this)),this.groupData}group=[];GetGroupName(){return this.group.map((t=>this.GetDataById(t)?.Get("name")))}BackGroup(){this.group.splice(0,1),this.toolbar.renderPathGroup(),this.RenderUI()}CurrentGroup(){let t=this.group?.[0];return t&&""!=t?t:"root"}openGroup(t){this.group=[t,...this.group],this.toolbar.renderPathGroup(),this.RenderUI()}lineChoose;setLineChoose(t){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=t,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e,{data:this.nodeChoose.data})):this.dispatch(e,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNodeItem(t){return this.AddNode(t.Get("key"),t)}AddNode(t,e={}){return this.InsertNode(new P(this,t,e))}InsertNode(t){return this.nodes=[...this.nodes,t],t}RemoveNode(t){var e=this.nodes.indexOf(t);return this.data.Remove("nodes",t),e>-1&&this.nodes.splice(e,1),this.nodes}ClearNode(){this.nodes?.forEach((t=>t.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((t=>t.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");elToolbar=document.createElement("div");toolbar;$lock=!0;zoom_last_value=1;constructor(e,s){super(),this.main=s,this.elNode=e;let i=this.main.getPropertyByKey(l);this.data.InitData({},i),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elToolbar.classList.add("desginer-toolbar"),this.elNode.appendChild(this.elCanvas),this.elNode.appendChild(this.elToolbar),this.elNode.tabIndex=0,this.RenderUI(),this.on(t,this.RenderUI.bind(this)),new D(this),this.toolbar=new w(this)}updateView(t,e,s){this.elCanvas.style.transform=`translate(${t}px, ${e}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(t={}){t.sender&&t.sender instanceof P||(t.sender&&t.sender instanceof B||(this.ClearNode(),this.GetDataNode().forEach((t=>{this.AddNodeItem(t)})),this.GetAllNode().forEach((t=>{t.RenderLine()}))),this.UpdateUI())}Open(t){this.data=t,this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.toolbar.renderPathGroup(),this.BindDataEvent(),this.RenderUI()}CalcX(t){return t*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(t){return t*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(t){return this.GetAllNode().filter((e=>e.GetId()==t))?.[0]}GetDataById(t){return this.GetDataAllNode().filter((e=>e.Get("id")===t))?.[0]}checkOnlyNode(t){return this.main.getControlByKey(t).onlyNode&&this.nodes.filter((e=>e.CheckKey(t))).length>0}zoom_refresh(t=0){let e=0==t?j:this.getZoom()+A*t;S>=e&&e>=T&&(this.setX(this.getX()/this.zoom_last_value*e),this.setY(this.getY()/this.zoom_last_value*e),this.zoom_last_value=e,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class O extends m{main;view;constructor(t,i){super(t,i),this.main=i,this.view=new B(this.elNode,i),this.view.on(e,(t=>{i.dispatch(e,t)})),this.main.on(s,(t=>{this.view?.Open(t.data),this.main.setProjectOpen(t.data)}))}}class U{container;main;$dockManager={};constructor(t,e){this.container=t,this.main=e}reset(){this.$dockManager={},this.addDock(a,f),this.addDock(a,y),this.addDock(h,C),this.addDock(r,O),this.addDock(d,m),this.RenderUI()}addDock(t,e){this.$dockManager[t]||(this.$dockManager[t]=[]),this.$dockManager[t]=[...this.$dockManager[t],e]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((t=>{let e=this.container.querySelector(`.${t}`);e&&this.$dockManager[t].forEach((t=>{new t(e,this.main)}))}))}}const H={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"node-test",html:"",dot:{top:0,right:0,left:0,bottom:1},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:0,top:1,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>condition:<br/><input node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:"node.elNode.querySelector('.btnGoGroup')?.addEventListener('click', () => {node.openGroup()});",properties:{condition:{key:"condition",default:""}},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="listProject node-form-control" node:model="project"></select></div>',script:"\n    const reloadProject = ()=>{\n      node.elNode.querySelector('.listProject').innerHtml='';\n      let option = document.createElement('option');\n      option.text='none';\n      option.value='';\n      node.elNode.querySelector('.listProject').appendChild(option);\n      node.parent.main.getProjectAll().forEach((item)=>{\n        let option = document.createElement('option');\n        option.text=item.Get('name');\n        option.value=item.Get('id');\n        node.elNode.querySelector('.listProject').appendChild(option);\n      });\n      node.elNode.querySelector('.listProject').value= node.data.Get('project')\n    }\n    reloadProject();\n\n   ;",properties:{project:{key:"project",default:""}}}};class R{$data=new E(this);$projectOpen;$properties={};$control={};events=new k;$controlChoose=null;$checkOption=!1;constructor(){this.$properties[p]={id:{default:()=>x()},key:{default:p},name:{default:()=>`solution-${x()}`},projects:{default:[]}},this.$properties[c]={key:{default:c},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[l]={id:{default:()=>x()},name:{default:()=>`Flow-${x()}`},key:{default:l},groups:{default:[]},nodes:{default:[]}},this.$properties[u]={key:{default:u},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}}}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(t,e=!0){this.$checkOption=!0,this.$control=e?{...t?.control||{},...H}:{...t?.control||{}};let s={};Object.keys(this.$control).map((t=>({...this.$control[t],key:t,sort:void 0===this.$control[t].sort?99999:this.$control[t].sort}))).sort(v).forEach((t=>{s[t.key]={dot:{left:1,top:1,right:1,bottom:1},...t},this.$properties[`node_${t.key}`]={...t.properties||{},id:{default:()=>x()},key:{default:t.key},name:{default:t.key},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(t){return t.getOption()?.html}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(t){this.$data.InitData(t,this.getPropertyByKey(p))}setProjectOpen(t){this.$projectOpen=t}checkProjectOpen(t){return this.$projectOpen==t}newProject(){this.openProject({}),this.dispatch(i,{})}openProject(t){if(t instanceof E){let e=this.getProjectById(t.Get("id"));e||(e=t,this.$data.Append("projects",e)),this.dispatch(s,e)}else{let i=new E(this);i.InitData(t,this.getPropertyByKey(l)),this.$data.Append("projects",i),this.dispatch(s,{data:i}),this.dispatch(e,{data:i}),this.dispatch(n,{data:i})}}getProjectById(t){return this.$data.Get("projects").filter((e=>e.Get("id")===t))?.[0]}setControlChoose(t){this.$controlChoose=t}getControlChoose(){return this.$controlChoose}getControlByKey(t){return this.$control[t]||{}}getControlNodeByKey(t){return{...this.getControlByKey(t),properties:this.getPropertyByKey(`node_${t}`)}}getPropertyByKey(t){return this.$properties[t]}}return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(t,e=!0){this.main?.initOption(t,e),this.$dockManager.reset()}constructor(t,e){this.container=t,this.main=e??new R,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new U(this.container,this.main),this.$dockManager.reset()}onSafe(t,e){this.main?.onSafe(t,e)}on(t,e){this.main?.on(t,e)}removeListener(t,e){this.main?.removeListener(t,e)}dispatch(t,e){this.main?.dispatch(t,e)}getMain(){return this.main}newProject(t){this.getMain()?.newProject(t)}openProject(t){this.getMain()?.openProject(t)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(t){this.getMain()?.setProjectOpen(t)}importJson(t){this.getMain()?.importJson(t)}exportJson(){return this.getMain()?.exportJson()}},DesginerView:B,DataFlow:E}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2RvY2svRG9ja0Jhc2UudHMiLCIuLi9zcmMvZG9jay9Db250cm9sRG9jay50cyIsIi4uL3NyYy9kb2NrL1Byb2plY3REb2NrLnRzIiwiLi4vc3JjL2NvcmUvRWRpdG9yLnRzIiwiLi4vc3JjL2RvY2svUHJvcGVydHlEb2NrLnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YUZsb3cudHMiLCIuLi9zcmMvY29yZS9CYXNlRmxvdy50cyIsIi4uL3NyYy9jb3JlL1V0aWxzLnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0Rlc2dpbmVyVmlld19Ub29sYmFyLnRzIiwiLi4vc3JjL2Rlc2dpbmVyL05vZGUudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2RvY2svVmlld0RvY2sudHMiLCIuLi9zcmMvZG9jay9Eb2NrTWFuYWdlci50cyIsIi4uL3NyYy9zeXN0ZW1zL2NvbnRyb2wudHMiLCIuLi9zcmMvc3lzdGVtcy9TeXN0ZW1CYXNlLnRzIiwiLi4vc3JjL2luZGV4LnRzIiwiLi4vc3JjL1Zpc3VhbEZsb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEV2ZW50RW51bSA9IHtcbiAgaW5pdDogXCJpbml0XCIsXG4gIGRhdGFDaGFuZ2U6IFwiZGF0YUNoYW5nZVwiLFxuICBzaG93UHJvcGVydHk6IFwic2hvd1Byb3BlcnR5XCIsXG4gIG9wZW5Qcm9qZWN0OiBcIm9wZW5Qcm9qZWN0XCIsXG4gIG5ld1Byb2plY3Q6IFwibmV3UHJvamVjdFwiLFxuICBjaGFuZ2U6IFwiY2hhbmdlXCIsXG4gIGRpc3Bvc2U6IFwiZGlzcG9zZVwiXG59XG5cbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcbiAgbGVmdDogXCJ2cy1sZWZ0XCIsXG4gIHRvcDogXCJ2cy10b3BcIixcbiAgdmlldzogXCJ2cy12aWV3XCIsXG4gIGJvdHRvbTogXCJ2cy1ib3R0b21cIixcbiAgcmlnaHQ6IFwidnMtcmlnaHRcIixcbn1cblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5RW51bSA9IHtcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcbiAgc29sdXRpb246ICdtYWluX3NvbHV0aW9uJyxcbiAgbGluZTogJ21haW5fbGluZScsXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXG4gIGdyb3VwQ2F2YXM6IFwibWFpbl9ncm91cENhdmFzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgY29tcGFyZVNvcnQgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgaWYgKGEuc29ydCA8IGIuc29ydCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYS5zb3J0ID4gYi5zb3J0KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJvdGVjdGVkIGVsQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcclxuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9ICdEb2NrQmFzZSc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgQm94SW5mbyh0aXRsZTogc3RyaW5nLCAkY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtYm94aW5mbycpO1xyXG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ2cy1ib3hpbmZvX2hlYWRlclwiPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb190aXRsZVwiPiR7dGl0bGV9PC9zcGFuPjxzcGFuIGNsYXNzPVwidnMtYm94aW5mb19idXR0b25cIj48L3NwYW4+PC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb19jb250ZW50XCI+PC9kaXY+YDtcclxuICAgIHRoaXMuZWxDb250ZW50ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9fY29udGVudCcpO1xyXG4gICAgaWYgKCRjYWxsYmFjaykge1xyXG4gICAgICAkY2FsbGJhY2sodGhpcy5lbENvbnRlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sRG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtY29udHJvbCcpO1xuICAgIHRoaXMuQm94SW5mbygnQ29udHJvbCcsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbGV0IGNvbnRyb2xzID0gdGhpcy5tYWluLmdldENvbnRyb2xBbGwoKTtcbiAgICAgIGNvbnNvbGUubG9nKGNvbnRyb2xzKTtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnRyb2xzKS5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IG5vZGVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ25vZGUtaXRlbScpO1xuICAgICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsICd0cnVlJyk7XG4gICAgICAgIG5vZGVJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJywgaXRlbSk7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2NvbnRyb2xzW2l0ZW1dLmljb259IDxzcGFuPiR7Y29udHJvbHNbaXRlbV0ubmFtZX08L3NwYW5gO1xuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmRyYWdTdGFydC5iaW5kKHRoaXMpKVxuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgdGhpcy5kcmFnZW5kLmJpbmQodGhpcykpXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcHJpdmF0ZSBkcmFnZW5kKGU6IGFueSkge1xuICAgIHRoaXMubWFpbi5zZXRDb250cm9sQ2hvb3NlKG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBkcmFnU3RhcnQoZTogYW55KSB7XG4gICAgbGV0IGtleSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIubm9kZS1pdGVtXCIpLmdldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJyk7XG4gICAgdGhpcy5tYWluLnNldENvbnRyb2xDaG9vc2Uoa2V5KTtcbiAgICBpZiAoZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcIm5vZGVcIiwga2V5KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtcHJvamVjdCcpO1xuICAgIHRoaXMuQm94SW5mbygnUHJvamVjdCcsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5jaGFuZ2UsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgKGRldGFpbDogYW55KSA9PiB7XG4gICAgICB0aGlzLmVsQ29udGVudD8ucXVlcnlTZWxlY3RvckFsbCgnLmFjdGl2ZScpLmZvckVhY2goKF9ub2RlKSA9PiB7XG4gICAgICAgIF9ub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5lbENvbnRlbnQgJiYgZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJykpIHtcbiAgICAgICAgdGhpcy5lbENvbnRlbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcHJvamVjdC1pZD1cIiR7ZGV0YWlsPy5kYXRhPy5HZXQoJ2lkJyl9XCJdYCk/LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcHJpdmF0ZSByZW5kZXJVSSgpIHtcbiAgICBsZXQgJG5vZGVSaWdodDogSFRNTEVsZW1lbnQgfCBudWxsID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLnZzLWJveGluZm9faGVhZGVyIC52cy1ib3hpbmZvX2J1dHRvbicpO1xuICAgIGlmICghdGhpcy5lbENvbnRlbnQpIHJldHVybjtcbiAgICB0aGlzLmVsQ29udGVudC5pbm5lckhUTUwgPSBgYDtcbiAgICBpZiAoJG5vZGVSaWdodCkge1xuICAgICAgJG5vZGVSaWdodC5pbm5lckhUTUwgPSBgYDtcbiAgICAgIGxldCBidXR0b25OZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbk5ldyk7XG4gICAgICBidXR0b25OZXcuaW5uZXJIVE1MID0gYE5ld2A7XG4gICAgICBidXR0b25OZXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm1haW4ubmV3UHJvamVjdCgnJykpO1xuICAgIH1cblxuICAgIGxldCBwcm9qZWN0cyA9IHRoaXMubWFpbi5nZXRQcm9qZWN0QWxsKCk7XG4gICAgcHJvamVjdHMuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnbm9kZS1pdGVtJyk7XG4gICAgICBub2RlSXRlbS5pbm5lckhUTUwgPSBgJHtpdGVtLkdldCgnbmFtZScpfWA7XG4gICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGl0ZW0uR2V0KCdpZCcpKTtcbiAgICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9X25hbWVgLCAoKSA9PiB7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke2l0ZW0uR2V0KCduYW1lJyl9YDtcbiAgICAgIH0pO1xuICAgICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tYWluLmNoZWNrUHJvamVjdE9wZW4oaXRlbSkpIHtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLmRpc3BhdGNoKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgeyBkYXRhOiBpdGVtIH0pO1xuICAgICAgICB0aGlzLm1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiBpdGVtIH0pO1xuXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxDb250ZW50Py5hcHBlbmRDaGlsZChub2RlSXRlbSk7XG4gICAgfSk7XG5cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZUZsb3csIEZsb3dDb3JlIH0gZnJvbSBcIi4vQmFzZUZsb3dcIlxuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmV4cG9ydCBlbnVtIEVkaXRvclR5cGUge1xuICBMYWJlbCxcbiAgVGV4dCxcbiAgSW5saW5lXG59XG5leHBvcnQgY29uc3QgVGFnVmlldyA9IFsnU1BBTicsICdESVYnLCAnUCcsICdURVhUQVJFQSddO1xuZXhwb3J0IGNsYXNzIERhdGFWaWV3IHtcbiAgcHJpdmF0ZSBrZXlOYW1lOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkID0gXCJcIjtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhOiBEYXRhRmxvdywgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbCkge1xuICAgIHRoaXMua2V5TmFtZSA9IGVsPy5nZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnKTtcbiAgICB0aGlzLmJpbmREYXRhKCk7XG4gIH1cbiAgcHJpdmF0ZSBiaW5kRGF0YSgpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lICYmIHRoaXMuZWwpIHtcbiAgICAgIHRoaXMuZGF0YS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHt0aGlzLmtleU5hbWV9YCwgdGhpcy5iaW5kSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB1bkJpbmREYXRhKCkge1xuICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbCkge1xuICAgICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke3RoaXMua2V5TmFtZX1gLCB0aGlzLmJpbmRJbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5iaW5kRXZlbnQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kSW5wdXQoeyB2YWx1ZSwgc2VuZGVyIH06IGFueSkge1xuXG4gICAgaWYgKHNlbmRlciAhPT0gdGhpcyAmJiB0aGlzLmVsICYmIHNlbmRlci5lbCAhPT0gdGhpcy5lbCkge1xuICAgICAgY29uc29sZS5sb2codGhpcy5lbC50YWdOYW1lKTtcbiAgICAgIGNvbnNvbGUubG9nKHNlbmRlcik7XG4gICAgICBpZiAoVGFnVmlldy5pbmNsdWRlcyh0aGlzLmVsLnRhZ05hbWUpKSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJUZXh0ID0gYCR7dmFsdWV9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh0aGlzLmVsIGFzIGFueSkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBiaW5kRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMua2V5TmFtZSAmJiB0aGlzLmVsKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmtleU5hbWUpO1xuICAgICAgdGhpcy5kYXRhLlNldCh0aGlzLmtleU5hbWUsICh0aGlzLmVsIGFzIGFueSkudmFsdWUsIHRoaXMpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc3RhdGljIEJpbmRWaWV3KGRhdGE6IERhdGFGbG93LCByb290OiBFbGVtZW50KSB7XG4gICAgaWYgKHJvb3QpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbCgnW25vZGVcXFxcOm1vZGVsXScpKS5tYXAoKGVsKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcoZGF0YSwgZWwgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEVkaXRvciB7XG4gIHByaXZhdGUgaXNFZGl0OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZWxJbnB1dDogSFRNTERhdGFFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgZWxMYWJlbDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZGF0YTogRGF0YUZsb3csIHByaXZhdGUga2V5OiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsLCBwcml2YXRlIHR5cGU6IEVkaXRvclR5cGUgPSBFZGl0b3JUeXBlLkxhYmVsLCBjaGFnbmU6IGJvb2xlYW4gPSBmYWxzZSkge1xuXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmRhdGEub25TYWZlKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB0aGlzLmNoYW5nZURhdGEuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5kYXRhLm9uU2FmZShFdmVudEVudW0uZGlzcG9zZSwgdGhpcy5kaXNwb3NlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaXNFZGl0ID0gdHlwZSA9PT0gRWRpdG9yVHlwZS5UZXh0O1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XG4gICAgaWYgKGNoYWduZSAmJiBlbCkge1xuICAgICAgZWwucGFyZW50RWxlbWVudD8uaW5zZXJ0QmVmb3JlKHRoaXMuZWxOb2RlLCBlbCk7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChlbCk7XG4gICAgICBlbD8ucmVtb3ZlKCk7XG4gICAgfSBlbHNlIGlmIChlbCkge1xuICAgICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyByZW5kZXIoKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLmRhdGEuR2V0KHRoaXMua2V5KTtcblxuICAgIGlmICh0aGlzLmlzRWRpdCkge1xuICAgICAgaWYgKHRoaXMuZWxMYWJlbCkge1xuICAgICAgICB0aGlzLmVsTGFiZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLnN3aXRjaE1vZGVFZGl0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVsTGFiZWwucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuZWxMYWJlbCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lbElucHV0KSB7XG4gICAgICAgIHRoaXMuZWxJbnB1dC52YWx1ZSA9IGRhdGE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICB0aGlzLmVsSW5wdXQuY2xhc3NMaXN0LmFkZCgnbm9kZS1mb3JtLWNvbnRyb2wnKTtcbiAgICAgIHRoaXMuZWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5pbnB1dERhdGEuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsSW5wdXQudmFsdWUgPSBkYXRhO1xuICAgICAgdGhpcy5lbElucHV0LnNldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcsIHRoaXMua2V5KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxJbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmVsSW5wdXQpIHtcbiAgICAgICAgdGhpcy5lbElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5pbnB1dERhdGEuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxJbnB1dC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5lbElucHV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVsTGFiZWwpIHtcbiAgICAgICAgdGhpcy5lbExhYmVsLmlubmVySFRNTCA9IGRhdGE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT0gRWRpdG9yVHlwZS5JbmxpbmUpIHtcbiAgICAgICAgdGhpcy5lbExhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5zd2l0Y2hNb2RlRWRpdC5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxMYWJlbC5zZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnLCB0aGlzLmtleSk7XG4gICAgICB0aGlzLmVsTGFiZWwuaW5uZXJIVE1MID0gZGF0YTtcbiAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxMYWJlbCk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBzd2l0Y2hNb2RlRWRpdCgpIHtcbiAgICB0aGlzLmlzRWRpdCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBwdWJsaWMgaW5wdXREYXRhKGU6IGFueSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kYXRhLlNldCh0aGlzLmtleSwgZS50YXJnZXQudmFsdWUsIHRoaXMpO1xuICAgIH0pXG4gIH1cbiAgcHVibGljIGNoYW5nZURhdGEoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmVsSW5wdXQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmlucHV0RGF0YS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsTGFiZWw/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgdGhpcy5zd2l0Y2hNb2RlRWRpdC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7dGhpcy5rZXl9YCwgdGhpcy5jaGFuZ2VEYXRhLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uZGlzcG9zZSwgdGhpcy5kaXNwb3NlLmJpbmQodGhpcykpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBFZGl0b3IsIEVkaXRvclR5cGUgfSBmcm9tIFwiLi4vY29yZS9FZGl0b3JcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5RG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHJpdmF0ZSBsYXN0RGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGFiZWxLZXlzOiBzdHJpbmdbXSA9IFsnaWQnLCAna2V5JywgJ2dyb3VwJywgJ2xpbmVzJywgJ25vZGVzJywgJ3Byb2plY3QnLCAneCcsICd5J107XG4gIHByaXZhdGUgaGlkZUtleXM6IHN0cmluZ1tdID0gWydsaW5lcycsICdub2RlcycsICdncm91cHMnXTtcbiAgcHJpdmF0ZSBzb3J0S2V5czogc3RyaW5nW10gPSBbJ2lkJywgJ2tleScsICduYW1lJywgJ2dyb3VwJ107XG4gIHByaXZhdGUgZGF0YUpzb246IEhUTUxUZXh0QXJlYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcblxuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5Jyk7XG4gICAgdGhpcy5Cb3hJbmZvKCdQcm9wZXJ0eScsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbWFpbi5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGV0YWlsOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJVSShub2RlLCBkZXRhaWwuZGF0YSk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJVSShub2RlOiBIVE1MRWxlbWVudCwgZGF0YTogRGF0YUZsb3cpIHtcbiAgICBpZiAodGhpcy5sYXN0RGF0YSA9PSBkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGFzdERhdGEgPSBkYXRhO1xuICAgIG5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgbGV0IHByb3BlcnRpZXM6IGFueSA9IGRhdGEuZ2V0UHJvcGVydGllcygpO1xuICAgIHRoaXMuc29ydEtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh0aGlzLmhpZGVLZXlzLmluY2x1ZGVzKGtleSkgfHwgIXByb3BlcnRpZXNba2V5XSkgcmV0dXJuO1xuICAgICAgbGV0IHByb3BlcnR5SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcbiAgICAgIGxldCBwcm9wZXJ0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWxhYmVsJyk7XG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcbiAgICAgIGxldCBwcm9wZXJ0eVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwcm9wZXJ0eVZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LXZhbHVlJyk7XG4gICAgICBpZiAodGhpcy5sYWJlbEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBuZXcgRWRpdG9yKGRhdGEsIGtleSwgcHJvcGVydHlWYWx1ZSwgRWRpdG9yVHlwZS5MYWJlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXcgRWRpdG9yKGRhdGEsIGtleSwgcHJvcGVydHlWYWx1ZSwgRWRpdG9yVHlwZS5UZXh0KTtcbiAgICAgIH1cbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eUxhYmVsKTtcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eVZhbHVlKTtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocHJvcGVydHlJdGVtKTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHRoaXMuaGlkZUtleXMuaW5jbHVkZXMoa2V5KSB8fCB0aGlzLnNvcnRLZXlzLmluY2x1ZGVzKGtleSkpIHJldHVybjtcbiAgICAgIGxldCBwcm9wZXJ0eUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHByb3BlcnR5SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1pdGVtJyk7XG4gICAgICBsZXQgcHJvcGVydHlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlMYWJlbC5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1sYWJlbCcpO1xuICAgICAgcHJvcGVydHlMYWJlbC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICBsZXQgcHJvcGVydHlWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcHJvcGVydHlWYWx1ZS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS12YWx1ZScpO1xuICAgICAgaWYgKHRoaXMubGFiZWxLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgbmV3IEVkaXRvcihkYXRhLCBrZXksIHByb3BlcnR5VmFsdWUsIEVkaXRvclR5cGUuTGFiZWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3IEVkaXRvcihkYXRhLCBrZXksIHByb3BlcnR5VmFsdWUsIEVkaXRvclR5cGUuVGV4dCk7XG4gICAgICB9XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlMYWJlbCk7XG4gICAgICBwcm9wZXJ0eUl0ZW0uYXBwZW5kQ2hpbGQocHJvcGVydHlWYWx1ZSk7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHByb3BlcnR5SXRlbSk7XG4gICAgfSk7XG4gICAgLy8gbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmRhdGFKc29uKTtcbiAgICAvLyB0aGlzLmRhdGFKc29uLnZhbHVlID0gZGF0YS50b1N0cmluZygpO1xuICAgIC8vIHRoaXMuZGF0YUpzb24uY2xhc3NMaXN0LmFkZCgnbm9kZS1mb3JtLWNvbnRyb2wnKTtcblxuICAgIC8vZGF0YS5vbihFdmVudEVudW0uZGF0YUNoYW5nZSwgKCkgPT4gdGhpcy5kYXRhSnNvbi52YWx1ZSA9IGRhdGEudG9TdHJpbmcoKSlcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyB7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHsgfVxyXG4gIHB1YmxpYyBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgdGhpcy5vbihldmVudCwgY2FsbGJhY2spO1xyXG4gIH1cclxuICAvKiBFdmVudHMgKi9cclxuICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBsaXN0ZW5lciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24sIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGNhbGxiYWNrfWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaXMgbm90IGEgc3RyaW5nXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBUaGUgZXZlbnQgbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCB0aGUgZ2l2ZW4gdHlwZSBpcyAke3R5cGVvZiBldmVudH1gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0ge1xyXG4gICAgICAgIGxpc3RlbmVyczogW11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuXHJcbiAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50XSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVyc1xyXG4gICAgY29uc3QgbGlzdGVuZXJJbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKVxyXG4gICAgY29uc3QgaGFzTGlzdGVuZXIgPSBsaXN0ZW5lckluZGV4ID4gLTFcclxuICAgIGlmIChoYXNMaXN0ZW5lcikgbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LCAxKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBldmVudCBub3QgZXhpc3RzXHJcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiB7XHJcbiAgICAgIGxpc3RlbmVyKGRldGFpbHMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElQcm9wZXJ0eSB9IGZyb20gXCIuL0Jhc2VGbG93XCI7XHJcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XHJcbmltcG9ydCB7IEV2ZW50RmxvdyB9IGZyb20gXCIuL0V2ZW50Rmxvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFGbG93IHtcclxuICBwcml2YXRlIGRhdGE6IGFueSA9IHt9O1xyXG4gIHByaXZhdGUgcHJvcGVydGllczogYW55ID0gbnVsbDtcclxuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xyXG4gIHB1YmxpYyBnZXRQcm9wZXJ0aWVzKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzO1xyXG4gIH1cclxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xyXG5cclxuICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcclxuICB9XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgIHRoaXMubG9hZChkYXRhKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIEluaXREYXRhKGRhdGE6IGFueSA9IG51bGwsIHByb3BlcnRpZXM6IGFueSA9IC0xKSB7XHJcbiAgICBpZiAocHJvcGVydGllcyAhPT0gLTEpIHtcclxuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcclxuICAgIH1cclxuICAgIHRoaXMubG9hZChkYXRhKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBldmVudERhdGFDaGFuZ2Uoa2V5OiBzdHJpbmcsIGtleUNoaWxkOiBzdHJpbmcsIHZhbHVlQ2hpbGQ6IGFueSwgc2VuZGVyQ2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGluZGV4KSB7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fV8ke2tleUNoaWxkfWAsIHtcclxuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fV8ke2luZGV4fWAsIHtcclxuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1fJHtrZXlDaGlsZH1gLCB7XHJcbiAgICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIFJlbW92ZUV2ZW50RGF0YShpdGVtOiBEYXRhRmxvdywga2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgIGlmICghaXRlbSkgcmV0dXJuO1xyXG4gICAgaXRlbS5yZW1vdmVMaXN0ZW5lcihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1gLCAoeyBrZXk6IGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCB9OiBhbnkpID0+IHRoaXMuZXZlbnREYXRhQ2hhbmdlKGtleSwga2V5Q2hpbGQsIHZhbHVlQ2hpbGQsIHNlbmRlckNoaWxkLCBpbmRleCkpO1xyXG4gIH1cclxuICBwdWJsaWMgT25FdmVudERhdGEoaXRlbTogRGF0YUZsb3csIGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoIWl0ZW0pIHJldHVybjtcclxuICAgIGl0ZW0ub24oYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBCaW5kRXZlbnQodmFsdWU6IGFueSwga2V5OiBzdHJpbmcpIHtcclxuICAgIGlmICghdmFsdWUpIHJldHVybjtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgIHRoaXMuT25FdmVudERhdGEodmFsdWUgYXMgRGF0YUZsb3csIGtleSk7XHJcbiAgICB9XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKHZhbHVlIGFzIFtdKS5sZW5ndGggPiAwICYmIHZhbHVlWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcclxuICAgICAgKHZhbHVlIGFzIERhdGFGbG93W10pLmZvckVhY2goKGl0ZW06IERhdGFGbG93LCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLk9uRXZlbnREYXRhKGl0ZW0sIGtleSwgaW5kZXgpKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIFNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsLCBpc0Rpc3BhdGNoOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgaWYgKHRoaXMuZGF0YVtrZXldICE9IHZhbHVlKSB7XHJcbiAgICAgIGlmICh0aGlzLmRhdGFba2V5XSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFba2V5XSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgICB0aGlzLlJlbW92ZUV2ZW50RGF0YSgodGhpcy5kYXRhW2tleV0gYXMgRGF0YUZsb3cpLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFba2V5XSkgJiYgKHRoaXMuZGF0YVtrZXldIGFzIFtdKS5sZW5ndGggPiAwICYmIHRoaXMuZGF0YVtrZXldWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcclxuICAgICAgICAgICh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5SZW1vdmVFdmVudERhdGEoaXRlbSwga2V5LCBpbmRleCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLkJpbmRFdmVudCh2YWx1ZSwga2V5KTtcclxuICAgIH1cclxuICAgIHRoaXMuZGF0YVtrZXldID0gdmFsdWU7XHJcbiAgICBpZiAoaXNEaXNwYXRjaCkge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XHJcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XHJcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcclxuICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBwdWJsaWMgU2V0RGF0YShkYXRhOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSBmYWxzZSkge1xyXG5cclxuICAgIGlmIChpc0NsZWFyRGF0YSkgdGhpcy5kYXRhID0ge307XHJcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgIGxldCAkZGF0YTogRGF0YUZsb3cgPSBkYXRhIGFzIERhdGFGbG93O1xyXG4gICAgICBpZiAoIXRoaXMucHJvcGVydHkgJiYgJGRhdGEucHJvcGVydHkpIHRoaXMucHJvcGVydHkgPSAkZGF0YS5wcm9wZXJ0eTtcclxuICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgICB0aGlzLlNldChrZXksICRkYXRhLkdldChrZXkpLCBzZW5kZXIsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKCRkYXRhLmdldFByb3BlcnRpZXMoKSkpIHtcclxuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICB0aGlzLlNldChrZXksIGRhdGFba2V5XSwgc2VuZGVyLCBmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge1xyXG4gICAgICBkYXRhXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIEdldChrZXk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xyXG4gIH1cclxuICBwdWJsaWMgQXBwZW5kKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAoIXRoaXMuZGF0YVtrZXldKSB0aGlzLmRhdGFba2V5XSA9IFtdO1xyXG4gICAgdGhpcy5kYXRhW2tleV0gPSBbLi4udGhpcy5kYXRhW2tleV0sIHZhbHVlXTtcclxuICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xyXG4gIH1cclxuICBwdWJsaWMgUmVtb3ZlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLmRhdGFba2V5XS5pbmRleE9mKHZhbHVlKTtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdGhpcy5SZW1vdmVFdmVudERhdGEodGhpcy5kYXRhW2tleV1baW5kZXhdLCBrZXkpO1xyXG4gICAgICB0aGlzLmRhdGFba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwdWJsaWMgbG9hZChkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZGF0YSA9IHt9O1xyXG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcclxuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eT8uZ2V0UHJvcGVydHlCeUtleShkYXRhLmtleSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhW2tleV0gPSAoZGF0YT8uW2tleV0gPz8gKCh0eXBlb2YgdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMucHJvcGVydGllc1trZXldPy5kZWZhdWx0KCkgOiB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCkgPz8gXCJcIikpO1xyXG4gICAgICAgIGlmICghKHRoaXMuZGF0YVtrZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpICYmIHRoaXMuZGF0YVtrZXldLmtleSkge1xyXG4gICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgdGhpcy5kYXRhW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFba2V5XSkgJiYgdGhpcy5wcm9wZXJ0eSAmJiAhKHRoaXMuZGF0YVtrZXldWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHRoaXMuZGF0YVtrZXldLm1hcCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBEYXRhRmxvdykgJiYgaXRlbS5rZXkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGFGbG93KHRoaXMucHJvcGVydHksIGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5CaW5kRXZlbnQodGhpcy5kYXRhW2tleV0sIGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9Kc29uKCkpO1xyXG4gIH1cclxuICBwdWJsaWMgdG9Kc29uKCkge1xyXG4gICAgbGV0IHJzOiBhbnkgPSB7fTtcclxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XHJcbiAgICAgIHJzW2tleV0gPSB0aGlzLkdldChrZXkpO1xyXG4gICAgICBpZiAocnNba2V5XSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0udG9Kc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocnNba2V5XSkgJiYgKHJzW2tleV0gYXMgW10pLmxlbmd0aCA+IDAgJiYgcnNba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XHJcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0ubWFwKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS50b0pzb24oKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBycztcclxuICB9XHJcbiAgcHVibGljIGRlbGV0ZSgpIHtcclxuICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50RmxvdygpO1xyXG4gICAgdGhpcy5kYXRhID0ge307XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi4vZGVzZ2luZXIvTm9kZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wZXJ0eSB7XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElDb250cm9sTm9kZSBleHRlbmRzIElQcm9wZXJ0eSB7XG4gIGdldENvbnRyb2xOb2RlQnlLZXkoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG5leHBvcnQgaW50ZXJmYWNlIElFdmVudCB7XG4gIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KTogdm9pZDtcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTWFpbiBleHRlbmRzIElDb250cm9sTm9kZSwgSUV2ZW50IHtcbiAgbmV3UHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZDtcbiAgb3BlblByb2plY3QoJG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gIGdldFByb2plY3RBbGwoKTogYW55W107XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkO1xuICBjaGVja1Byb2plY3RPcGVuKCRkYXRhOiBhbnkpOiBib29sZWFuO1xuICBnZXRDb250cm9sQWxsKCk6IGFueTtcbiAgc2V0Q29udHJvbENob29zZShrZXk6IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICBnZXRDb250cm9sQ2hvb3NlKCk6IHN0cmluZyB8IG51bGw7XG4gIGdldENvbnRyb2xCeUtleShrZXk6IHN0cmluZyk6IGFueTtcbiAgcmVuZGVySHRtbChub2RlOiBOb2RlKTogc3RyaW5nO1xuICBpbml0T3B0aW9uKG9wdGlvbjogYW55LCBpc0RlZmF1bHQ6IGJvb2xlYW4pOiB2b2lkO1xuICBjaGVja0luaXRPcHRpb24oKTogYm9vbGVhbjtcbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkO1xuICBleHBvcnRKc29uKCk6IGFueTtcbn1cbmV4cG9ydCBjbGFzcyBGbG93Q29yZSBpbXBsZW1lbnRzIElFdmVudCB7XG4gIHB1YmxpYyBHZXRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnaWQnKTtcbiAgfVxuICBwdWJsaWMgU2V0SWQoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCdpZCcsIGlkKTtcbiAgfVxuICBwdWJsaWMgcHJvcGVydGllczogYW55ID0ge307XG4gIHB1YmxpYyBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHB1YmxpYyBDaGVja0VsZW1lbnRDaGlsZChlbDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5lbE5vZGUgPT0gZWwgfHwgdGhpcy5lbE5vZGUuY29udGFpbnMoZWwpO1xuICB9XG4gIHByaXZhdGUgZXZlbnRzOiBFdmVudEZsb3c7XG4gIHB1YmxpYyBTZXREYXRhKGRhdGE6IGFueSwgc2VuZGVyOiBhbnkgPSBudWxsKSB7XG4gICAgdGhpcy5kYXRhLlNldERhdGEoZGF0YSwgc2VuZGVyKTtcbiAgfVxuICBwdWJsaWMgU2V0RGF0YUZsb3coZGF0YTogRGF0YUZsb3cpIHtcbiAgICB0aGlzLmRhdGEuU2V0RGF0YShkYXRhLCB0aGlzLCB0cnVlKTtcblxuICAgIHRoaXMuZGlzcGF0Y2goYGJpbmRfZGF0YV9ldmVudGAsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwgeyBkYXRhLCBzZW5kZXI6IHRoaXMgfSk7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgQmluZERhdGFFdmVudCgpIHtcbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwge1xuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIHRoaXMuZGF0YS5vbihFdmVudEVudW0uY2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIFJlbW92ZURhdGFFdmVudCgpIHtcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmRhdGFDaGFuZ2UsICh7IGtleSwgdmFsdWUsIHNlbmRlciB9OiBhbnkpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwge1xuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICBrZXksIHZhbHVlLCBzZW5kZXJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihFdmVudEVudW0uY2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICAgICAgdHlwZTogJ2RhdGEnLFxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcbiAgICB0aGlzLkJpbmREYXRhRXZlbnQoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmFzZUZsb3c8VFBhcmVudCBleHRlbmRzIEZsb3dDb3JlPiBleHRlbmRzIEZsb3dDb3JlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXJlbnQ6IFRQYXJlbnQpIHtcbiAgICBzdXBlcigpO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgTE9HID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xyXG5leHBvcnQgY29uc3QgZ2V0RGF0ZSA9ICgpID0+IChuZXcgRGF0ZSgpKTtcclxuZXhwb3J0IGNvbnN0IGdldFRpbWUgPSAoKSA9PiBnZXREYXRlKCkuZ2V0VGltZSgpO1xyXG5leHBvcnQgY29uc3QgZ2V0VXVpZCA9ICgpID0+IHtcclxuICAvLyBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dFxyXG4gIGxldCBzOiBhbnkgPSBbXTtcclxuICBsZXQgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XHJcbiAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XHJcbiAgfVxyXG4gIHNbMTRdID0gXCI0XCI7ICAvLyBiaXRzIDEyLTE1IG9mIHRoZSB0aW1lX2hpX2FuZF92ZXJzaW9uIGZpZWxkIHRvIDAwMTBcclxuICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHNbMTldICYgMHgzKSB8IDB4OCwgMSk7ICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxyXG4gIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcclxuXHJcbiAgbGV0IHV1aWQgPSBzLmpvaW4oXCJcIik7XHJcbiAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgUHJvcGVydHlFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi9Ob2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBMaW5lIHtcbiAgcHVibGljIGVsTm9kZTogU1ZHRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKTtcbiAgcHVibGljIGVsUGF0aDogU1ZHUGF0aEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJwYXRoXCIpO1xuICBwcml2YXRlIGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KCk7XG4gIHByaXZhdGUgY3VydmF0dXJlOiBudW1iZXIgPSAwLjU7XG4gIHB1YmxpYyB0ZW1wOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZnJvbTogTm9kZSwgcHVibGljIGZyb21JbmRleDogbnVtYmVyID0gMCwgcHVibGljIHRvOiBOb2RlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLCBwdWJsaWMgdG9JbmRleDogbnVtYmVyID0gMCwgZGF0YTogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoXCJtYWluLXBhdGhcIik7XG4gICAgdGhpcy5lbFBhdGguYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0U2VsZWN0ZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAnJyk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcImNvbm5lY3Rpb25cIik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbFBhdGgpO1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuZWxDYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gICAgdGhpcy5mcm9tLkFkZExpbmUodGhpcyk7XG4gICAgdGhpcy50bz8uQWRkTGluZSh0aGlzKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhLkluaXREYXRhKFxuICAgICAge1xuICAgICAgICBmcm9tOiB0aGlzLmZyb20uR2V0SWQoKSxcbiAgICAgICAgZnJvbUluZGV4OiB0aGlzLmZyb21JbmRleCxcbiAgICAgICAgdG86IHRoaXMudG8/LkdldElkKCksXG4gICAgICAgIHRvSW5kZXg6IHRoaXMudG9JbmRleFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgLi4uIHRoaXMuZnJvbS5wYXJlbnQubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5saW5lKSB8fCB7fVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5mcm9tLmRhdGEuQXBwZW5kKCdsaW5lcycsIHRoaXMuZGF0YSk7XG4gIH1cbiAgcHVibGljIHVwZGF0ZVRvKHRvX3g6IG51bWJlciwgdG9feTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmZyb20gfHwgdGhpcy5mcm9tLmVsTm9kZSA9PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHsgeDogZnJvbV94LCB5OiBmcm9tX3kgfTogYW55ID0gdGhpcy5mcm9tLmdldFBvc3Rpc2lvbkRvdCh0aGlzLmZyb21JbmRleCk7XG4gICAgdmFyIGxpbmVDdXJ2ZSA9IHRoaXMuY3JlYXRlQ3VydmF0dXJlKGZyb21feCwgZnJvbV95LCB0b194LCB0b195LCB0aGlzLmN1cnZhdHVyZSwgJ29wZW5jbG9zZScpO1xuICAgIHRoaXMuZWxQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgbGluZUN1cnZlKTtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKTogTGluZSB7XG4gICAgLy9Qb3N0aW9uIG91dHB1dFxuICAgIGlmICh0aGlzLnRvICYmIHRoaXMudG8uZWxOb2RlKSB7XG4gICAgICBsZXQgeyB4OiB0b194LCB5OiB0b195IH06IGFueSA9IHRoaXMudG8uZ2V0UG9zdGlzaW9uRG90KHRoaXMudG9JbmRleCk7XG4gICAgICB0aGlzLnVwZGF0ZVRvKHRvX3gsIHRvX3kpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwdWJsaWMgQWN0aXZlKGZsZzogYW55ID0gdHJ1ZSkge1xuICAgIGlmIChmbGcpIHtcbiAgICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsUGF0aC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBjcmVhdGVDdXJ2YXR1cmUoc3RhcnRfcG9zX3g6IG51bWJlciwgc3RhcnRfcG9zX3k6IG51bWJlciwgZW5kX3Bvc194OiBudW1iZXIsIGVuZF9wb3NfeTogbnVtYmVyLCBjdXJ2YXR1cmVfdmFsdWU6IG51bWJlciwgdHlwZTogc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVfeCA9IHN0YXJ0X3Bvc194O1xuICAgIGxldCBsaW5lX3kgPSBzdGFydF9wb3NfeTtcbiAgICBsZXQgeCA9IGVuZF9wb3NfeDtcbiAgICBsZXQgeSA9IGVuZF9wb3NfeTtcbiAgICBsZXQgY3VydmF0dXJlID0gY3VydmF0dXJlX3ZhbHVlO1xuICAgIC8vdHlwZSBvcGVuY2xvc2Ugb3BlbiBjbG9zZSBvdGhlclxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ290aGVyJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuXG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGRlbGV0ZShub2RlVGhpczogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSB0cnVlKSB7XG4gICAgdGhpcy5lbFBhdGg/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLmZyb20uZGF0YS5SZW1vdmUoJ2xpbmVzJywgdGhpcy5kYXRhKTtcbiAgICBpZiAodGhpcy5mcm9tICE9IG5vZGVUaGlzKVxuICAgICAgdGhpcy5mcm9tLlJlbW92ZUxpbmUodGhpcyk7XG4gICAgaWYgKHRoaXMudG8gIT0gbm9kZVRoaXMpXG4gICAgICB0aGlzLnRvPy5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIHRoaXMuZWxQYXRoLnJlbW92ZSgpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZSgpO1xuICB9XG4gIHB1YmxpYyBTdGFydFNlbGVjdGVkKGU6IGFueSkge1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuc2V0TGluZUNob29zZSh0aGlzKVxuICB9XG4gIHB1YmxpYyBzZXROb2RlVG8obm9kZTogTm9kZSB8IHVuZGVmaW5lZCwgdG9JbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy50byA9IG5vZGU7XG4gICAgdGhpcy50b0luZGV4ID0gdG9JbmRleDtcbiAgfVxuICBwdWJsaWMgQ2xvbmUoKSB7XG4gICAgaWYgKHRoaXMudG8gJiYgdGhpcy50b0luZGV4ICYmIHRoaXMuZnJvbSAhPSB0aGlzLnRvICYmICF0aGlzLmZyb20uY2hlY2tMaW5lRXhpc3RzKHRoaXMuZnJvbUluZGV4LCB0aGlzLnRvLCB0aGlzLnRvSW5kZXgpKSB7XG4gICAgICByZXR1cm4gbmV3IExpbmUodGhpcy5mcm9tLCB0aGlzLmZyb21JbmRleCwgdGhpcy50bywgdGhpcy50b0luZGV4KS5VcGRhdGVVSSgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vTm9kZVwiO1xuXG5leHBvcnQgZW51bSBNb3ZlVHlwZSB7XG4gIE5vbmUgPSAwLFxuICBOb2RlID0gMSxcbiAgQ2FudmFzID0gMixcbiAgTGluZSA9IDMsXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X0V2ZW50IHtcblxuICBwcml2YXRlIHRpbWVGYXN0Q2xpY2s6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgdGFnSW5nb3JlID0gWydpbnB1dCcsICdidXR0b24nLCAnYScsICd0ZXh0YXJlYSddO1xuXG4gIHByaXZhdGUgbW92ZVR5cGU6IE1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgcHJpdmF0ZSBmbGdEcmFwOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgZmxnTW92ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgYXZfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBhdl95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgcG9zX3g6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgcG9zX3k6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgbW91c2VfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV95OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgdGVtcExpbmU6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogRGVzZ2luZXJWaWV3KSB7XG4gICAgLyogTW91c2UgYW5kIFRvdWNoIEFjdGlvbnMgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuRW5kTW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5Nb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydE1vdmUuYmluZCh0aGlzKSk7XG4gICAgLyogQ29udGV4dCBNZW51ICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgdGhpcy5jb250ZXh0bWVudS5iaW5kKHRoaXMpKTtcblxuICAgIC8qIERyb3AgRHJhcCAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5ub2RlX2Ryb3BFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5ub2RlX2RyYWdvdmVyLmJpbmQodGhpcykpO1xuICAgIC8qIFpvb20gTW91c2UgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLnpvb21fZW50ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogRGVsZXRlICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleWRvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnRleHRtZW51KGV2OiBhbnkpIHsgZXYucHJldmVudERlZmF1bHQoKTsgfVxuICBwcml2YXRlIG5vZGVfZHJhZ292ZXIoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcm9wRW5kKGV2OiBhbnkpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGxldCBrZXlOb2RlOiBhbnkgPSB0aGlzLnBhcmVudC5tYWluLmdldENvbnRyb2xDaG9vc2UoKTtcbiAgICBpZiAoIWtleU5vZGUgJiYgZXYudHlwZSAhPT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBrZXlOb2RlID0gZXYuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJub2RlXCIpO1xuICAgIH1cbiAgICBpZiAoIWtleU5vZGUpIHJldHVybjtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgbGV0IHkgPSB0aGlzLnBhcmVudC5DYWxjWSh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55IC0gZV9wb3NfeSk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuY2hlY2tPbmx5Tm9kZShrZXlOb2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9kZUl0ZW0gPSB0aGlzLnBhcmVudC5BZGROb2RlKGtleU5vZGUsIHtcbiAgICAgIGdyb3VwOiB0aGlzLnBhcmVudC5DdXJyZW50R3JvdXAoKVxuICAgIH0pO1xuICAgIG5vZGVJdGVtLnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICB9XG4gIHB1YmxpYyB6b29tX2VudGVyKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgdGhpcy5wYXJlbnQuem9vbV9pbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIFN0YXJ0TW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKHRoaXMudGFnSW5nb3JlLmluY2x1ZGVzKGV2LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudGltZUZhc3RDbGljayA9IGdldFRpbWUoKTtcbiAgICBpZiAoZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWFpbi1wYXRoJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgdGhpcy5wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkNhbnZhcztcbiAgICBsZXQgbm9kZUNob29zZSA9IHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKTtcbiAgICBpZiAobm9kZUNob29zZSAmJiBub2RlQ2hvb3NlLkNoZWNrRWxlbWVudENoaWxkKGV2LnRhcmdldCkpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGlmIChub2RlQ2hvb3NlICYmIHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuTm9kZSAmJiBldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibm9kZS1kb3RcIikpIHtcbiAgICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5MaW5lO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSBuZXcgTGluZShub2RlQ2hvb3NlLCBmcm9tSW5kZXgpO1xuICAgICAgdGhpcy50ZW1wTGluZS50ZW1wID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT0gTW92ZVR5cGUuQ2FudmFzKSB7XG4gICAgICB0aGlzLmF2X3ggPSB0aGlzLnBhcmVudC5nZXRYKCk7XG4gICAgICB0aGlzLmF2X3kgPSB0aGlzLnBhcmVudC5nZXRZKCk7XG4gICAgfVxuICAgIHRoaXMuZmxnRHJhcCA9IHRydWU7XG4gICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gIH1cbiAgcHVibGljIE1vdmUoZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmICghdGhpcy5mbGdEcmFwKSByZXR1cm47XG4gICAgdGhpcy5mbGdNb3ZlID0gdHJ1ZTtcbiAgICBsZXQgZV9wb3NfeCA9IDA7XG4gICAgbGV0IGVfcG9zX3kgPSAwO1xuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICBlX3Bvc194ID0gZXYudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgc3dpdGNoICh0aGlzLm1vdmVUeXBlKSB7XG4gICAgICBjYXNlIE1vdmVUeXBlLkNhbnZhczpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5hdl94ICsgdGhpcy5wYXJlbnQuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpXG4gICAgICAgICAgbGV0IHkgPSB0aGlzLmF2X3kgKyB0aGlzLnBhcmVudC5DYWxjWSgtKHRoaXMucG9zX3kgLSBlX3Bvc195KSlcbiAgICAgICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgICAgIHRoaXMucGFyZW50LnNldFkoeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTm9kZTpcbiAgICAgICAge1xuICAgICAgICAgIGxldCB4ID0gdGhpcy5wYXJlbnQuQ2FsY1godGhpcy5wb3NfeCAtIGVfcG9zX3gpO1xuICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wb3NfeSAtIGVfcG9zX3kpO1xuICAgICAgICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgICAgICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgICAgICAgIHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKT8udXBkYXRlUG9zaXRpb24oeCwgeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgTW92ZVR5cGUuTGluZTpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0aGlzLnRlbXBMaW5lKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMucGFyZW50LkNhbGNYKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICAgICAgICAgIGxldCB5ID0gdGhpcy5wYXJlbnQuQ2FsY1kodGhpcy5wYXJlbnQuZWxDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueSAtIGVfcG9zX3kpO1xuICAgICAgICAgICAgdGhpcy50ZW1wTGluZS51cGRhdGVUbyh0aGlzLnBhcmVudC5lbENhbnZhcy5vZmZzZXRMZWZ0IC0geCwgdGhpcy5wYXJlbnQuZWxDYW52YXMub2Zmc2V0VG9wIC0geSk7XG4gICAgICAgICAgICBsZXQgbm9kZUVsID0gZXYudGFyZ2V0LmNsb3Nlc3QoJ1tub2RlLWlkXScpO1xuICAgICAgICAgICAgbGV0IG5vZGVJZCA9IG5vZGVFbD8uZ2V0QXR0cmlidXRlKCdub2RlLWlkJyk7XG4gICAgICAgICAgICBsZXQgbm9kZVRvID0gbm9kZUlkID8gdGhpcy5wYXJlbnQuR2V0Tm9kZUJ5SWQobm9kZUlkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChub2RlVG8gJiYgZXYudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm5vZGUtZG90XCIpKSB7XG4gICAgICAgICAgICAgIGxldCB0b0luZGV4ID0gZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IHRvSW5kZXggPSBub2RlRWw/LnF1ZXJ5U2VsZWN0b3IoJy5ub2RlLWRvdCcpPy5bMF0/LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgICAgICAgICB0aGlzLnRlbXBMaW5lLnNldE5vZGVUbyhub2RlVG8sIHRvSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldi50eXBlID09PSBcInRvdWNobW92ZVwiKSB7XG4gICAgICB0aGlzLm1vdXNlX3ggPSBlX3Bvc194O1xuICAgICAgdGhpcy5tb3VzZV95ID0gZV9wb3NfeTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBFbmRNb3ZlKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAoIXRoaXMuZmxnRHJhcCkgcmV0dXJuO1xuICAgIC8vZml4IEZhc3QgQ2xpY2tcbiAgICBpZiAoKChnZXRUaW1lKCkgLSB0aGlzLnRpbWVGYXN0Q2xpY2spIDwgMTAwKSB8fCAhdGhpcy5mbGdNb3ZlKSB7XG4gICAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgICAgdGhpcy5mbGdNb3ZlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVfcG9zX3ggPSAwO1xuICAgIGxldCBlX3Bvc195ID0gMDtcbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaGVuZFwiKSB7XG4gICAgICBlX3Bvc194ID0gdGhpcy5tb3VzZV94O1xuICAgICAgZV9wb3NfeSA9IHRoaXMubW91c2VfeTtcbiAgICB9IGVsc2Uge1xuICAgICAgZV9wb3NfeCA9IGV2LmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYuY2xpZW50WTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW92ZVR5cGUgPT09IE1vdmVUeXBlLkNhbnZhcykge1xuICAgICAgbGV0IHggPSB0aGlzLmF2X3ggKyB0aGlzLnBhcmVudC5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgIGxldCB5ID0gdGhpcy5hdl95ICsgdGhpcy5wYXJlbnQuQ2FsY1koLSh0aGlzLnBvc195IC0gZV9wb3NfeSkpXG4gICAgICB0aGlzLnBhcmVudC5zZXRYKHgpO1xuICAgICAgdGhpcy5wYXJlbnQuc2V0WSh5KTtcbiAgICAgIHRoaXMuYXZfeCA9IDA7XG4gICAgICB0aGlzLmF2X3kgPSAwO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZW1wTGluZSkge1xuICAgICAgdGhpcy50ZW1wTGluZS5DbG9uZSgpO1xuICAgICAgdGhpcy50ZW1wTGluZS5kZWxldGUoKTtcbiAgICAgIHRoaXMudGVtcExpbmUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMucG9zX3ggPSBlX3Bvc194O1xuICAgIHRoaXMucG9zX3kgPSBlX3Bvc195O1xuICAgIHRoaXMubW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICAgIHRoaXMuZmxnRHJhcCA9IGZhbHNlO1xuICAgIHRoaXMuZmxnTW92ZSA9IGZhbHNlO1xuICB9XG4gIHByaXZhdGUga2V5ZG93bihldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKGV2LmtleSA9PT0gJ0RlbGV0ZScgfHwgKGV2LmtleSA9PT0gJ0JhY2tzcGFjZScgJiYgZXYubWV0YUtleSkpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpPy5kZWxldGUoKTtcbiAgICAgIHRoaXMucGFyZW50LmdldExpbmVDaG9vc2UoKT8uZGVsZXRlKCk7XG4gICAgfVxuICAgIGlmIChldi5rZXkgPT09ICdGMicpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERlc2dpbmVyVmlldyB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld1wiO1xuXG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3X1Rvb2xiYXIge1xuICBwcml2YXRlIGVsTm9kZTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgZWxQYXRoR3JvdXA6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByaXZhdGUgYnRuQmFjayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnQ6IERlc2dpbmVyVmlldykge1xuICAgIHRoaXMuZWxOb2RlID0gcGFyZW50LmVsVG9vbGJhcjtcbiAgICB0aGlzLmVsUGF0aEdyb3VwLmNsYXNzTGlzdC5hZGQoJ3Rvb2xiYXItZ3JvdXAnKTtcbiAgICB0aGlzLnJlbmRlclVJKCk7XG4gICAgdGhpcy5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUGF0aEdyb3VwKCkge1xuICAgIHRoaXMuYnRuQmFjay5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGRpc3BsYXk6bm9uZTtgKTtcbiAgICB0aGlzLmVsUGF0aEdyb3VwLmlubmVySFRNTCA9IGBgO1xuICAgIGxldCBncm91cHMgPSB0aGlzLnBhcmVudC5HZXRHcm91cE5hbWUoKTtcbiAgICBsZXQgbGVuID0gZ3JvdXBzLmxlbmd0aCAtIDE7XG4gICAgaWYgKGxlbiA8IDApIHJldHVybjtcbiAgICBsZXQgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0ZXh0LmlubmVySFRNTCA9IGBSb290YDtcbiAgICB0aGlzLmVsUGF0aEdyb3VwLmFwcGVuZENoaWxkKHRleHQpO1xuICAgIHRoaXMuYnRuQmFjay5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgZm9yIChsZXQgaW5kZXggPSBsZW47IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgdGV4dC5pbm5lckhUTUwgPSBgPj4ke2dyb3Vwc1tpbmRleF19YDtcbiAgICAgIHRoaXMuZWxQYXRoR3JvdXAuYXBwZW5kQ2hpbGQodGV4dCk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyByZW5kZXJVSSgpIHtcbiAgICBpZiAoIXRoaXMuZWxOb2RlKSByZXR1cm47XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYGA7XG4gICAgdGhpcy5idG5CYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wYXJlbnQuQmFja0dyb3VwKCkpO1xuICAgIHRoaXMuYnRuQmFjay5pbm5lckhUTUwgPSBgQmFja2A7XG4gICAgbGV0IGJ0blpvb21JbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ0blpvb21Jbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMucGFyZW50Lnpvb21faW4oKSk7XG4gICAgYnRuWm9vbUluLmlubmVySFRNTCA9IGArYDtcbiAgICBsZXQgYnRuWm9vbU91dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ0blpvb21PdXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnBhcmVudC56b29tX291dCgpKTtcbiAgICBidG5ab29tT3V0LmlubmVySFRNTCA9IGAtYDtcbiAgICBsZXQgYnRuWm9vbVJlc2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnRuWm9vbVJlc2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wYXJlbnQuem9vbV9yZXNldCgpKTtcbiAgICBidG5ab29tUmVzZXQuaW5uZXJIVE1MID0gYCpgO1xuICAgIGxldCBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5hZGQoJ3Rvb2xiYXItYnV0dG9uJylcbiAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZCh0aGlzLmJ0bkJhY2spO1xuICAgIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0blpvb21Jbik7XG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuWm9vbU91dCk7XG4gICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuWm9vbVJlc2V0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsUGF0aEdyb3VwKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZChidXR0b25Hcm91cCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2VGbG93IH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuLi9jb3JlL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gXCIuLi9jb3JlL0RhdGFGbG93XCI7XG5pbXBvcnQgeyBEYXRhVmlldyB9IGZyb20gXCIuLi9jb3JlL0VkaXRvclwiO1xuXG5jb25zdCBnZXZhbCA9IGV2YWw7XG5leHBvcnQgY2xhc3MgTm9kZSBleHRlbmRzIEJhc2VGbG93PERlc2dpbmVyVmlldz4ge1xuICAvKipcbiAgICogR0VUIFNFVCBmb3IgRGF0YVxuICAgKi9cbiAgcHVibGljIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ25hbWUnKTtcbiAgfVxuICBwdWJsaWMgZ2V0WSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZGF0YS5HZXQoJ3knKTtcbiAgfVxuICBwdWJsaWMgc2V0WSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5TZXQoJ3knLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFgoKSB7XG4gICAgcmV0dXJuICt0aGlzLmRhdGEuR2V0KCd4Jyk7XG4gIH1cbiAgcHVibGljIHNldFgodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCd4JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBDaGVja0tleShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCdrZXknKSA9PSBrZXk7XG4gIH1cbiAgcHVibGljIGdldERhdGFMaW5lKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCdsaW5lcycpID8/IFtdO1xuICB9XG4gIHB1YmxpYyBjaGVja0xpbmVFeGlzdHMoZnJvbUluZGV4OiBudW1iZXIsIHRvOiBOb2RlLCB0b0luZGV4OiBOdW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hcnJMaW5lLmZpbHRlcigoaXRlbTogTGluZSkgPT4ge1xuICAgICAgaWYgKCFpdGVtLnRlbXAgJiYgaXRlbS50byA9PSB0byAmJiBpdGVtLnRvSW5kZXggPT0gdG9JbmRleCAmJiBpdGVtLmZyb21JbmRleCA9PSBmcm9tSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0udGVtcCAmJiBpdGVtLmZyb20gPT0gdG8gJiYgaXRlbS5mcm9tSW5kZXggPT0gdG9JbmRleCAmJiBpdGVtLnRvSW5kZXggPT0gZnJvbUluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSkubGVuZ3RoID4gMDtcbiAgfVxuICBwdWJsaWMgZWxDb250ZW50OiBFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGFyckxpbmU6IExpbmVbXSA9IFtdO1xuICBwcml2YXRlIG9wdGlvbjogYW55ID0ge307XG4gIHByaXZhdGUgYXJyRGF0YVZpZXc6IERhdGFWaWV3W10gPSBbXTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogRGVzZ2luZXJWaWV3LCBwcml2YXRlIGtleU5vZGU6IGFueSwgZGF0YTogYW55ID0ge30pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5wYXJlbnQubWFpbi5nZXRDb250cm9sTm9kZUJ5S2V5KGtleU5vZGUpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMub3B0aW9uPy5wcm9wZXJ0aWVzO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5Jbml0RGF0YShkYXRhLCB0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgdGhpcy5wYXJlbnQuZGF0YS5BcHBlbmQoJ25vZGVzJywgdGhpcy5kYXRhKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLnJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLW5vZGUnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbi5jbGFzcykge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbi5jbGFzcyk7XG4gICAgfVxuICAgIHRoaXMucGFyZW50LmVsQ2FudmFzLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ25vZGUtaWQnLCB0aGlzLkdldElkKCkpO1xuICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLnJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIGdldE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb247XG4gIH1cbiAgcHJpdmF0ZSByZW5kZXJVSSgpIHtcbiAgICBpZiAodGhpcy5lbE5vZGUuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHJldHVybjtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGRpc3BsYXk6bm9uZTtgKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1sZWZ0XCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtdG9wXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+JHt0aGlzLm9wdGlvbi5pY29ufSAke3RoaXMuZ2V0TmFtZSgpfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keVwiPiR7dGhpcy5vcHRpb24uaHRtbH08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWJvdHRvbVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1yaWdodFwiPjwvZGl2PlxuICAgIGA7XG4gICAgY29uc3QgYWRkTm9kZURvdCA9IChudW06IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsIHN0YXJ0OiBudW1iZXIsIHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChudW0pIHtcbiAgICAgICAgbGV0IG5vZGVRdWVyeSA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xuICAgICAgICBpZiAobm9kZVF1ZXJ5KSB7XG4gICAgICAgICAgbm9kZVF1ZXJ5LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgbGV0IG5vZGVEb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG5vZGVEb3QuY2xhc3NMaXN0LmFkZCgnbm9kZS1kb3QnKTtcbiAgICAgICAgICAgIG5vZGVEb3Quc2V0QXR0cmlidXRlKCdub2RlJywgYCR7c3RhcnQgKyBpfWApO1xuICAgICAgICAgICAgbm9kZVF1ZXJ5LmFwcGVuZENoaWxkKG5vZGVEb3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmxlZnQsIDEwMDAsICcubm9kZS1sZWZ0Jyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py50b3AsIDIwMDAsICcubm9kZS10b3AnKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LmJvdHRvbSwgMzAwMCwgJy5ub2RlLWJvdHRvbScpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8ucmlnaHQsIDQwMDAsICcubm9kZS1yaWdodCcpO1xuXG4gICAgdGhpcy5lbENvbnRlbnQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcubm9kZS1jb250ZW50IC5ib2R5Jyk7XG4gICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgIGdldmFsKGAobm9kZSx2aWV3KT0+eyR7dGhpcy5vcHRpb24uc2NyaXB0fX1gKSh0aGlzLCB0aGlzLnBhcmVudCk7XG4gICAgdGhpcy5hcnJEYXRhVmlldy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnVuQmluZERhdGEoKSk7XG4gICAgaWYgKHRoaXMuZWxDb250ZW50KVxuICAgICAgdGhpcy5hcnJEYXRhVmlldyA9IERhdGFWaWV3LkJpbmRWaWV3KHRoaXMuZGF0YSwgdGhpcy5lbENvbnRlbnQpO1xuICB9XG4gIHB1YmxpYyBvcGVuR3JvdXAoKSB7XG4gICAgaWYgKHRoaXMuQ2hlY2tLZXkoJ25vZGVfZ3JvdXAnKSkge1xuICAgICAgdGhpcy5wYXJlbnQub3Blbkdyb3VwKHRoaXMuR2V0SWQoKSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyB1cGRhdGVQb3NpdGlvbih4OiBhbnksIHk6IGFueSwgaUNoZWNrID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5lbE5vZGUpIHtcbiAgICAgIGxldCB0ZW1weCA9IHg7XG4gICAgICBsZXQgdGVtcHkgPSB5O1xuICAgICAgaWYgKCFpQ2hlY2spIHtcbiAgICAgICAgdGVtcHkgPSAodGhpcy5lbE5vZGUub2Zmc2V0VG9wIC0geSk7XG4gICAgICAgIHRlbXB4ID0gKHRoaXMuZWxOb2RlLm9mZnNldExlZnQgLSB4KTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1weCAhPT0gdGhpcy5nZXRYKCkpIHtcbiAgICAgICAgdGhpcy5zZXRYKHRlbXB4KTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1weSAhPT0gdGhpcy5nZXRZKCkpIHtcbiAgICAgICAgdGhpcy5zZXRZKHRlbXB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIEFjdGl2ZShmbGc6IGFueSA9IHRydWUpIHtcbiAgICBpZiAoZmxnKSB7XG4gICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBSZW1vdmVMaW5lKGxpbmU6IExpbmUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmFyckxpbmUuaW5kZXhPZihsaW5lKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5hcnJMaW5lLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFyckxpbmU7XG4gIH1cbiAgcHVibGljIEFkZExpbmUobGluZTogTGluZSkge1xuICAgIHRoaXMuYXJyTGluZSA9IFsuLi50aGlzLmFyckxpbmUsIGxpbmVdO1xuICB9XG4gIHB1YmxpYyBnZXRQb3N0aXNpb25Eb3QoaW5kZXg6IG51bWJlciA9IDApIHtcbiAgICBsZXQgZWxEb3Q6IGFueSA9IHRoaXMuZWxOb2RlPy5xdWVyeVNlbGVjdG9yKGAubm9kZS1kb3Rbbm9kZT1cIiR7aW5kZXh9XCJdYCk7XG4gICAgaWYgKGVsRG90KSB7XG4gICAgICBsZXQgeSA9ICh0aGlzLmVsTm9kZS5vZmZzZXRUb3AgKyBlbERvdC5vZmZzZXRUb3AgKyAxMCk7XG4gICAgICBsZXQgeCA9ICh0aGlzLmVsTm9kZS5vZmZzZXRMZWZ0ICsgZWxEb3Qub2Zmc2V0TGVmdCArIDEwKTtcbiAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpIHtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHRvcDogJHt0aGlzLmdldFkoKX1weDsgbGVmdDogJHt0aGlzLmdldFgoKX1weDtgKTtcbiAgICB0aGlzLmFyckxpbmUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5VcGRhdGVVSSgpO1xuICAgIH0pXG4gIH1cbiAgcHVibGljIGRlbGV0ZShpc0NsZWFyRGF0YSA9IHRydWUpIHtcbiAgICB0aGlzLmFyckxpbmUuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5kZWxldGUodGhpcywgaXNDbGVhckRhdGEpKTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLmRhdGEuZGVsZXRlKCk7XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLlJlbW92ZURhdGFFdmVudCgpO1xuICAgIH1cbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlKCk7XG4gICAgdGhpcy5hcnJMaW5lID0gW107XG4gICAgaWYgKGlzQ2xlYXJEYXRhKVxuICAgICAgdGhpcy5wYXJlbnQuUmVtb3ZlTm9kZSh0aGlzKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHt9KTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyTGluZSgpIHtcbiAgICB0aGlzLmdldERhdGFMaW5lKCkuZm9yRWFjaCgoaXRlbTogRGF0YUZsb3cpID0+IHtcbiAgICAgIGxldCBub2RlRnJvbSA9IHRoaXM7XG4gICAgICBsZXQgbm9kZVRvID0gdGhpcy5wYXJlbnQuR2V0Tm9kZUJ5SWQoaXRlbS5HZXQoJ3RvJykpO1xuICAgICAgbGV0IHRvSW5kZXggPSBpdGVtLkdldCgndG9JbmRleCcpO1xuICAgICAgbGV0IGZyb21JbmRleCA9IGl0ZW0uR2V0KCdmcm9tSW5kZXgnKTtcbiAgICAgIG5ldyBMaW5lKG5vZGVGcm9tLCBmcm9tSW5kZXgsIG5vZGVUbywgdG9JbmRleCwgaXRlbSkuVXBkYXRlVUkoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRmxvd0NvcmUsIElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSwgUHJvcGVydHlFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IERlc2dpbmVyVmlld19FdmVudCB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld19FdmVudFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3X1Rvb2xiYXIgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdfVG9vbGJhclwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL0xpbmVcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi9Ob2RlXCI7XG5cbmV4cG9ydCBjb25zdCBab29tID0ge1xuICBtYXg6IDEuNixcbiAgbWluOiAwLjYsXG4gIHZhbHVlOiAwLjEsXG4gIGRlZmF1bHQ6IDFcbn1cbmV4cG9ydCBjbGFzcyBEZXNnaW5lclZpZXcgZXh0ZW5kcyBGbG93Q29yZSB7XG5cbiAgLyoqXG4gICAqIEdFVCBTRVQgZm9yIERhdGFcbiAgICovXG4gIHB1YmxpYyBnZXRab29tKCkge1xuICAgIHJldHVybiArdGhpcy5nZXREYXRhR3JvdXAoKS5HZXQoJ3pvb20nKTtcbiAgfVxuICBwdWJsaWMgc2V0Wm9vbSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0YUdyb3VwKCkuU2V0KCd6b29tJywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBnZXRZKCkge1xuICAgIHJldHVybiArdGhpcy5nZXREYXRhR3JvdXAoKS5HZXQoJ3knKTtcbiAgfVxuICBwdWJsaWMgc2V0WSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0YUdyb3VwKCkuU2V0KCd5JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBnZXRYKCkge1xuICAgIHJldHVybiArdGhpcy5nZXREYXRhR3JvdXAoKS5HZXQoJ3gnKTtcbiAgfVxuICBwdWJsaWMgc2V0WCh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0YUdyb3VwKCkuU2V0KCd4JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHByaXZhdGUgZ3JvdXBEYXRhOiBEYXRhRmxvdyB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBsYXN0R3JvdXBOYW1lOiBzdHJpbmcgPSBcIlwiO1xuICBwcml2YXRlIGdldERhdGFHcm91cCgpOiBEYXRhRmxvdyB7XG4gICAgaWYgKHRoaXMuJGxvY2spIHJldHVybiB0aGlzLmRhdGE7XG4gICAgLy8gY2FjaGUgZ3JvdXBEYXRhXG4gICAgaWYgKHRoaXMubGFzdEdyb3VwTmFtZSA9PT0gdGhpcy5DdXJyZW50R3JvdXAoKSkgcmV0dXJuIHRoaXMuZ3JvdXBEYXRhID8/IHRoaXMuZGF0YTtcbiAgICB0aGlzLmxhc3RHcm91cE5hbWUgPSB0aGlzLkN1cnJlbnRHcm91cCgpO1xuICAgIGxldCBncm91cHMgPSB0aGlzLmRhdGEuR2V0KCdncm91cHMnKTtcbiAgICB0aGlzLmdyb3VwRGF0YSA9IGdyb3Vwcz8uZmlsdGVyKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS5HZXQoJ2dyb3VwJykgPT0gdGhpcy5sYXN0R3JvdXBOYW1lKT8uWzBdO1xuXG4gICAgaWYgKCF0aGlzLmdyb3VwRGF0YSkge1xuICAgICAgdGhpcy5ncm91cERhdGEgPSBuZXcgRGF0YUZsb3codGhpcy5tYWluLCB7XG4gICAgICAgIGtleTogUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXMsXG4gICAgICAgIGdyb3VwOiB0aGlzLmxhc3RHcm91cE5hbWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kYXRhLkFwcGVuZCgnZ3JvdXBzJywgdGhpcy5ncm91cERhdGEpO1xuICAgICAgdGhpcy5ncm91cERhdGEub25TYWZlKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLlVwZGF0ZVVJLmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdyb3VwRGF0YS5vblNhZmUoRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMuVXBkYXRlVUkuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdyb3VwRGF0YTtcbiAgfVxuICBwcml2YXRlIGdyb3VwOiBhbnlbXSA9IFtdO1xuICBwdWJsaWMgR2V0R3JvdXBOYW1lKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cC5tYXAoKGl0ZW0pID0+IHRoaXMuR2V0RGF0YUJ5SWQoaXRlbSk/LkdldCgnbmFtZScpKTtcbiAgfVxuICBwdWJsaWMgQmFja0dyb3VwKCkge1xuICAgIHRoaXMuZ3JvdXAuc3BsaWNlKDAsIDEpO1xuICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIEN1cnJlbnRHcm91cCgpIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMuZ3JvdXA/LlswXTtcblxuICAgIGlmIChuYW1lICYmIG5hbWUgIT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvb3QnO1xuICB9XG4gIHB1YmxpYyBvcGVuR3JvdXAoaWQ6IGFueSkge1xuICAgIHRoaXMuZ3JvdXAgPSBbaWQsIC4uLnRoaXMuZ3JvdXBdO1xuICAgIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gIH1cbiAgcHJpdmF0ZSBsaW5lQ2hvb3NlOiBMaW5lIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgc2V0TGluZUNob29zZShub2RlOiBMaW5lIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGluZUNob29zZSkgdGhpcy5saW5lQ2hvb3NlLkFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5saW5lQ2hvb3NlID0gbm9kZTtcbiAgICBpZiAodGhpcy5saW5lQ2hvb3NlKSB7XG4gICAgICB0aGlzLmxpbmVDaG9vc2UuQWN0aXZlKCk7XG4gICAgICB0aGlzLnNldE5vZGVDaG9vc2UodW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGdldExpbmVDaG9vc2UoKTogTGluZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubGluZUNob29zZTtcbiAgfVxuICBwcml2YXRlIG5vZGVzOiBOb2RlW10gPSBbXTtcbiAgcHJpdmF0ZSBub2RlQ2hvb3NlOiBOb2RlIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgc2V0Tm9kZUNob29zZShub2RlOiBOb2RlIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubm9kZUNob29zZSkgdGhpcy5ub2RlQ2hvb3NlLkFjdGl2ZShmYWxzZSk7XG4gICAgdGhpcy5ub2RlQ2hvb3NlID0gbm9kZTtcbiAgICBpZiAodGhpcy5ub2RlQ2hvb3NlKSB7XG4gICAgICB0aGlzLm5vZGVDaG9vc2UuQWN0aXZlKCk7XG4gICAgICB0aGlzLnNldExpbmVDaG9vc2UodW5kZWZpbmVkKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhOiB0aGlzLm5vZGVDaG9vc2UuZGF0YSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc2hvd1Byb3BlcnR5LCB7IGRhdGE6IHRoaXMuZGF0YSB9KTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGdldE5vZGVDaG9vc2UoKTogTm9kZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUNob29zZTtcbiAgfVxuICBwdWJsaWMgQWRkTm9kZUl0ZW0oZGF0YTogYW55KTogTm9kZSB7XG4gICAgcmV0dXJuIHRoaXMuQWRkTm9kZShkYXRhLkdldCgna2V5JyksIGRhdGEpO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlKGtleU5vZGU6IHN0cmluZywgZGF0YTogYW55ID0ge30pOiBOb2RlIHtcbiAgICByZXR1cm4gdGhpcy5JbnNlcnROb2RlKG5ldyBOb2RlKHRoaXMsIGtleU5vZGUsIGRhdGEpKTtcbiAgfVxuICBwdWJsaWMgSW5zZXJ0Tm9kZShub2RlOiBOb2RlKTogTm9kZSB7XG4gICAgdGhpcy5ub2RlcyA9IFsuLi50aGlzLm5vZGVzLCBub2RlXTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBwdWJsaWMgUmVtb3ZlTm9kZShub2RlOiBOb2RlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5ub2Rlcy5pbmRleE9mKG5vZGUpO1xuICAgIHRoaXMuZGF0YS5SZW1vdmUoJ25vZGVzJywgbm9kZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMubm9kZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubm9kZXM7XG4gIH1cbiAgcHVibGljIENsZWFyTm9kZSgpIHtcbiAgICB0aGlzLm5vZGVzPy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5kZWxldGUoZmFsc2UpKTtcbiAgICB0aGlzLm5vZGVzID0gW107XG4gIH1cbiAgcHVibGljIEdldERhdGFBbGxOb2RlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gKHRoaXMuZGF0YS5HZXQoJ25vZGVzJykgPz8gW10pO1xuICB9XG4gIHB1YmxpYyBHZXREYXRhTm9kZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUFsbE5vZGUoKS5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldChcImdyb3VwXCIpID09PSB0aGlzLkN1cnJlbnRHcm91cCgpKTtcbiAgfVxuICAvKipcbiAgICogVmFyaWJ1dGVcbiAgKi9cbiAgcHVibGljIGVsQ2FudmFzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwdWJsaWMgZWxUb29sYmFyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwdWJsaWMgdG9vbGJhcjogRGVzZ2luZXJWaWV3X1Rvb2xiYXI7XG4gIHB1YmxpYyAkbG9jazogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgem9vbV9sYXN0X3ZhbHVlOiBhbnkgPSAxO1xuICBwdWJsaWMgY29uc3RydWN0b3IoZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsTm9kZSA9IGVsTm9kZTtcbiAgICBsZXQgcHJvcGVydGllczogYW55ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pO1xuICAgIHRoaXMuZGF0YS5Jbml0RGF0YSh7fSwgcHJvcGVydGllcyk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnZGVzZ2luZXItdmlldycpXG4gICAgdGhpcy5lbENhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKFwiZGVzZ2luZXItY2FudmFzXCIpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICB0aGlzLmVsVG9vbGJhci5jbGFzc0xpc3QuYWRkKFwiZGVzZ2luZXItdG9vbGJhclwiKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsQ2FudmFzKTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsVG9vbGJhcik7XG4gICAgdGhpcy5lbE5vZGUudGFiSW5kZXggPSAwO1xuICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgICB0aGlzLm9uKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLlJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgIG5ldyBEZXNnaW5lclZpZXdfRXZlbnQodGhpcyk7XG4gICAgdGhpcy50b29sYmFyID0gbmV3IERlc2dpbmVyVmlld19Ub29sYmFyKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVZpZXcoeDogYW55LCB5OiBhbnksIHpvb206IGFueSkge1xuICAgIHRoaXMuZWxDYW52YXMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHt6b29tfSlgO1xuICB9XG4gIHB1YmxpYyBVcGRhdGVVSSgpIHtcbiAgICB0aGlzLnVwZGF0ZVZpZXcodGhpcy5nZXRYKCksIHRoaXMuZ2V0WSgpLCB0aGlzLmdldFpvb20oKSk7XG4gIH1cbiAgcHVibGljIFJlbmRlclVJKGRldGFpbDogYW55ID0ge30pIHtcbiAgICBpZiAoZGV0YWlsLnNlbmRlciAmJiBkZXRhaWwuc2VuZGVyIGluc3RhbmNlb2YgTm9kZSkgcmV0dXJuO1xuICAgIGlmIChkZXRhaWwuc2VuZGVyICYmIGRldGFpbC5zZW5kZXIgaW5zdGFuY2VvZiBEZXNnaW5lclZpZXcpIHtcbiAgICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5DbGVhck5vZGUoKTtcbiAgICB0aGlzLkdldERhdGFOb2RlKCkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICB0aGlzLkFkZE5vZGVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICAgIHRoaXMuR2V0QWxsTm9kZSgpLmZvckVhY2goKGl0ZW06IE5vZGUpID0+IHtcbiAgICAgIGl0ZW0uUmVuZGVyTGluZSgpO1xuICAgIH0pXG4gICAgdGhpcy5VcGRhdGVVSSgpO1xuICB9XG4gIHB1YmxpYyBPcGVuKCRkYXRhOiBEYXRhRmxvdykge1xuICAgIHRoaXMuZGF0YSA9ICRkYXRhO1xuICAgIHRoaXMuJGxvY2sgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3RHcm91cE5hbWUgPSAnJztcbiAgICB0aGlzLmdyb3VwRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy50b29sYmFyLnJlbmRlclBhdGhHcm91cCgpO1xuICAgIHRoaXMuQmluZERhdGFFdmVudCgpO1xuICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgfVxuICBwdWJsaWMgQ2FsY1gobnVtYmVyOiBhbnkpIHtcbiAgICByZXR1cm4gbnVtYmVyICogKHRoaXMuZWxDYW52YXMuY2xpZW50V2lkdGggLyAodGhpcy5lbE5vZGU/LmNsaWVudFdpZHRoICogdGhpcy5nZXRab29tKCkpKTtcbiAgfVxuICBwdWJsaWMgQ2FsY1kobnVtYmVyOiBhbnkpIHtcbiAgICByZXR1cm4gbnVtYmVyICogKHRoaXMuZWxDYW52YXMuY2xpZW50SGVpZ2h0IC8gKHRoaXMuZWxOb2RlPy5jbGllbnRIZWlnaHQgKiB0aGlzLmdldFpvb20oKSkpO1xuICB9XG4gIHB1YmxpYyBHZXRBbGxOb2RlKCk6IE5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMgfHwgW107XG4gIH1cbiAgcHVibGljIEdldE5vZGVCeUlkKGlkOiBzdHJpbmcpOiBOb2RlIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5HZXRBbGxOb2RlKCkuZmlsdGVyKG5vZGUgPT4gbm9kZS5HZXRJZCgpID09IGlkKT8uWzBdO1xuICB9XG5cbiAgcHVibGljIEdldERhdGFCeUlkKGlkOiBzdHJpbmcpOiBEYXRhRmxvdyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLkdldERhdGFBbGxOb2RlKCkuZmlsdGVyKChpdGVtKSA9PiBpdGVtLkdldCgnaWQnKSA9PT0gaWQpPy5bMF07XG4gIH1cbiAgY2hlY2tPbmx5Tm9kZShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiAodGhpcy5tYWluLmdldENvbnRyb2xCeUtleShrZXkpLm9ubHlOb2RlKSAmJiB0aGlzLm5vZGVzLmZpbHRlcihpdGVtID0+IGl0ZW0uQ2hlY2tLZXkoa2V5KSkubGVuZ3RoID4gMDtcbiAgfVxuICBwdWJsaWMgem9vbV9yZWZyZXNoKGZsZzogYW55ID0gMCkge1xuICAgIGxldCB0ZW1wX3pvb20gPSBmbGcgPT0gMCA/IFpvb20uZGVmYXVsdCA6ICh0aGlzLmdldFpvb20oKSArIFpvb20udmFsdWUgKiBmbGcpO1xuICAgIGlmIChab29tLm1heCA+PSB0ZW1wX3pvb20gJiYgdGVtcF96b29tID49IFpvb20ubWluKSB7XG4gICAgICB0aGlzLnNldFgoKHRoaXMuZ2V0WCgpIC8gdGhpcy56b29tX2xhc3RfdmFsdWUpICogdGVtcF96b29tKTtcbiAgICAgIHRoaXMuc2V0WSgodGhpcy5nZXRZKCkgLyB0aGlzLnpvb21fbGFzdF92YWx1ZSkgKiB0ZW1wX3pvb20pO1xuICAgICAgdGhpcy56b29tX2xhc3RfdmFsdWUgPSB0ZW1wX3pvb207XG4gICAgICB0aGlzLnNldFpvb20odGhpcy56b29tX2xhc3RfdmFsdWUpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgem9vbV9pbigpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgxKTtcbiAgfVxuICBwdWJsaWMgem9vbV9vdXQoKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goLTEpO1xuICB9XG4gIHB1YmxpYyB6b29tX3Jlc2V0KCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKDApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL0Jhc2VGbG93XCI7XG5pbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi4vY29yZS9Db25zdGFudFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4uL2Rlc2dpbmVyL0Rlc2dpbmVyVmlld1wiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgVmlld0RvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHByaXZhdGUgdmlldzogRGVzZ2luZXJWaWV3IHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcblxuICAgIHRoaXMudmlldyA9IG5ldyBEZXNnaW5lclZpZXcodGhpcy5lbE5vZGUsIG1haW4pO1xuICAgIHRoaXMudmlldy5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGF0YTogYW55KSA9PiB7IG1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgZGF0YSk7IH0pO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmlldz8uT3BlbihpdGVtLmRhdGEpO1xuICAgICAgdGhpcy5tYWluLnNldFByb2plY3RPcGVuKGl0ZW0uZGF0YSk7XG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9CYXNlRmxvd1wiO1xuaW1wb3J0IHsgRG9ja0VudW0gfSBmcm9tIFwiLi4vY29yZS9Db25zdGFudFwiO1xuaW1wb3J0IHsgQ29udHJvbERvY2sgfSBmcm9tIFwiLi9Db250cm9sRG9ja1wiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuaW1wb3J0IHsgUHJvamVjdERvY2sgfSBmcm9tIFwiLi9Qcm9qZWN0RG9ja1wiO1xuaW1wb3J0IHsgUHJvcGVydHlEb2NrIH0gZnJvbSBcIi4vUHJvcGVydHlEb2NrXCI7XG5pbXBvcnQgeyBUYWJEb2NrIH0gZnJvbSBcIi4vVGFiRG9ja1wiO1xuaW1wb3J0IHsgVmlld0RvY2sgfSBmcm9tIFwiLi9WaWV3RG9ja1wiO1xuXG5leHBvcnQgY2xhc3MgRG9ja01hbmFnZXIge1xuICBwcml2YXRlICRkb2NrTWFuYWdlcjogYW55ID0ge307XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikgeyB9XG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLiRkb2NrTWFuYWdlciA9IHt9O1xuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5sZWZ0LCBDb250cm9sRG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLmxlZnQsIFByb2plY3REb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ucmlnaHQsIFByb3BlcnR5RG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnZpZXcsIFZpZXdEb2NrKTtcbiAgLy8gIHRoaXMuYWRkRG9jayhEb2NrRW51bS50b3AsIFRhYkRvY2spO1xuICAgIHRoaXMuYWRkRG9jayhEb2NrRW51bS5ib3R0b20sIERvY2tCYXNlKTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gIH1cbiAgcHVibGljIGFkZERvY2soJGtleTogc3RyaW5nLCAkdmlldzogYW55KSB7XG4gICAgaWYgKCF0aGlzLiRkb2NrTWFuYWdlclska2V5XSlcbiAgICAgIHRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldID0gW107XG4gICAgdGhpcy4kZG9ja01hbmFnZXJbJGtleV0gPSBbLi4udGhpcy4kZG9ja01hbmFnZXJbJGtleV0sICR2aWV3XTtcbiAgfVxuXG4gIHB1YmxpYyBSZW5kZXJVSSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwidnMtbGVmdCB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidnMtY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtdG9wIHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZzLXZpZXcgdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtYm90dG9tIHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInZzLXJpZ2h0IHZzLWRvY2tcIj48L2Rpdj5cbiAgICBgO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuJGRvY2tNYW5hZ2VyKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgbGV0IHF1ZXJ5U2VsZWN0b3IgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAuJHtrZXl9YCk7XG4gICAgICBpZiAocXVlcnlTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLiRkb2NrTWFuYWdlcltrZXldLmZvckVhY2goKCRpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICBuZXcgJGl0ZW0ocXVlcnlTZWxlY3RvciwgdGhpcy5tYWluKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IENvbnRyb2wgPSB7XG4gIG5vZGVfYmVnaW46IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtcGxheVwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ0JlZ2luJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgY2xhc3M6ICdub2RlLXRlc3QnLFxuICAgIGh0bWw6ICcnLFxuICAgIGRvdDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAxLFxuICAgIH0sXG4gICAgb25seU5vZGU6IHRydWVcbiAgfSxcbiAgbm9kZV9lbmQ6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtc3RvcFwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ0VuZCcsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6ICcnLFxuICAgIGRvdDoge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gICAgb25seU5vZGU6IHRydWVcbiAgfSxcbiAgbm9kZV9pZjoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1lcXVhbHNcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdJZicsXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6ICc8ZGl2PmNvbmRpdGlvbjo8YnIvPjxpbnB1dCBub2RlOm1vZGVsPVwiY29uZGl0aW9uXCIvPjwvZGl2PicsXG4gICAgc2NyaXB0OiBgYCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBjb25kaXRpb246IHtcbiAgICAgICAga2V5OiBcImNvbmRpdGlvblwiLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfVxuICAgIH0sXG4gICAgb3V0cHV0OiAyXG4gIH0sXG4gIG5vZGVfZ3JvdXA6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnR3JvdXAnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bkdvR3JvdXAgbm9kZS1mb3JtLWNvbnRyb2xcIj5HbzwvYnV0dG9uPjwvZGl2PicsXG4gICAgc2NyaXB0OiBgbm9kZS5lbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7bm9kZS5vcGVuR3JvdXAoKX0pO2AsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIG91dHB1dDogMlxuICB9LFxuICBub2RlX29wdGlvbjoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1vYmplY3QtZ3JvdXBcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdPcHRpb24nLFxuICAgIGRvdDoge1xuICAgICAgdG9wOiAxLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBsZWZ0OiAxLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gICAgZ3JvdXA6ICdjb21tb24nLFxuICAgIGh0bWw6IGBcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAxXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMlwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDNcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDA0XCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYCxcbiAgICBzY3JpcHQ6IGBub2RlLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuR29Hcm91cCcpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtub2RlLm9wZW5Hcm91cCgpfSk7YCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBjb25kaXRpb246IHtcbiAgICAgICAga2V5OiBcImNvbmRpdGlvblwiLFxuICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgfVxuICAgIH0sXG4gICAgb3V0cHV0OiAyXG4gIH0sXG4gIG5vZGVfcHJvamVjdDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1vYmplY3QtZ3JvdXBcIj48L2k+JyxcbiAgICBzb3J0OiAwLFxuICAgIG5hbWU6ICdQcm9qZWN0JyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogJzxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBwM1wiPjxzZWxlY3QgY2xhc3M9XCJsaXN0UHJvamVjdCBub2RlLWZvcm0tY29udHJvbFwiIG5vZGU6bW9kZWw9XCJwcm9qZWN0XCI+PC9zZWxlY3Q+PC9kaXY+JyxcbiAgICBzY3JpcHQ6IGBcbiAgICBjb25zdCByZWxvYWRQcm9qZWN0ID0gKCk9PntcbiAgICAgIG5vZGUuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5saXN0UHJvamVjdCcpLmlubmVySHRtbD0nJztcbiAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgIG9wdGlvbi50ZXh0PSdub25lJztcbiAgICAgIG9wdGlvbi52YWx1ZT0nJztcbiAgICAgIG5vZGUuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5saXN0UHJvamVjdCcpLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICBub2RlLnBhcmVudC5tYWluLmdldFByb2plY3RBbGwoKS5mb3JFYWNoKChpdGVtKT0+e1xuICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIG9wdGlvbi50ZXh0PWl0ZW0uR2V0KCduYW1lJyk7XG4gICAgICAgIG9wdGlvbi52YWx1ZT1pdGVtLkdldCgnaWQnKTtcbiAgICAgICAgbm9kZS5lbE5vZGUucXVlcnlTZWxlY3RvcignLmxpc3RQcm9qZWN0JykuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgbm9kZS5lbE5vZGUucXVlcnlTZWxlY3RvcignLmxpc3RQcm9qZWN0JykudmFsdWU9IG5vZGUuZGF0YS5HZXQoJ3Byb2plY3QnKVxuICAgIH1cbiAgICByZWxvYWRQcm9qZWN0KCk7XG5cbiAgIDtgLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHByb2plY3Q6IHtcbiAgICAgICAga2V5OiBcInByb2plY3RcIixcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuIiwiaW1wb3J0IHsgY29tcGFyZVNvcnQsIEV2ZW50RW51bSwgUHJvcGVydHlFbnVtIH0gZnJvbSBcIi4uL2NvcmUvQ29uc3RhbnRcIjtcbmltcG9ydCB7IEV2ZW50RmxvdyB9IGZyb20gXCIuLi9jb3JlL0V2ZW50Rmxvd1wiO1xuaW1wb3J0IHsgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4uL2Rlc2dpbmVyL05vZGVcIjtcbmltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvQmFzZUZsb3dcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvRGF0YUZsb3dcIjtcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XG5cbmV4cG9ydCBjbGFzcyBTeXN0ZW1CYXNlIGltcGxlbWVudHMgSU1haW4ge1xuICBwcml2YXRlICRkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdyh0aGlzKTtcbiAgcHJpdmF0ZSAkcHJvamVjdE9wZW46IGFueTtcbiAgcHJpdmF0ZSAkcHJvcGVydGllczogYW55ID0ge307XG4gIHByaXZhdGUgJGNvbnRyb2w6IGFueSA9IHt9O1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93ID0gbmV3IEV2ZW50RmxvdygpO1xuICBwcml2YXRlICRjb250cm9sQ2hvb3NlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSAkY2hlY2tPcHRpb246IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vc2V0IHByb2plY3RcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5zb2x1dGlvbl0gPSB7XG4gICAgICBpZDoge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLnNvbHV0aW9uXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgc29sdXRpb24tJHtnZXRUaW1lKCl9YFxuICAgICAgfSxcbiAgICAgIHByb2plY3RzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5saW5lXSA9IHtcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0ubGluZVxuICAgICAgfSxcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIGZyb21JbmRleDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgdG86IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfSxcbiAgICAgIHRvSW5kZXg6IHtcbiAgICAgICAgZGVmYXVsdDogMFxuICAgICAgfVxuICAgIH07XG4gICAgLy9zZXQgcHJvamVjdFxuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLm1haW5dID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgRmxvdy0ke2dldFRpbWUoKX1gXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5tYWluXG4gICAgICB9LFxuICAgICAgZ3JvdXBzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9LFxuICAgICAgbm9kZXM6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLmdyb3VwQ2F2YXNdID0ge1xuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5ncm91cENhdmFzXG4gICAgICB9LFxuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgICB4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB6b29tOiB7XG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICAgIH0sXG4gICAgfVxuICB9XG4gIGV4cG9ydEpzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEudG9Kc29uKCk7XG4gIH1cbiAgcHVibGljIGNoZWNrSW5pdE9wdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kY2hlY2tPcHRpb247XG4gIH1cbiAgaW5pdE9wdGlvbihvcHRpb246IGFueSwgaXNEZWZhdWx0OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xuICAgIHRoaXMuJGNoZWNrT3B0aW9uID0gdHJ1ZTtcbiAgICAvLyBzZXQgY29udHJvbFxuICAgIHRoaXMuJGNvbnRyb2wgPSBpc0RlZmF1bHQgPyB7IC4uLm9wdGlvbj8uY29udHJvbCB8fCB7fSwgLi4uQ29udHJvbCB9IDogeyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30gfTtcbiAgICBsZXQgY29udHJvbFRlbXA6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMuJGNvbnRyb2wpLm1hcCgoa2V5KSA9PiAoeyAuLi50aGlzLiRjb250cm9sW2tleV0sIGtleSwgc29ydDogKHRoaXMuJGNvbnRyb2xba2V5XS5zb3J0ID09PSB1bmRlZmluZWQgPyA5OTk5OSA6IHRoaXMuJGNvbnRyb2xba2V5XS5zb3J0KSB9KSkuc29ydChjb21wYXJlU29ydCkuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICBjb250cm9sVGVtcFtpdGVtLmtleV0gPSB7XG4gICAgICAgIGRvdDoge1xuICAgICAgICAgIGxlZnQ6IDEsXG4gICAgICAgICAgdG9wOiAxLFxuICAgICAgICAgIHJpZ2h0OiAxLFxuICAgICAgICAgIGJvdHRvbTogMSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uaXRlbVxuICAgICAgfTtcbiAgICAgIHRoaXMuJHByb3BlcnRpZXNbYG5vZGVfJHtpdGVtLmtleX1gXSA9IHtcbiAgICAgICAgLi4uKGl0ZW0ucHJvcGVydGllcyB8fCB7fSksXG4gICAgICAgIGlkOiB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICAgIH0sXG4gICAgICAgIGtleToge1xuICAgICAgICAgIGRlZmF1bHQ6IGl0ZW0ua2V5XG4gICAgICAgIH0sXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICBkZWZhdWx0OiBpdGVtLmtleVxuICAgICAgICB9LFxuICAgICAgICB4OiB7XG4gICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuICAgICAgICB5OiB7XG4gICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuICAgICAgICBncm91cDoge1xuICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVzOiB7XG4gICAgICAgICAgZGVmYXVsdDogW11cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGNvbnRyb2wgPSBjb250cm9sVGVtcDtcbiAgfVxuICByZW5kZXJIdG1sKG5vZGU6IE5vZGUpOiBzdHJpbmcge1xuICAgIHJldHVybiBub2RlLmdldE9wdGlvbigpPy5odG1sO1xuICB9XG4gIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XG4gICAgdGhpcy5ldmVudHMuZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICB9XG5cbiAgZ2V0Q29udHJvbEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbCA/PyB7fTtcbiAgfVxuICBnZXRQcm9qZWN0QWxsKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJykgPz8gW107XG4gIH1cbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLiRkYXRhLkluaXREYXRhKGRhdGEsIHRoaXMuZ2V0UHJvcGVydHlCeUtleShQcm9wZXJ0eUVudW0uc29sdXRpb24pKTtcbiAgfVxuICBzZXRQcm9qZWN0T3BlbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy4kcHJvamVjdE9wZW4gPSAkZGF0YTtcbiAgfVxuICBjaGVja1Byb2plY3RPcGVuKCRkYXRhOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvamVjdE9wZW4gPT0gJGRhdGE7XG4gIH1cbiAgbmV3UHJvamVjdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9wZW5Qcm9qZWN0KHt9KTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5uZXdQcm9qZWN0LCB7fSk7XG4gIH1cbiAgb3BlblByb2plY3QoJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGlmICgkZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICBsZXQgJHByb2plY3Q6IGFueSA9IHRoaXMuZ2V0UHJvamVjdEJ5SWQoJGRhdGEuR2V0KCdpZCcpKTtcbiAgICAgIGlmICghJHByb2plY3QpIHtcbiAgICAgICAgJHByb2plY3QgPSAkZGF0YTtcbiAgICAgICAgdGhpcy4kZGF0YS5BcHBlbmQoJ3Byb2plY3RzJywgJHByb2plY3QpO1xuICAgICAgfVxuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsICRwcm9qZWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRhdGEgPSBuZXcgRGF0YUZsb3codGhpcyk7XG4gICAgICBkYXRhLkluaXREYXRhKCRkYXRhLCB0aGlzLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pKTtcbiAgICAgIHRoaXMuJGRhdGEuQXBwZW5kKCdwcm9qZWN0cycsIGRhdGEpO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsIHsgZGF0YSB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgeyBkYXRhIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7IGRhdGEgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXRQcm9qZWN0QnlJZCgkaWQ6IGFueSkge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLkdldCgncHJvamVjdHMnKS5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldCgnaWQnKSA9PT0gJGlkKT8uWzBdO1xuICB9XG4gIHNldENvbnRyb2xDaG9vc2Uoa2V5OiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy4kY29udHJvbENob29zZSA9IGtleTtcbiAgfVxuICBnZXRDb250cm9sQ2hvb3NlKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLiRjb250cm9sQ2hvb3NlO1xuICB9XG4gIGdldENvbnRyb2xCeUtleShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLiRjb250cm9sW2tleV0gfHwge307XG4gIH1cbiAgZ2V0Q29udHJvbE5vZGVCeUtleShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLmdldENvbnRyb2xCeUtleShrZXkpLFxuICAgICAgcHJvcGVydGllczogdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5KGBub2RlXyR7a2V5fWApXG4gICAgfVxuICB9XG4gIGdldFByb3BlcnR5QnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvcGVydGllc1trZXldO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IFZpc3VhbEZsb3cgfSBmcm9tIFwiLi9WaXN1YWxGbG93XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tICcuL2Rlc2dpbmVyL0Rlc2dpbmVyVmlldyc7XG5leHBvcnQgeyBJTWFpbiB9IGZyb20gJy4vY29yZS9CYXNlRmxvdyc7XG5pbXBvcnQgeyBEYXRhRmxvdyB9IGZyb20gJy4vY29yZS9EYXRhRmxvdyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIFZpc3VhbEZsb3csXG4gIERlc2dpbmVyVmlldyxcbiAgRGF0YUZsb3dcbn07XG5cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSAnLi9jb3JlL0Jhc2VGbG93JztcbmltcG9ydCB7IERvY2tNYW5hZ2VyIH0gZnJvbSAnLi9kb2NrL0RvY2tNYW5hZ2VyJztcbmltcG9ydCB7IFN5c3RlbUJhc2UgfSBmcm9tICcuL3N5c3RlbXMvU3lzdGVtQmFzZSc7XG5leHBvcnQgY2xhc3MgVmlzdWFsRmxvdyB7XG4gIHByaXZhdGUgbWFpbjogSU1haW4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJGRvY2tNYW5hZ2VyOiBEb2NrTWFuYWdlcjtcbiAgcHVibGljIGdldERvY2tNYW5hZ2VyKCk6IERvY2tNYW5hZ2VyIHtcbiAgICByZXR1cm4gdGhpcy4kZG9ja01hbmFnZXI7XG4gIH1cbiAgcHVibGljIHNldE9wdGlvbihkYXRhOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICB0aGlzLm1haW4/LmluaXRPcHRpb24oZGF0YSwgaXNEZWZhdWx0KTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlci5yZXNldCgpO1xuICB9XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG1haW46IElNYWluIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5tYWluID0gbWFpbiA/PyBuZXcgU3lzdGVtQmFzZSgpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ZzLWNvbnRhaW5lcicpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyID0gbmV3IERvY2tNYW5hZ2VyKHRoaXMuY29udGFpbmVyLCB0aGlzLm1haW4pO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uU2FmZShldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/Lm9uKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLm1haW4/LmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcbiAgfVxuICBwdWJsaWMgZ2V0TWFpbigpOiBJTWFpbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFpbjtcbiAgfVxuICBuZXdQcm9qZWN0KCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ubmV3UHJvamVjdCgkbmFtZSk7XG4gIH1cbiAgb3BlblByb2plY3QoJG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5vcGVuUHJvamVjdCgkbmFtZSk7XG4gIH1cbiAgZ2V0UHJvamVjdEFsbCgpOiBhbnlbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWFpbigpPy5nZXRQcm9qZWN0QWxsKCk7XG4gIH1cbiAgc2V0UHJvamVjdE9wZW4oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuZ2V0TWFpbigpPy5zZXRQcm9qZWN0T3BlbigkZGF0YSk7XG4gIH1cbiAgaW1wb3J0SnNvbihkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8uaW1wb3J0SnNvbihkYXRhKTtcbiAgfVxuICBleHBvcnRKc29uKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWFpbigpPy5leHBvcnRKc29uKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJFdmVudEVudW0iLCJEb2NrRW51bSIsIlByb3BlcnR5RW51bSIsImNvbXBhcmVTb3J0IiwiYSIsImIiLCJzb3J0IiwiRG9ja0Jhc2UiLCJtYWluIiwiZWxOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZWxDb250ZW50IiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJ0aGlzIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJCb3hJbmZvIiwidGl0bGUiLCIkY2FsbGJhY2siLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJxdWVyeVNlbGVjdG9yIiwiQ29udHJvbERvY2siLCJzdXBlciIsIm5vZGUiLCJjb250cm9scyIsImdldENvbnRyb2xBbGwiLCJjb25zb2xlIiwibG9nIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpdGVtIiwibm9kZUl0ZW0iLCJzZXRBdHRyaWJ1dGUiLCJpY29uIiwibmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcmFnU3RhcnQiLCJiaW5kIiwiZHJhZ2VuZCIsImUiLCJzZXRDb250cm9sQ2hvb3NlIiwia2V5IiwidGFyZ2V0IiwiY2xvc2VzdCIsImdldEF0dHJpYnV0ZSIsInR5cGUiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiUHJvamVjdERvY2siLCJyZW5kZXJVSSIsIm9uIiwiZGV0YWlsIiwicXVlcnlTZWxlY3RvckFsbCIsIl9ub2RlIiwiZGF0YSIsIkdldCIsIiRub2RlUmlnaHQiLCJidXR0b25OZXciLCJuZXdQcm9qZWN0IiwiZ2V0UHJvamVjdEFsbCIsInJlbW92ZUxpc3RlbmVyIiwiY2hlY2tQcm9qZWN0T3BlbiIsImRpc3BhdGNoIiwiRWRpdG9yVHlwZSIsIlRhZ1ZpZXciLCJEYXRhVmlldyIsImVsIiwia2V5TmFtZSIsImJpbmREYXRhIiwiYmluZElucHV0IiwiYmluZEV2ZW50IiwidW5CaW5kRGF0YSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsInNlbmRlciIsInRhZ05hbWUiLCJpbmNsdWRlcyIsImlubmVyVGV4dCIsIlNldCIsInN0YXRpYyIsInJvb3QiLCJBcnJheSIsImZyb20iLCJtYXAiLCJFZGl0b3IiLCJpc0VkaXQiLCJlbElucHV0IiwiZWxMYWJlbCIsIkxhYmVsIiwiY2hhZ25lIiwib25TYWZlIiwiY2hhbmdlRGF0YSIsImRpc3Bvc2UiLCJUZXh0IiwicGFyZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwicmVuZGVyIiwic3dpdGNoTW9kZUVkaXQiLCJpbnB1dERhdGEiLCJJbmxpbmUiLCJzZXRUaW1lb3V0IiwiUHJvcGVydHlEb2NrIiwibGFzdERhdGEiLCJsYWJlbEtleXMiLCJoaWRlS2V5cyIsInNvcnRLZXlzIiwiZGF0YUpzb24iLCJwcm9wZXJ0aWVzIiwiZ2V0UHJvcGVydGllcyIsInByb3BlcnR5SXRlbSIsInByb3BlcnR5TGFiZWwiLCJwcm9wZXJ0eVZhbHVlIiwiRXZlbnRGbG93IiwiZXZlbnRzIiwiZXZlbnQiLCJjYWxsYmFjayIsImVycm9yIiwidW5kZWZpbmVkIiwibGlzdGVuZXJzIiwicHVzaCIsImxpc3RlbmVySW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGV0YWlscyIsImxpc3RlbmVyIiwiRGF0YUZsb3ciLCJwcm9wZXJ0eSIsImxvYWQiLCJJbml0RGF0YSIsImV2ZW50RGF0YUNoYW5nZSIsImtleUNoaWxkIiwidmFsdWVDaGlsZCIsInNlbmRlckNoaWxkIiwiaW5kZXgiLCJSZW1vdmVFdmVudERhdGEiLCJPbkV2ZW50RGF0YSIsIkJpbmRFdmVudCIsImlzQXJyYXkiLCJsZW5ndGgiLCJpc0Rpc3BhdGNoIiwiU2V0RGF0YSIsImlzQ2xlYXJEYXRhIiwiJGRhdGEiLCJBcHBlbmQiLCJSZW1vdmUiLCJnZXRQcm9wZXJ0eUJ5S2V5IiwiZGVmYXVsdCIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvSnNvbiIsInJzIiwiZGVsZXRlIiwiRmxvd0NvcmUiLCJHZXRJZCIsIlNldElkIiwiaWQiLCJDaGVja0VsZW1lbnRDaGlsZCIsImNvbnRhaW5zIiwiU2V0RGF0YUZsb3ciLCJCaW5kRGF0YUV2ZW50IiwiUmVtb3ZlRGF0YUV2ZW50IiwiQmFzZUZsb3ciLCJwYXJlbnQiLCJnZXRUaW1lIiwiRGF0ZSIsIkxpbmUiLCJmcm9tSW5kZXgiLCJ0byIsInRvSW5kZXgiLCJjcmVhdGVFbGVtZW50TlMiLCJlbFBhdGgiLCJjdXJ2YXR1cmUiLCJ0ZW1wIiwiU3RhcnRTZWxlY3RlZCIsInNldEF0dHJpYnV0ZU5TIiwiZWxDYW52YXMiLCJBZGRMaW5lIiwidXBkYXRlVG8iLCJ0b194IiwidG9feSIsIngiLCJmcm9tX3giLCJ5IiwiZnJvbV95IiwiZ2V0UG9zdGlzaW9uRG90IiwibGluZUN1cnZlIiwiY3JlYXRlQ3VydmF0dXJlIiwiVXBkYXRlVUkiLCJBY3RpdmUiLCJmbGciLCJzdGFydF9wb3NfeCIsInN0YXJ0X3Bvc195IiwiZW5kX3Bvc194IiwiZW5kX3Bvc195IiwiY3VydmF0dXJlX3ZhbHVlIiwibGluZV94IiwibGluZV95IiwiaHgxIiwiTWF0aCIsImFicyIsImh4MiIsIm5vZGVUaGlzIiwiUmVtb3ZlTGluZSIsInNldExpbmVDaG9vc2UiLCJzZXROb2RlVG8iLCJDbG9uZSIsImNoZWNrTGluZUV4aXN0cyIsIk1vdmVUeXBlIiwiRGVzZ2luZXJWaWV3X0V2ZW50IiwidGltZUZhc3RDbGljayIsInRhZ0luZ29yZSIsIm1vdmVUeXBlIiwiTm9uZSIsImZsZ0RyYXAiLCJmbGdNb3ZlIiwiYXZfeCIsImF2X3kiLCJwb3NfeCIsInBvc195IiwibW91c2VfeCIsIm1vdXNlX3kiLCJ0ZW1wTGluZSIsIkVuZE1vdmUiLCJNb3ZlIiwiU3RhcnRNb3ZlIiwiY29udGV4dG1lbnUiLCJub2RlX2Ryb3BFbmQiLCJub2RlX2RyYWdvdmVyIiwiem9vbV9lbnRlciIsImtleWRvd24iLCJldiIsInByZXZlbnREZWZhdWx0IiwiJGxvY2siLCJrZXlOb2RlIiwiZ2V0Q29udHJvbENob29zZSIsImdldERhdGEiLCJlX3Bvc194IiwiZV9wb3NfeSIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsIkNhbGNYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiQ2FsY1kiLCJjaGVja09ubHlOb2RlIiwiQWRkTm9kZSIsImdyb3VwIiwiQ3VycmVudEdyb3VwIiwidXBkYXRlUG9zaXRpb24iLCJjdHJsS2V5IiwiZGVsdGFZIiwiem9vbV9vdXQiLCJ6b29tX2luIiwidG9Mb3dlckNhc2UiLCJDYW52YXMiLCJub2RlQ2hvb3NlIiwiZ2V0Tm9kZUNob29zZSIsIk5vZGUiLCJzZXROb2RlQ2hvb3NlIiwiZ2V0WCIsImdldFkiLCJzZXRYIiwic2V0WSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJub2RlRWwiLCJub2RlSWQiLCJub2RlVG8iLCJHZXROb2RlQnlJZCIsIm1ldGFLZXkiLCJnZXRMaW5lQ2hvb3NlIiwiRGVzZ2luZXJWaWV3X1Rvb2xiYXIiLCJlbFBhdGhHcm91cCIsImJ0bkJhY2siLCJlbFRvb2xiYXIiLCJyZW5kZXJQYXRoR3JvdXAiLCJncm91cHMiLCJHZXRHcm91cE5hbWUiLCJsZW4iLCJ0ZXh0IiwicmVtb3ZlQXR0cmlidXRlIiwiQmFja0dyb3VwIiwiYnRuWm9vbUluIiwiYnRuWm9vbU91dCIsImJ0blpvb21SZXNldCIsInpvb21fcmVzZXQiLCJidXR0b25Hcm91cCIsImdldmFsIiwiZXZhbCIsImdldE5hbWUiLCJDaGVja0tleSIsImdldERhdGFMaW5lIiwiYXJyTGluZSIsImZpbHRlciIsIm9wdGlvbiIsImFyckRhdGFWaWV3IiwiZ2V0Q29udHJvbE5vZGVCeUtleSIsImNsYXNzIiwiZ2V0T3B0aW9uIiwiYWN0aXZlRWxlbWVudCIsImh0bWwiLCJhZGROb2RlRG90IiwibnVtIiwic3RhcnQiLCJxdWVyeSIsIm5vZGVRdWVyeSIsImkiLCJub2RlRG90IiwiZG90IiwibGVmdCIsInRvcCIsImJvdHRvbSIsInJpZ2h0Iiwic2NyaXB0IiwiQmluZFZpZXciLCJvcGVuR3JvdXAiLCJpQ2hlY2siLCJ0ZW1weCIsInRlbXB5IiwibGluZSIsImVsRG90IiwiUmVtb3ZlTm9kZSIsIlJlbmRlckxpbmUiLCJab29tIiwiRGVzZ2luZXJWaWV3IiwiZ2V0Wm9vbSIsImdldERhdGFHcm91cCIsInNldFpvb20iLCJncm91cERhdGEiLCJsYXN0R3JvdXBOYW1lIiwiR2V0RGF0YUJ5SWQiLCJ0b29sYmFyIiwiUmVuZGVyVUkiLCJsaW5lQ2hvb3NlIiwibm9kZXMiLCJBZGROb2RlSXRlbSIsIkluc2VydE5vZGUiLCJDbGVhck5vZGUiLCJHZXREYXRhQWxsTm9kZSIsIkdldERhdGFOb2RlIiwiem9vbV9sYXN0X3ZhbHVlIiwidGFiSW5kZXgiLCJ1cGRhdGVWaWV3Iiwiem9vbSIsInN0eWxlIiwidHJhbnNmb3JtIiwiR2V0QWxsTm9kZSIsIk9wZW4iLCJudW1iZXIiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbnRyb2xCeUtleSIsInpvb21fcmVmcmVzaCIsInRlbXBfem9vbSIsIlZpZXdEb2NrIiwidmlldyIsInNldFByb2plY3RPcGVuIiwiRG9ja01hbmFnZXIiLCIkZG9ja01hbmFnZXIiLCJyZXNldCIsImFkZERvY2siLCIka2V5IiwiJHZpZXciLCIkaXRlbSIsIkNvbnRyb2wiLCJub2RlX2JlZ2luIiwib25seU5vZGUiLCJub2RlX2VuZCIsIm5vZGVfaWYiLCJjb25kaXRpb24iLCJvdXRwdXQiLCJub2RlX2dyb3VwIiwibm9kZV9vcHRpb24iLCJub2RlX3Byb2plY3QiLCJwcm9qZWN0IiwiU3lzdGVtQmFzZSIsIiRwcm9qZWN0T3BlbiIsIiRwcm9wZXJ0aWVzIiwiJGNvbnRyb2wiLCIkY29udHJvbENob29zZSIsIiRjaGVja09wdGlvbiIsInByb2plY3RzIiwiZXhwb3J0SnNvbiIsImNoZWNrSW5pdE9wdGlvbiIsImluaXRPcHRpb24iLCJpc0RlZmF1bHQiLCJjb250cm9sIiwiY29udHJvbFRlbXAiLCJsaW5lcyIsInJlbmRlckh0bWwiLCJpbXBvcnRKc29uIiwib3BlblByb2plY3QiLCIkcHJvamVjdCIsImdldFByb2plY3RCeUlkIiwiJGlkIiwiVmlzdWFsRmxvdyIsImdldERvY2tNYW5hZ2VyIiwic2V0T3B0aW9uIiwiZ2V0TWFpbiIsIiRuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7dUNBQU8sTUFBTUEsRUFFQyxhQUZEQSxFQUdHLGVBSEhBLEVBSUUsY0FKRkEsRUFLQyxhQUxEQSxFQU1ILFNBTkdBLEVBT0YsVUFHRUMsRUFDTCxVQURLQSxFQUdMLFVBSEtBLEVBSUgsWUFKR0EsRUFLSixXQUdJQyxFQUNMLGVBREtBLEVBRUQsZ0JBRkNBLEVBR0wsWUFIS0EsRUFLQyxrQkFHREMsRUFBYyxDQUFDQyxFQUFRQyxJQUM5QkQsRUFBRUUsS0FBT0QsRUFBRUMsTUFDTCxFQUVORixFQUFFRSxLQUFPRCxFQUFFQyxLQUNOLEVBRUYsUUMvQklDLEVBRzBDQyxLQUY5Q0MsT0FBc0JDLFNBQVNDLGNBQWMsT0FDMUNDLFVBQ1ZDLFlBQW1CQyxFQUFrQ04sR0FBQU8sS0FBSVAsS0FBSkEsRUFDbkRNLEVBQVVFLFlBQVlELEtBQUtOLFFBQzNCTSxLQUFL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
