/**
   * @license
   * author: Nguyen Van Hau
   * visualflow.js v0.0.1-beta2
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const t="dataChange",e="showProperty",s="openProject",i="change",n="dispose",o="vs-left",a="vs-top",h="vs-view",d="vs-bottom",r="vs-right",l="main_project",c="main_solution",p=(t,e)=>t.sort<e.sort?-1:t.sort>e.sort?1:0;class v{main;elNode=document.createElement("div");constructor(t,e){this.main=e,t.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(t,e){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_title">${t}</div>\n    <div class="vs-boxinfo_content"></div>`,e&&e(this.elNode.querySelector(".vs-boxinfo_content"))}}class u extends v{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(t=>{let e=this.main.getControlAll();Object.keys(e).forEach((s=>{let i=document.createElement("div");i.classList.add("node-item"),i.setAttribute("draggable","true"),i.setAttribute("data-node",s),i.innerHTML=`${e[s].icon} <span>${e[s].name}</span`,i.addEventListener("dragstart",this.dragStart.bind(this)),i.addEventListener("dragend",this.dragend.bind(this)),t.appendChild(i)}))}))}dragend(t){this.main.setControlChoose(null)}dragStart(t){let e=t.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(e),"touchstart"!==t.type&&t.dataTransfer.setData("node",e)}}class m extends v{main;constructor(t,e){super(t,e),this.main=e,this.elNode.classList.add("vs-control"),this.BoxInfo("Project",this.renderUI.bind(this)),this.main.on(i,this.renderUI.bind(this))}renderUI(){let t=this.elNode.querySelector(".vs-boxinfo_content");t&&(t.innerHTML="",this.main.getProjectAll().forEach((e=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${e.Get("name")}`,t?.appendChild(s)})))}}var f;!function(t){t[t.Label=0]="Label",t[t.Text=1]="Text",t[t.Inline=2]="Inline"}(f||(f={}));class y{data;key;type;isEdit=!1;elInput=null;elLabel=null;elNode=document.createElement("div");constructor(e,s,i=null,o=f.Label,a=!1){this.data=e,this.key=s,this.type=o,this.data=e,this.data.onSafe(`${t}_${s}`,this.changeData.bind(this)),this.data.onSafe(n,this.dispose.bind(this)),this.isEdit=o===f.Text,this.elNode.classList.add("node-editor"),a&&i?(i.parentElement?.insertBefore(this.elNode,i),i.parentElement?.removeChild(i),i?.remove()):i&&i.appendChild(this.elNode),this.render()}render(){let t=this.data.Get(this.key);if(this.isEdit){if(this.elLabel&&(this.elLabel.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.remove(),this.elLabel=null),this.elInput)return void(this.elInput.value=t);this.elInput=document.createElement("input"),this.elInput.classList.add("node-form-control"),this.elInput.addEventListener("keydown",this.inputData.bind(this)),this.elInput.value=t,this.elInput.setAttribute("node:model",this.key),this.elNode.appendChild(this.elInput)}else{if(this.elInput&&(this.elInput.removeEventListener("keyup",this.inputData.bind(this)),this.elInput.remove(),this.elInput=null),this.elLabel)return void(this.elLabel.innerHTML=t);this.elLabel=document.createElement("span"),this.type==f.Inline&&this.elLabel.addEventListener("dblclick",this.switchModeEdit.bind(this)),this.elLabel.setAttribute("node:model",this.key),this.elLabel.innerHTML=t,this.elNode.appendChild(this.elLabel)}}switchModeEdit(){this.isEdit=!0,this.render()}inputData(t){setTimeout((()=>{this.data.Set(this.key,t.target.value,this)}))}changeData({key:t,value:e,sender:s}){this.render()}dispose(){this.elInput?.removeEventListener("keydown",this.inputData.bind(this)),this.elLabel?.removeEventListener("dblclick",this.switchModeEdit.bind(this)),this.data.removeListener(`${t}_${this.key}`,this.changeData.bind(this)),this.data.removeListener(n,this.dispose.bind(this))}}class g extends v{main;lastData;labelKeys=["id","key"];dataJson=document.createElement("textarea");constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,s){if(this.lastData==s)return;this.lastData=s,e.innerHTML="";let i=s.getProperties();Object.keys(i).forEach((t=>{let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=t;let o=document.createElement("div");o.classList.add("property-value"),this.labelKeys.includes(t)?new y(s,t,o,f.Label):new y(s,t,o,f.Text),i.appendChild(n),i.appendChild(o),e.appendChild(i)})),e.appendChild(this.dataJson),this.dataJson.value=s.toString(),this.dataJson.classList.add("node-form-control"),s.on(t,(()=>this.dataJson.value=s.toString()))}}class L{events={};constructor(){}onSafe(t,e){this.removeListener(t,e),this.on(t,e)}on(t,e){return"function"!=typeof e?(console.error("The listener callback must be a function, the given type is "+typeof e),!1):"string"!=typeof t?(console.error("The event name must be a string, the given type is "+typeof t),!1):(void 0===this.events[t]&&(this.events[t]={listeners:[]}),void this.events[t].listeners.push(e))}removeListener(t,e){if(!this.events[t])return!1;const s=this.events[t].listeners,i=s.indexOf(e);i>-1&&s.splice(i,1)}dispatch(t,e){if(void 0===this.events[t])return!1;this.events[t].listeners.forEach((t=>{t(e)}))}}class C{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}constructor(t,e){this.property=t,this.events=new L,e&&this.load(e)}InitData(t=null,e=-1){-1!==e&&(this.properties=e),this.load(t)}eventDataChange(e,s,i,n,o){o?(this.dispatch(`${t}_${e}_${o}_${s}`,{key:e,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${t}_${e}_${o}`,{key:e,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${t}_${e}_${s}`,{key:e,keyChild:s,value:i,sender:n}),this.dispatch(`${t}_${e}`,{key:e,keyChild:s,value:i,sender:n})}RemoveEventData(e,s,i){e&&e.removeListener(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}OnEventData(e,s,i){e&&e.on(`${t}`,(({key:t,value:e,sender:n})=>this.eventDataChange(s,t,e,n,i)))}BindEvent(t,e){t&&(t instanceof C&&this.OnEventData(t,e),Array.isArray(t)&&t.length>0&&t[0]instanceof C&&t.forEach(((t,s)=>this.OnEventData(t,e,s))))}Set(e,s,n=null,o=!0){this.data[e]!=s&&(this.data[e]&&(this.data[e]instanceof C&&this.RemoveEventData(this.data[e],e),Array.isArray(this.data[e])&&this.data[e].length>0&&this.data[e][0]instanceof C&&this.data[e].forEach(((t,s)=>this.RemoveEventData(t,e,s)))),this.BindEvent(s,e)),this.data[e]=s,o&&(this.dispatch(`${t}_${e}`,{key:e,value:s,sender:n}),this.dispatch(t,{key:e,value:s,sender:n}),this.dispatch(i,{key:e,value:s,sender:n}))}SetData(t,e=null){Object.keys(t).forEach((s=>{this.Set(s,t[s],e,!1)})),this.dispatch(i,{data:t})}Get(t){return this.data[t]}Append(t,e){this.data[t]||(this.data[t]=[]),this.data[t]=[...this.data[t],e],this.BindEvent(e,t)}Remove(t,e){this.data[t].indexOf(e);var s=this.data[t].indexOf(e);s>-1&&(this.RemoveEventData(this.data[t][s],t),this.data[t].splice(s,1))}load(t){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(t.key)),this.properties)for(let e of Object.keys(this.properties))this.data[e]=t?.[e]??("function"==typeof this.properties[e]?.default?this.properties[e]?.default():this.properties[e]?.default)??"",this.BindEvent(this.data[e],e)}toString(){return JSON.stringify(this.toJson())}toJson(){let t={};for(let e of Object.keys(this.properties))t[e]=this.Get(e),t[e]instanceof C&&(t[e]=t[e].toJson()),Array.isArray(t[e])&&t[e].length>0&&t[e][0]instanceof C&&(t[e]=t[e].map((t=>t.toJson())));return t}delete(){this.events=new L,this.data={}}}class N{GetId(){return this.data.Get("id")}SetId(t){return this.data.Set("id",t)}properties={};data=new C;elNode=document.createElement("div");CheckElementChild(t){return this.elNode==t||this.elNode.contains(t)}events;SetData(t,e=null){this.data.SetData(t,e)}SetDataFlow(t){this.data=t,this.BindDataEvent(),this.dispatch("bind_data_event",{data:t,sender:this})}onSafe(t,e){return this.events.onSafe(t,e),this}on(t,e){return this.events.on(t,e),this}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}BindDataEvent(){this.data.on(t,(({key:e,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${t}_${e}`,{type:"data",key:e,value:s,sender:i}),this.dispatch(t,{type:"data",key:e,value:s,sender:i})}))})),this.data.on(i,(({key:t,value:e,sender:s})=>{setTimeout((()=>{this.dispatch(i,{type:"data",key:t,value:e,sender:s})}))}))}constructor(){this.events=new L,this.BindDataEvent()}}class b extends N{parent;constructor(t){super(),this.parent=t}}const k=()=>(new Date).getTime();class E{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new C;curvature=.5;constructor(t,e=0,s,i=0){this.from=t,this.fromIndex=e,this.to=s,this.toIndex=i,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),this.data.InitData({},{from:{default:this.from.GetId()},fromIndex:{default:this.fromIndex},to:{default:this.to?.GetId()},toIndex:{default:this.toIndex}}),this.from.data.Append("lines",this.data)}updateTo(t,e){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,t,e,this.curvature,"openclose");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:t,y:e}=this.to.getPostisionDot(this.toIndex);this.updateTo(t,e)}return this}Active(t=!0){t?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(t,e,s,i,n,o){let a=t,h=e,d=s,r=i,l=n;switch(o){case"open":if(t>=s)var c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+d+"  "+r;case"close":if(t>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*l;else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+d+"  "+r;case"other":if(t>=s)c=a+Math.abs(d-a)*(-1*l),p=d-Math.abs(d-a)*(-1*l);else c=a+Math.abs(d-a)*l,p=d-Math.abs(d-a)*l;return" M "+a+" "+h+" C "+c+" "+h+" "+p+" "+r+" "+d+"  "+r;default:return" M "+a+" "+h+" C "+(c=a+Math.abs(d-a)*l)+" "+h+" "+(p=d-Math.abs(d-a)*l)+" "+r+" "+d+"  "+r}}delete(t=null){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),this.from.data.Remove("lines",this.data),this.from!=t&&this.from.RemoveLine(this),this.to!=t&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(t){this.from.parent.setLineChoose(this)}setNodeTo(t,e){this.to=t,this.toIndex=e}Clone(){if(this.to&&this.toIndex)return new E(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}var $;!function(t){t[t.None=0]="None",t[t.Node=1]="Node",t[t.Canvas=2]="Canvas",t[t.Line=3]="Line"}($||($={}));const _=1.6,x=.6,I=.1,M=1;class D{parent;zoom_last_value=1;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=$.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(t){this.parent=t,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(t){t.preventDefault()}node_dragover(t){t.preventDefault()}node_dropEnd(t){if(t.preventDefault(),this.parent.$lock)return;let e=this.parent.main.getControlChoose();if(e||"touchend"===t.type||(e=t.dataTransfer.getData("node")),!e)return;let s=0,i=0;"touchmove"===t.type?(s=t.touches[0].clientX,i=t.touches[0].clientY):(s=t.clientX,i=t.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(e)||this.parent.AddNode(e).updatePosition(n,o)}zoom_enter(t){this.parent.$lock||t.ctrlKey&&(t.preventDefault(),t.deltaY>0?this.zoom_out():this.zoom_in())}zoom_refresh(t=0){let e=0==t?M:this.parent.getZoom()+I*t;_>=e&&e>=x&&(this.parent.setX(this.parent.getX()/this.zoom_last_value*e),this.parent.setY(this.parent.getY()/this.zoom_last_value*e),this.zoom_last_value=e,this.parent.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}StartMove(t){if(this.parent.$lock)return;if(this.tagIngore.includes(t.target.tagName.toLowerCase()))return;if(this.timeFastClick=k(),t.target.classList.contains("main-path"))return;"touchstart"===t.type?(this.pos_x=t.touches[0].clientX,this.pos_y=t.touches[0].clientY):(this.pos_x=t.clientX,this.pos_y=t.clientY),this.moveType=$.Canvas;let e=this.parent.getNodeChoose();if(e&&e.CheckElementChild(t.target)?this.moveType=$.Node:this.parent.setNodeChoose(void 0),e&&this.moveType==$.Node&&t.target.classList.contains("node-dot")){this.moveType=$.Line;let s=t.target.getAttribute("node");this.tempLine=new E(e,s)}this.moveType==$.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(t){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let e=0,s=0;switch("touchmove"===t.type?(e=t.touches[0].clientX,s=t.touches[0].clientY):(e=t.clientX,s=t.clientY),this.moveType){case $.Canvas:{let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i);break}case $.Node:{let t=this.parent.CalcX(this.pos_x-e),i=this.parent.CalcY(this.pos_y-s);this.pos_x=e,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(t,i);break}case $.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-e),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=t.target.closest("[node-id]"),a=o?.getAttribute("node-id"),h=a?this.parent.GetNodeById(a):void 0;if(h&&t.target.classList.contains("node-dot")){let e=t.target.getAttribute("node");this.tempLine.setNodeTo(h,e)}else{let t=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(h,t)}}}"touchmove"===t.type&&(this.mouse_x=e,this.mouse_y=s)}EndMove(t){if(this.parent.$lock)return;if(!this.flgDrap)return;if(k()-this.timeFastClick<100||!this.flgMove)return this.moveType=$.None,this.flgDrap=!1,void(this.flgMove=!1);let e=0,s=0;if("touchend"===t.type?(e=this.mouse_x,s=this.mouse_y):(e=t.clientX,s=t.clientY),this.moveType===$.Canvas){let t=this.av_x+this.parent.CalcX(-(this.pos_x-e)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(t),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=e,this.pos_y=s,this.moveType=$.None,this.flgDrap=!1,this.flgMove=!1}keydown(t){this.parent.$lock||(("Delete"===t.key||"Backspace"===t.key&&t.metaKey)&&(t.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===t.key&&(t.preventDefault(),console.log(this.parent.data.toJson())))}}const w=eval;class S extends b{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}CheckKey(t){return this.data.Get("key")==t}elContent;arrLine=[];option={};constructor(e,s,i={}){super(e),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,this.data.InitData(i,this.properties),this.data.on(t,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.parent.elCanvas.appendChild(this.elNode),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.data.Append("nodes",this.data),this.renderUI()}renderUI(){this.elNode.setAttribute("style","display:none;"),this.elNode.innerHTML=`\n      <div class="node-left">\n        <div class="node-dot" node="4000"></div>\n      </div>\n      <div class="node-container">\n        <div class="node-top">\n          <div class="node-dot" node="1000"></div>\n        </div>\n        <div class="node-content">\n        <div class="title">${this.option.icon} ${this.getName()}</div>\n        <div class="body">${this.option.html}</div>\n        </div>\n        <div class="node-bottom">\n          <div class="node-dot" node="2000"></div>\n        </div>\n      </div>\n      <div class="node-right">\n        <div class="node-dot"  node="3000"></div>\n      </div>\n    `,this.elContent=this.elNode.querySelector(".node-content .body"),this.UpdateUI(),setTimeout((()=>{w(`(node,view)=>{${this.option.script}}`)(this,this.parent)}))}updatePosition(t,e,s=!1){if(this.elNode){let i=t,n=e;s||(n=this.elNode.offsetTop-e,i=this.elNode.offsetLeft-t),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(t=!0){t?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(t){var e=this.arrLine.indexOf(t);return e>-1&&this.arrLine.splice(e,1),this.arrLine}AddLine(t){this.arrLine=[...this.arrLine,t]}getPostisionDot(t=0){let e=this.elNode?.querySelector(`.node-dot[node="${t}"]`);if(e){let t=this.elNode.offsetTop+e.offsetTop+10;return{x:this.elNode.offsetLeft+e.offsetLeft+10,y:t}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((t=>{t.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((t=>t.delete(this))),this.data.delete(),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(i,{})}}class T extends N{main;getZoom(){return+this.data.Get("zoom")}setZoom(t){return this.data.Set("zoom",t,this)}getY(){return+this.data.Get("y")}setY(t){return this.data.Set("y",t,this)}getX(){return+this.data.Get("x")}setX(t){return this.data.Set("x",t,this)}view_event;lineChoose;setLineChoose(t){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=t,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e,{data:this.nodeChoose.data})):this.dispatch(e,{data:this.data})}getNodeChoose(){return this.nodeChoose}AddNode(t,e={}){return this.InsertNode(new S(this,t,e))}InsertNode(t){return this.nodes=[...this.nodes,t],t}RemoveNode(t){var e=this.nodes.indexOf(t);return this.data.Remove("nodes",t),e>-1&&this.nodes.splice(e,1),this.nodes}ClearNode(){this.nodes?.forEach((t=>t.delete())),this.nodes=[]}elCanvas=document.createElement("div");$lock=!1;constructor(e,s){super(),this.main=s,this.elNode=e;let i=this.main.getPropertyByKey(l);this.data.InitData({},i),this.RenderUI(),this.on(t,this.RenderUI.bind(this)),this.view_event=new D(this)}updateView(t,e,s){this.elCanvas.style.transform=`translate(${t}px, ${e}px) scale(${s})`}UpdateUI(){setTimeout((()=>{this.updateView(this.getX(),this.getY(),this.getZoom())}))}RenderUI(){this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,this.UpdateUI()}CalcX(t){return t*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(t){return t*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(t){return this.GetAllNode().filter((e=>e.GetId()==t))?.[0]}checkOnlyNode(t){return this.main.getControlByKey(t).onlyNode&&this.nodes.filter((e=>e.CheckKey(t))).length>0}}class A extends v{main;constructor(t,s){super(t,s),this.main=s,new T(this.elNode,s).on(e,(t=>s.dispatch(e,t)))}}class P{container;main;$dockManager={};constructor(t,e){this.container=t,this.main=e}reset(){this.$dockManager={},this.addDock(o,u),this.addDock(o,m),this.addDock(r,g),this.addDock(h,A),this.addDock(a,v),this.addDock(d,v),this.RenderUI()}addDock(t,e){this.$dockManager[t]||(this.$dockManager[t]=[]),this.$dockManager[t]=[...this.$dockManager[t],e]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((t=>{let e=this.container.querySelector(`.${t}`);e&&this.$dockManager[t].forEach((t=>{new t(e,this.main)}))}))}}return class{container;$data=new C(this);$properties={};$control={};$controlDefault={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",class:"node-test",html:"",output:1,input:0,onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",html:"",output:0,onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",html:'<div>condition:<br/><input node:model="condition"/></div>',script:"",properties:{condition:{key:"condition",default:""}},output:2},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",html:'<div class="text-center p3"><button>Go</button></div>',script:"console.log(node);console.log(view);",properties:{condition:{key:"condition",default:""}},output:2}};$controlChoose=null;$dockManager;events;getDockManager(){return this.$dockManager}onSafe(t,e){this.events.onSafe(t,e)}on(t,e){this.events.on(t,e)}removeListener(t,e){this.events.removeListener(t,e)}dispatch(t,e){this.events.dispatch(t,e)}getControlAll(){return this.$control??{}}constructor(t,e=null){this.container=t,this.events=new L,this.$properties[c]={...e?.properties||{},id:{default:()=>k()},name:{default:()=>`solution-${k()}`},projects:{default:[]}},this.$properties[l]={...e?.properties||{},id:{default:()=>k()},name:{default:()=>`app-${k()}`},x:{default:0},y:{default:0},zoom:{default:1},nodes:{default:[]}},this.$control={...e?.control||{},...this.$controlDefault};let s={};Object.keys(this.$control).map((t=>({...this.$control[t],key:t,sort:void 0===this.$control[t].sort?99999:this.$control[t].sort}))).sort(p).forEach((t=>{s[t.key]=t,this.$properties[`node_${t.key}`]={...t.properties||{},id:{default:()=>k()},key:{default:t.key},name:{default:t.key},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new P(this.container,this),this.$dockManager.reset(),this.$data.Set("id",(()=>{let t=[],e="0123456789abcdef";for(let s=0;s<36;s++)t[s]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")})())}getProjectAll(){return this.$data.Get("projects")??[]}open(t){this.$data.InitData(t,this.getPropertyByKey(c))}newProject(){this.openProject({})}openProject(t){if(t instanceof C){let e=this.getProjectById(t.Get("id"));e||(e=t,this.$data.Append("projects",e)),this.dispatch(s,e)}else{let e=new C(this);e.InitData(t,this.getPropertyByKey(l)),this.$data.Append("projects",e),this.dispatch(s,e),this.dispatch(i,{data:e})}}getProjectById(t){return this.$data.Get("projects").filter((e=>e.Get("id")===t))?.[0]}setControlChoose(t){this.$controlChoose=t}getControlChoose(){return this.$controlChoose}getControlByKey(t){return this.$control[t]||{}}getControlNodeByKey(t){return{...this.getControlByKey(t),properties:this.getPropertyByKey(`node_${t}`)}}getPropertyByKey(t){return this.$properties[t]}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
