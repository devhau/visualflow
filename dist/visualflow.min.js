/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow.js v0.0.5
   * Released under the MIT license.
   */
var visualflow=function(){"use strict";const e={init:"init",dataChange:"dataChange",showProperty:"showProperty",openProject:"openProject",newProject:"newProject",changeVariable:"changeVariable",change:"change",dispose:"dispose",groupChange:"groupChange"},t={left:"vs-left",top:"vs-top",view:"vs-view",bottom:"vs-bottom",right:"vs-right"},s={main:"main_project",solution:"main_solution",line:"main_line",variable:"main_variable",groupCavas:"main_groupCavas"},i="root";class n{events={};constructor(){}onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const s=this.events[e].listeners,i=s.indexOf(t);i>-1&&s.splice(i,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}}class o{property;data={};properties=null;events;getProperties(){return this.properties}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}constructor(e,t){this.property=e,this.events=new n,t&&this.load(t)}InitData(e=null,t=-1){-1!==t&&(this.properties=t),this.load(e)}eventDataChange(t,s,i,n,o){o?(this.dispatch(`${e.dataChange}_${t}_${o}_${s}`,{key:t,keyChild:s,value:i,sender:n,index:o}),this.dispatch(`${e.dataChange}_${t}_${o}`,{key:t,keyChild:s,value:i,sender:n,index:o})):this.dispatch(`${e.dataChange}_${t}_${s}`,{key:t,keyChild:s,value:i,sender:n}),this.dispatch(`${e.dataChange}_${t}`,{key:t,keyChild:s,value:i,sender:n})}RemoveEventData(t,s,i){t&&t.removeListener(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}OnEventData(t,s,i){t&&t.on(`${e.dataChange}`,(({key:e,value:t,sender:n})=>this.eventDataChange(s,e,t,n,i)))}BindEvent(e,t){e&&(e instanceof o&&this.OnEventData(e,t),Array.isArray(e)&&e.length>0&&e[0]instanceof o&&e.forEach(((e,s)=>this.OnEventData(e,t,s))))}Set(t,s,i=null,n=!0){this.data[t]!=s&&(this.data[t]&&(this.data[t]instanceof o&&this.RemoveEventData(this.data[t],t),Array.isArray(this.data[t])&&this.data[t].length>0&&this.data[t][0]instanceof o&&this.data[t].forEach(((e,s)=>this.RemoveEventData(e,t,s)))),this.BindEvent(s,t)),this.data[t]=s,n&&(this.dispatch(`${e.dataChange}_${t}`,{key:t,value:s,sender:i}),this.dispatch(e.dataChange,{key:t,value:s,sender:i}),this.dispatch(e.change,{key:t,value:s,sender:i}))}SetData(t,s=null,i=!1){if(i&&(this.data={}),t instanceof o){let e=t;if(!this.property&&e.property&&(this.property=e.property),this.properties)for(let t of Object.keys(this.properties))this.Set(t,e.Get(t),s,!1);else for(let t of Object.keys(e.getProperties()))this.Set(t,e.Get(t),s,!1)}else Object.keys(t).forEach((e=>{this.Set(e,t[e],s,!1)}));this.dispatch(e.change,{data:t})}Get(e){return this.data[e]}Append(e,t){this.data[e]||(this.data[e]=[]),this.data[e]=[...this.data[e],t],this.BindEvent(t,e)}Remove(e,t){this.data[e].indexOf(t);var s=this.data[e].indexOf(t);s>-1&&(this.RemoveEventData(this.data[e][s],e),this.data[e].splice(s,1))}load(e){if(this.data={},this.properties||(this.properties=this.property?.getPropertyByKey(e.key)),this.properties)for(let t of Object.keys(this.properties))this.data[t]=e?.[t]??("function"==typeof this.properties[t]?.default?this.properties[t]?.default():this.properties[t]?.default)??"",this.data[t]instanceof o||!this.data[t].key||(this.data[t]=new o(this.property,this.data[t])),!Array.isArray(this.data[t])||!this.property||this.data[t][0]instanceof o||(this.data[t]=this.data[t].map((e=>e instanceof o||!e.key?e:new o(this.property,e)))),this.BindEvent(this.data[t],t)}toString(){return JSON.stringify(this.toJson())}toJson(){let e={};this.properties||(this.properties=this.property?.getPropertyByKey(this.data.key));for(let t of Object.keys(this.properties))e[t]=this.Get(t),e[t]instanceof o?e[t]=e[t].toJson():Array.isArray(e[t])&&e[t].length>0&&e[t][0]instanceof o&&(e[t]=e[t].map((e=>e.toJson())));return e}delete(){this.events=new n,this.data={}}}class a{GetId(){return this.data.Get("id")}SetId(e){return this.data.Set("id",e)}properties={};data=new o;elNode=document.createElement("div");CheckElementChild(e){return this.elNode==e||this.elNode.contains(e)}events;SetData(e,t=null){this.data.SetData(e,t)}SetDataFlow(t){this.data.SetData(t,this,!0),this.dispatch("bind_data_event",{data:t,sender:this}),this.dispatch(e.change,{data:t,sender:this})}onSafe(e,t){return this.events.onSafe(e,t),this}on(e,t){return this.events.on(e,t),this}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){this.events.dispatch(e,t)}RemoveDataEvent(){this.data.removeListener(e.dataChange,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(`${e.dataChange}_${t}`,{type:"data",key:t,value:s,sender:i}),this.dispatch(e.dataChange,{type:"data",key:t,value:s,sender:i})}))})),this.data.removeListener(e.change,(({key:t,value:s,sender:i})=>{setTimeout((()=>{this.dispatch(e.change,{type:"data",key:t,value:s,sender:i})}))}))}constructor(){this.events=new n}}class r extends a{parent;constructor(e){super(),this.parent=e}}const d=()=>new Date,h=()=>d().getTime(),l=(e,t)=>e.sort<t.sort?-1:e.sort>t.sort?1:0,p=e=>e&&e instanceof Function,c=["SPAN","DIV","P","TEXTAREA"];class u{el;data;main;keyName;elNode;property;elSuggestions;elSuggestionsContent;nodeEditor;constructor(e,t,s,i=null){this.el=e,this.data=t,this.main=s,this.keyName=i,this.keyName?e.getAttribute("node:model")||(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.nodeEditor=e,this.nodeEditor.classList.add("node-editor"),this.property.edit?(this.property.select?this.elNode=document.createElement("select"):this.elNode=document.createElement("input"),this.elNode.classList.add("node-form-control")):this.elNode=document.createElement("span"),this.elNode.setAttribute("node:model",this.keyName),this.el.appendChild(this.elNode)):(this.keyName=e?.getAttribute("node:model"),this.keyName&&(this.property=this.main.getPropertyByKey(this.data.Get("key"))?.[this.keyName],this.elNode=this.el,this.nodeEditor=document.createElement("span"),this.nodeEditor.classList.add("node-editor"),e.parentElement?.insertBefore(this.nodeEditor,e),e.parentElement?.removeChild(e),this.nodeEditor.appendChild(this.elNode))),this.elSuggestions=document.createElement("div"),this.elSuggestions.classList.add("node-editor_suggestions"),this.elSuggestionsContent=document.createElement("div"),this.elSuggestionsContent.classList.add("suggestions_content"),this.elSuggestions.appendChild(this.elSuggestionsContent),this.showSuggestions(!1),this.keyName&&this.bindData()}checkShowSuggestions(){if(this.elSuggestionsContent){this.elSuggestionsContent.innerHTML="";var e=this.main.getVariable();if(!e||0==e.length)return void this.showSuggestions(!1);let t=document.createElement("ul");for(let s of e){let e=document.createElement("li"),i=document.createElement("a");e.appendChild(i),i.innerHTML=s.Get("name"),i.addEventListener("click",(()=>{alert(i.innerHTML)})),t.appendChild(e)}this.elSuggestionsContent.appendChild(t)}let t=this.elNode.value,s=this.elNode.selectionStart;if(t){let e=t.lastIndexOf("${",s);t.lastIndexOf("}",s)<e?this.showSuggestions(!0):this.showSuggestions(!1)}}showSuggestions(e=!0){this.elSuggestions&&(e?this.elSuggestions.removeAttribute("style"):this.elSuggestions.setAttribute("style","display:none;"))}bindData(){if(this.keyName&&this.elNode){if(this.data.on(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.addEventListener("change",this.bindEvent.bind(this)),this.elNode.addEventListener("keydown",this.bindEvent.bind(this)),this.elNode.addEventListener("focus",(()=>{this.elSuggestions&&this.elNode?.parentElement?.appendChild(this.elSuggestions)})),this.elNode.addEventListener("blur",(()=>{setTimeout((()=>{this.elSuggestions&&this.elNode?.parentElement?.removeChild(this.elSuggestions)}))})),this.elNode.addEventListener("select",(()=>{this.checkShowSuggestions()})),this.property&&this.property.select&&p(this.property.dataSelect)){const e=this.property.dataSelect({elNode:this.elNode,main:this.main,key:this.keyName}).map((({value:e,text:t})=>{let s=document.createElement("option");return s.value=e,s.text=t,s}));for(let t of e)this.elNode.appendChild(t)}this.property&&p(this.property.script)&&this.property.script({elNode:this.elNode,main:this.main,key:this.keyName}),this.setNodeValue(this.data.Get(this.keyName))}}setNodeValue(e){this.elNode&&(c.includes(this.elNode.tagName)?this.elNode.innerText=`${e}`:this.elNode.value=e)}bindInput({value:e,sender:t}){t!==this&&this.elNode&&t.elNode!==this.elNode&&this.setNodeValue(e)}bindEvent(){setTimeout((()=>{this.keyName&&this.elNode&&(this.data.Set(this.keyName,this.elNode.value,this),this.checkShowSuggestions())}))}Delete(){this.keyName&&this.elNode&&(this.data.removeListener(`${e.dataChange}_${this.keyName}`,this.bindInput.bind(this)),this.elNode.removeEventListener("change",this.bindEvent.bind(this)),this.elNode.removeEventListener("keydown",this.bindEvent.bind(this)))}static BindElement(e,t,s,i=null){return 0==e.childElementCount||e.getAttribute("node:model")?[new u(e,t,s,i)]:Array.from(e.querySelectorAll("[node\\:model]")).map((e=>new u(e,t,s)))}}var m,v=Object.freeze({__proto__:null,FlowCore:a,BaseFlow:r,DockEnum:t,EventEnum:e,PropertyEnum:s,ScopeRoot:i,DataFlow:o,DataView:u,EventFlow:n,compareSort:l,getUuid:()=>{let e=[],t="0123456789abcdef";for(let s=0;s<36;s++)e[s]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")},getTime:h,LOG:(e,...t)=>console.log(e,t),getDate:d,isFunction:p});class g{from;fromIndex;to;toIndex;elNode=document.createElementNS("http://www.w3.org/2000/svg","svg");elPath=document.createElementNS("http://www.w3.org/2000/svg","path");data=new o;curvature=.5;temp=!1;constructor(e,t=0,i,n=0,o=null){this.from=e,this.fromIndex=t,this.to=i,this.toIndex=n,this.elPath.classList.add("main-path"),this.elPath.addEventListener("mousedown",this.StartSelected.bind(this)),this.elPath.addEventListener("touchstart",this.StartSelected.bind(this)),this.elPath.setAttributeNS(null,"d",""),this.elNode.classList.add("connection"),this.elNode.appendChild(this.elPath),this.from.parent.elCanvas.appendChild(this.elNode),this.from.AddLine(this),this.to?.AddLine(this),o?this.data=o:(this.data.InitData({from:this.from.GetId(),fromIndex:this.fromIndex,to:this.to?.GetId(),toIndex:this.toIndex},{...this.from.parent.main.getPropertyByKey(s.line)||{}}),this.from.data.Append("lines",this.data))}updateTo(e,t){if(!this.from||null==this.from.elNode)return;let{x:s,y:i}=this.from.getPostisionDot(this.fromIndex);var n=this.createCurvature(s,i,e,t,this.curvature,"other");this.elPath.setAttributeNS(null,"d",n)}UpdateUI(){if(this.to&&this.to.elNode){let{x:e,y:t}=this.to.getPostisionDot(this.toIndex);this.updateTo(e,t)}return this}Active(e=!0){e?this.elPath.classList.add("active"):this.elPath.classList.remove("active")}createCurvature(e,t,s,i,n,o){let a=e,r=t,d=s,h=i,l=n;switch(o){case"open":if(e>=s)var p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"close":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*l;else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;case"other":if(e>=s)p=a+Math.abs(d-a)*(-1*l),c=d-Math.abs(d-a)*(-1*l);else p=a+Math.abs(d-a)*l,c=d-Math.abs(d-a)*l;return" M "+a+" "+r+" C "+p+" "+r+" "+c+" "+h+" "+d+"  "+h;default:return" M "+a+" "+r+" C "+(p=a+Math.abs(d-a)*l)+" "+r+" "+(c=d-Math.abs(d-a)*l)+" "+h+" "+d+"  "+h}}delete(e=null,t=!0){this.elPath?.removeEventListener("mousedown",this.StartSelected.bind(this)),this.elPath?.removeEventListener("touchstart",this.StartSelected.bind(this)),t&&this.from.data.Remove("lines",this.data),this.from!=e&&this.from.RemoveLine(this),this.to!=e&&this.to?.RemoveLine(this),this.elPath.remove(),this.elNode.remove()}StartSelected(e){this.from.parent.setLineChoose(this)}setNodeTo(e,t){this.to=e,this.toIndex=t}Clone(){if(this.to&&this.toIndex&&this.from!=this.to&&!this.from.checkLineExists(this.fromIndex,this.to,this.toIndex))return new g(this.from,this.fromIndex,this.to,this.toIndex).UpdateUI()}}!function(e){e[e.None=0]="None",e[e.Node=1]="Node",e[e.Canvas=2]="Canvas",e[e.Line=3]="Line"}(m||(m={}));class f{parent;timeFastClick=0;tagIngore=["input","button","a","textarea"];moveType=m.None;flgDrap=!1;flgMove=!1;av_x=0;av_y=0;pos_x=0;pos_y=0;mouse_x=0;mouse_y=0;tempLine;constructor(e){this.parent=e,this.parent.elNode.addEventListener("mouseup",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mouseleave",this.EndMove.bind(this)),this.parent.elNode.addEventListener("mousemove",this.Move.bind(this)),this.parent.elNode.addEventListener("mousedown",this.StartMove.bind(this)),this.parent.elNode.addEventListener("touchend",this.EndMove.bind(this)),this.parent.elNode.addEventListener("touchmove",this.Move.bind(this)),this.parent.elNode.addEventListener("touchstart",this.StartMove.bind(this)),this.parent.elNode.addEventListener("contextmenu",this.contextmenu.bind(this)),this.parent.elNode.addEventListener("drop",this.node_dropEnd.bind(this)),this.parent.elNode.addEventListener("dragover",this.node_dragover.bind(this)),this.parent.elNode.addEventListener("wheel",this.zoom_enter.bind(this)),this.parent.elNode.addEventListener("keydown",this.keydown.bind(this))}contextmenu(e){e.preventDefault()}node_dragover(e){e.preventDefault()}node_dropEnd(e){if(e.preventDefault(),this.parent.$lock)return;let t=this.parent.main.getControlChoose();if(t||"touchend"===e.type||(t=e.dataTransfer.getData("node")),!t)return;let s=0,i=0;"touchmove"===e.type?(s=e.touches[0].clientX,i=e.touches[0].clientY):(s=e.clientX,i=e.clientY);let n=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-s),o=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-i);this.parent.checkOnlyNode(t)||this.parent.AddNode(t,{group:this.parent.CurrentGroup()}).updatePosition(n,o)}zoom_enter(e){this.parent.$lock||e.ctrlKey&&(e.preventDefault(),e.deltaY>0?this.parent.zoom_out():this.parent.zoom_in())}StartMove(e){if(this.parent.$lock)return;if(this.tagIngore.includes(e.target.tagName.toLowerCase()))return;if(this.timeFastClick=h(),e.target.classList.contains("main-path"))return;"touchstart"===e.type?(this.pos_x=e.touches[0].clientX,this.pos_y=e.touches[0].clientY):(this.pos_x=e.clientX,this.pos_y=e.clientY),this.moveType=m.Canvas;let t=this.parent.getNodeChoose();if(t&&t.CheckElementChild(e.target)?this.moveType=m.Node:this.parent.setNodeChoose(void 0),t&&this.moveType==m.Node&&e.target.classList.contains("node-dot")){this.moveType=m.Line;let s=e.target.getAttribute("node");this.tempLine=new g(t,s),this.tempLine.temp=!0}this.moveType==m.Canvas&&(this.av_x=this.parent.getX(),this.av_y=this.parent.getY()),this.flgDrap=!0,this.flgMove=!1}Move(e){if(this.parent.$lock)return;if(!this.flgDrap)return;this.flgMove=!0;let t=0,s=0;switch("touchmove"===e.type?(t=e.touches[0].clientX,s=e.touches[0].clientY):(t=e.clientX,s=e.clientY),this.moveType){case m.Canvas:{let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.parent.UpdateUI();break}case m.Node:{let e=this.parent.CalcX(this.pos_x-t),i=this.parent.CalcY(this.pos_y-s);this.pos_x=t,this.pos_y=s,this.parent.getNodeChoose()?.updatePosition(e,i);break}case m.Line:if(this.tempLine){let i=this.parent.CalcX(this.parent.elCanvas.getBoundingClientRect().x-t),n=this.parent.CalcY(this.parent.elCanvas.getBoundingClientRect().y-s);this.tempLine.updateTo(this.parent.elCanvas.offsetLeft-i,this.parent.elCanvas.offsetTop-n);let o=e.target.closest("[node-id]"),a=o?.getAttribute("node-id"),r=a?this.parent.GetNodeById(a):void 0;if(r&&e.target.classList.contains("node-dot")){let t=e.target.getAttribute("node");this.tempLine.setNodeTo(r,t)}else{let e=o?.querySelector(".node-dot")?.[0]?.getAttribute("node");this.tempLine.setNodeTo(r,e)}}}"touchmove"===e.type&&(this.mouse_x=t,this.mouse_y=s)}EndMove(e){if(this.parent.$lock)return;if(!this.flgDrap)return;if(h()-this.timeFastClick<100||!this.flgMove)return this.moveType=m.None,this.flgDrap=!1,void(this.flgMove=!1);let t=0,s=0;if("touchend"===e.type?(t=this.mouse_x,s=this.mouse_y):(t=e.clientX,s=e.clientY),this.moveType===m.Canvas){let e=this.av_x+this.parent.CalcX(-(this.pos_x-t)),i=this.av_y+this.parent.CalcY(-(this.pos_y-s));this.parent.setX(e),this.parent.setY(i),this.av_x=0,this.av_y=0}this.tempLine&&(this.tempLine.Clone(),this.tempLine.delete(),this.tempLine=void 0),this.pos_x=t,this.pos_y=s,this.moveType=m.None,this.flgDrap=!1,this.flgMove=!1}keydown(e){this.parent.$lock||(("Delete"===e.key||"Backspace"===e.key&&e.metaKey)&&(e.preventDefault(),this.parent.getNodeChoose()?.delete(),this.parent.getLineChoose()?.delete()),"F2"===e.key&&e.preventDefault())}}class y extends r{keyNode;getName(){return this.data.Get("name")}getY(){return+this.data.Get("y")}setY(e){return this.data.Set("y",e,this)}getX(){return+this.data.Get("x")}setX(e){return this.data.Set("x",e,this)}CheckKey(e){return this.data.Get("key")==e}getDataLine(){return this.data.Get("lines")??[]}checkLineExists(e,t,s){return this.arrLine.filter((i=>!i.temp&&i.to==t&&i.toIndex==s&&i.fromIndex==e||!i.temp&&i.from==t&&i.fromIndex==s&&i.toIndex==e)).length>0}elContent;arrLine=[];option={};arrDataView=[];constructor(t,s,i={}){super(t),this.keyNode=s,this.option=this.parent.main.getControlNodeByKey(s),this.properties=this.option?.properties,i instanceof o?this.data=i:(this.data.InitData({...i,name:this.option.name},this.properties),this.parent.data.Append("nodes",this.data)),this.data.on(e.dataChange,this.renderUI.bind(this)),this.elNode.classList.add("vs-node"),this.option.class&&this.elNode.classList.add(this.option.class),this.elNode.setAttribute("node-id",this.GetId()),this.elNode.setAttribute("style","display:none"),this.elNode.addEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.addEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.parent.elCanvas.appendChild(this.elNode),this.renderUI()}getOption(){return this.option}renderUI(e=null){if(e&&["x","y"].includes(e.key))return void setTimeout((()=>{this.UpdateUI()}));if(this.elNode.contains(document.activeElement))return;this.elNode.setAttribute("style","display:none;"),!0===this.getOption()?.hideTitle?this.elNode.innerHTML='\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    ':this.elNode.innerHTML=`\n      <div class="node-left"></div>\n      <div class="node-container">\n        <div class="node-top"></div>\n        <div class="node-content">\n          <div class="title">${this.option.icon} ${this.getName()}</div>\n          <div class="body"></div>\n        </div>\n        <div class="node-bottom"></div>\n      </div>\n      <div class="node-right"></div>\n    `;const t=(e,t,s)=>{if(e){let i=this.elNode.querySelector(s);if(i){i.innerHTML="";for(let s=0;s<e;s++){let e=document.createElement("div");e.classList.add("node-dot"),e.setAttribute("node",`${t+s}`),i.appendChild(e)}}}};t(this.option?.dot?.left,1e3,".node-left"),t(this.option?.dot?.top,2e3,".node-top"),t(this.option?.dot?.bottom,3e3,".node-bottom"),t(this.option?.dot?.right,4e3,".node-right"),this.elContent=this.elNode.querySelector(".node-content .body")||document.createElement("div"),this.parent.main.renderHtml(this,this.elContent),this.UpdateUI(),this.arrDataView.forEach((e=>e.Delete())),p(this.option.script)&&this.option.script({node:this,elNode:this.elNode,main:this.parent.main}),this.elContent&&(this.arrDataView=u.BindElement(this.elContent,this.data,this.parent.main))}openGroup(){this.CheckKey("node_group")&&this.parent.openGroup(this.GetId())}updatePosition(e,t,s=!1){if(this.elNode){let i=e,n=t;s||(n=this.elNode.offsetTop-t,i=this.elNode.offsetLeft-e),i!==this.getX()&&this.setX(i),n!==this.getY()&&this.setY(n)}}Active(e=!0){e?this.elNode.classList.add("active"):this.elNode.classList.remove("active")}RemoveLine(e){var t=this.arrLine.indexOf(e);return t>-1&&this.arrLine.splice(t,1),this.arrLine}AddLine(e){this.arrLine=[...this.arrLine,e]}getPostisionDot(e=0){let t=this.elNode?.querySelector(`.node-dot[node="${e}"]`);if(t){let e=this.elNode.offsetTop+t.offsetTop+10;return{x:this.elNode.offsetLeft+t.offsetLeft+10,y:e}}return{}}UpdateUI(){this.elNode.setAttribute("style",`top: ${this.getY()}px; left: ${this.getX()}px;`),this.arrLine.forEach((e=>{e.UpdateUI()}))}delete(t=!0){this.arrLine.forEach((e=>e.delete(this,t))),t?this.data.delete():(this.data.removeListener(e.dataChange,this.renderUI.bind(this)),this.RemoveDataEvent()),this.elNode.removeEventListener("mousedown",(()=>this.parent.setNodeChoose(this))),this.elNode.removeEventListener("touchstart",(()=>this.parent.setNodeChoose(this))),this.elNode.remove(),this.arrLine=[],t&&this.parent.RemoveNode(this),this.dispatch(e.change,{})}RenderLine(){this.getDataLine().forEach((e=>{let t=this.parent.GetNodeById(e.Get("to")),s=e.Get("toIndex"),i=e.Get("fromIndex");new g(this,i,t,s,e).UpdateUI()}))}}const b=1.6,N=.6,C=.1,L=1;class k extends a{main;getZoom(){return+this.getDataGroup().Get("zoom")}setZoom(e){return this.getDataGroup().Set("zoom",e,this)}getY(){return+this.getDataGroup().Get("y")}setY(e){return this.getDataGroup().Set("y",e,this)}getX(){return+this.getDataGroup().Get("x")}setX(e){return this.getDataGroup().Set("x",e,this)}groupData;lastGroupName="";getDataGroup(){if(this.$lock)return this.data;if(this.lastGroupName===this.CurrentGroup())return this.groupData??this.data;this.lastGroupName=this.CurrentGroup();let t=this.data.Get("groups");this.groupData=t?.filter((e=>e.Get("group")==this.lastGroupName))?.[0],this.groupData||(this.groupData=new o(this.main,{key:s.groupCavas,group:this.lastGroupName}),this.data.Append("groups",this.groupData));let i=this.GetDataById(this.lastGroupName);return i&&i.onSafe(e.dataChange,(()=>{this.UpdateUI.bind(this),this.changeGroup()})),this.groupData}group=[];GetGroupName(){return[...this.group.map((e=>({id:e,text:this.GetDataById(e)?.Get("name")}))),{id:i,text:i}]}BackGroup(e=null){let t=1;e&&(t=this.group.indexOf(e),t<0&&(t=0)),t?this.group.splice(0,t):this.group=[],this.RenderUI(),this.changeGroup()}CurrentGroup(){let e=this.group?.[0];return e&&""!=e?e:"root"}CurrentGroupData(){return this.GetDataById(this.CurrentGroup())??this.data}changeGroup(){setTimeout((()=>{this.main.dispatch(e.groupChange,{group:this.GetGroupName()})}))}openGroup(e){this.group=[e,...this.group],this.RenderUI(),this.changeGroup()}lineChoose;setLineChoose(e){this.lineChoose&&this.lineChoose.Active(!1),this.lineChoose=e,this.lineChoose&&(this.lineChoose.Active(),this.setNodeChoose(void 0))}getLineChoose(){return this.lineChoose}nodes=[];nodeChoose;setNodeChoose(t){this.nodeChoose&&this.nodeChoose.Active(!1),this.nodeChoose=t,this.nodeChoose?(this.nodeChoose.Active(),this.setLineChoose(void 0),this.dispatch(e.showProperty,{data:this.nodeChoose.data})):this.dispatch(e.showProperty,{data:this.CurrentGroupData()})}getNodeChoose(){return this.nodeChoose}AddNodeItem(e){return this.AddNode(e.Get("key"),e)}AddNode(e,t={}){return this.InsertNode(new y(this,e,t))}InsertNode(e){return this.nodes=[...this.nodes,e],e}RemoveNode(e){var t=this.nodes.indexOf(e);return this.data.Remove("nodes",e),t>-1&&this.nodes.splice(t,1),this.nodes}ClearNode(){this.nodes?.forEach((e=>e.delete(!1))),this.nodes=[]}GetDataAllNode(){return this.data?.Get("nodes")??[]}GetDataNode(){return this.GetDataAllNode().filter((e=>e.Get("group")===this.CurrentGroup()))}elCanvas=document.createElement("div");$lock=!0;zoom_last_value=1;constructor(t,i){super(),this.main=i,this.elNode=t;let n=this.main.getPropertyByKey(s.main);this.data.InitData({},n),this.elNode.innerHTML="",this.elNode.classList.remove("desginer-view"),this.elCanvas.classList.remove("desginer-canvas"),this.elNode.classList.add("desginer-view"),this.elCanvas.classList.add("desginer-canvas"),this.elNode.appendChild(this.elCanvas),this.elNode.tabIndex=0,new f(this),this.on(e.dataChange,this.RenderUI.bind(this)),this.on(e.showProperty,(t=>{i.dispatch(e.showProperty,t)})),this.main.on(e.openProject,(e=>{this.Open(e.data)})),this.changeGroup()}updateView(e,t,s){this.elCanvas.style.transform=`translate(${e}px, ${t}px) scale(${s})`}UpdateUI(){this.updateView(this.getX(),this.getY(),this.getZoom())}RenderUI(e={}){e.sender&&e.sender instanceof y||(e.sender&&e.sender instanceof k||(this.ClearNode(),this.GetDataNode().forEach((e=>{this.AddNodeItem(e)})),this.GetAllNode().forEach((e=>{e.RenderLine()}))),this.UpdateUI())}Open(t){t!=this.data?(this.data?.dispatch(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.data=t,this.data.on(e.dataChange,(t=>this.dispatch(e.dataChange,t))),this.$lock=!1,this.lastGroupName="",this.groupData=void 0,this.group=[],this.RenderUI(),this.changeGroup()):this.RenderUI()}CalcX(e){return e*(this.elCanvas.clientWidth/(this.elNode?.clientWidth*this.getZoom()))}CalcY(e){return e*(this.elCanvas.clientHeight/(this.elNode?.clientHeight*this.getZoom()))}GetAllNode(){return this.nodes||[]}GetNodeById(e){return this.GetAllNode().filter((t=>t.GetId()==e))?.[0]}GetDataById(e){return this.GetDataAllNode().filter((t=>t.Get("id")===e))?.[0]}checkOnlyNode(e){return this.main.getControlByKey(e).onlyNode&&this.nodes.filter((t=>t.CheckKey(e))).length>0}zoom_refresh(e=0){let t=0==e?L:this.getZoom()+C*e;b>=t&&t>=N&&(this.setX(this.getX()/this.zoom_last_value*t),this.setY(this.getY()/this.zoom_last_value*t),this.zoom_last_value=t,this.setZoom(this.zoom_last_value))}zoom_in(){this.zoom_refresh(1)}zoom_out(){this.zoom_refresh(-1)}zoom_reset(){this.zoom_refresh(0)}}class E{elNode;main;variables;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-variable"),this.main.onSafe(e.changeVariable,(({data:e})=>{this.Render()})),this.main.onSafe(e.openProject,(()=>{this.Render()})),this.main.onSafe(e.groupChange,(()=>{this.Render()})),this.Render()}Render(){if(this.variables=this.main.getVariable(),this.elNode.innerHTML='\n      <table border="1">\n        <thead>\n          <tr>\n            <td class="variable-name">Name</td>\n            <td class="variable-type">Type</td>\n            <td class="variable-scope">Scope</td>\n            <td class="variable-default">Default</td>\n            <td class="variable-button"></td>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    ',this.variables)for(let e of this.variables)new $(e,this).RenderScope(this.main.getGroupCurrent())}}class ${variable;parent;elNode=document.createElement("tr");nameInput=document.createElement("input");typeInput=document.createElement("select");scopeInput=document.createElement("select");valueDefaultInput=document.createElement("input");constructor(e,t){this.variable=e,this.parent=t,this.nameInput.value=this.variable.Get("name"),this.valueDefaultInput.value=this.variable.Get("initalValue")??"",this.typeInput.value=this.variable.Get("type")??"";for(let e of["text","number","date","object"]){let t=document.createElement("option");t.text=e,t.value=e,this.typeInput.appendChild(t)}let s=document.createElement("td");s.appendChild(this.nameInput),this.elNode.appendChild(s),this.nameInput.addEventListener("keydown",(e=>{this.variable.Set("name",e.target.value)})),this.nameInput.addEventListener("change",(e=>{this.variable.Set("name",e.target.value)}));let i=document.createElement("td");i.appendChild(this.typeInput),this.elNode.appendChild(i),this.typeInput.addEventListener("change",(e=>{this.variable.Set("type",e.target.value)}));let n=document.createElement("td");n.appendChild(this.scopeInput),this.elNode.appendChild(n);let o=document.createElement("td");o.appendChild(this.valueDefaultInput),this.elNode.appendChild(o),this.valueDefaultInput.addEventListener("change",(e=>{this.variable.Set("initalValue",e.target.value)})),this.valueDefaultInput.addEventListener("keydown",(e=>{this.variable.Set("initalValue",e.target.value)}));let a=document.createElement("button");a.innerHTML="-",a.addEventListener("click",(()=>{t.main.removeVariable(e)}));let r=document.createElement("td");r.appendChild(a),this.elNode.appendChild(r),t.elNode.querySelector("table tbody")?.appendChild(this.elNode)}RenderScope(e=null){if(this.scopeInput.innerHTML="",e)for(let t of e){let e=document.createElement("option");e.text=t.text,e.value=t.id,this.scopeInput.prepend(e)}this.scopeInput.value=this.variable.Get("scope"),this.scopeInput.addEventListener("change",(e=>{this.variable.Set("scope",e.target.value)}))}}class x{elNode;main;constructor(e,t){this.elNode=e,this.main=t,this.elNode.classList.add("vs-toolbox"),this.Render()}Render(){let e=this.main.getControlAll(),t={};Object.keys(e).forEach((s=>{let i=e[s].group??"other";void 0===t[i]&&(t[i]=[]),t[i]=[...t[i],e[s]]})),Object.keys(t).forEach(((e,s)=>{let i=document.createElement("div");i.classList.add("node-box"),i.classList.add("active"),i.innerHTML=`\n        <p class="node-box_title">${e}</p>\n        <div class="node-box_boby"></div>\n      `,i.querySelector(".node-box_title")?.addEventListener("click",(()=>{i.classList.contains("active")?i.classList.remove("active"):i.classList.add("active")}));for(let s of t[e]){let e=document.createElement("div");e.classList.add("node-item"),e.setAttribute("draggable","true"),e.setAttribute("data-node",s.key),e.innerHTML=`${s.icon} <span>${s.name}</span`,e.addEventListener("dragstart",this.dragStart.bind(this)),e.addEventListener("dragend",this.dragend.bind(this)),i.querySelector(".node-box_boby")?.appendChild(e)}this.elNode.appendChild(i)}))}dragend(e){this.main.setControlChoose(null)}dragStart(e){let t=e.target.closest(".node-item").getAttribute("data-node");this.main.setControlChoose(t),"touchstart"!==e.type&&e.dataTransfer.setData("node",t)}}class S{elNode;main;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-project"),this.main.on(e.changeVariable,this.Render.bind(this)),this.main.on(e.openProject,this.Render.bind(this))}Render(){this.elNode.innerHTML="",this.main.getProjectAll().forEach((t=>{let s=document.createElement("div");s.classList.add("node-item"),s.innerHTML=`${t.Get("name")}`,s.setAttribute("data-project-id",t.Get("id")),t.onSafe(`${e.dataChange}_name`,(()=>{s.innerHTML=`${t.Get("name")}`})),this.main.checkProjectOpen(t)&&s.classList.add("active"),s.addEventListener("click",(()=>{this.main.setProjectOpen(t)})),this.elNode?.appendChild(s)}))}}class _{elNode;main;$elBoby;$elWarp;$btnNext;$btnBack;$btnAdd;constructor(t,s){this.elNode=t,this.main=s,this.elNode.classList.add("vs-tab-project"),this.main.on(e.openProject,this.Render.bind(this)),this.Render()}Render(){let t=this.$elWarp?.scrollLeft??0;this.elNode.innerHTML='\n    <div class="tab-project__search"></div>\n    <div class="tab-project__list">\n      <div class="tab-project_button">\n        <button class="btn-back"><i class="fas fa-angle-left"></i></button>\n      </div>\n      <div class="tab-project_warp">\n        <div class="tab-project__body">\n        </div>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-next"><i class="fas fa-angle-right"></i></button>\n      </div>\n      <div class="tab-project_button">\n        <button class="btn-add"><i class="fas fa-plus"></i></button>\n      </div>\n    </div>\n    ',this.$elWarp=this.elNode.querySelector(".tab-project_warp"),this.$elBoby=this.elNode.querySelector(".tab-project__body"),this.$btnBack=this.elNode.querySelector(".btn-back"),this.$btnNext=this.elNode.querySelector(".btn-next"),this.$btnAdd=this.elNode.querySelector(".btn-add");const s=()=>{this.$elWarp};this.$elWarp?.addEventListener("scroll",(e=>{s()}),{passive:!0}),s(),this.$btnBack?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft-=100)})),this.$btnNext?.addEventListener("click",(()=>{this.$elWarp&&(this.$elWarp.scrollLeft+=100)})),this.$btnAdd?.addEventListener("click",(()=>{this.main.newProject("")}));let i,n=this.main.getProjectAll();for(let t of n){let s=document.createElement("div"),n=document.createElement("span"),o=document.createElement("div"),a=document.createElement("button");s.setAttribute("data-project-id",t.Get("id")),n.innerHTML=t.Get("name"),n.classList.add("pro-name"),o.classList.add("pro-button"),a.innerHTML='<i class="fas fa-minus"></i>',o.appendChild(a),s.appendChild(n),s.appendChild(o),s.classList.add("project-item"),this.main.checkProjectOpen(t)&&(s.classList.add("active"),i=s),s.addEventListener("click",(e=>{a.contains(e.target)||e.target==a||this.main.setProjectOpen(t)})),a.addEventListener("click",(e=>{this.main.removeProject(t)})),this.$elBoby?.appendChild(s),t.onSafe(e.dataChange+"_name",(()=>{n.innerHTML=t.Get("name")}))}this.$elWarp&&(this.$elWarp.scrollLeft=null!=i?i.offsetLeft-20:t)}}var w=Object.freeze({__proto__:null,DesginerView:k,Line:g,NodeItem:y,VariableView:E,ToolboxView:x,ProjectView:S,TabProjectView:_});class G{main;elNode=document.createElement("div");elContent;constructor(e,t){this.main=t,e.appendChild(this.elNode),this.elNode.innerHTML="DockBase"}BoxInfo(e,t){this.elNode.classList.remove("vs-boxinfo"),this.elNode.classList.add("vs-boxinfo"),this.elNode.innerHTML=`<div class="vs-boxinfo_header"><span class="vs-boxinfo_title">${e}</span><span class="vs-boxinfo_button"></span></div>\n    <div class="vs-boxinfo_warp"><div class="vs-boxinfo_content"></div></div>`,this.elContent=this.elNode.querySelector(".vs-boxinfo_content"),t&&t(this.elContent)}}class I extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-control"),this.BoxInfo("Control",(e=>{new x(e,this.main)}))}}class j extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-variable"),this.BoxInfo("Variable",(e=>{new E(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");s?.appendChild(e),e.innerHTML="New Variable",e.addEventListener("click",(()=>{this.main.newVariable()}))}}}class D extends G{main;lastData;hideKeys=["lines","nodes","groups","variable","x","y","zoom"];sortKeys=["id","key","name","group"];constructor(t,s){super(t,s),this.main=s,this.elNode.classList.add("vs-property"),this.BoxInfo("Property",(t=>{s.on(e.showProperty,(e=>{this.renderUI(t,e.data)}))}))}renderUI(e,t){if(this.lastData==t)return;this.lastData=t,e.innerHTML="";let s=t.getProperties();this.sortKeys.forEach((i=>{if(this.hideKeys.includes(i)||!s[i])return;let n=document.createElement("div");n.classList.add("property-item");let o=document.createElement("div");o.classList.add("property-label"),o.innerHTML=i;let a=document.createElement("div");a.classList.add("property-value"),u.BindElement(a,t,this.main,i),n.appendChild(o),n.appendChild(a),e.appendChild(n)})),Object.keys(s).forEach((s=>{if(this.hideKeys.includes(s)||this.sortKeys.includes(s))return;let i=document.createElement("div");i.classList.add("property-item");let n=document.createElement("div");n.classList.add("property-label"),n.innerHTML=s;let o=document.createElement("div");o.classList.add("property-value"),u.BindElement(o,t,this.main,s),i.appendChild(n),i.appendChild(o),e.appendChild(i)}))}}class P extends G{main;view;constructor(e,t){super(e,t),this.main=t,this.view=new k(this.elNode,t)}}class M extends G{main;constructor(e,t){super(e,t),this.main=t,new _(this.elNode,t)}}class A{container;main;$dockManager={};constructor(e,t){this.container=e,this.main=t}reset(){this.$dockManager={},this.addDock(t.left,I),this.addDock(t.right,D),this.addDock(t.view,P),this.addDock(t.top,M),this.addDock(t.bottom,j),this.RenderUI()}addDock(e,t){this.$dockManager[e]||(this.$dockManager[e]=[]),this.$dockManager[e]=[...this.$dockManager[e],t]}RenderUI(){this.container.innerHTML='\n      <div class="vs-left vs-dock"></div>\n      <div class="vs-content">\n        <div class="vs-top vs-dock"></div>\n        <div class="vs-view vs-dock"></div>\n        <div class="vs-bottom vs-dock"></div>\n      </div>\n      <div class="vs-right vs-dock"></div>\n    ',Object.keys(this.$dockManager).forEach((e=>{let t=this.container.querySelector(`.${e}`);t&&this.$dockManager[e].forEach((e=>{new e(t,this.main)}))}))}}const T={node_begin:{icon:'<i class="fas fa-play"></i>',sort:0,name:"Begin",group:"common",class:"",html:"",dot:{top:0,right:1,left:0,bottom:0},onlyNode:!0},node_end:{icon:'<i class="fas fa-stop"></i>',sort:0,name:"End",group:"common",html:"",dot:{left:1,top:0,right:0,bottom:0},onlyNode:!0},node_if:{icon:'<i class="fas fa-equals"></i>',sort:0,name:"If",group:"common",html:'<div>\n              <div class="node-content-row"><span style="text-align:right">Then</span><span><span class="node-dot" node="50001"></span></span></div>\n              <div class="node-content-row"><span style="text-align:right">Else</span><span><span class="node-dot" node="50002"></span></span></div>\n            </div>\n      ',script:"",properties:{condition:{key:"condition",edit:!0,default:""}},dot:{left:1,top:0,right:0,bottom:0}},node_group:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Group",group:"common",html:'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go</button></div>',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_option:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Option",dot:{top:1,right:0,left:1,bottom:0},group:"common",html:'\n    <div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50001"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50002"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50003"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50004"></span></span></div>\n      <div class="node-content-row"><span>Họ tên :</span><span><span class="node-dot" node="50005"></span></span></div>\n    </div>\n    ',script:({elNode:e,main:t,node:s})=>{e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{s.openGroup()}))},properties:{},output:2},node_project:{icon:'<i class="fas fa-object-group"></i>',sort:0,name:"Project",group:"common",html:'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>',script:({elNode:e,main:t,node:s})=>{},properties:{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:s})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")}))),script:({elNode:e,main:t,node:s})=>{},default:""}}}};class O{$data=new o(this);$projectOpen;$properties={};$control={};events=new n;$controlChoose=null;$checkOption=!1;$group;$indexProject=-1;constructor(){this.$properties[s.solution]={id:{default:()=>h()},key:{default:()=>s.solution},name:{default:()=>`solution-${h()}`,edit:!0},projects:{default:[]}},this.$properties[s.line]={key:{default:s.line},from:{default:0},fromIndex:{default:0},to:{default:0},toIndex:{default:0}},this.$properties[s.main]={id:{default:()=>h()},name:{default:()=>"Flow "+this.$indexProject++,edit:!0},key:{default:s.main},variable:{default:[]},groups:{default:[]},nodes:{default:[]}},this.$properties[s.groupCavas]={key:{default:s.groupCavas},group:{default:""},x:{default:0},y:{default:0},zoom:{default:1}},this.$properties[s.variable]={key:{default:s.variable},name:{default:()=>`var${h()}`},type:{default:()=>"text"},scope:{default:()=>i},initalValue:{default:""}},this.onSafe(e.groupChange,(({group:e})=>{this.$group=e}))}newSolution(e=""){this.$indexProject=1,this.openSolution({name:e})}openSolution(e){this.$data.InitData(e,this.getPropertyByKey(s.solution)),this.openProject(this.$data.Get("projects")?.[0]??{})}removeVariable(t){this.$projectOpen?.Remove("variable",t),this.dispatch(e.changeVariable,{data:t})}addVariable(){let e=new o(this,{key:s.variable,scope:this.getGroupCurrent()?.[0]?.id});return this.$projectOpen?.Append("variable",e),e}newVariable(){let t=this.addVariable();return this.dispatch(e.changeVariable,{data:t}),t}getVariable(){let e=[];return this.$projectOpen&&(e=this.$projectOpen.Get("variable"),e||(e=[],this.$projectOpen.Set("variable",e))),e.filter((e=>this.getGroupCurrent().findIndex((t=>t.id==e.Get("scope")))>-1))}getGroupCurrent(){return this.$group??[]}exportJson(){return this.$data.toJson()}checkInitOption(){return this.$checkOption}initOption(e,t=!0){this.$checkOption=!0,this.$control=t?{...e?.control||{},...T}:{...e?.control||{}};let s={};Object.keys(this.$control).map((e=>({...this.$control[e],key:e,sort:void 0===this.$control[e].sort?99999:this.$control[e].sort}))).sort(l).forEach((e=>{s[e.key]={...e,dot:{left:1,top:1,right:1,bottom:1,...e?.dot}},this.$properties[`${e.key}`]={...e.properties||{},id:{default:()=>h()},key:{default:e.key},name:{default:e.key,edit:!0},x:{default:0},y:{default:0},group:{default:""},lines:{default:[]}}})),this.$control=s}renderHtml(e,t){t.innerHTML=e.getOption()?.html}onSafe(e,t){this.events.onSafe(e,t)}on(e,t){this.events.on(e,t)}removeListener(e,t){this.events.removeListener(e,t)}dispatch(e,t){setTimeout((()=>{this.events.dispatch(e,t)}))}getControlAll(){return this.$control??{}}getProjectAll(){return this.$data.Get("projects")??[]}importJson(e){this.openSolution(e)}setProjectOpen(t){this.$projectOpen!=t&&(this.$projectOpen=t,this.dispatch(e.change,{data:t}),this.dispatch(e.showProperty,{data:t}),this.dispatch(e.openProject,{data:t}))}checkProjectOpen(e){return this.$projectOpen==e}newProject(){this.openProject({}),this.dispatch(e.newProject,{})}openProject(e){let t=null;e instanceof o?(t=this.getProjectById(e.Get("id")),t||(t=e,this.$data.Append("projects",t))):(t=new o(this),t.InitData(e,this.getPropertyByKey(s.main)),this.$data.Append("projects",t)),this.setProjectOpen(t)}removeProject(t){let s=t;s=this.getProjectById(t.Get("id")),this.$data.Remove("projects",s),!this.checkProjectOpen(s)||(this.$projectOpen=this.$data.Get("projects")?.[0],this.$projectOpen)?(this.dispatch(e.change,{data:this.$projectOpen}),this.dispatch(e.showProperty,{data:this.$projectOpen}),this.dispatch(e.openProject,{data:this.$projectOpen})):this.newProject()}getProjectById(e){return this.$data.Get("projects").filter((t=>t.Get("id")===e))?.[0]}setControlChoose(e){this.$controlChoose=e}getControlChoose(){return this.$controlChoose}getControlByKey(e){return this.$control[e]||{}}getControlNodeByKey(e){return{...this.getControlByKey(e),properties:this.getPropertyByKey(`${e}`)}}getPropertyByKey(e){return this.$properties[e]}}var B=Object.freeze({__proto__:null,SystemBase:O,SystemVue:class extends O{render;constructor(e){super(),this.render=e}renderHtml(e,t){if(3===parseInt(this.render.version)){let s=this.render.h(e.getOption()?.html,{...e.getOption()?.props??{},node:e},e.getOption()?.options??{});s.appContext=t,this.render.render(s,t)}else{let s=new this.render({parent:t,render:t=>t(e.getOption()?.html,{props:{...e.getOption()?.props??{},node:e}}),...e.getOption()?.options??{}}).$mount();t.appendChild(s.$el)}}}});var R=Object.freeze({__proto__:null,DockEnum:t,ControlDock:I,DockBase:G,ProjectDock:class extends G{main;constructor(e,t){super(e,t),this.main=t,this.elNode.classList.add("vs-project"),this.BoxInfo("Project",(e=>{new S(e,t)}));let s=this.elNode.querySelector(".vs-boxinfo_header .vs-boxinfo_button");if(s){s.innerHTML="";let e=document.createElement("button");e.innerHTML="New",e.addEventListener("click",(()=>this.main.newProject(""))),s?.appendChild(e);let t=document.createElement("button");t.innerHTML="Export",t.addEventListener("click",(()=>{return e=this.main.exportJson(),t=`vs-solution-${h()}`,s="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e)),(i=document.createElement("a")).setAttribute("href",s),i.setAttribute("download",t+".json"),document.body.appendChild(i),i.click(),void i.remove();var e,t,s,i})),s?.appendChild(t);let i=document.createElement("button");i.innerHTML="Import",i.addEventListener("click",(()=>{var e,t;e=e=>{e&&this.main.importJson(JSON.parse(e))},(t=document.createElement("input")).setAttribute("type","file"),t.addEventListener("change",(function(){var s=new FileReader;s.onload=function(){e?.(s.result)},t&&t.files&&s.readAsText(t.files[0])})),document.body.appendChild(t),t.click(),t.remove()})),s?.appendChild(i)}}},PropertyDock:D,TabDock:M,ViewDock:P,VariableDock:j,DockManager:A});return{VisualFlow:class{container;main;$dockManager;getDockManager(){return this.$dockManager}setOption(e,t=!0){this.main?.initOption(e,t),this.$dockManager.reset()}constructor(e,t){this.container=e,this.main=t??new O,this.container.classList.remove("vs-container"),this.container.classList.add("vs-container"),this.$dockManager=new A(this.container,this.main),this.$dockManager.reset()}onSafe(e,t){this.main?.onSafe(e,t)}on(e,t){this.main?.on(e,t)}removeListener(e,t){this.main?.removeListener(e,t)}dispatch(e,t){this.main?.dispatch(e,t)}getMain(){return this.main}newSolution(e){this.getMain()?.newSolution(e)}openSolution(e){this.getMain()?.openSolution(e)}newProject(e){this.getMain()?.newProject(e)}openProject(e){this.getMain()?.openProject(e)}getProjectAll(){return this.getMain()?.getProjectAll()}setProjectOpen(e){this.getMain()?.setProjectOpen(e)}importJson(e){this.getMain()?.importJson(e)}exportJson(){return this.getMain()?.exportJson()}},...B,...v,...R,...w}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL0NvbnN0YW50LnRzIiwiLi4vc3JjL2NvcmUvRXZlbnRGbG93LnRzIiwiLi4vc3JjL2NvcmUvRGF0YUZsb3cudHMiLCIuLi9zcmMvY29yZS9CYXNlRmxvdy50cyIsIi4uL3NyYy9jb3JlL1V0aWxzLnRzIiwiLi4vc3JjL2NvcmUvRGF0YVZpZXcudHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3X0V2ZW50LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL0xpbmUudHMiLCIuLi9zcmMvZGVzZ2luZXIvTm9kZUl0ZW0udHMiLCIuLi9zcmMvZGVzZ2luZXIvRGVzZ2luZXJWaWV3LnRzIiwiLi4vc3JjL2Rlc2dpbmVyL1ZhcmlhYmxlVmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Ub29sYm94Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9Qcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kZXNnaW5lci9UYWJQcm9qZWN0Vmlldy50cyIsIi4uL3NyYy9kb2NrL0RvY2tCYXNlLnRzIiwiLi4vc3JjL2RvY2svQ29udHJvbERvY2sudHMiLCIuLi9zcmMvZG9jay9WYXJpYWJsZURvY2sudHMiLCIuLi9zcmMvZG9jay9Qcm9wZXJ0eURvY2sudHMiLCIuLi9zcmMvZG9jay9WaWV3RG9jay50cyIsIi4uL3NyYy9kb2NrL1RhYkRvY2sudHMiLCIuLi9zcmMvZG9jay9Eb2NrTWFuYWdlci50cyIsIi4uL3NyYy9zeXN0ZW1zL2NvbnRyb2wudHMiLCIuLi9zcmMvc3lzdGVtcy9TeXN0ZW1CYXNlLnRzIiwiLi4vc3JjL3N5c3RlbXMvU3lzdGVtVnVlLnRzIiwiLi4vc3JjL2RvY2svUHJvamVjdERvY2sudHMiLCIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvVmlzdWFsRmxvdy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXZlbnRFbnVtID0ge1xuICBpbml0OiBcImluaXRcIixcbiAgZGF0YUNoYW5nZTogXCJkYXRhQ2hhbmdlXCIsXG4gIHNob3dQcm9wZXJ0eTogXCJzaG93UHJvcGVydHlcIixcbiAgb3BlblByb2plY3Q6IFwib3BlblByb2plY3RcIixcbiAgbmV3UHJvamVjdDogXCJuZXdQcm9qZWN0XCIsXG4gIGNoYW5nZVZhcmlhYmxlOiBcImNoYW5nZVZhcmlhYmxlXCIsXG4gIGNoYW5nZTogXCJjaGFuZ2VcIixcbiAgZGlzcG9zZTogXCJkaXNwb3NlXCIsXG4gIGdyb3VwQ2hhbmdlOiBcImdyb3VwQ2hhbmdlXCIsXG59XG5cbmV4cG9ydCBjb25zdCBEb2NrRW51bSA9IHtcbiAgbGVmdDogXCJ2cy1sZWZ0XCIsXG4gIHRvcDogXCJ2cy10b3BcIixcbiAgdmlldzogXCJ2cy12aWV3XCIsXG4gIGJvdHRvbTogXCJ2cy1ib3R0b21cIixcbiAgcmlnaHQ6IFwidnMtcmlnaHRcIixcbn1cblxuZXhwb3J0IGNvbnN0IFByb3BlcnR5RW51bSA9IHtcbiAgbWFpbjogXCJtYWluX3Byb2plY3RcIixcbiAgc29sdXRpb246ICdtYWluX3NvbHV0aW9uJyxcbiAgbGluZTogJ21haW5fbGluZScsXG4gIHZhcmlhYmxlOiAnbWFpbl92YXJpYWJsZScsXG4gIGdyb3VwQ2F2YXM6IFwibWFpbl9ncm91cENhdmFzXCIsXG59O1xuXG5leHBvcnQgY29uc3QgU2NvcGVSb290ID0gXCJyb290XCI7XG4iLCJpbXBvcnQgeyBJRXZlbnQgfSBmcm9tIFwiLi9JRmxvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50RmxvdyBpbXBsZW1lbnRzIElFdmVudCB7XHJcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcbiAgcHVibGljIG9uU2FmZShldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICB0aGlzLm9uKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgfVxyXG4gIC8qIEV2ZW50cyAqL1xyXG4gIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbiwgdGhlIGdpdmVuIHR5cGUgaXMgJHt0eXBlb2YgY2FsbGJhY2t9YCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIGlmIHRoZSBldmVudCBpcyBub3QgYSBzdHJpbmdcclxuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBldmVudCBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGV2ZW50fWApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB7XHJcbiAgICAgICAgbGlzdGVuZXJzOiBbXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoaXMgZXZlbnQgbm90IGV4aXN0c1xyXG5cclxuICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzXHJcbiAgICBjb25zdCBsaXN0ZW5lckluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spXHJcbiAgICBjb25zdCBoYXNMaXN0ZW5lciA9IGxpc3RlbmVySW5kZXggPiAtMVxyXG4gICAgaWYgKGhhc0xpc3RlbmVyKSBsaXN0ZW5lcnMuc3BsaWNlKGxpc3RlbmVySW5kZXgsIDEpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IHN0cmluZywgZGV0YWlsczogYW55KSB7XHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IHtcclxuICAgICAgbGlzdGVuZXIoZGV0YWlscyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSVByb3BlcnR5IH0gZnJvbSBcIi4vSUZsb3dcIjtcbmltcG9ydCB7IEV2ZW50RW51bSB9IGZyb20gXCIuL0NvbnN0YW50XCI7XG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFGbG93IHtcbiAgcHJpdmF0ZSBkYXRhOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBwcm9wZXJ0aWVzOiBhbnkgPSBudWxsO1xuICBwcml2YXRlIGV2ZW50czogRXZlbnRGbG93O1xuICBwdWJsaWMgZ2V0UHJvcGVydGllcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXM7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5kaXNwYXRjaChldmVudCwgZGV0YWlscyk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvcGVydHk6IElQcm9wZXJ0eSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRGbG93KCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMubG9hZChkYXRhKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIEluaXREYXRhKGRhdGE6IGFueSA9IG51bGwsIHByb3BlcnRpZXM6IGFueSA9IC0xKSB7XG4gICAgaWYgKHByb3BlcnRpZXMgIT09IC0xKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIH1cbiAgICB0aGlzLmxvYWQoZGF0YSk7XG4gIH1cbiAgcHJpdmF0ZSBldmVudERhdGFDaGFuZ2Uoa2V5OiBzdHJpbmcsIGtleUNoaWxkOiBzdHJpbmcsIHZhbHVlQ2hpbGQ6IGFueSwgc2VuZGVyQ2hpbGQ6IGFueSwgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9XyR7a2V5Q2hpbGR9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9XyR7aW5kZXh9YCwge1xuICAgICAgICBrZXksIGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCwgaW5kZXhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1fJHtrZXlDaGlsZH1gLCB7XG4gICAgICAgIGtleSwga2V5Q2hpbGQsIHZhbHVlOiB2YWx1ZUNoaWxkLCBzZW5kZXI6IHNlbmRlckNoaWxkXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaChgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHtrZXl9YCwge1xuICAgICAga2V5LCBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGRcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgUmVtb3ZlRXZlbnREYXRhKGl0ZW06IERhdGFGbG93LCBrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xuICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgIGl0ZW0ucmVtb3ZlTGlzdGVuZXIoYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9YCwgKHsga2V5OiBrZXlDaGlsZCwgdmFsdWU6IHZhbHVlQ2hpbGQsIHNlbmRlcjogc2VuZGVyQ2hpbGQgfTogYW55KSA9PiB0aGlzLmV2ZW50RGF0YUNoYW5nZShrZXksIGtleUNoaWxkLCB2YWx1ZUNoaWxkLCBzZW5kZXJDaGlsZCwgaW5kZXgpKTtcbiAgfVxuICBwdWJsaWMgT25FdmVudERhdGEoaXRlbTogRGF0YUZsb3csIGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgaXRlbS5vbihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1gLCAoeyBrZXk6IGtleUNoaWxkLCB2YWx1ZTogdmFsdWVDaGlsZCwgc2VuZGVyOiBzZW5kZXJDaGlsZCB9OiBhbnkpID0+IHRoaXMuZXZlbnREYXRhQ2hhbmdlKGtleSwga2V5Q2hpbGQsIHZhbHVlQ2hpbGQsIHNlbmRlckNoaWxkLCBpbmRleCkpO1xuICB9XG4gIHByaXZhdGUgQmluZEV2ZW50KHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICB0aGlzLk9uRXZlbnREYXRhKHZhbHVlIGFzIERhdGFGbG93LCBrZXkpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKHZhbHVlIGFzIFtdKS5sZW5ndGggPiAwICYmIHZhbHVlWzBdIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICh2YWx1ZSBhcyBEYXRhRmxvd1tdKS5mb3JFYWNoKChpdGVtOiBEYXRhRmxvdywgaW5kZXg6IG51bWJlcikgPT4gdGhpcy5PbkV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBTZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNEaXNwYXRjaDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5kYXRhW2tleV0gIT0gdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmRhdGFba2V5XSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0gaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgICAgIHRoaXMuUmVtb3ZlRXZlbnREYXRhKCh0aGlzLmRhdGFba2V5XSBhcyBEYXRhRmxvdyksIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5kYXRhW2tleV0pICYmICh0aGlzLmRhdGFba2V5XSBhcyBbXSkubGVuZ3RoID4gMCAmJiB0aGlzLmRhdGFba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgICAgKHRoaXMuZGF0YVtrZXldIGFzIERhdGFGbG93W10pLmZvckVhY2goKGl0ZW06IERhdGFGbG93LCBpbmRleDogbnVtYmVyKSA9PiB0aGlzLlJlbW92ZUV2ZW50RGF0YShpdGVtLCBrZXksIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuQmluZEV2ZW50KHZhbHVlLCBrZXkpO1xuICAgIH1cbiAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIGlmIChpc0Rpc3BhdGNoKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke2tleX1gLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB7XG4gICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgICAga2V5LCB2YWx1ZSwgc2VuZGVyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuICBwdWJsaWMgU2V0RGF0YShkYXRhOiBhbnksIHNlbmRlcjogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSBmYWxzZSkge1xuXG4gICAgaWYgKGlzQ2xlYXJEYXRhKSB0aGlzLmRhdGEgPSB7fTtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICBsZXQgJGRhdGE6IERhdGFGbG93ID0gZGF0YSBhcyBEYXRhRmxvdztcbiAgICAgIGlmICghdGhpcy5wcm9wZXJ0eSAmJiAkZGF0YS5wcm9wZXJ0eSkgdGhpcy5wcm9wZXJ0eSA9ICRkYXRhLnByb3BlcnR5O1xuICAgICAgaWYgKHRoaXMucHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoJGRhdGEuZ2V0UHJvcGVydGllcygpKSkge1xuICAgICAgICAgIHRoaXMuU2V0KGtleSwgJGRhdGEuR2V0KGtleSksIHNlbmRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLlNldChrZXksIGRhdGFba2V5XSwgc2VuZGVyLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgR2V0KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG4gIHB1YmxpYyBBcHBlbmQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuZGF0YVtrZXldKSB0aGlzLmRhdGFba2V5XSA9IFtdO1xuICAgIHRoaXMuZGF0YVtrZXldID0gWy4uLnRoaXMuZGF0YVtrZXldLCB2YWx1ZV07XG4gICAgdGhpcy5CaW5kRXZlbnQodmFsdWUsIGtleSk7XG4gIH1cbiAgcHVibGljIFJlbW92ZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIHZhciBpbmRleCA9IHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLlJlbW92ZUV2ZW50RGF0YSh0aGlzLmRhdGFba2V5XVtpbmRleF0sIGtleSk7XG4gICAgICB0aGlzLmRhdGFba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgbG9hZChkYXRhOiBhbnkpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICBpZiAoIXRoaXMucHJvcGVydGllcykge1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eT8uZ2V0UHJvcGVydHlCeUtleShkYXRhLmtleSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICAgIHRoaXMuZGF0YVtrZXldID0gKGRhdGE/LltrZXldID8/ICgodHlwZW9mIHRoaXMucHJvcGVydGllc1trZXldPy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnByb3BlcnRpZXNba2V5XT8uZGVmYXVsdCgpIDogdGhpcy5wcm9wZXJ0aWVzW2tleV0/LmRlZmF1bHQpID8/IFwiXCIpKTtcbiAgICAgICAgaWYgKCEodGhpcy5kYXRhW2tleV0gaW5zdGFuY2VvZiBEYXRhRmxvdykgJiYgdGhpcy5kYXRhW2tleV0ua2V5KSB7XG4gICAgICAgICAgdGhpcy5kYXRhW2tleV0gPSBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgdGhpcy5kYXRhW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZGF0YVtrZXldKSAmJiB0aGlzLnByb3BlcnR5ICYmICEodGhpcy5kYXRhW2tleV1bMF0gaW5zdGFuY2VvZiBEYXRhRmxvdykpIHtcbiAgICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHRoaXMuZGF0YVtrZXldLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRGF0YUZsb3cpICYmIGl0ZW0ua2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YUZsb3codGhpcy5wcm9wZXJ0eSwgaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLkJpbmRFdmVudCh0aGlzLmRhdGFba2V5XSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSnNvbigpKTtcbiAgfVxuICBwdWJsaWMgdG9Kc29uKCkge1xuICAgIGxldCByczogYW55ID0ge307XG4gICAgaWYgKCF0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMucHJvcGVydGllcyA9IHRoaXMucHJvcGVydHk/LmdldFByb3BlcnR5QnlLZXkodGhpcy5kYXRhLmtleSk7XG4gICAgfVxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpKSB7XG4gICAgICByc1trZXldID0gdGhpcy5HZXQoa2V5KTtcbiAgICAgIGlmIChyc1trZXldIGluc3RhbmNlb2YgRGF0YUZsb3cpIHtcbiAgICAgICAgcnNba2V5XSA9IHJzW2tleV0udG9Kc29uKCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocnNba2V5XSkgJiYgKHJzW2tleV0gYXMgW10pLmxlbmd0aCA+IDAgJiYgcnNba2V5XVswXSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICAgIHJzW2tleV0gPSByc1trZXldLm1hcCgoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0udG9Kc29uKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnM7XG4gIH1cbiAgcHVibGljIGRlbGV0ZSgpIHtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3cgfSBmcm9tIFwiLi9EYXRhRmxvd1wiO1xyXG5pbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi9Db25zdGFudFwiO1xyXG5pbXBvcnQgeyBFdmVudEZsb3cgfSBmcm9tIFwiLi9FdmVudEZsb3dcIjtcclxuaW1wb3J0IHsgSUV2ZW50IH0gZnJvbSBcIi4vSUZsb3dcIjtcclxuZXhwb3J0IGNsYXNzIEZsb3dDb3JlIGltcGxlbWVudHMgSUV2ZW50IHtcclxuICBwdWJsaWMgR2V0SWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhLkdldCgnaWQnKTtcclxuICB9XHJcbiAgcHVibGljIFNldElkKGlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCdpZCcsIGlkKTtcclxuICB9XHJcbiAgcHVibGljIHByb3BlcnRpZXM6IGFueSA9IHt9O1xyXG4gIHB1YmxpYyBkYXRhOiBEYXRhRmxvdyA9IG5ldyBEYXRhRmxvdygpO1xyXG4gIHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gIHB1YmxpYyBDaGVja0VsZW1lbnRDaGlsZChlbDogSFRNTEVsZW1lbnQpIHtcclxuICAgIHJldHVybiB0aGlzLmVsTm9kZSA9PSBlbCB8fCB0aGlzLmVsTm9kZS5jb250YWlucyhlbCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZXZlbnRzOiBFdmVudEZsb3c7XHJcbiAgcHVibGljIFNldERhdGEoZGF0YTogYW55LCBzZW5kZXI6IGFueSA9IG51bGwpIHtcclxuICAgIHRoaXMuZGF0YS5TZXREYXRhKGRhdGEsIHNlbmRlcik7XHJcbiAgfVxyXG4gIHB1YmxpYyBTZXREYXRhRmxvdyhkYXRhOiBEYXRhRmxvdykge1xyXG4gICAgdGhpcy5kYXRhLlNldERhdGEoZGF0YSwgdGhpcywgdHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5kaXNwYXRjaChgYmluZF9kYXRhX2V2ZW50YCwgeyBkYXRhLCBzZW5kZXI6IHRoaXMgfSk7XHJcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHsgZGF0YSwgc2VuZGVyOiB0aGlzIH0pO1xyXG4gIH1cclxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XHJcbiAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gIH1cclxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcclxuICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcclxuICB9XHJcbiAgUmVtb3ZlRGF0YUV2ZW50KCkge1xyXG4gICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCAoeyBrZXksIHZhbHVlLCBzZW5kZXIgfTogYW55KSA9PiB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goYCR7RXZlbnRFbnVtLmRhdGFDaGFuZ2V9XyR7a2V5fWAsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pXHJcbiAgICB0aGlzLmRhdGEucmVtb3ZlTGlzdGVuZXIoRXZlbnRFbnVtLmNoYW5nZSwgKHsga2V5LCB2YWx1ZSwgc2VuZGVyIH06IGFueSkgPT4ge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2UsIHtcclxuICAgICAgICAgIHR5cGU6ICdkYXRhJyxcclxuICAgICAgICAgIGtleSwgdmFsdWUsIHNlbmRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEZsb3coKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlRmxvdzxUUGFyZW50IGV4dGVuZHMgRmxvd0NvcmU+IGV4dGVuZHMgRmxvd0NvcmUge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcGFyZW50OiBUUGFyZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgTE9HID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xuZXhwb3J0IGNvbnN0IGdldERhdGUgPSAoKSA9PiAobmV3IERhdGUoKSk7XG5leHBvcnQgY29uc3QgZ2V0VGltZSA9ICgpID0+IGdldERhdGUoKS5nZXRUaW1lKCk7XG5leHBvcnQgY29uc3QgZ2V0VXVpZCA9ICgpID0+IHtcbiAgLy8gaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDEyMi50eHRcbiAgbGV0IHM6IGFueSA9IFtdO1xuICBsZXQgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzY7IGkrKykge1xuICAgIHNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTApLCAxKTtcbiAgfVxuICBzWzE0XSA9IFwiNFwiOyAgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXG4gIHNbMTldID0gaGV4RGlnaXRzLnN1YnN0cigoc1sxOV0gJiAweDMpIHwgMHg4LCAxKTsgIC8vIGJpdHMgNi03IG9mIHRoZSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkIHRvIDAxXG4gIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcblxuICBsZXQgdXVpZCA9IHMuam9pbihcIlwiKTtcbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlU29ydCA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICBpZiAoYS5zb3J0IDwgYi5zb3J0KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmIChhLnNvcnQgPiBiLnNvcnQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gKGZuOiBhbnkpID0+IHtcbiAgcmV0dXJuIGZuICYmIGZuIGluc3RhbmNlb2YgRnVuY3Rpb247XG59XG5leHBvcnQgY29uc3QgZG93bmxvYWRPYmplY3RBc0pzb24gPSAoZXhwb3J0T2JqOiBhbnksIGV4cG9ydE5hbWU6IHN0cmluZykgPT4ge1xuICB2YXIgZGF0YVN0ciA9IFwiZGF0YTp0ZXh0L2pzb247Y2hhcnNldD11dGYtOCxcIiArIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShleHBvcnRPYmopKTtcbiAgdmFyIGRvd25sb2FkQW5jaG9yTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgZG93bmxvYWRBbmNob3JOb2RlLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgZGF0YVN0cik7XG4gIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBleHBvcnROYW1lICsgXCIuanNvblwiKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZEFuY2hvck5vZGUpOyAvLyByZXF1aXJlZCBmb3IgZmlyZWZveFxuICBkb3dubG9hZEFuY2hvck5vZGUuY2xpY2soKTtcbiAgZG93bmxvYWRBbmNob3JOb2RlLnJlbW92ZSgpO1xufVxuZXhwb3J0IGNvbnN0IHJlYWRGaWxlTG9jYWwgPSAoY2FsbGJhY2s6IGFueSkgPT4ge1xuICB2YXIgaW5wdXRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjaz8uKGZyLnJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChpbnB1dEVsICYmIGlucHV0RWwuZmlsZXMpXG4gICAgICBmci5yZWFkQXNUZXh0KGlucHV0RWwuZmlsZXNbMF0pO1xuICB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbnB1dEVsKTtcbiAgaW5wdXRFbC5jbGljaygpO1xuICBpbnB1dEVsLnJlbW92ZSgpO1xufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi9JRmxvd1wiO1xuaW1wb3J0IHsgRXZlbnRFbnVtIH0gZnJvbSBcIi4vQ29uc3RhbnRcIjtcbmltcG9ydCB7IERhdGFGbG93IH0gZnJvbSBcIi4vRGF0YUZsb3dcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9VdGlsc1wiO1xuXG5leHBvcnQgY29uc3QgVGFnVmlldyA9IFsnU1BBTicsICdESVYnLCAnUCcsICdURVhUQVJFQSddO1xuZXhwb3J0IGNsYXNzIERhdGFWaWV3IHtcbiAgcHJpdmF0ZSBlbE5vZGU6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHByb3BlcnR5OiBhbnk7XG4gIHByaXZhdGUgZWxTdWdnZXN0aW9uczogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBlbFN1Z2dlc3Rpb25zQ29udGVudDogRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSBub2RlRWRpdG9yOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnQsIHByaXZhdGUgZGF0YTogRGF0YUZsb3csIHByaXZhdGUgbWFpbjogSU1haW4sIHByaXZhdGUga2V5TmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAodGhpcy5rZXlOYW1lKSB7XG4gICAgICBpZiAoIWVsLmdldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcpKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSB0aGlzLm1haW4uZ2V0UHJvcGVydHlCeUtleSh0aGlzLmRhdGEuR2V0KCdrZXknKSk/Llt0aGlzLmtleU5hbWVdO1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IgPSBlbCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yLmNsYXNzTGlzdC5hZGQoJ25vZGUtZWRpdG9yJyk7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnR5LmVkaXQpIHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wZXJ0eS5zZWxlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZChcIm5vZGUtZm9ybS1jb250cm9sXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZWxOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxOb2RlLnNldEF0dHJpYnV0ZSgnbm9kZTptb2RlbCcsIHRoaXMua2V5TmFtZSk7XG5cbiAgICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5TmFtZSA9IGVsPy5nZXRBdHRyaWJ1dGUoJ25vZGU6bW9kZWwnKTtcbiAgICAgIGlmICh0aGlzLmtleU5hbWUpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHRoaXMubWFpbi5nZXRQcm9wZXJ0eUJ5S2V5KHRoaXMuZGF0YS5HZXQoJ2tleScpKT8uW3RoaXMua2V5TmFtZV07XG4gICAgICAgIHRoaXMuZWxOb2RlID0gdGhpcy5lbCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgdGhpcy5ub2RlRWRpdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICB0aGlzLm5vZGVFZGl0b3IuY2xhc3NMaXN0LmFkZCgnbm9kZS1lZGl0b3InKTtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudD8uaW5zZXJ0QmVmb3JlKHRoaXMubm9kZUVkaXRvciwgZWwpO1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHRoaXMubm9kZUVkaXRvci5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZWxTdWdnZXN0aW9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9ucy5jbGFzc0xpc3QuYWRkKCdub2RlLWVkaXRvcl9zdWdnZXN0aW9ucycpO1xuICAgIHRoaXMuZWxTdWdnZXN0aW9uc0NvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmVsU3VnZ2VzdGlvbnNDb250ZW50LmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3Rpb25zX2NvbnRlbnQnKTtcbiAgICB0aGlzLmVsU3VnZ2VzdGlvbnMuYXBwZW5kQ2hpbGQodGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudCk7XG4gICAgdGhpcy5zaG93U3VnZ2VzdGlvbnMoZmFsc2UpO1xuICAgIGlmICh0aGlzLmtleU5hbWUpXG4gICAgICB0aGlzLmJpbmREYXRhKCk7XG4gIH1cbiAgcHJpdmF0ZSBjaGVja1Nob3dTdWdnZXN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudCkge1xuICAgICAgdGhpcy5lbFN1Z2dlc3Rpb25zQ29udGVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgIHZhciBhcnIgPSB0aGlzLm1haW4uZ2V0VmFyaWFibGUoKTtcbiAgICAgIGlmICghYXJyIHx8IGFyci5sZW5ndGggPT0gMCkge1xuICAgICAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyhmYWxzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBlbFVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgIGxldCBlbExpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbGV0IGVsTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZWxMaS5hcHBlbmRDaGlsZChlbExpbmspO1xuICAgICAgICBlbExpbmsuaW5uZXJIVE1MID0gaXRlbS5HZXQoJ25hbWUnKTtcbiAgICAgICAgZWxMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIGFsZXJ0KGVsTGluay5pbm5lckhUTUwpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxVbC5hcHBlbmRDaGlsZChlbExpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxTdWdnZXN0aW9uc0NvbnRlbnQuYXBwZW5kQ2hpbGQoZWxVbCk7XG4gICAgfVxuICAgIGxldCB0eHQ6IGFueSA9ICh0aGlzLmVsTm9kZSBhcyBhbnkpLnZhbHVlO1xuICAgIGxldCBzZWxlY3Rpb25TdGFydCA9ICh0aGlzLmVsTm9kZSBhcyBhbnkpLnNlbGVjdGlvblN0YXJ0O1xuICAgIGlmICh0eHQpIHtcbiAgICAgIGxldCBzdGFydEluZGV4ID0gdHh0Lmxhc3RJbmRleE9mKFwiJHtcIiwgc2VsZWN0aW9uU3RhcnQpO1xuICAgICAgbGV0IGVuZEluZGV4ID0gdHh0Lmxhc3RJbmRleE9mKFwifVwiLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICBpZiAoZW5kSW5kZXggPCBzdGFydEluZGV4KVxuICAgICAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyh0cnVlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5zaG93U3VnZ2VzdGlvbnMoZmFsc2UpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIHNob3dTdWdnZXN0aW9ucyhmbGc6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgaWYgKCF0aGlzLmVsU3VnZ2VzdGlvbnMpIHJldHVybjtcbiAgICBpZiAoZmxnKSB7XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnMucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsU3VnZ2VzdGlvbnMuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgYmluZERhdGEoKSB7XG4gICAgaWYgKHRoaXMua2V5TmFtZSAmJiB0aGlzLmVsTm9kZSkge1xuICAgICAgdGhpcy5kYXRhLm9uKGAke0V2ZW50RW51bS5kYXRhQ2hhbmdlfV8ke3RoaXMua2V5TmFtZX1gLCB0aGlzLmJpbmRJbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuYmluZEV2ZW50LmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVsU3VnZ2VzdGlvbnMpXG4gICAgICAgICAgdGhpcy5lbE5vZGU/LnBhcmVudEVsZW1lbnQ/LmFwcGVuZENoaWxkKHRoaXMuZWxTdWdnZXN0aW9ucyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmVsU3VnZ2VzdGlvbnMpXG4gICAgICAgICAgICB0aGlzLmVsTm9kZT8ucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQodGhpcy5lbFN1Z2dlc3Rpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrU2hvd1N1Z2dlc3Rpb25zKCk7XG4gICAgICB9KVxuICAgICAgaWYgKHRoaXMucHJvcGVydHkgJiYgdGhpcy5wcm9wZXJ0eS5zZWxlY3QgJiYgaXNGdW5jdGlvbih0aGlzLnByb3BlcnR5LmRhdGFTZWxlY3QpKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnByb3BlcnR5LmRhdGFTZWxlY3QoeyBlbE5vZGU6IHRoaXMuZWxOb2RlLCBtYWluOiB0aGlzLm1haW4sIGtleTogdGhpcy5rZXlOYW1lIH0pLm1hcCgoeyB2YWx1ZSwgdGV4dCB9OiBhbnkpID0+IHtcbiAgICAgICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgb3B0aW9uLnRleHQgPSB0ZXh0O1xuICAgICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BlcnR5ICYmIGlzRnVuY3Rpb24odGhpcy5wcm9wZXJ0eS5zY3JpcHQpKSB7XG4gICAgICAgIHRoaXMucHJvcGVydHkuc2NyaXB0KHsgZWxOb2RlOiB0aGlzLmVsTm9kZSwgbWFpbjogdGhpcy5tYWluLCBrZXk6IHRoaXMua2V5TmFtZSB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0Tm9kZVZhbHVlKHRoaXMuZGF0YS5HZXQodGhpcy5rZXlOYW1lKSk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgc2V0Tm9kZVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5lbE5vZGUpIHtcbiAgICAgIGlmIChUYWdWaWV3LmluY2x1ZGVzKHRoaXMuZWxOb2RlLnRhZ05hbWUpKSB7XG4gICAgICAgICh0aGlzLmVsTm9kZSBhcyBhbnkpLmlubmVyVGV4dCA9IGAke3ZhbHVlfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAodGhpcy5lbE5vZGUgYXMgYW55KS52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcml2YXRlIGJpbmRJbnB1dCh7IHZhbHVlLCBzZW5kZXIgfTogYW55KSB7XG4gICAgaWYgKHNlbmRlciAhPT0gdGhpcyAmJiB0aGlzLmVsTm9kZSAmJiBzZW5kZXIuZWxOb2RlICE9PSB0aGlzLmVsTm9kZSkge1xuICAgICAgdGhpcy5zZXROb2RlVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIGJpbmRFdmVudCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbE5vZGUpIHtcbiAgICAgICAgdGhpcy5kYXRhLlNldCh0aGlzLmtleU5hbWUsICh0aGlzLmVsTm9kZSBhcyBhbnkpLnZhbHVlLCB0aGlzKTtcblxuXG4gICAgICAgIHRoaXMuY2hlY2tTaG93U3VnZ2VzdGlvbnMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgRGVsZXRlKCkge1xuICAgIGlmICh0aGlzLmtleU5hbWUgJiYgdGhpcy5lbE5vZGUpIHtcbiAgICAgIHRoaXMuZGF0YS5yZW1vdmVMaXN0ZW5lcihgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fJHt0aGlzLmtleU5hbWV9YCwgdGhpcy5iaW5kSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmVsTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmJpbmRFdmVudC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHN0YXRpYyBCaW5kRWxlbWVudChlbDogRWxlbWVudCwgZGF0YTogRGF0YUZsb3csIG1haW46IElNYWluLCBrZXk6IHN0cmluZyB8IG51bGwgPSBudWxsKTogRGF0YVZpZXdbXSB7XG4gICAgaWYgKGVsLmNoaWxkRWxlbWVudENvdW50ID09IDAgfHwgZWwuZ2V0QXR0cmlidXRlKCdub2RlOm1vZGVsJykpIHtcbiAgICAgIHJldHVybiBbbmV3IERhdGFWaWV3KGVsLCBkYXRhLCBtYWluLCBrZXkpXTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWwucXVlcnlTZWxlY3RvckFsbCgnW25vZGVcXFxcOm1vZGVsXScpKS5tYXAoKGl0ZW06IEVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcoaXRlbSwgZGF0YSwgbWFpbik7XG4gICAgfSk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgZ2V0VGltZSB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi9EZXNnaW5lclZpZXdcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9MaW5lXCI7XG5cbmV4cG9ydCBlbnVtIE1vdmVUeXBlIHtcbiAgTm9uZSA9IDAsXG4gIE5vZGUgPSAxLFxuICBDYW52YXMgPSAyLFxuICBMaW5lID0gMyxcbn1cbmV4cG9ydCBjbGFzcyBEZXNnaW5lclZpZXdfRXZlbnQge1xuXG4gIHByaXZhdGUgdGltZUZhc3RDbGljazogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSB0YWdJbmdvcmUgPSBbJ2lucHV0JywgJ2J1dHRvbicsICdhJywgJ3RleHRhcmVhJ107XG5cbiAgcHJpdmF0ZSBtb3ZlVHlwZTogTW92ZVR5cGUgPSBNb3ZlVHlwZS5Ob25lO1xuICBwcml2YXRlIGZsZ0RyYXA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBmbGdNb3ZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBhdl94OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGF2X3k6IG51bWJlciA9IDA7XG5cbiAgcHJpdmF0ZSBwb3NfeDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBwb3NfeTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBtb3VzZV94OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIG1vdXNlX3k6IG51bWJlciA9IDA7XG5cbiAgcHJpdmF0ZSB0ZW1wTGluZTogTGluZSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBEZXNnaW5lclZpZXcpIHtcbiAgICAvKiBNb3VzZSBhbmQgVG91Y2ggQWN0aW9ucyAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5FbmRNb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5FbmRNb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLk1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuU3RhcnRNb3ZlLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5FbmRNb3ZlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLk1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLlN0YXJ0TW92ZS5iaW5kKHRoaXMpKTtcbiAgICAvKiBDb250ZXh0IE1lbnUgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLmNvbnRleHRtZW51LmJpbmQodGhpcykpO1xuXG4gICAgLyogRHJvcCBEcmFwICovXG4gICAgdGhpcy5wYXJlbnQuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLm5vZGVfZHJvcEVuZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLm5vZGVfZHJhZ292ZXIuYmluZCh0aGlzKSk7XG4gICAgLyogWm9vbSBNb3VzZSAqL1xuICAgIHRoaXMucGFyZW50LmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuem9vbV9lbnRlci5iaW5kKHRoaXMpKTtcbiAgICAvKiBEZWxldGUgKi9cbiAgICB0aGlzLnBhcmVudC5lbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMua2V5ZG93bi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHByaXZhdGUgY29udGV4dG1lbnUoZXY6IGFueSkgeyBldi5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gIHByaXZhdGUgbm9kZV9kcmFnb3ZlcihldjogYW55KSB7IGV2LnByZXZlbnREZWZhdWx0KCk7IH1cbiAgcHJpdmF0ZSBub2RlX2Ryb3BFbmQoZXY6IGFueSkge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgbGV0IGtleU5vZGU6IGFueSA9IHRoaXMucGFyZW50Lm1haW4uZ2V0Q29udHJvbENob29zZSgpO1xuICAgIGlmICgha2V5Tm9kZSAmJiBldi50eXBlICE9PSBcInRvdWNoZW5kXCIpIHtcbiAgICAgIGtleU5vZGUgPSBldi5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcIm5vZGVcIik7XG4gICAgfVxuICAgIGlmICgha2V5Tm9kZSkgcmV0dXJuO1xuICAgIGxldCBlX3Bvc194ID0gMDtcbiAgICBsZXQgZV9wb3NfeSA9IDA7XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgIGVfcG9zX3ggPSBldi50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICBlX3Bvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICBsZXQgeCA9IHRoaXMucGFyZW50LkNhbGNYKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggLSBlX3Bvc194KTtcbiAgICBsZXQgeSA9IHRoaXMucGFyZW50LkNhbGNZKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnkgLSBlX3Bvc195KTtcblxuICAgIGlmICh0aGlzLnBhcmVudC5jaGVja09ubHlOb2RlKGtleU5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBub2RlSXRlbSA9IHRoaXMucGFyZW50LkFkZE5vZGUoa2V5Tm9kZSwge1xuICAgICAgZ3JvdXA6IHRoaXMucGFyZW50LkN1cnJlbnRHcm91cCgpXG4gICAgfSk7XG4gICAgbm9kZUl0ZW0udXBkYXRlUG9zaXRpb24oeCwgeSk7XG4gIH1cbiAgcHVibGljIHpvb21fZW50ZXIoZXZlbnQ6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmIChldmVudC5jdHJsS2V5KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBpZiAoZXZlbnQuZGVsdGFZID4gMCkge1xuICAgICAgICAvLyBab29tIE91dFxuICAgICAgICB0aGlzLnBhcmVudC56b29tX291dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gWm9vbSBJblxuICAgICAgICB0aGlzLnBhcmVudC56b29tX2luKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByaXZhdGUgU3RhcnRNb3ZlKGV2OiBhbnkpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQuJGxvY2spIHJldHVybjtcbiAgICBpZiAodGhpcy50YWdJbmdvcmUuaW5jbHVkZXMoZXYudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy50aW1lRmFzdENsaWNrID0gZ2V0VGltZSgpO1xuICAgIGlmIChldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYWluLXBhdGgnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaHN0YXJ0XCIpIHtcbiAgICAgIHRoaXMucG9zX3ggPSBldi50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICB0aGlzLnBvc195ID0gZXYudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIHRoaXMucG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuQ2FudmFzO1xuICAgIGxldCBub2RlQ2hvb3NlID0gdGhpcy5wYXJlbnQuZ2V0Tm9kZUNob29zZSgpO1xuICAgIGlmIChub2RlQ2hvb3NlICYmIG5vZGVDaG9vc2UuQ2hlY2tFbGVtZW50Q2hpbGQoZXYudGFyZ2V0KSkge1xuICAgICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodW5kZWZpbmVkKTtcbiAgICB9XG4gICAgaWYgKG5vZGVDaG9vc2UgJiYgdGhpcy5tb3ZlVHlwZSA9PSBNb3ZlVHlwZS5Ob2RlICYmIGV2LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJub2RlLWRvdFwiKSkge1xuICAgICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLkxpbmU7XG4gICAgICBsZXQgZnJvbUluZGV4ID0gZXYudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbm9kZScpO1xuICAgICAgdGhpcy50ZW1wTGluZSA9IG5ldyBMaW5lKG5vZGVDaG9vc2UsIGZyb21JbmRleCk7XG4gICAgICB0aGlzLnRlbXBMaW5lLnRlbXAgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5tb3ZlVHlwZSA9PSBNb3ZlVHlwZS5DYW52YXMpIHtcbiAgICAgIHRoaXMuYXZfeCA9IHRoaXMucGFyZW50LmdldFgoKTtcbiAgICAgIHRoaXMuYXZfeSA9IHRoaXMucGFyZW50LmdldFkoKTtcbiAgICB9XG4gICAgdGhpcy5mbGdEcmFwID0gdHJ1ZTtcbiAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgfVxuICBwdWJsaWMgTW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZsZ0RyYXApIHJldHVybjtcbiAgICB0aGlzLmZsZ01vdmUgPSB0cnVlO1xuICAgIGxldCBlX3Bvc194ID0gMDtcbiAgICBsZXQgZV9wb3NfeSA9IDA7XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2htb3ZlXCIpIHtcbiAgICAgIGVfcG9zX3ggPSBldi50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICBlX3Bvc195ID0gZXYudG91Y2hlc1swXS5jbGllbnRZO1xuICAgIH0gZWxzZSB7XG4gICAgICBlX3Bvc194ID0gZXYuY2xpZW50WDtcbiAgICAgIGVfcG9zX3kgPSBldi5jbGllbnRZO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMubW92ZVR5cGUpIHtcbiAgICAgIGNhc2UgTW92ZVR5cGUuQ2FudmFzOlxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHggPSB0aGlzLmF2X3ggKyB0aGlzLnBhcmVudC5DYWxjWCgtKHRoaXMucG9zX3ggLSBlX3Bvc194KSlcbiAgICAgICAgICBsZXQgeSA9IHRoaXMuYXZfeSArIHRoaXMucGFyZW50LkNhbGNZKC0odGhpcy5wb3NfeSAtIGVfcG9zX3kpKVxuICAgICAgICAgIHRoaXMucGFyZW50LnNldFgoeCk7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuc2V0WSh5KTtcbiAgICAgICAgICB0aGlzLnBhcmVudC5VcGRhdGVVSSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIE1vdmVUeXBlLk5vZGU6XG4gICAgICAgIHtcbiAgICAgICAgICBsZXQgeCA9IHRoaXMucGFyZW50LkNhbGNYKHRoaXMucG9zX3ggLSBlX3Bvc194KTtcbiAgICAgICAgICBsZXQgeSA9IHRoaXMucGFyZW50LkNhbGNZKHRoaXMucG9zX3kgLSBlX3Bvc195KTtcbiAgICAgICAgICB0aGlzLnBvc194ID0gZV9wb3NfeDtcbiAgICAgICAgICB0aGlzLnBvc195ID0gZV9wb3NfeTtcbiAgICAgICAgICB0aGlzLnBhcmVudC5nZXROb2RlQ2hvb3NlKCk/LnVwZGF0ZVBvc2l0aW9uKHgsIHkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIE1vdmVUeXBlLkxpbmU6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAodGhpcy50ZW1wTGluZSkge1xuICAgICAgICAgICAgbGV0IHggPSB0aGlzLnBhcmVudC5DYWxjWCh0aGlzLnBhcmVudC5lbENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54IC0gZV9wb3NfeCk7XG4gICAgICAgICAgICBsZXQgeSA9IHRoaXMucGFyZW50LkNhbGNZKHRoaXMucGFyZW50LmVsQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnkgLSBlX3Bvc195KTtcbiAgICAgICAgICAgIHRoaXMudGVtcExpbmUudXBkYXRlVG8odGhpcy5wYXJlbnQuZWxDYW52YXMub2Zmc2V0TGVmdCAtIHgsIHRoaXMucGFyZW50LmVsQ2FudmFzLm9mZnNldFRvcCAtIHkpO1xuICAgICAgICAgICAgbGV0IG5vZGVFbCA9IGV2LnRhcmdldC5jbG9zZXN0KCdbbm9kZS1pZF0nKTtcbiAgICAgICAgICAgIGxldCBub2RlSWQgPSBub2RlRWw/LmdldEF0dHJpYnV0ZSgnbm9kZS1pZCcpO1xuICAgICAgICAgICAgbGV0IG5vZGVUbyA9IG5vZGVJZCA/IHRoaXMucGFyZW50LkdldE5vZGVCeUlkKG5vZGVJZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobm9kZVRvICYmIGV2LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJub2RlLWRvdFwiKSkge1xuICAgICAgICAgICAgICBsZXQgdG9JbmRleCA9IGV2LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgICAgICAgICAgdGhpcy50ZW1wTGluZS5zZXROb2RlVG8obm9kZVRvLCB0b0luZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCB0b0luZGV4ID0gbm9kZUVsPy5xdWVyeVNlbGVjdG9yKCcubm9kZS1kb3QnKT8uWzBdPy5nZXRBdHRyaWJ1dGUoJ25vZGUnKTtcbiAgICAgICAgICAgICAgdGhpcy50ZW1wTGluZS5zZXROb2RlVG8obm9kZVRvLCB0b0luZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXYudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIikge1xuICAgICAgdGhpcy5tb3VzZV94ID0gZV9wb3NfeDtcbiAgICAgIHRoaXMubW91c2VfeSA9IGVfcG9zX3k7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgRW5kTW92ZShldjogYW55KSB7XG4gICAgaWYgKHRoaXMucGFyZW50LiRsb2NrKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLmZsZ0RyYXApIHJldHVybjtcbiAgICAvL2ZpeCBGYXN0IENsaWNrXG4gICAgaWYgKCgoZ2V0VGltZSgpIC0gdGhpcy50aW1lRmFzdENsaWNrKSA8IDEwMCkgfHwgIXRoaXMuZmxnTW92ZSkge1xuICAgICAgdGhpcy5tb3ZlVHlwZSA9IE1vdmVUeXBlLk5vbmU7XG4gICAgICB0aGlzLmZsZ0RyYXAgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmxnTW92ZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBlX3Bvc194ID0gMDtcbiAgICBsZXQgZV9wb3NfeSA9IDA7XG4gICAgaWYgKGV2LnR5cGUgPT09IFwidG91Y2hlbmRcIikge1xuICAgICAgZV9wb3NfeCA9IHRoaXMubW91c2VfeDtcbiAgICAgIGVfcG9zX3kgPSB0aGlzLm1vdXNlX3k7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVfcG9zX3ggPSBldi5jbGllbnRYO1xuICAgICAgZV9wb3NfeSA9IGV2LmNsaWVudFk7XG4gICAgfVxuICAgIGlmICh0aGlzLm1vdmVUeXBlID09PSBNb3ZlVHlwZS5DYW52YXMpIHtcbiAgICAgIGxldCB4ID0gdGhpcy5hdl94ICsgdGhpcy5wYXJlbnQuQ2FsY1goLSh0aGlzLnBvc194IC0gZV9wb3NfeCkpXG4gICAgICBsZXQgeSA9IHRoaXMuYXZfeSArIHRoaXMucGFyZW50LkNhbGNZKC0odGhpcy5wb3NfeSAtIGVfcG9zX3kpKVxuICAgICAgdGhpcy5wYXJlbnQuc2V0WCh4KTtcbiAgICAgIHRoaXMucGFyZW50LnNldFkoeSk7XG4gICAgICB0aGlzLmF2X3ggPSAwO1xuICAgICAgdGhpcy5hdl95ID0gMDtcbiAgICB9XG4gICAgaWYgKHRoaXMudGVtcExpbmUpIHtcbiAgICAgIHRoaXMudGVtcExpbmUuQ2xvbmUoKTtcbiAgICAgIHRoaXMudGVtcExpbmUuZGVsZXRlKCk7XG4gICAgICB0aGlzLnRlbXBMaW5lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLnBvc194ID0gZV9wb3NfeDtcbiAgICB0aGlzLnBvc195ID0gZV9wb3NfeTtcbiAgICB0aGlzLm1vdmVUeXBlID0gTW92ZVR5cGUuTm9uZTtcbiAgICB0aGlzLmZsZ0RyYXAgPSBmYWxzZTtcbiAgICB0aGlzLmZsZ01vdmUgPSBmYWxzZTtcbiAgfVxuICBwcml2YXRlIGtleWRvd24oZXY6IGFueSkge1xuICAgIGlmICh0aGlzLnBhcmVudC4kbG9jaykgcmV0dXJuO1xuICAgIGlmIChldi5rZXkgPT09ICdEZWxldGUnIHx8IChldi5rZXkgPT09ICdCYWNrc3BhY2UnICYmIGV2Lm1ldGFLZXkpKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgIHRoaXMucGFyZW50LmdldE5vZGVDaG9vc2UoKT8uZGVsZXRlKCk7XG4gICAgICB0aGlzLnBhcmVudC5nZXRMaW5lQ2hvb3NlKCk/LmRlbGV0ZSgpO1xuICAgIH1cbiAgICBpZiAoZXYua2V5ID09PSAnRjInKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhRmxvdywgUHJvcGVydHlFbnVtIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4vTm9kZUl0ZW1cIjtcblxuZXhwb3J0IGNsYXNzIExpbmUge1xuICBwdWJsaWMgZWxOb2RlOiBTVkdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIFwic3ZnXCIpO1xuICBwdWJsaWMgZWxQYXRoOiBTVkdQYXRoRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInBhdGhcIik7XG4gIHByaXZhdGUgZGF0YTogRGF0YUZsb3cgPSBuZXcgRGF0YUZsb3coKTtcbiAgcHJpdmF0ZSBjdXJ2YXR1cmU6IG51bWJlciA9IDAuNTtcbiAgcHVibGljIHRlbXA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBmcm9tOiBOb2RlSXRlbSwgcHVibGljIGZyb21JbmRleDogbnVtYmVyID0gMCwgcHVibGljIHRvOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgcHVibGljIHRvSW5kZXg6IG51bWJlciA9IDAsIGRhdGE6IGFueSA9IG51bGwpIHtcbiAgICB0aGlzLmVsUGF0aC5jbGFzc0xpc3QuYWRkKFwibWFpbi1wYXRoXCIpO1xuICAgIHRoaXMuZWxQYXRoLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5TdGFydFNlbGVjdGVkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgJycpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoXCJjb25uZWN0aW9uXCIpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWxQYXRoKTtcbiAgICB0aGlzLmZyb20ucGFyZW50LmVsQ2FudmFzLmFwcGVuZENoaWxkKHRoaXMuZWxOb2RlKTtcblxuICAgIHRoaXMuZnJvbS5BZGRMaW5lKHRoaXMpO1xuICAgIHRoaXMudG8/LkFkZExpbmUodGhpcyk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF0YS5Jbml0RGF0YShcbiAgICAgIHtcbiAgICAgICAgZnJvbTogdGhpcy5mcm9tLkdldElkKCksXG4gICAgICAgIGZyb21JbmRleDogdGhpcy5mcm9tSW5kZXgsXG4gICAgICAgIHRvOiB0aGlzLnRvPy5HZXRJZCgpLFxuICAgICAgICB0b0luZGV4OiB0aGlzLnRvSW5kZXhcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIC4uLiB0aGlzLmZyb20ucGFyZW50Lm1haW4uZ2V0UHJvcGVydHlCeUtleShQcm9wZXJ0eUVudW0ubGluZSkgfHwge31cbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZnJvbS5kYXRhLkFwcGVuZCgnbGluZXMnLCB0aGlzLmRhdGEpO1xuICB9XG4gIHB1YmxpYyB1cGRhdGVUbyh0b194OiBudW1iZXIsIHRvX3k6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5mcm9tIHx8IHRoaXMuZnJvbS5lbE5vZGUgPT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCB7IHg6IGZyb21feCwgeTogZnJvbV95IH06IGFueSA9IHRoaXMuZnJvbS5nZXRQb3N0aXNpb25Eb3QodGhpcy5mcm9tSW5kZXgpO1xuICAgIHZhciBsaW5lQ3VydmUgPSB0aGlzLmNyZWF0ZUN1cnZhdHVyZShmcm9tX3gsIGZyb21feSwgdG9feCwgdG9feSwgdGhpcy5jdXJ2YXR1cmUsICdvdGhlcicpO1xuICAgIHRoaXMuZWxQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgbGluZUN1cnZlKTtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKTogTGluZSB7XG4gICAgLy9Qb3N0aW9uIG91dHB1dFxuICAgIGlmICh0aGlzLnRvICYmIHRoaXMudG8uZWxOb2RlKSB7XG4gICAgICBsZXQgeyB4OiB0b194LCB5OiB0b195IH06IGFueSA9IHRoaXMudG8uZ2V0UG9zdGlzaW9uRG90KHRoaXMudG9JbmRleCk7XG4gICAgICB0aGlzLnVwZGF0ZVRvKHRvX3gsIHRvX3kpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwdWJsaWMgQWN0aXZlKGZsZzogYW55ID0gdHJ1ZSkge1xuICAgIGlmIChmbGcpIHtcbiAgICAgIHRoaXMuZWxQYXRoLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsUGF0aC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBjcmVhdGVDdXJ2YXR1cmUoc3RhcnRfcG9zX3g6IG51bWJlciwgc3RhcnRfcG9zX3k6IG51bWJlciwgZW5kX3Bvc194OiBudW1iZXIsIGVuZF9wb3NfeTogbnVtYmVyLCBjdXJ2YXR1cmVfdmFsdWU6IG51bWJlciwgdHlwZTogc3RyaW5nKSB7XG4gICAgbGV0IGxpbmVfeCA9IHN0YXJ0X3Bvc194O1xuICAgIGxldCBsaW5lX3kgPSBzdGFydF9wb3NfeTtcbiAgICBsZXQgeCA9IGVuZF9wb3NfeDtcbiAgICBsZXQgeSA9IGVuZF9wb3NfeTtcbiAgICBsZXQgY3VydmF0dXJlID0gY3VydmF0dXJlX3ZhbHVlO1xuICAgIC8vdHlwZSBvcGVuY2xvc2Ugb3BlbiBjbG9zZSBvdGhlclxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgIGlmIChzdGFydF9wb3NfeCA+PSBlbmRfcG9zX3gpIHtcbiAgICAgICAgICB2YXIgaHgxID0gbGluZV94ICsgTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiAoY3VydmF0dXJlICogLTEpO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ290aGVyJzpcbiAgICAgICAgaWYgKHN0YXJ0X3Bvc194ID49IGVuZF9wb3NfeCkge1xuICAgICAgICAgIHZhciBoeDEgPSBsaW5lX3ggKyBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgICAgdmFyIGh4MiA9IHggLSBNYXRoLmFicyh4IC0gbGluZV94KSAqIChjdXJ2YXR1cmUgKiAtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICAgIHZhciBoeDIgPSB4IC0gTWF0aC5hYnMoeCAtIGxpbmVfeCkgKiBjdXJ2YXR1cmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgTSAnICsgbGluZV94ICsgJyAnICsgbGluZV95ICsgJyBDICcgKyBoeDEgKyAnICcgKyBsaW5lX3kgKyAnICcgKyBoeDIgKyAnICcgKyB5ICsgJyAnICsgeCArICcgICcgKyB5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgdmFyIGh4MSA9IGxpbmVfeCArIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuICAgICAgICB2YXIgaHgyID0geCAtIE1hdGguYWJzKHggLSBsaW5lX3gpICogY3VydmF0dXJlO1xuXG4gICAgICAgIHJldHVybiAnIE0gJyArIGxpbmVfeCArICcgJyArIGxpbmVfeSArICcgQyAnICsgaHgxICsgJyAnICsgbGluZV95ICsgJyAnICsgaHgyICsgJyAnICsgeSArICcgJyArIHggKyAnICAnICsgeTtcbiAgICB9XG4gIH1cbiAgcHVibGljIGRlbGV0ZShub2RlVGhpczogYW55ID0gbnVsbCwgaXNDbGVhckRhdGEgPSB0cnVlKSB7XG4gICAgdGhpcy5lbFBhdGg/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsUGF0aD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuU3RhcnRTZWxlY3RlZC5iaW5kKHRoaXMpKTtcbiAgICBpZiAoaXNDbGVhckRhdGEpXG4gICAgICB0aGlzLmZyb20uZGF0YS5SZW1vdmUoJ2xpbmVzJywgdGhpcy5kYXRhKTtcbiAgICBpZiAodGhpcy5mcm9tICE9IG5vZGVUaGlzKVxuICAgICAgdGhpcy5mcm9tLlJlbW92ZUxpbmUodGhpcyk7XG4gICAgaWYgKHRoaXMudG8gIT0gbm9kZVRoaXMpXG4gICAgICB0aGlzLnRvPy5SZW1vdmVMaW5lKHRoaXMpO1xuICAgIHRoaXMuZWxQYXRoLnJlbW92ZSgpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZSgpO1xuICB9XG4gIHB1YmxpYyBTdGFydFNlbGVjdGVkKGU6IGFueSkge1xuICAgIHRoaXMuZnJvbS5wYXJlbnQuc2V0TGluZUNob29zZSh0aGlzKVxuICB9XG4gIHB1YmxpYyBzZXROb2RlVG8obm9kZTogTm9kZUl0ZW0gfCB1bmRlZmluZWQsIHRvSW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMudG8gPSBub2RlO1xuICAgIHRoaXMudG9JbmRleCA9IHRvSW5kZXg7XG4gIH1cbiAgcHVibGljIENsb25lKCkge1xuICAgIGlmICh0aGlzLnRvICYmIHRoaXMudG9JbmRleCAmJiB0aGlzLmZyb20gIT0gdGhpcy50byAmJiAhdGhpcy5mcm9tLmNoZWNrTGluZUV4aXN0cyh0aGlzLmZyb21JbmRleCwgdGhpcy50bywgdGhpcy50b0luZGV4KSkge1xuICAgICAgcmV0dXJuIG5ldyBMaW5lKHRoaXMuZnJvbSwgdGhpcy5mcm9tSW5kZXgsIHRoaXMudG8sIHRoaXMudG9JbmRleCkuVXBkYXRlVUkoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJhc2VGbG93LCBFdmVudEVudW0sIERhdGFGbG93LCBEYXRhVmlldyB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3XCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4uL2NvcmUvVXRpbHNcIjtcbmV4cG9ydCBjbGFzcyBOb2RlSXRlbSBleHRlbmRzIEJhc2VGbG93PERlc2dpbmVyVmlldz4ge1xuICAvKipcbiAgICogR0VUIFNFVCBmb3IgRGF0YVxuICAgKi9cbiAgcHVibGljIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5HZXQoJ25hbWUnKTtcbiAgfVxuICBwdWJsaWMgZ2V0WSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZGF0YS5HZXQoJ3knKTtcbiAgfVxuICBwdWJsaWMgc2V0WSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5TZXQoJ3knLCB2YWx1ZSwgdGhpcyk7XG4gIH1cbiAgcHVibGljIGdldFgoKSB7XG4gICAgcmV0dXJuICt0aGlzLmRhdGEuR2V0KCd4Jyk7XG4gIH1cbiAgcHVibGljIHNldFgodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuU2V0KCd4JywgdmFsdWUsIHRoaXMpO1xuICB9XG4gIHB1YmxpYyBDaGVja0tleShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCdrZXknKSA9PSBrZXk7XG4gIH1cbiAgcHVibGljIGdldERhdGFMaW5lKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuR2V0KCdsaW5lcycpID8/IFtdO1xuICB9XG4gIHB1YmxpYyBjaGVja0xpbmVFeGlzdHMoZnJvbUluZGV4OiBudW1iZXIsIHRvOiBOb2RlSXRlbSwgdG9JbmRleDogTnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyTGluZS5maWx0ZXIoKGl0ZW06IExpbmUpID0+IHtcbiAgICAgIGlmICghaXRlbS50ZW1wICYmIGl0ZW0udG8gPT0gdG8gJiYgaXRlbS50b0luZGV4ID09IHRvSW5kZXggJiYgaXRlbS5mcm9tSW5kZXggPT0gZnJvbUluZGV4KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFpdGVtLnRlbXAgJiYgaXRlbS5mcm9tID09IHRvICYmIGl0ZW0uZnJvbUluZGV4ID09IHRvSW5kZXggJiYgaXRlbS50b0luZGV4ID09IGZyb21JbmRleCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0pLmxlbmd0aCA+IDA7XG4gIH1cbiAgcHVibGljIGVsQ29udGVudDogRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBhcnJMaW5lOiBMaW5lW10gPSBbXTtcbiAgcHJpdmF0ZSBvcHRpb246IGFueSA9IHt9O1xuICBwcml2YXRlIGFyckRhdGFWaWV3OiBEYXRhVmlld1tdID0gW107XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ6IERlc2dpbmVyVmlldywgcHJpdmF0ZSBrZXlOb2RlOiBhbnksIGRhdGE6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMucGFyZW50Lm1haW4uZ2V0Q29udHJvbE5vZGVCeUtleShrZXlOb2RlKTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLm9wdGlvbj8ucHJvcGVydGllcztcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGFGbG93KSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEuSW5pdERhdGEoeyAuLi5kYXRhLCBuYW1lOiB0aGlzLm9wdGlvbi5uYW1lIH0sIHRoaXMucHJvcGVydGllcyk7XG4gICAgICB0aGlzLnBhcmVudC5kYXRhLkFwcGVuZCgnbm9kZXMnLCB0aGlzLmRhdGEpO1xuICAgIH1cbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMucmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtbm9kZScpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9uLmNsYXNzKSB7XG4gICAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKHRoaXMub3B0aW9uLmNsYXNzKTtcbiAgICB9XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdub2RlLWlkJywgdGhpcy5HZXRJZCgpKTtcbiAgICB0aGlzLmVsTm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZScpO1xuICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiB0aGlzLnBhcmVudC5zZXROb2RlQ2hvb3NlKHRoaXMpKTtcbiAgICB0aGlzLnBhcmVudC5lbENhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgdGhpcy5yZW5kZXJVSSgpO1xuICB9XG4gIHB1YmxpYyBnZXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uO1xuICB9XG4gIHByaXZhdGUgcmVuZGVyVUkoZGV0YWlsOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKChkZXRhaWwgJiYgWyd4JywgJ3knXS5pbmNsdWRlcyhkZXRhaWwua2V5KSkpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLlVwZGF0ZVVJKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZWxOb2RlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSByZXR1cm47XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YCk7XG4gICAgaWYgKHRoaXMuZ2V0T3B0aW9uKCk/LmhpZGVUaXRsZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtbGVmdFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLXRvcFwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJvZHlcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWJvdHRvbVwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1yaWdodFwiPjwvZGl2PlxuICAgIGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWxlZnRcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZS10b3BcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiR7dGhpcy5vcHRpb24uaWNvbn0gJHt0aGlzLmdldE5hbWUoKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm9keVwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtYm90dG9tXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLXJpZ2h0XCI+PC9kaXY+XG4gICAgYDtcbiAgICB9XG5cbiAgICBjb25zdCBhZGROb2RlRG90ID0gKG51bTogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCwgc3RhcnQ6IG51bWJlciwgcXVlcnk6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKG51bSkge1xuICAgICAgICBsZXQgbm9kZVF1ZXJ5ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcihxdWVyeSk7XG4gICAgICAgIGlmIChub2RlUXVlcnkpIHtcbiAgICAgICAgICBub2RlUXVlcnkuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZURvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbm9kZURvdC5jbGFzc0xpc3QuYWRkKCdub2RlLWRvdCcpO1xuICAgICAgICAgICAgbm9kZURvdC5zZXRBdHRyaWJ1dGUoJ25vZGUnLCBgJHtzdGFydCArIGl9YCk7XG4gICAgICAgICAgICBub2RlUXVlcnkuYXBwZW5kQ2hpbGQobm9kZURvdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8ubGVmdCwgMTAwMCwgJy5ub2RlLWxlZnQnKTtcbiAgICBhZGROb2RlRG90KHRoaXMub3B0aW9uPy5kb3Q/LnRvcCwgMjAwMCwgJy5ub2RlLXRvcCcpO1xuICAgIGFkZE5vZGVEb3QodGhpcy5vcHRpb24/LmRvdD8uYm90dG9tLCAzMDAwLCAnLm5vZGUtYm90dG9tJyk7XG4gICAgYWRkTm9kZURvdCh0aGlzLm9wdGlvbj8uZG90Py5yaWdodCwgNDAwMCwgJy5ub2RlLXJpZ2h0Jyk7XG5cbiAgICB0aGlzLmVsQ29udGVudCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5ub2RlLWNvbnRlbnQgLmJvZHknKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnBhcmVudC5tYWluLnJlbmRlckh0bWwodGhpcywgdGhpcy5lbENvbnRlbnQpO1xuICAgIHRoaXMuVXBkYXRlVUkoKTtcbiAgICB0aGlzLmFyckRhdGFWaWV3LmZvckVhY2goKGl0ZW0pID0+IGl0ZW0uRGVsZXRlKCkpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMub3B0aW9uLnNjcmlwdCkpIHtcbiAgICAgIHRoaXMub3B0aW9uLnNjcmlwdCh7IG5vZGU6IHRoaXMsIGVsTm9kZTogdGhpcy5lbE5vZGUsIG1haW46IHRoaXMucGFyZW50Lm1haW4gfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmVsQ29udGVudClcbiAgICAgIHRoaXMuYXJyRGF0YVZpZXcgPSBEYXRhVmlldy5CaW5kRWxlbWVudCh0aGlzLmVsQ29udGVudCwgdGhpcy5kYXRhLCB0aGlzLnBhcmVudC5tYWluKTtcbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKCkge1xuICAgIGlmICh0aGlzLkNoZWNrS2V5KCdub2RlX2dyb3VwJykpIHtcbiAgICAgIHRoaXMucGFyZW50Lm9wZW5Hcm91cCh0aGlzLkdldElkKCkpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgdXBkYXRlUG9zaXRpb24oeDogYW55LCB5OiBhbnksIGlDaGVjayA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuZWxOb2RlKSB7XG4gICAgICBsZXQgdGVtcHggPSB4O1xuICAgICAgbGV0IHRlbXB5ID0geTtcbiAgICAgIGlmICghaUNoZWNrKSB7XG4gICAgICAgIHRlbXB5ID0gKHRoaXMuZWxOb2RlLm9mZnNldFRvcCAtIHkpO1xuICAgICAgICB0ZW1weCA9ICh0aGlzLmVsTm9kZS5vZmZzZXRMZWZ0IC0geCk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcHggIT09IHRoaXMuZ2V0WCgpKSB7XG4gICAgICAgIHRoaXMuc2V0WCh0ZW1weCk7XG4gICAgICB9XG4gICAgICBpZiAodGVtcHkgIT09IHRoaXMuZ2V0WSgpKSB7XG4gICAgICAgIHRoaXMuc2V0WSh0ZW1weSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHB1YmxpYyBBY3RpdmUoZmxnOiBhbnkgPSB0cnVlKSB7XG4gICAgaWYgKGZsZykge1xuICAgICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgUmVtb3ZlTGluZShsaW5lOiBMaW5lKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5hcnJMaW5lLmluZGV4T2YobGluZSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuYXJyTGluZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hcnJMaW5lO1xuICB9XG4gIHB1YmxpYyBBZGRMaW5lKGxpbmU6IExpbmUpIHtcbiAgICB0aGlzLmFyckxpbmUgPSBbLi4udGhpcy5hcnJMaW5lLCBsaW5lXTtcbiAgfVxuICBwdWJsaWMgZ2V0UG9zdGlzaW9uRG90KGluZGV4OiBudW1iZXIgPSAwKSB7XG4gICAgbGV0IGVsRG90OiBhbnkgPSB0aGlzLmVsTm9kZT8ucXVlcnlTZWxlY3RvcihgLm5vZGUtZG90W25vZGU9XCIke2luZGV4fVwiXWApO1xuICAgIGlmIChlbERvdCkge1xuICAgICAgbGV0IHkgPSAodGhpcy5lbE5vZGUub2Zmc2V0VG9wICsgZWxEb3Qub2Zmc2V0VG9wICsgMTApO1xuICAgICAgbGV0IHggPSAodGhpcy5lbE5vZGUub2Zmc2V0TGVmdCArIGVsRG90Lm9mZnNldExlZnQgKyAxMCk7XG4gICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKSB7XG4gICAgdGhpcy5lbE5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGB0b3A6ICR7dGhpcy5nZXRZKCl9cHg7IGxlZnQ6ICR7dGhpcy5nZXRYKCl9cHg7YCk7XG4gICAgdGhpcy5hcnJMaW5lLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uVXBkYXRlVUkoKTtcbiAgICB9KVxuICB9XG4gIHB1YmxpYyBkZWxldGUoaXNDbGVhckRhdGEgPSB0cnVlKSB7XG4gICAgdGhpcy5hcnJMaW5lLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0uZGVsZXRlKHRoaXMsIGlzQ2xlYXJEYXRhKSk7XG4gICAgaWYgKGlzQ2xlYXJEYXRhKVxuICAgICAgdGhpcy5kYXRhLmRlbGV0ZSgpO1xuICAgIGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLnJlbW92ZUxpc3RlbmVyKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCB0aGlzLnJlbmRlclVJLmJpbmQodGhpcykpO1xuICAgICAgdGhpcy5SZW1vdmVEYXRhRXZlbnQoKTtcbiAgICB9XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4gdGhpcy5wYXJlbnQuc2V0Tm9kZUNob29zZSh0aGlzKSk7XG4gICAgdGhpcy5lbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHRoaXMucGFyZW50LnNldE5vZGVDaG9vc2UodGhpcykpO1xuICAgIHRoaXMuZWxOb2RlLnJlbW92ZSgpO1xuICAgIHRoaXMuYXJyTGluZSA9IFtdO1xuICAgIGlmIChpc0NsZWFyRGF0YSlcbiAgICAgIHRoaXMucGFyZW50LlJlbW92ZU5vZGUodGhpcyk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7fSk7XG4gIH1cbiAgcHVibGljIFJlbmRlckxpbmUoKSB7XG4gICAgdGhpcy5nZXREYXRhTGluZSgpLmZvckVhY2goKGl0ZW06IERhdGFGbG93KSA9PiB7XG4gICAgICBsZXQgbm9kZUZyb20gPSB0aGlzO1xuICAgICAgbGV0IG5vZGVUbyA9IHRoaXMucGFyZW50LkdldE5vZGVCeUlkKGl0ZW0uR2V0KCd0bycpKTtcbiAgICAgIGxldCB0b0luZGV4ID0gaXRlbS5HZXQoJ3RvSW5kZXgnKTtcbiAgICAgIGxldCBmcm9tSW5kZXggPSBpdGVtLkdldCgnZnJvbUluZGV4Jyk7XG4gICAgICBuZXcgTGluZShub2RlRnJvbSwgZnJvbUluZGV4LCBub2RlVG8sIHRvSW5kZXgsIGl0ZW0pLlVwZGF0ZVVJKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBGbG93Q29yZSwgSU1haW4sIEV2ZW50RW51bSwgUHJvcGVydHlFbnVtLCBTY29wZVJvb3QgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgRGVzZ2luZXJWaWV3X0V2ZW50IH0gZnJvbSBcIi4vRGVzZ2luZXJWaWV3X0V2ZW50XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXdfVG9vbGJhciB9IGZyb20gXCIuL0Rlc2dpbmVyVmlld19Ub29sYmFyXCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vTGluZVwiO1xuaW1wb3J0IHsgTm9kZUl0ZW0gfSBmcm9tIFwiLi9Ob2RlSXRlbVwiO1xuXG5leHBvcnQgY29uc3QgWm9vbSA9IHtcbiAgbWF4OiAxLjYsXG4gIG1pbjogMC42LFxuICB2YWx1ZTogMC4xLFxuICBkZWZhdWx0OiAxXG59XG5leHBvcnQgY2xhc3MgRGVzZ2luZXJWaWV3IGV4dGVuZHMgRmxvd0NvcmUge1xuXG4gIC8qKlxuICAgKiBHRVQgU0VUIGZvciBEYXRhXG4gICAqL1xuICBwdWJsaWMgZ2V0Wm9vbSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd6b29tJyk7XG4gIH1cbiAgcHVibGljIHNldFpvb20odmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgnem9vbScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WSgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd5Jyk7XG4gIH1cbiAgcHVibGljIHNldFkodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneScsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwdWJsaWMgZ2V0WCgpIHtcbiAgICByZXR1cm4gK3RoaXMuZ2V0RGF0YUdyb3VwKCkuR2V0KCd4Jyk7XG4gIH1cbiAgcHVibGljIHNldFgodmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGFHcm91cCgpLlNldCgneCcsIHZhbHVlLCB0aGlzKTtcbiAgfVxuICBwcml2YXRlIGdyb3VwRGF0YTogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgbGFzdEdyb3VwTmFtZTogc3RyaW5nID0gXCJcIjtcbiAgcHJpdmF0ZSBnZXREYXRhR3JvdXAoKTogRGF0YUZsb3cge1xuICAgIGlmICh0aGlzLiRsb2NrKSByZXR1cm4gdGhpcy5kYXRhO1xuICAgIC8vIGNhY2hlIGdyb3VwRGF0YVxuICAgIGlmICh0aGlzLmxhc3RHcm91cE5hbWUgPT09IHRoaXMuQ3VycmVudEdyb3VwKCkpIHJldHVybiB0aGlzLmdyb3VwRGF0YSA/PyB0aGlzLmRhdGE7XG4gICAgdGhpcy5sYXN0R3JvdXBOYW1lID0gdGhpcy5DdXJyZW50R3JvdXAoKTtcbiAgICBsZXQgZ3JvdXBzID0gdGhpcy5kYXRhLkdldCgnZ3JvdXBzJyk7XG4gICAgdGhpcy5ncm91cERhdGEgPSBncm91cHM/LmZpbHRlcigoaXRlbTogRGF0YUZsb3cpID0+IGl0ZW0uR2V0KCdncm91cCcpID09IHRoaXMubGFzdEdyb3VwTmFtZSk/LlswXTtcbiAgICBpZiAoIXRoaXMuZ3JvdXBEYXRhKSB7XG4gICAgICB0aGlzLmdyb3VwRGF0YSA9IG5ldyBEYXRhRmxvdyh0aGlzLm1haW4sIHtcbiAgICAgICAga2V5OiBQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhcyxcbiAgICAgICAgZ3JvdXA6IHRoaXMubGFzdEdyb3VwTmFtZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRhdGEuQXBwZW5kKCdncm91cHMnLCB0aGlzLmdyb3VwRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICB9XG4gICAgbGV0IGRhdGFHcm91cCA9IHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5sYXN0R3JvdXBOYW1lKTtcbiAgICBpZiAoZGF0YUdyb3VwKSB7XG4gICAgICBkYXRhR3JvdXAub25TYWZlKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuVXBkYXRlVUkuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ3JvdXBEYXRhO1xuICB9XG4gIHByaXZhdGUgZ3JvdXA6IGFueVtdID0gW107XG4gIHB1YmxpYyBHZXRHcm91cE5hbWUoKTogYW55W10ge1xuICAgIHJldHVybiBbLi4udGhpcy5ncm91cC5tYXAoKGl0ZW0pID0+ICh7IGlkOiBpdGVtLCB0ZXh0OiB0aGlzLkdldERhdGFCeUlkKGl0ZW0pPy5HZXQoJ25hbWUnKSB9KSksIHsgaWQ6IFNjb3BlUm9vdCwgdGV4dDogU2NvcGVSb290IH1dO1xuICB9XG4gIHB1YmxpYyBCYWNrR3JvdXAoaWQ6IGFueSA9IG51bGwpIHtcbiAgICBsZXQgaW5kZXggPSAxO1xuICAgIGlmIChpZCkge1xuICAgICAgaW5kZXggPSB0aGlzLmdyb3VwLmluZGV4T2YoaWQpO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuICAgIH1cbiAgICBpZiAoaW5kZXgpXG4gICAgICB0aGlzLmdyb3VwLnNwbGljZSgwLCBpbmRleCk7XG4gICAgZWxzZSB0aGlzLmdyb3VwID0gW107XG4gICAgdGhpcy5SZW5kZXJVSSgpO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgQ3VycmVudEdyb3VwKCkge1xuICAgIGxldCBuYW1lID0gdGhpcy5ncm91cD8uWzBdO1xuICAgIGlmIChuYW1lICYmIG5hbWUgIT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gJ3Jvb3QnO1xuICB9XG5cbiAgcHVibGljIEN1cnJlbnRHcm91cERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUJ5SWQodGhpcy5DdXJyZW50R3JvdXAoKSkgPz8gdGhpcy5kYXRhO1xuICB9XG4gIHB1YmxpYyBjaGFuZ2VHcm91cCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFpbi5kaXNwYXRjaChFdmVudEVudW0uZ3JvdXBDaGFuZ2UsIHtcbiAgICAgICAgZ3JvdXA6IHRoaXMuR2V0R3JvdXBOYW1lKClcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIHRoaXMudG9vbGJhci5yZW5kZXJQYXRoR3JvdXAoKTtcbiAgfVxuICBwdWJsaWMgb3Blbkdyb3VwKGlkOiBhbnkpIHtcbiAgICB0aGlzLmdyb3VwID0gW2lkLCAuLi50aGlzLmdyb3VwXTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgdGhpcy5jaGFuZ2VHcm91cCgpOztcbiAgfVxuICBwcml2YXRlIGxpbmVDaG9vc2U6IExpbmUgfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBzZXRMaW5lQ2hvb3NlKG5vZGU6IExpbmUgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5saW5lQ2hvb3NlKSB0aGlzLmxpbmVDaG9vc2UuQWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLmxpbmVDaG9vc2UgPSBub2RlO1xuICAgIGlmICh0aGlzLmxpbmVDaG9vc2UpIHtcbiAgICAgIHRoaXMubGluZUNob29zZS5BY3RpdmUoKTtcbiAgICAgIHRoaXMuc2V0Tm9kZUNob29zZSh1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0TGluZUNob29zZSgpOiBMaW5lIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5saW5lQ2hvb3NlO1xuICB9XG4gIHByaXZhdGUgbm9kZXM6IE5vZGVJdGVtW10gPSBbXTtcbiAgcHJpdmF0ZSBub2RlQ2hvb3NlOiBOb2RlSXRlbSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHNldE5vZGVDaG9vc2Uobm9kZTogTm9kZUl0ZW0gfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ub2RlQ2hvb3NlKSB0aGlzLm5vZGVDaG9vc2UuQWN0aXZlKGZhbHNlKTtcbiAgICB0aGlzLm5vZGVDaG9vc2UgPSBub2RlO1xuICAgIGlmICh0aGlzLm5vZGVDaG9vc2UpIHtcbiAgICAgIHRoaXMubm9kZUNob29zZS5BY3RpdmUoKTtcbiAgICAgIHRoaXMuc2V0TGluZUNob29zZSh1bmRlZmluZWQpO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uc2hvd1Byb3BlcnR5LCB7IGRhdGE6IHRoaXMubm9kZUNob29zZS5kYXRhIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHsgZGF0YTogdGhpcy5DdXJyZW50R3JvdXBEYXRhKCkgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXROb2RlQ2hvb3NlKCk6IE5vZGVJdGVtIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQ2hvb3NlO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlSXRlbShkYXRhOiBhbnkpOiBOb2RlSXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuQWRkTm9kZShkYXRhLkdldCgna2V5JyksIGRhdGEpO1xuICB9XG4gIHB1YmxpYyBBZGROb2RlKGtleU5vZGU6IHN0cmluZywgZGF0YTogYW55ID0ge30pOiBOb2RlSXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuSW5zZXJ0Tm9kZShuZXcgTm9kZUl0ZW0odGhpcywga2V5Tm9kZSwgZGF0YSkpO1xuICB9XG4gIHB1YmxpYyBJbnNlcnROb2RlKG5vZGU6IE5vZGVJdGVtKTogTm9kZUl0ZW0ge1xuICAgIHRoaXMubm9kZXMgPSBbLi4udGhpcy5ub2Rlcywgbm9kZV07XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcHVibGljIFJlbW92ZU5vZGUobm9kZTogTm9kZUl0ZW0pIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLm5vZGVzLmluZGV4T2Yobm9kZSk7XG4gICAgdGhpcy5kYXRhLlJlbW92ZSgnbm9kZXMnLCBub2RlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5ub2Rlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ub2RlcztcbiAgfVxuICBwdWJsaWMgQ2xlYXJOb2RlKCkge1xuICAgIHRoaXMubm9kZXM/LmZvckVhY2goaXRlbSA9PiBpdGVtLmRlbGV0ZShmYWxzZSkpO1xuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgfVxuICBwdWJsaWMgR2V0RGF0YUFsbE5vZGUoKTogYW55W10ge1xuICAgIHJldHVybiAodGhpcy5kYXRhPy5HZXQoJ25vZGVzJykgPz8gW10pO1xuICB9XG4gIHB1YmxpYyBHZXREYXRhTm9kZSgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0RGF0YUFsbE5vZGUoKS5maWx0ZXIoKGl0ZW06IERhdGFGbG93KSA9PiBpdGVtLkdldChcImdyb3VwXCIpID09PSB0aGlzLkN1cnJlbnRHcm91cCgpKTtcbiAgfVxuICAvKipcbiAgICogVmFyaWJ1dGVcbiAgKi9cbiAgcHVibGljIGVsQ2FudmFzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAvLyAgcHVibGljIGVsVG9vbGJhcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgLy9wdWJsaWMgdG9vbGJhcjogRGVzZ2luZXJWaWV3X1Rvb2xiYXI7XG4gIHB1YmxpYyAkbG9jazogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgem9vbV9sYXN0X3ZhbHVlOiBhbnkgPSAxO1xuICBwdWJsaWMgY29uc3RydWN0b3IoZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsTm9kZSA9IGVsTm9kZTtcbiAgICBsZXQgcHJvcGVydGllczogYW55ID0gdGhpcy5tYWluLmdldFByb3BlcnR5QnlLZXkoUHJvcGVydHlFbnVtLm1haW4pO1xuICAgIHRoaXMuZGF0YS5Jbml0RGF0YSh7fSwgcHJvcGVydGllcyk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnZGVzZ2luZXItdmlldycpXG4gICAgdGhpcy5lbENhbnZhcy5jbGFzc0xpc3QucmVtb3ZlKFwiZGVzZ2luZXItY2FudmFzXCIpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2dpbmVyLXZpZXcnKVxuICAgIHRoaXMuZWxDYW52YXMuY2xhc3NMaXN0LmFkZChcImRlc2dpbmVyLWNhbnZhc1wiKTtcbiAgICAvLyB0aGlzLmVsVG9vbGJhci5jbGFzc0xpc3QuYWRkKFwiZGVzZ2luZXItdG9vbGJhclwiKTtcbiAgICAvLyB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0aGlzLmVsVG9vbGJhcik7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5lbENhbnZhcyk7XG4gICAgdGhpcy5lbE5vZGUudGFiSW5kZXggPSAwO1xuICAgIG5ldyBEZXNnaW5lclZpZXdfRXZlbnQodGhpcyk7XG4gICAgLy8gdGhpcy50b29sYmFyID0gbmV3IERlc2dpbmVyVmlld19Ub29sYmFyKHRoaXMpO1xuICAgIHRoaXMub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIHRoaXMuUmVuZGVyVUkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5vbihFdmVudEVudW0uc2hvd1Byb3BlcnR5LCAoZGF0YTogYW55KSA9PiB7IG1haW4uZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgZGF0YSk7IH0pO1xuICAgIHRoaXMubWFpbi5vbihFdmVudEVudW0ub3BlblByb2plY3QsIChpdGVtOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuT3BlbihpdGVtLmRhdGEpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hhbmdlR3JvdXAoKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVWaWV3KHg6IGFueSwgeTogYW55LCB6b29tOiBhbnkpIHtcbiAgICB0aGlzLmVsQ2FudmFzLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7em9vbX0pYDtcbiAgfVxuICBwdWJsaWMgVXBkYXRlVUkoKSB7XG4gICAgdGhpcy51cGRhdGVWaWV3KHRoaXMuZ2V0WCgpLCB0aGlzLmdldFkoKSwgdGhpcy5nZXRab29tKCkpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXJVSShkZXRhaWw6IGFueSA9IHt9KSB7XG4gICAgaWYgKGRldGFpbC5zZW5kZXIgJiYgZGV0YWlsLnNlbmRlciBpbnN0YW5jZW9mIE5vZGVJdGVtKSByZXR1cm47XG4gICAgaWYgKGRldGFpbC5zZW5kZXIgJiYgZGV0YWlsLnNlbmRlciBpbnN0YW5jZW9mIERlc2dpbmVyVmlldykge1xuICAgICAgdGhpcy5VcGRhdGVVSSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLkNsZWFyTm9kZSgpO1xuICAgIHRoaXMuR2V0RGF0YU5vZGUoKS5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuQWRkTm9kZUl0ZW0oaXRlbSk7XG4gICAgfSk7XG4gICAgdGhpcy5HZXRBbGxOb2RlKCkuZm9yRWFjaCgoaXRlbTogTm9kZUl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uUmVuZGVyTGluZSgpO1xuICAgIH0pXG4gICAgdGhpcy5VcGRhdGVVSSgpO1xuICB9XG4gIHB1YmxpYyBPcGVuKCRkYXRhOiBEYXRhRmxvdykge1xuICAgIGlmICgkZGF0YSA9PSB0aGlzLmRhdGEpIHtcbiAgICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kYXRhPy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgKGRldGFpbDogYW55KSA9PiB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5kYXRhQ2hhbmdlLCBkZXRhaWwpKTtcbiAgICB0aGlzLmRhdGEgPSAkZGF0YTtcbiAgICB0aGlzLmRhdGEub24oRXZlbnRFbnVtLmRhdGFDaGFuZ2UsIChkZXRhaWw6IGFueSkgPT4gdGhpcy5kaXNwYXRjaChFdmVudEVudW0uZGF0YUNoYW5nZSwgZGV0YWlsKSk7XG4gICAgdGhpcy4kbG9jayA9IGZhbHNlO1xuICAgIHRoaXMubGFzdEdyb3VwTmFtZSA9ICcnO1xuICAgIHRoaXMuZ3JvdXBEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3JvdXAgPSBbXTtcbiAgICB0aGlzLlJlbmRlclVJKCk7XG4gICAgdGhpcy5jaGFuZ2VHcm91cCgpO1xuICB9XG4gIHB1YmxpYyBDYWxjWChudW1iZXI6IGFueSkge1xuICAgIHJldHVybiBudW1iZXIgKiAodGhpcy5lbENhbnZhcy5jbGllbnRXaWR0aCAvICh0aGlzLmVsTm9kZT8uY2xpZW50V2lkdGggKiB0aGlzLmdldFpvb20oKSkpO1xuICB9XG4gIHB1YmxpYyBDYWxjWShudW1iZXI6IGFueSkge1xuICAgIHJldHVybiBudW1iZXIgKiAodGhpcy5lbENhbnZhcy5jbGllbnRIZWlnaHQgLyAodGhpcy5lbE5vZGU/LmNsaWVudEhlaWdodCAqIHRoaXMuZ2V0Wm9vbSgpKSk7XG4gIH1cbiAgcHVibGljIEdldEFsbE5vZGUoKTogTm9kZUl0ZW1bXSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMgfHwgW107XG4gIH1cbiAgcHVibGljIEdldE5vZGVCeUlkKGlkOiBzdHJpbmcpOiBOb2RlSXRlbSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuR2V0QWxsTm9kZSgpLmZpbHRlcihub2RlID0+IG5vZGUuR2V0SWQoKSA9PSBpZCk/LlswXTtcbiAgfVxuXG4gIHB1YmxpYyBHZXREYXRhQnlJZChpZDogc3RyaW5nKTogRGF0YUZsb3cgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5HZXREYXRhQWxsTm9kZSgpLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5HZXQoJ2lkJykgPT09IGlkKT8uWzBdO1xuICB9XG4gIGNoZWNrT25seU5vZGUoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHRoaXMubWFpbi5nZXRDb250cm9sQnlLZXkoa2V5KS5vbmx5Tm9kZSkgJiYgdGhpcy5ub2Rlcy5maWx0ZXIoaXRlbSA9PiBpdGVtLkNoZWNrS2V5KGtleSkpLmxlbmd0aCA+IDA7XG4gIH1cbiAgcHVibGljIHpvb21fcmVmcmVzaChmbGc6IGFueSA9IDApIHtcbiAgICBsZXQgdGVtcF96b29tID0gZmxnID09IDAgPyBab29tLmRlZmF1bHQgOiAodGhpcy5nZXRab29tKCkgKyBab29tLnZhbHVlICogZmxnKTtcbiAgICBpZiAoWm9vbS5tYXggPj0gdGVtcF96b29tICYmIHRlbXBfem9vbSA+PSBab29tLm1pbikge1xuICAgICAgdGhpcy5zZXRYKCh0aGlzLmdldFgoKSAvIHRoaXMuem9vbV9sYXN0X3ZhbHVlKSAqIHRlbXBfem9vbSk7XG4gICAgICB0aGlzLnNldFkoKHRoaXMuZ2V0WSgpIC8gdGhpcy56b29tX2xhc3RfdmFsdWUpICogdGVtcF96b29tKTtcbiAgICAgIHRoaXMuem9vbV9sYXN0X3ZhbHVlID0gdGVtcF96b29tO1xuICAgICAgdGhpcy5zZXRab29tKHRoaXMuem9vbV9sYXN0X3ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHpvb21faW4oKSB7XG4gICAgdGhpcy56b29tX3JlZnJlc2goMSk7XG4gIH1cbiAgcHVibGljIHpvb21fb3V0KCkge1xuICAgIHRoaXMuem9vbV9yZWZyZXNoKC0xKTtcbiAgfVxuICBwdWJsaWMgem9vbV9yZXNldCgpIHtcbiAgICB0aGlzLnpvb21fcmVmcmVzaCgwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YUZsb3csIEV2ZW50RW51bSwgSU1haW4sIFNjb3BlUm9vdCB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBWYXJpYWJsZVZpZXcge1xuICBwcml2YXRlIHZhcmlhYmxlczogRGF0YUZsb3dbXSB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50LCBwdWJsaWMgbWFpbjogSU1haW4pIHtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy12YXJpYWJsZScpO1xuICAgIHRoaXMubWFpbi5vblNhZmUoRXZlbnRFbnVtLmNoYW5nZVZhcmlhYmxlLCAoeyBkYXRhIH06IGFueSkgPT4ge1xuICAgICAgdGhpcy5SZW5kZXIoKTtcbiAgICB9KTtcbiAgICB0aGlzLm1haW4ub25TYWZlKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgKCkgPT4ge1xuICAgICAgdGhpcy5SZW5kZXIoKTtcbiAgICB9KTtcbiAgICB0aGlzLm1haW4ub25TYWZlKEV2ZW50RW51bS5ncm91cENoYW5nZSwgKCkgPT4ge1xuICAgICAgdGhpcy5SZW5kZXIoKTtcbiAgICB9KVxuICAgIHRoaXMuUmVuZGVyKCk7XG4gIH1cbiAgcHVibGljIFJlbmRlcigpIHtcbiAgICB0aGlzLnZhcmlhYmxlcyA9IHRoaXMubWFpbi5nZXRWYXJpYWJsZSgpO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICAgIDx0YWJsZSBib3JkZXI9XCIxXCI+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1uYW1lXCI+TmFtZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS10eXBlXCI+VHlwZTwvdGQ+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJ2YXJpYWJsZS1zY29wZVwiPlNjb3BlPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInZhcmlhYmxlLWRlZmF1bHRcIj5EZWZhdWx0PC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInZhcmlhYmxlLWJ1dHRvblwiPjwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICBgO1xuICAgIGlmICh0aGlzLnZhcmlhYmxlcykge1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLnZhcmlhYmxlcykge1xuICAgICAgICBuZXcgVmFyaWFibGVJdGVtKGl0ZW0sIHRoaXMpLlJlbmRlclNjb3BlKHRoaXMubWFpbi5nZXRHcm91cEN1cnJlbnQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5jbGFzcyBWYXJpYWJsZUl0ZW0ge1xuICBwcml2YXRlIGVsTm9kZTogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICBwcml2YXRlIG5hbWVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBwcml2YXRlIHR5cGVJbnB1dDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpdmF0ZSBzY29wZUlucHV0OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICBwcml2YXRlIHZhbHVlRGVmYXVsdElucHV0OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHZhcmlhYmxlOiBEYXRhRmxvdywgcHJpdmF0ZSBwYXJlbnQ6IFZhcmlhYmxlVmlldykge1xuICAgICh0aGlzLm5hbWVJbnB1dCBhcyBhbnkpLnZhbHVlID0gdGhpcy52YXJpYWJsZS5HZXQoJ25hbWUnKTtcbiAgICAodGhpcy52YWx1ZURlZmF1bHRJbnB1dCBhcyBhbnkpLnZhbHVlID0gdGhpcy52YXJpYWJsZS5HZXQoJ2luaXRhbFZhbHVlJykgPz8gJyc7XG4gICAgKHRoaXMudHlwZUlucHV0IGFzIGFueSkudmFsdWUgPSB0aGlzLnZhcmlhYmxlLkdldCgndHlwZScpID8/ICcnO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgWyd0ZXh0JywgJ251bWJlcicsICdkYXRlJywgJ29iamVjdCddKSB7XG4gICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udGV4dCA9IGl0ZW07XG4gICAgICBvcHRpb24udmFsdWUgPSBpdGVtO1xuICAgICAgdGhpcy50eXBlSW5wdXQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9XG4gICAgbGV0IG5hbWVDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIG5hbWVDb2x1bW4uYXBwZW5kQ2hpbGQodGhpcy5uYW1lSW5wdXQpO1xuICAgIHRoaXMuZWxOb2RlLmFwcGVuZENoaWxkKG5hbWVDb2x1bW4pO1xuICAgIHRoaXMubmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnbmFtZScsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcbiAgICB0aGlzLm5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnbmFtZScsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcblxuICAgIGxldCB0eXBlQ29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0eXBlQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMudHlwZUlucHV0KTtcbiAgICB0aGlzLmVsTm9kZS5hcHBlbmRDaGlsZCh0eXBlQ29sdW1uKTtcbiAgICB0aGlzLnR5cGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgndHlwZScsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcbiAgICBsZXQgc2NvcGVDb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIHNjb3BlQ29sdW1uLmFwcGVuZENoaWxkKHRoaXMuc2NvcGVJbnB1dCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoc2NvcGVDb2x1bW4pO1xuXG5cbiAgICBsZXQgdmFsdWVEZWZhdWx0Q29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB2YWx1ZURlZmF1bHRDb2x1bW4uYXBwZW5kQ2hpbGQodGhpcy52YWx1ZURlZmF1bHRJbnB1dCk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQodmFsdWVEZWZhdWx0Q29sdW1uKTtcbiAgICB0aGlzLnZhbHVlRGVmYXVsdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudmFyaWFibGUuU2V0KCdpbml0YWxWYWx1ZScsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcbiAgICB0aGlzLnZhbHVlRGVmYXVsdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnaW5pdGFsVmFsdWUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICBsZXQgYnV0dG9uUmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnV0dG9uUmVtb3ZlLmlubmVySFRNTCA9IGAtYDtcbiAgICBidXR0b25SZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBwYXJlbnQubWFpbi5yZW1vdmVWYXJpYWJsZSh2YXJpYWJsZSk7XG4gICAgfSk7XG4gICAgbGV0IGJ1dHRvblJlbW92ZUNvbHVtbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgYnV0dG9uUmVtb3ZlQ29sdW1uLmFwcGVuZENoaWxkKGJ1dHRvblJlbW92ZSk7XG4gICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoYnV0dG9uUmVtb3ZlQ29sdW1uKTtcblxuICAgIHBhcmVudC5lbE5vZGUucXVlcnlTZWxlY3RvcigndGFibGUgdGJvZHknKT8uYXBwZW5kQ2hpbGQodGhpcy5lbE5vZGUpO1xuXG4gIH1cbiAgUmVuZGVyU2NvcGUoZ3JvdXA6IGFueSA9IG51bGwpIHtcbiAgICB0aGlzLnNjb3BlSW5wdXQuaW5uZXJIVE1MID0gJyc7XG4gICAgaWYgKGdyb3VwKSB7XG4gICAgICBmb3IgKGxldCBpdGVtIG9mIGdyb3VwKSB7XG4gICAgICAgIGxldCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgb3B0aW9uLnRleHQgPSBpdGVtLnRleHQ7XG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IGl0ZW0uaWQ7XG4gICAgICAgIHRoaXMuc2NvcGVJbnB1dC5wcmVwZW5kKG9wdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgICh0aGlzLnNjb3BlSW5wdXQgYXMgYW55KS52YWx1ZSA9IHRoaXMudmFyaWFibGUuR2V0KCdzY29wZScpO1xuICAgIHRoaXMuc2NvcGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZTogYW55KSA9PiB7XG4gICAgICB0aGlzLnZhcmlhYmxlLlNldCgnc2NvcGUnLCBlLnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcblxuZXhwb3J0IGNsYXNzIFRvb2xib3hWaWV3IHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50LCBwdWJsaWMgbWFpbjogSU1haW4pIHtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy10b29sYm94Jyk7XG4gICAgdGhpcy5SZW5kZXIoKTtcbiAgfVxuICBwdWJsaWMgUmVuZGVyKCkge1xuICAgIGxldCBjb250cm9scyA9IHRoaXMubWFpbi5nZXRDb250cm9sQWxsKCk7XG4gICAgbGV0IGdyb3VwOiBhbnkgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKGNvbnRyb2xzKS5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgIGxldCBncm91cE5hbWUgPSBjb250cm9sc1tpdGVtXS5ncm91cCA/PyBcIm90aGVyXCI7XG4gICAgICBpZiAoZ3JvdXBbZ3JvdXBOYW1lXSA9PT0gdW5kZWZpbmVkKSBncm91cFtncm91cE5hbWVdID0gW107XG4gICAgICBncm91cFtncm91cE5hbWVdID0gW1xuICAgICAgICAuLi5ncm91cFtncm91cE5hbWVdLFxuICAgICAgICBjb250cm9sc1tpdGVtXVxuICAgICAgXTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhncm91cCkuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleCkgPT4ge1xuICAgICAgbGV0IGl0ZW1Cb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGl0ZW1Cb3guY2xhc3NMaXN0LmFkZCgnbm9kZS1ib3gnKTtcbiAgICAgIGl0ZW1Cb3guY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICBpdGVtQm94LmlubmVySFRNTCA9IGBcbiAgICAgICAgPHAgY2xhc3M9XCJub2RlLWJveF90aXRsZVwiPiR7aXRlbX08L3A+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWJveF9ib2J5XCI+PC9kaXY+XG4gICAgICBgO1xuICAgICAgaXRlbUJveC5xdWVyeVNlbGVjdG9yKCcubm9kZS1ib3hfdGl0bGUnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmIChpdGVtQm94LmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgICAgICBpdGVtQm94LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbUJveC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvciAobGV0IF9pdGVtIG9mIGdyb3VwW2l0ZW1dKSB7XG4gICAgICAgIGxldCBub2RlSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBub2RlSXRlbS5jbGFzc0xpc3QuYWRkKCdub2RlLWl0ZW0nKTtcbiAgICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICBub2RlSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtbm9kZScsIF9pdGVtLmtleSk7XG4gICAgICAgIG5vZGVJdGVtLmlubmVySFRNTCA9IGAke19pdGVtLmljb259IDxzcGFuPiR7X2l0ZW0ubmFtZX08L3NwYW5gO1xuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmRyYWdTdGFydC5iaW5kKHRoaXMpKVxuICAgICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgdGhpcy5kcmFnZW5kLmJpbmQodGhpcykpXG4gICAgICAgIGl0ZW1Cb3gucXVlcnlTZWxlY3RvcignLm5vZGUtYm94X2JvYnknKT8uYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgICAgfVxuICAgICAgdGhpcy5lbE5vZGUuYXBwZW5kQ2hpbGQoaXRlbUJveCk7XG4gICAgfSk7XG4gIH1cbiAgcHJpdmF0ZSBkcmFnZW5kKGU6IGFueSkge1xuICAgIHRoaXMubWFpbi5zZXRDb250cm9sQ2hvb3NlKG51bGwpO1xuICB9XG5cbiAgcHJpdmF0ZSBkcmFnU3RhcnQoZTogYW55KSB7XG4gICAgbGV0IGtleSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIubm9kZS1pdGVtXCIpLmdldEF0dHJpYnV0ZSgnZGF0YS1ub2RlJyk7XG4gICAgdGhpcy5tYWluLnNldENvbnRyb2xDaG9vc2Uoa2V5KTtcbiAgICBpZiAoZS50eXBlICE9PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcIm5vZGVcIiwga2V5KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEV2ZW50RW51bSwgSU1haW4sIERhdGFGbG93IH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3RWaWV3IHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBlbE5vZGU6IEhUTUxFbGVtZW50LCBwdWJsaWMgbWFpbjogSU1haW4pIHtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy1wcm9qZWN0Jyk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgdGhpcy5SZW5kZXIuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5tYWluLm9uKEV2ZW50RW51bS5vcGVuUHJvamVjdCwgdGhpcy5SZW5kZXIuYmluZCh0aGlzKSk7XG4gIH1cbiAgcHVibGljIFJlbmRlcigpIHtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgYDtcbiAgICBsZXQgcHJvamVjdHMgPSB0aGlzLm1haW4uZ2V0UHJvamVjdEFsbCgpO1xuICAgIHByb2plY3RzLmZvckVhY2goKGl0ZW06IERhdGFGbG93KSA9PiB7XG4gICAgICBsZXQgbm9kZUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG5vZGVJdGVtLmNsYXNzTGlzdC5hZGQoJ25vZGUtaXRlbScpO1xuICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgbm9kZUl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QtaWQnLCBpdGVtLkdldCgnaWQnKSk7XG4gICAgICBpdGVtLm9uU2FmZShgJHtFdmVudEVudW0uZGF0YUNoYW5nZX1fbmFtZWAsICgpID0+IHtcbiAgICAgICAgbm9kZUl0ZW0uaW5uZXJIVE1MID0gYCR7aXRlbS5HZXQoJ25hbWUnKX1gO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5tYWluLmNoZWNrUHJvamVjdE9wZW4oaXRlbSkpIHtcbiAgICAgICAgbm9kZUl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICBub2RlSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLnNldFByb2plY3RPcGVuKGl0ZW0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsTm9kZT8uYXBwZW5kQ2hpbGQobm9kZUl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVudW0gfSBmcm9tIFwiLi4vY29yZS9Db25zdGFudFwiO1xuaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9JRmxvd1wiO1xuXG5leHBvcnQgY2xhc3MgVGFiUHJvamVjdFZpZXcge1xuICBwcml2YXRlICRlbEJvYnk6IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwcml2YXRlICRlbFdhcnA6IEVsZW1lbnQgfCB1bmRlZmluZWQgfCBudWxsO1xuICBwcml2YXRlICRidG5OZXh0OiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHJpdmF0ZSAkYnRuQmFjazogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIHByaXZhdGUgJGJ0bkFkZDogRWxlbWVudCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCwgcHVibGljIG1haW46IElNYWluKSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtdGFiLXByb2plY3QnKTtcbiAgICB0aGlzLm1haW4ub24oRXZlbnRFbnVtLm9wZW5Qcm9qZWN0LCB0aGlzLlJlbmRlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLlJlbmRlcigpO1xuICB9XG4gIHB1YmxpYyBSZW5kZXIoKSB7XG4gICAgbGV0IHNjcm9sbExlZnRDYWNoZSA9IHRoaXMuJGVsV2FycD8uc2Nyb2xsTGVmdCA/PyAwO1xuICAgIHRoaXMuZWxOb2RlLmlubmVySFRNTCA9IGBcbiAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfX3NlYXJjaFwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9fbGlzdFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1wcm9qZWN0X2J1dHRvblwiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuLWJhY2tcIj48aSBjbGFzcz1cImZhcyBmYS1hbmdsZS1sZWZ0XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3Rfd2FycFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXByb2plY3RfX2JvZHlcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9idXR0b25cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1uZXh0XCI+PGkgY2xhc3M9XCJmYXMgZmEtYW5nbGUtcmlnaHRcIj48L2k+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItcHJvamVjdF9idXR0b25cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1hZGRcIj48aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYDtcbiAgICB0aGlzLiRlbFdhcnAgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudGFiLXByb2plY3Rfd2FycCcpO1xuICAgIHRoaXMuJGVsQm9ieSA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy50YWItcHJvamVjdF9fYm9keScpO1xuICAgIHRoaXMuJGJ0bkJhY2sgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuLWJhY2snKTtcbiAgICB0aGlzLiRidG5OZXh0ID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bi1uZXh0Jyk7XG4gICAgdGhpcy4kYnRuQWRkID0gdGhpcy5lbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bi1hZGQnKTtcbiAgICBjb25zdCBmblVwZGF0ZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLiRlbFdhcnApIHtcbiAgICAgICAgLy8gbGV0IHNjcm9sbExlZnQgPSB0aGlzLiRlbFdhcnAuc2Nyb2xsTGVmdDtcbiAgICAgICAgLy8gdmFyIG1heFNjcm9sbExlZnQgPSB0aGlzLiRlbFdhcnAuc2Nyb2xsV2lkdGggLSB0aGlzLiRlbFdhcnAuY2xpZW50V2lkdGg7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNjcm9sbExlZnQpO1xuICAgICAgICAvLyBpZiAodGhpcy4kYnRuQmFjayAmJiBzY3JvbGxMZWZ0IDw9IDApIHtcbiAgICAgICAgLy8gICB0aGlzLiRidG5CYWNrLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgZGlzcGxheTpub25lO2ApXG4gICAgICAgIC8vIH0gZWxzZSBpZiAodGhpcy4kYnRuQmFjayAmJiBzY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bkJhY2sucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmICh0aGlzLiRidG5OZXh0ICYmIHNjcm9sbExlZnQgPj0gbWF4U2Nyb2xsTGVmdCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bk5leHQuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YClcbiAgICAgICAgLy8gfSBlbHNlIGlmICh0aGlzLiRidG5OZXh0ICYmIHNjcm9sbExlZnQgPD0gMCkge1xuICAgICAgICAvLyAgIHRoaXMuJGJ0bk5leHQucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuJGVsV2FycD8uYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBldmVudCA9PiB7XG4gICAgICBmblVwZGF0ZVNjcm9sbCgpO1xuICAgIH0sIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICBmblVwZGF0ZVNjcm9sbCgpO1xuICAgIHRoaXMuJGJ0bkJhY2s/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuJGVsV2FycCkge1xuICAgICAgICB0aGlzLiRlbFdhcnAuc2Nyb2xsTGVmdCAtPSAxMDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy4kYnRuTmV4dD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy4kZWxXYXJwKSB7XG4gICAgICAgIHRoaXMuJGVsV2FycC5zY3JvbGxMZWZ0ICs9IDEwMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLiRidG5BZGQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5tYWluLm5ld1Byb2plY3QoXCJcIik7XG4gICAgfSk7XG4gICAgbGV0IHByb2plY3RzID0gdGhpcy5tYWluLmdldFByb2plY3RBbGwoKTtcbiAgICBsZXQgaXRlbUFjdGl2ZTogYW55ID0gdW5kZWZpbmVkO1xuICAgIGZvciAobGV0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcbiAgICAgIGxldCBwcm9qZWN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbGV0IHByb2plY3ROYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgbGV0IHByb2plY3RCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxldCBwcm9qZWN0QnV0dG9uUmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBwcm9qZWN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIHByb2plY3QuR2V0KCdpZCcpKTtcbiAgICAgIHByb2plY3ROYW1lLmlubmVySFRNTCA9IHByb2plY3QuR2V0KCduYW1lJyk7XG4gICAgICBwcm9qZWN0TmFtZS5jbGFzc0xpc3QuYWRkKCdwcm8tbmFtZScpO1xuICAgICAgcHJvamVjdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdwcm8tYnV0dG9uJyk7XG4gICAgICBwcm9qZWN0QnV0dG9uUmVtb3ZlLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cImZhcyBmYS1taW51c1wiPjwvaT5gO1xuICAgICAgcHJvamVjdEJ1dHRvbi5hcHBlbmRDaGlsZChwcm9qZWN0QnV0dG9uUmVtb3ZlKTtcbiAgICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcbiAgICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKHByb2plY3RCdXR0b24pO1xuXG4gICAgICBwcm9qZWN0SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWl0ZW0nKTtcbiAgICAgIGlmICh0aGlzLm1haW4uY2hlY2tQcm9qZWN0T3Blbihwcm9qZWN0KSkge1xuICAgICAgICBwcm9qZWN0SXRlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgaXRlbUFjdGl2ZSA9IHByb2plY3RJdGVtO1xuICAgICAgfVxuICAgICAgcHJvamVjdEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBpZiAoIXByb2plY3RCdXR0b25SZW1vdmUuY29udGFpbnMoZS50YXJnZXQgYXMgTm9kZSkgJiYgZS50YXJnZXQgIT0gcHJvamVjdEJ1dHRvblJlbW92ZSkge1xuICAgICAgICAgIHRoaXMubWFpbi5zZXRQcm9qZWN0T3Blbihwcm9qZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwcm9qZWN0QnV0dG9uUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgdGhpcy5tYWluLnJlbW92ZVByb2plY3QocHJvamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVsQm9ieT8uYXBwZW5kQ2hpbGQocHJvamVjdEl0ZW0pO1xuICAgICAgcHJvamVjdC5vblNhZmUoRXZlbnRFbnVtLmRhdGFDaGFuZ2UgKyAnX25hbWUnLCAoKSA9PiB7XG4gICAgICAgIHByb2plY3ROYW1lLmlubmVySFRNTCA9IHByb2plY3QuR2V0KCduYW1lJyk7XG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAodGhpcy4kZWxXYXJwKSB7XG4gICAgICBpZiAoaXRlbUFjdGl2ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy4kZWxXYXJwLnNjcm9sbExlZnQgPSBpdGVtQWN0aXZlLm9mZnNldExlZnQgLSAyMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGVsV2FycC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdENhY2hlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgRG9ja0Jhc2Uge1xuICBwdWJsaWMgZWxOb2RlOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcm90ZWN0ZWQgZWxDb250ZW50OiBFbGVtZW50IHwgdW5kZWZpbmVkIHwgbnVsbDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsTm9kZSk7XG4gICAgdGhpcy5lbE5vZGUuaW5uZXJIVE1MID0gJ0RvY2tCYXNlJztcbiAgfVxuXG4gIHB1YmxpYyBCb3hJbmZvKHRpdGxlOiBzdHJpbmcsICRjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgndnMtYm94aW5mbycpO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLWJveGluZm8nKTtcbiAgICB0aGlzLmVsTm9kZS5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz1cInZzLWJveGluZm9faGVhZGVyXCI+PHNwYW4gY2xhc3M9XCJ2cy1ib3hpbmZvX3RpdGxlXCI+JHt0aXRsZX08L3NwYW4+PHNwYW4gY2xhc3M9XCJ2cy1ib3hpbmZvX2J1dHRvblwiPjwvc3Bhbj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidnMtYm94aW5mb193YXJwXCI+PGRpdiBjbGFzcz1cInZzLWJveGluZm9fY29udGVudFwiPjwvZGl2PjwvZGl2PmA7XG4gICAgdGhpcy5lbENvbnRlbnQgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudnMtYm94aW5mb19jb250ZW50Jyk7XG4gICAgaWYgKCRjYWxsYmFjaykge1xuICAgICAgJGNhbGxiYWNrKHRoaXMuZWxDb250ZW50KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IFRvb2xib3hWaWV3IH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb250cm9sRG9jayBleHRlbmRzIERvY2tCYXNlIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG4gICAgdGhpcy5lbE5vZGUuY2xhc3NMaXN0LmFkZCgndnMtY29udHJvbCcpO1xuICAgIHRoaXMuQm94SW5mbygnQ29udHJvbCcsIChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgbmV3IFRvb2xib3hWaWV3KG5vZGUsIHRoaXMubWFpbik7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluLCBnZXRUaW1lIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IFZhcmlhYmxlVmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgVmFyaWFibGVEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBtYWluKTtcbiAgICB0aGlzLmVsTm9kZS5jbGFzc0xpc3QuYWRkKCd2cy12YXJpYWJsZScpO1xuICAgIHRoaXMuQm94SW5mbygnVmFyaWFibGUnLCAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIG5ldyBWYXJpYWJsZVZpZXcobm9kZSwgbWFpbik7XG4gICAgfSk7XG4gICAgbGV0ICRub2RlUmlnaHQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IHRoaXMuZWxOb2RlLnF1ZXJ5U2VsZWN0b3IoJy52cy1ib3hpbmZvX2hlYWRlciAudnMtYm94aW5mb19idXR0b24nKTtcbiAgICBpZiAoJG5vZGVSaWdodCkge1xuICAgICAgJG5vZGVSaWdodC5pbm5lckhUTUwgPSBgYDtcbiAgICAgIGxldCBidXR0b25OZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbk5ldyk7XG4gICAgICBidXR0b25OZXcuaW5uZXJIVE1MID0gYE5ldyBWYXJpYWJsZWA7XG4gICAgICBidXR0b25OZXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMubWFpbi5uZXdWYXJpYWJsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhVmlldywgRGF0YUZsb3csIEV2ZW50RW51bSwgSU1haW4gfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xyXG5pbXBvcnQgeyBEb2NrQmFzZSB9IGZyb20gXCIuL0RvY2tCYXNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvcGVydHlEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xyXG4gIHByaXZhdGUgbGFzdERhdGE6IERhdGFGbG93IHwgdW5kZWZpbmVkO1xyXG4gIHByaXZhdGUgaGlkZUtleXM6IHN0cmluZ1tdID0gWydsaW5lcycsICdub2RlcycsICdncm91cHMnLCAndmFyaWFibGUnLCAneCcsICd5JywgJ3pvb20nXTtcclxuICBwcml2YXRlIHNvcnRLZXlzOiBzdHJpbmdbXSA9IFsnaWQnLCAna2V5JywgJ25hbWUnLCAnZ3JvdXAnXTtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgcHJvdGVjdGVkIG1haW46IElNYWluKSB7XHJcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xyXG5cclxuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb3BlcnR5Jyk7XHJcbiAgICB0aGlzLkJveEluZm8oJ1Byb3BlcnR5JywgKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICAgIG1haW4ub24oRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwgKGRldGFpbDogYW55KSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJVSShub2RlLCBkZXRhaWwuZGF0YSk7XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyVUkobm9kZTogSFRNTEVsZW1lbnQsIGRhdGE6IERhdGFGbG93KSB7XHJcbiAgICBpZiAodGhpcy5sYXN0RGF0YSA9PSBkYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubGFzdERhdGEgPSBkYXRhO1xyXG4gICAgbm9kZS5pbm5lckhUTUwgPSAnJztcclxuICAgIGxldCBwcm9wZXJ0aWVzOiBhbnkgPSBkYXRhLmdldFByb3BlcnRpZXMoKTtcclxuICAgIHRoaXMuc29ydEtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHRoaXMuaGlkZUtleXMuaW5jbHVkZXMoa2V5KSB8fCAhcHJvcGVydGllc1trZXldKSByZXR1cm47XHJcbiAgICAgIGxldCBwcm9wZXJ0eUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcclxuICAgICAgbGV0IHByb3BlcnR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlMYWJlbC5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1sYWJlbCcpO1xyXG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcclxuICAgICAgbGV0IHByb3BlcnR5VmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlWYWx1ZS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS12YWx1ZScpO1xyXG4gICAgICBEYXRhVmlldy5CaW5kRWxlbWVudChwcm9wZXJ0eVZhbHVlLCBkYXRhLCB0aGlzLm1haW4sIGtleSk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eUxhYmVsKTtcclxuICAgICAgcHJvcGVydHlJdGVtLmFwcGVuZENoaWxkKHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICBub2RlLmFwcGVuZENoaWxkKHByb3BlcnR5SXRlbSk7XHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmhpZGVLZXlzLmluY2x1ZGVzKGtleSkgfHwgdGhpcy5zb3J0S2V5cy5pbmNsdWRlcyhrZXkpKSByZXR1cm47XHJcbiAgICAgIGxldCBwcm9wZXJ0eUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb3BlcnR5LWl0ZW0nKTtcclxuICAgICAgbGV0IHByb3BlcnR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlMYWJlbC5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS1sYWJlbCcpO1xyXG4gICAgICBwcm9wZXJ0eUxhYmVsLmlubmVySFRNTCA9IGtleTtcclxuICAgICAgbGV0IHByb3BlcnR5VmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcHJvcGVydHlWYWx1ZS5jbGFzc0xpc3QuYWRkKCdwcm9wZXJ0eS12YWx1ZScpO1xyXG4gICAgICBEYXRhVmlldy5CaW5kRWxlbWVudChwcm9wZXJ0eVZhbHVlLCBkYXRhLCB0aGlzLm1haW4sIGtleSk7XHJcbiAgICAgIHByb3BlcnR5SXRlbS5hcHBlbmRDaGlsZChwcm9wZXJ0eUxhYmVsKTtcclxuICAgICAgcHJvcGVydHlJdGVtLmFwcGVuZENoaWxkKHByb3BlcnR5VmFsdWUpO1xyXG4gICAgICBub2RlLmFwcGVuZENoaWxkKHByb3BlcnR5SXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRFbnVtLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBEZXNnaW5lclZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFZpZXdEb2NrIGV4dGVuZHMgRG9ja0Jhc2Uge1xuICBwcml2YXRlIHZpZXc6IERlc2dpbmVyVmlldyB8IHVuZGVmaW5lZDtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3RlY3RlZCBtYWluOiBJTWFpbikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgbWFpbik7XG5cbiAgICB0aGlzLnZpZXcgPSBuZXcgRGVzZ2luZXJWaWV3KHRoaXMuZWxOb2RlLCBtYWluKTtcblxuICB9XG59XG4iLCJpbXBvcnQgeyBJTWFpbiwgfSBmcm9tIFwiLi4vY29yZS9pbmRleFwiO1xuaW1wb3J0IHsgVGFiUHJvamVjdFZpZXcgfSBmcm9tIFwiLi4vZGVzZ2luZXIvaW5kZXhcIjtcbmltcG9ydCB7IERvY2tCYXNlIH0gZnJvbSBcIi4vRG9ja0Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIFRhYkRvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIG5ldyBUYWJQcm9qZWN0Vmlldyh0aGlzLmVsTm9kZSwgbWFpbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IElNYWluLCBEb2NrRW51bSB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBDb250cm9sRG9jayB9IGZyb20gXCIuL0NvbnRyb2xEb2NrXCI7XG5pbXBvcnQgeyBWYXJpYWJsZURvY2sgfSBmcm9tIFwiLi9WYXJpYWJsZURvY2tcIjtcbmltcG9ydCB7IFByb2plY3REb2NrIH0gZnJvbSBcIi4vUHJvamVjdERvY2tcIjtcbmltcG9ydCB7IFByb3BlcnR5RG9jayB9IGZyb20gXCIuL1Byb3BlcnR5RG9ja1wiO1xuaW1wb3J0IHsgVmlld0RvY2sgfSBmcm9tIFwiLi9WaWV3RG9ja1wiO1xuaW1wb3J0IHsgVGFiRG9jayB9IGZyb20gXCIuL1RhYkRvY2tcIjtcblxuZXhwb3J0IGNsYXNzIERvY2tNYW5hZ2VyIHtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IGFueSA9IHt9O1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHsgfVxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSB7fTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ubGVmdCwgQ29udHJvbERvY2spO1xuICAgIC8vdGhpcy5hZGREb2NrKERvY2tFbnVtLmxlZnQsIFByb2plY3REb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0ucmlnaHQsIFByb3BlcnR5RG9jayk7XG4gICAgdGhpcy5hZGREb2NrKERvY2tFbnVtLnZpZXcsIFZpZXdEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0udG9wLCBUYWJEb2NrKTtcbiAgICB0aGlzLmFkZERvY2soRG9ja0VudW0uYm90dG9tLCBWYXJpYWJsZURvY2spO1xuICAgIHRoaXMuUmVuZGVyVUkoKTtcbiAgfVxuICBwdWJsaWMgYWRkRG9jaygka2V5OiBzdHJpbmcsICR2aWV3OiBhbnkpIHtcbiAgICBpZiAoIXRoaXMuJGRvY2tNYW5hZ2VyWyRrZXldKVxuICAgICAgdGhpcy4kZG9ja01hbmFnZXJbJGtleV0gPSBbXTtcbiAgICB0aGlzLiRkb2NrTWFuYWdlclska2V5XSA9IFsuLi50aGlzLiRkb2NrTWFuYWdlclska2V5XSwgJHZpZXddO1xuICB9XG5cbiAgcHVibGljIFJlbmRlclVJKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1sZWZ0IHZzLWRvY2tcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2cy1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy10b3AgdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidnMtdmlldyB2cy1kb2NrXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2cy1ib3R0b20gdnMtZG9ja1wiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidnMtcmlnaHQgdnMtZG9ja1wiPjwvZGl2PlxuICAgIGA7XG4gICAgT2JqZWN0LmtleXModGhpcy4kZG9ja01hbmFnZXIpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBsZXQgcXVlcnlTZWxlY3RvciA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYC4ke2tleX1gKTtcbiAgICAgIGlmIChxdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuJGRvY2tNYW5hZ2VyW2tleV0uZm9yRWFjaCgoJGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgIG5ldyAkaXRlbShxdWVyeVNlbGVjdG9yLCB0aGlzLm1haW4pO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgQ29udHJvbCA9IHtcbiAgbm9kZV9iZWdpbjoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnQmVnaW4nLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBjbGFzczogJycsXG4gICAgaHRtbDogJycsXG4gICAgZG90OiB7XG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMSxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgfSxcbiAgICBvbmx5Tm9kZTogdHJ1ZVxuICB9LFxuICBub2RlX2VuZDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1zdG9wXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnRW5kJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogJycsXG4gICAgZG90OiB7XG4gICAgICBsZWZ0OiAxLFxuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgfSxcbiAgICBvbmx5Tm9kZTogdHJ1ZVxuICB9LFxuICBub2RlX2lmOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWVxdWFsc1wiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ0lmJyxcbiAgICBncm91cDogJ2NvbW1vbicsXG4gICAgaHRtbDogYDxkaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4gc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0XCI+VGhlbjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAxXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3BhbiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHRcIj5FbHNlPC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICBgLFxuICAgIHNjcmlwdDogYGAsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIGRvdDoge1xuICAgICAgbGVmdDogMSxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gIH0sXG4gIG5vZGVfZ3JvdXA6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnR3JvdXAnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PGJ1dHRvbiBjbGFzcz1cImJ0bkdvR3JvdXAgbm9kZS1mb3JtLWNvbnRyb2xcIj5HbzwvYnV0dG9uPjwvZGl2PicsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9vcHRpb246IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtb2JqZWN0LWdyb3VwXCI+PC9pPicsXG4gICAgc29ydDogMCxcbiAgICBuYW1lOiAnT3B0aW9uJyxcbiAgICBkb3Q6IHtcbiAgICAgIHRvcDogMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMSxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9LFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiBgXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwMVwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDJcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj48c3Bhbj5I4buNIHTDqm4gOjwvc3Bhbj48c3Bhbj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAzXCI+PC9zcGFuPjwvc3Bhbj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJub2RlLWNvbnRlbnQtcm93XCI+PHNwYW4+SOG7jSB0w6puIDo8L3NwYW4+PHNwYW4+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCI1MDAwNFwiPjwvc3Bhbj48L3NwYW4+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibm9kZS1jb250ZW50LXJvd1wiPjxzcGFuPkjhu40gdMOqbiA6PC9zcGFuPjxzcGFuPjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDVcIj48L3NwYW4+PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc2NyaXB0OiAoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSA9PiB7XG4gICAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IG5vZGUub3Blbkdyb3VwKCkgfSk7XG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBvdXRwdXQ6IDJcbiAgfSxcbiAgbm9kZV9wcm9qZWN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLW9iamVjdC1ncm91cFwiPjwvaT4nLFxuICAgIHNvcnQ6IDAsXG4gICAgbmFtZTogJ1Byb2plY3QnLFxuICAgIGdyb3VwOiAnY29tbW9uJyxcbiAgICBodG1sOiAnPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHAzXCI+PHNlbGVjdCBjbGFzcz1cIm5vZGUtZm9ybS1jb250cm9sXCIgbm9kZTptb2RlbD1cInByb2plY3RcIj48L3NlbGVjdD48L2Rpdj4nLFxuICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGtleTogXCJwcm9qZWN0XCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIHNlbGVjdDogdHJ1ZSxcbiAgICAgICAgZGF0YVNlbGVjdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBtYWluLmdldFByb2plY3RBbGwoKS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uR2V0KCdpZCcpLFxuICAgICAgICAgICAgICB0ZXh0OiBpdGVtLkdldCgnbmFtZScpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHNjcmlwdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cbiIsImltcG9ydCB7IERhdGFGbG93LCBJTWFpbiwgY29tcGFyZVNvcnQsIEV2ZW50RW51bSwgUHJvcGVydHlFbnVtLCBFdmVudEZsb3csIGdldFRpbWUsIFNjb3BlUm9vdCB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBOb2RlSXRlbSB9IGZyb20gXCIuLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcblxuZXhwb3J0IGNsYXNzIFN5c3RlbUJhc2UgaW1wbGVtZW50cyBJTWFpbiB7XG4gIHByaXZhdGUgJGRhdGE6IERhdGFGbG93ID0gbmV3IERhdGFGbG93KHRoaXMpO1xuICBwcml2YXRlICRwcm9qZWN0T3BlbjogRGF0YUZsb3cgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJHByb3BlcnRpZXM6IGFueSA9IHt9O1xuICBwcml2YXRlICRjb250cm9sOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBldmVudHM6IEV2ZW50RmxvdyA9IG5ldyBFdmVudEZsb3coKTtcbiAgcHJpdmF0ZSAkY29udHJvbENob29zZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgJGNoZWNrT3B0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgJGdyb3VwOiBhbnk7XG4gIHByaXZhdGUgJGluZGV4UHJvamVjdDogbnVtYmVyID0gLTE7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0uc29sdXRpb25dID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gZ2V0VGltZSgpXG4gICAgICB9LFxuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFByb3BlcnR5RW51bS5zb2x1dGlvblxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gYHNvbHV0aW9uLSR7Z2V0VGltZSgpfWAsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICB9LFxuICAgICAgcHJvamVjdHM6IHtcbiAgICAgICAgZGVmYXVsdDogW11cbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuJHByb3BlcnRpZXNbUHJvcGVydHlFbnVtLmxpbmVdID0ge1xuICAgICAga2V5OiB7XG4gICAgICAgIGRlZmF1bHQ6IFByb3BlcnR5RW51bS5saW5lXG4gICAgICB9LFxuICAgICAgZnJvbToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgZnJvbUluZGV4OiB7XG4gICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgIH0sXG4gICAgICB0bzoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgdG9JbmRleDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9XG4gICAgfTtcbiAgICAvL3NldCBwcm9qZWN0XG4gICAgdGhpcy4kcHJvcGVydGllc1tQcm9wZXJ0eUVudW0ubWFpbl0gPSB7XG4gICAgICBpZDoge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGBGbG93ICR7dGhpcy4kaW5kZXhQcm9qZWN0Kyt9YCxcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLm1haW5cbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZToge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfSxcbiAgICAgIGdyb3Vwczoge1xuICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgfSxcbiAgICAgIG5vZGVzOiB7XG4gICAgICAgIGRlZmF1bHQ6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS5ncm91cENhdmFzXSA9IHtcbiAgICAgIGtleToge1xuICAgICAgICBkZWZhdWx0OiBQcm9wZXJ0eUVudW0uZ3JvdXBDYXZhc1xuICAgICAgfSxcbiAgICAgIGdyb3VwOiB7XG4gICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICB9LFxuICAgICAgeDoge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBkZWZhdWx0OiAwXG4gICAgICB9LFxuICAgICAgem9vbToge1xuICAgICAgICBkZWZhdWx0OiAxXG4gICAgICB9LFxuICAgIH1cbiAgICB0aGlzLiRwcm9wZXJ0aWVzW1Byb3BlcnR5RW51bS52YXJpYWJsZV0gPSB7XG4gICAgICBrZXk6IHtcbiAgICAgICAgZGVmYXVsdDogUHJvcGVydHlFbnVtLnZhcmlhYmxlXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBgdmFyJHtnZXRUaW1lKCl9YFxuICAgICAgfSxcbiAgICAgIHR5cGU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gJ3RleHQnXG4gICAgICB9LFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gU2NvcGVSb290XG4gICAgICB9LFxuICAgICAgaW5pdGFsVmFsdWU6IHtcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgfVxuICAgIHRoaXMub25TYWZlKEV2ZW50RW51bS5ncm91cENoYW5nZSwgKHsgZ3JvdXAgfTogYW55KSA9PiB7XG4gICAgICB0aGlzLiRncm91cCA9IGdyb3VwO1xuICAgIH0pXG4gIH1cbiAgbmV3U29sdXRpb24oJG5hbWU6IHN0cmluZyA9ICcnKTogdm9pZCB7XG4gICAgdGhpcy4kaW5kZXhQcm9qZWN0ID0gMTtcbiAgICB0aGlzLm9wZW5Tb2x1dGlvbih7IG5hbWU6ICRuYW1lIH0pO1xuICB9XG4gIG9wZW5Tb2x1dGlvbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy4kZGF0YS5Jbml0RGF0YSgkZGF0YSwgdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5zb2x1dGlvbikpO1xuICAgIHRoaXMub3BlblByb2plY3QodGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJyk/LlswXSA/PyB7fSk7XG4gIH1cbiAgcmVtb3ZlVmFyaWFibGUodmFyaWJhbGU6IERhdGFGbG93KTogdm9pZCB7XG4gICAgdGhpcy4kcHJvamVjdE9wZW4/LlJlbW92ZSgndmFyaWFibGUnLCB2YXJpYmFsZSk7XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlVmFyaWFibGUsIHsgZGF0YTogdmFyaWJhbGUgfSk7XG4gIH1cbiAgYWRkVmFyaWFibGUoKTogRGF0YUZsb3cge1xuICAgIGxldCB2YXJpYmFsZSA9IG5ldyBEYXRhRmxvdyh0aGlzLCB7IGtleTogUHJvcGVydHlFbnVtLnZhcmlhYmxlLCBzY29wZTogdGhpcy5nZXRHcm91cEN1cnJlbnQoKT8uWzBdPy5pZCB9KTtcbiAgICB0aGlzLiRwcm9qZWN0T3Blbj8uQXBwZW5kKCd2YXJpYWJsZScsIHZhcmliYWxlKTtcbiAgICByZXR1cm4gdmFyaWJhbGU7XG4gIH1cbiAgbmV3VmFyaWFibGUoKTogRGF0YUZsb3cge1xuICAgIGxldCB2YXJpYmFsZSA9IHRoaXMuYWRkVmFyaWFibGUoKTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5jaGFuZ2VWYXJpYWJsZSwgeyBkYXRhOiB2YXJpYmFsZSB9KTtcbiAgICByZXR1cm4gdmFyaWJhbGU7XG4gIH1cbiAgZ2V0VmFyaWFibGUoKTogRGF0YUZsb3dbXSB7XG4gICAgbGV0IGFycjogYW55ID0gW107XG4gICAgaWYgKHRoaXMuJHByb2plY3RPcGVuKSB7XG4gICAgICBhcnIgPSB0aGlzLiRwcm9qZWN0T3Blbi5HZXQoXCJ2YXJpYWJsZVwiKTtcbiAgICAgIGlmICghYXJyKSB7XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICB0aGlzLiRwcm9qZWN0T3Blbi5TZXQoJ3ZhcmlhYmxlJywgYXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyci5maWx0ZXIoKGl0ZW06IGFueSkgPT4gdGhpcy5nZXRHcm91cEN1cnJlbnQoKS5maW5kSW5kZXgoKF9ncm91cDogYW55KSA9PiBfZ3JvdXAuaWQgPT0gaXRlbS5HZXQoJ3Njb3BlJykpID4gLTEpO1xuICB9XG4gIGdldEdyb3VwQ3VycmVudCgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLiRncm91cCA/PyBbXTtcbiAgfVxuICBleHBvcnRKc29uKCkge1xuICAgIHJldHVybiB0aGlzLiRkYXRhLnRvSnNvbigpO1xuICB9XG4gIHB1YmxpYyBjaGVja0luaXRPcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNoZWNrT3B0aW9uO1xuICB9XG4gIGluaXRPcHRpb24ob3B0aW9uOiBhbnksIGlzRGVmYXVsdDogYm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcbiAgICB0aGlzLiRjaGVja09wdGlvbiA9IHRydWU7XG4gICAgLy8gc2V0IGNvbnRyb2xcbiAgICB0aGlzLiRjb250cm9sID0gaXNEZWZhdWx0ID8geyAuLi5vcHRpb24/LmNvbnRyb2wgfHwge30sIC4uLkNvbnRyb2wgfSA6IHsgLi4ub3B0aW9uPy5jb250cm9sIHx8IHt9IH07XG4gICAgbGV0IGNvbnRyb2xUZW1wOiBhbnkgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLiRjb250cm9sKS5tYXAoKGtleSkgPT4gKHsgLi4udGhpcy4kY29udHJvbFtrZXldLCBrZXksIHNvcnQ6ICh0aGlzLiRjb250cm9sW2tleV0uc29ydCA9PT0gdW5kZWZpbmVkID8gOTk5OTkgOiB0aGlzLiRjb250cm9sW2tleV0uc29ydCkgfSkpLnNvcnQoY29tcGFyZVNvcnQpLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgY29udHJvbFRlbXBbaXRlbS5rZXldID0ge1xuICAgICAgICAuLi5pdGVtLFxuICAgICAgICBkb3Q6IHtcbiAgICAgICAgICBsZWZ0OiAxLFxuICAgICAgICAgIHRvcDogMSxcbiAgICAgICAgICByaWdodDogMSxcbiAgICAgICAgICBib3R0b206IDEsXG4gICAgICAgICAgLi4uaXRlbT8uZG90XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLiRwcm9wZXJ0aWVzW2Ake2l0ZW0ua2V5fWBdID0ge1xuICAgICAgICAuLi4oaXRlbS5wcm9wZXJ0aWVzIHx8IHt9KSxcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBnZXRUaW1lKClcbiAgICAgICAgfSxcbiAgICAgICAga2V5OiB7XG4gICAgICAgICAgZGVmYXVsdDogaXRlbS5rZXlcbiAgICAgICAgfSxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgIGRlZmF1bHQ6IGl0ZW0ua2V5LFxuICAgICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHtcbiAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGdyb3VwOiB7XG4gICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcbiAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMuJGNvbnRyb2wgPSBjb250cm9sVGVtcDtcbiAgfVxuICByZW5kZXJIdG1sKG5vZGU6IE5vZGVJdGVtLCBlbFBhcmVudDogRWxlbWVudCkge1xuICAgIGVsUGFyZW50LmlubmVySFRNTCA9IG5vZGUuZ2V0T3B0aW9uKCk/Lmh0bWw7XG4gIH1cbiAgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50cy5vblNhZmUoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZXZlbnRzLmRpc3BhdGNoKGV2ZW50LCBkZXRhaWxzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldENvbnRyb2xBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRyb2wgPz8ge307XG4gIH1cbiAgZ2V0UHJvamVjdEFsbCgpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuJGRhdGEuR2V0KCdwcm9qZWN0cycpID8/IFtdO1xuICB9XG4gIGltcG9ydEpzb24oZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vcGVuU29sdXRpb24oZGF0YSk7XG4gIH1cbiAgc2V0UHJvamVjdE9wZW4oJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGlmICh0aGlzLiRwcm9qZWN0T3BlbiAhPSAkZGF0YSkge1xuICAgICAgdGhpcy4kcHJvamVjdE9wZW4gPSAkZGF0YTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLmNoYW5nZSwge1xuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5zaG93UHJvcGVydHksIHtcbiAgICAgICAgZGF0YTogJGRhdGFcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0ub3BlblByb2plY3QsIHtcbiAgICAgICAgZGF0YTogJGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjaGVja1Byb2plY3RPcGVuKCRkYXRhOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4kcHJvamVjdE9wZW4gPT0gJGRhdGE7XG4gIH1cbiAgbmV3UHJvamVjdCgpOiB2b2lkIHtcbiAgICB0aGlzLm9wZW5Qcm9qZWN0KHt9KTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5uZXdQcm9qZWN0LCB7fSk7XG4gIH1cbiAgb3BlblByb2plY3QoJGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGxldCAkcHJvamVjdDogYW55ID0gbnVsbDtcbiAgICBpZiAoJGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgJHByb2plY3QgPSB0aGlzLmdldFByb2plY3RCeUlkKCRkYXRhLkdldCgnaWQnKSk7XG4gICAgICBpZiAoISRwcm9qZWN0KSB7XG4gICAgICAgICRwcm9qZWN0ID0gJGRhdGE7XG4gICAgICAgIHRoaXMuJGRhdGEuQXBwZW5kKCdwcm9qZWN0cycsICRwcm9qZWN0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJHByb2plY3QgPSBuZXcgRGF0YUZsb3codGhpcyk7XG4gICAgICAkcHJvamVjdC5Jbml0RGF0YSgkZGF0YSwgdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5KFByb3BlcnR5RW51bS5tYWluKSk7XG4gICAgICB0aGlzLiRkYXRhLkFwcGVuZCgncHJvamVjdHMnLCAkcHJvamVjdCk7XG4gICAgfVxuICAgIHRoaXMuc2V0UHJvamVjdE9wZW4oJHByb2plY3QpO1xuICB9XG4gIHB1YmxpYyByZW1vdmVQcm9qZWN0KCRkYXRhOiBhbnkpIHtcbiAgICBsZXQgcHJvamVjdERhdGEgPSAkZGF0YTtcbiAgICBpZiAoJGRhdGEgaW5zdGFuY2VvZiBEYXRhRmxvdykge1xuICAgICAgcHJvamVjdERhdGEgPSB0aGlzLmdldFByb2plY3RCeUlkKCRkYXRhLkdldCgnaWQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2plY3REYXRhID0gdGhpcy5nZXRQcm9qZWN0QnlJZCgkZGF0YS5HZXQoJ2lkJykpO1xuICAgIH1cbiAgICB0aGlzLiRkYXRhLlJlbW92ZSgncHJvamVjdHMnLCBwcm9qZWN0RGF0YSk7XG4gICAgaWYgKHRoaXMuY2hlY2tQcm9qZWN0T3Blbihwcm9qZWN0RGF0YSkpIHtcbiAgICAgIHRoaXMuJHByb2plY3RPcGVuID0gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJyk/LlswXTtcbiAgICAgIGlmICghdGhpcy4kcHJvamVjdE9wZW4pIHtcbiAgICAgICAgdGhpcy5uZXdQcm9qZWN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaChFdmVudEVudW0uY2hhbmdlLCB7XG4gICAgICBkYXRhOiB0aGlzLiRwcm9qZWN0T3BlblxuICAgIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2goRXZlbnRFbnVtLnNob3dQcm9wZXJ0eSwge1xuICAgICAgZGF0YTogdGhpcy4kcHJvamVjdE9wZW5cbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoKEV2ZW50RW51bS5vcGVuUHJvamVjdCwge1xuICAgICAgZGF0YTogdGhpcy4kcHJvamVjdE9wZW5cbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgZ2V0UHJvamVjdEJ5SWQoJGlkOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy4kZGF0YS5HZXQoJ3Byb2plY3RzJykuZmlsdGVyKChpdGVtOiBEYXRhRmxvdykgPT4gaXRlbS5HZXQoJ2lkJykgPT09ICRpZCk/LlswXTtcbiAgfVxuICBzZXRDb250cm9sQ2hvb3NlKGtleTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMuJGNvbnRyb2xDaG9vc2UgPSBrZXk7XG4gIH1cbiAgZ2V0Q29udHJvbENob29zZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbENob29zZTtcbiAgfVxuICBnZXRDb250cm9sQnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udHJvbFtrZXldIHx8IHt9O1xuICB9XG4gIGdldENvbnRyb2xOb2RlQnlLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5nZXRDb250cm9sQnlLZXkoa2V5KSxcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMuZ2V0UHJvcGVydHlCeUtleShgJHtrZXl9YClcbiAgICB9XG4gIH1cbiAgZ2V0UHJvcGVydHlCeUtleShrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLiRwcm9wZXJ0aWVzW2tleV07XG4gIH1cbn1cbiIsImltcG9ydCB7IE5vZGVJdGVtIH0gZnJvbSBcIi4uL2Rlc2dpbmVyL2luZGV4XCI7XG5pbXBvcnQgeyBTeXN0ZW1CYXNlIH0gZnJvbSBcIi4vU3lzdGVtQmFzZVwiO1xuZXhwb3J0IGNsYXNzIFN5c3RlbVZ1ZSBleHRlbmRzIFN5c3RlbUJhc2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXI6IGFueSkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgcmVuZGVySHRtbChub2RlOiBOb2RlSXRlbSwgZWxQYXJlbnQ6IEVsZW1lbnQpIHtcbiAgICBpZiAocGFyc2VJbnQodGhpcy5yZW5kZXIudmVyc2lvbikgPT09IDMpIHtcbiAgICAgIC8vVnVlIDNcbiAgICAgIGxldCB3cmFwcGVyID0gdGhpcy5yZW5kZXIuaChub2RlLmdldE9wdGlvbigpPy5odG1sLCB7IC4uLihub2RlLmdldE9wdGlvbigpPy5wcm9wcyA/PyB7fSksIG5vZGUgfSwgKG5vZGUuZ2V0T3B0aW9uKCk/Lm9wdGlvbnMgPz8ge30pKTtcbiAgICAgIHdyYXBwZXIuYXBwQ29udGV4dCA9IGVsUGFyZW50O1xuICAgICAgdGhpcy5yZW5kZXIucmVuZGVyKHdyYXBwZXIsIGVsUGFyZW50KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBWdWUgMlxuICAgICAgbGV0IHdyYXBwZXIgPSBuZXcgdGhpcy5yZW5kZXIoe1xuICAgICAgICBwYXJlbnQ6IGVsUGFyZW50LFxuICAgICAgICByZW5kZXI6IChoOiBhbnkpID0+IGgobm9kZS5nZXRPcHRpb24oKT8uaHRtbCwgeyBwcm9wczogeyAuLi4obm9kZS5nZXRPcHRpb24oKT8ucHJvcHMgPz8ge30pLCBub2RlIH0gfSksXG4gICAgICAgIC4uLihub2RlLmdldE9wdGlvbigpPy5vcHRpb25zID8/IHt9KVxuICAgICAgfSkuJG1vdW50KClcbiAgICAgIC8vXG4gICAgICBlbFBhcmVudC5hcHBlbmRDaGlsZCh3cmFwcGVyLiRlbCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhRmxvdywgRXZlbnRFbnVtLCBJTWFpbiB9IGZyb20gXCIuLi9jb3JlL2luZGV4XCI7XG5pbXBvcnQgeyBkb3dubG9hZE9iamVjdEFzSnNvbiwgZ2V0VGltZSwgcmVhZEZpbGVMb2NhbCB9IGZyb20gXCIuLi9jb3JlL1V0aWxzXCI7XG5pbXBvcnQgeyBQcm9qZWN0VmlldyB9IGZyb20gXCIuLi9kZXNnaW5lci9Qcm9qZWN0Vmlld1wiO1xuaW1wb3J0IHsgRG9ja0Jhc2UgfSBmcm9tIFwiLi9Eb2NrQmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdERvY2sgZXh0ZW5kcyBEb2NrQmFzZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm90ZWN0ZWQgbWFpbjogSU1haW4pIHtcbiAgICBzdXBlcihjb250YWluZXIsIG1haW4pO1xuICAgIHRoaXMuZWxOb2RlLmNsYXNzTGlzdC5hZGQoJ3ZzLXByb2plY3QnKTtcbiAgICB0aGlzLkJveEluZm8oJ1Byb2plY3QnLCAoZWxDb250ZW50OiBhbnkpID0+IHtcbiAgICAgIG5ldyBQcm9qZWN0VmlldyhlbENvbnRlbnQsIG1haW4pO1xuICAgIH0pO1xuICAgIGxldCAkbm9kZVJpZ2h0OiBIVE1MRWxlbWVudCB8IG51bGwgPSB0aGlzLmVsTm9kZS5xdWVyeVNlbGVjdG9yKCcudnMtYm94aW5mb19oZWFkZXIgLnZzLWJveGluZm9fYnV0dG9uJyk7XG4gICAgaWYgKCRub2RlUmlnaHQpIHtcbiAgICAgICRub2RlUmlnaHQuaW5uZXJIVE1MID0gYGA7XG4gICAgICBsZXQgYnV0dG9uTmV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b25OZXcuaW5uZXJIVE1MID0gYE5ld2A7XG4gICAgICBidXR0b25OZXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm1haW4ubmV3UHJvamVjdCgnJykpO1xuICAgICAgJG5vZGVSaWdodD8uYXBwZW5kQ2hpbGQoYnV0dG9uTmV3KTtcblxuICAgICAgbGV0IGJ1dHRvbkV4cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uRXhwb3J0LmlubmVySFRNTCA9IGBFeHBvcnRgO1xuICAgICAgYnV0dG9uRXhwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZG93bmxvYWRPYmplY3RBc0pzb24odGhpcy5tYWluLmV4cG9ydEpzb24oKSwgYHZzLXNvbHV0aW9uLSR7Z2V0VGltZSgpfWApKTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbkV4cG9ydCk7XG5cbiAgICAgIGxldCBidXR0b25JbXBvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGJ1dHRvbkltcG9ydC5pbm5lckhUTUwgPSBgSW1wb3J0YDtcbiAgICAgIGJ1dHRvbkltcG9ydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgcmVhZEZpbGVMb2NhbCgocnM6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChycykge1xuICAgICAgICAgICAgdGhpcy5tYWluLmltcG9ydEpzb24oSlNPTi5wYXJzZShycykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgICRub2RlUmlnaHQ/LmFwcGVuZENoaWxkKGJ1dHRvbkltcG9ydCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBWaXN1YWxGbG93IH0gZnJvbSBcIi4vVmlzdWFsRmxvd1wiO1xuaW1wb3J0ICogYXMgU3lzdGVtQmFzZSBmcm9tIFwiLi9zeXN0ZW1zL2luZGV4XCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4vY29yZS9pbmRleCc7XG5pbXBvcnQgKiBhcyBEZXNnaW5lciBmcm9tIFwiLi9kZXNnaW5lci9pbmRleFwiO1xuaW1wb3J0ICogYXMgRG9jayBmcm9tICcuL2RvY2svaW5kZXgnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBWaXN1YWxGbG93LFxuICAuLi5TeXN0ZW1CYXNlLFxuICAuLi5Db3JlLFxuICAuLi5Eb2NrLFxuICAuLi5EZXNnaW5lclxufTtcblxuIiwiaW1wb3J0IHsgSU1haW4gfSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgRG9ja01hbmFnZXIgfSBmcm9tICcuL2RvY2svRG9ja01hbmFnZXInO1xuaW1wb3J0IHsgU3lzdGVtQmFzZSB9IGZyb20gJy4vc3lzdGVtcy9TeXN0ZW1CYXNlJztcbmV4cG9ydCBjbGFzcyBWaXN1YWxGbG93IHtcbiAgcHJpdmF0ZSBtYWluOiBJTWFpbiB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSAkZG9ja01hbmFnZXI6IERvY2tNYW5hZ2VyO1xuICBwdWJsaWMgZ2V0RG9ja01hbmFnZXIoKTogRG9ja01hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLiRkb2NrTWFuYWdlcjtcbiAgfVxuICBwdWJsaWMgc2V0T3B0aW9uKGRhdGE6IGFueSwgaXNEZWZhdWx0OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHRoaXMubWFpbj8uaW5pdE9wdGlvbihkYXRhLCBpc0RlZmF1bHQpO1xuICAgIHRoaXMuJGRvY2tNYW5hZ2VyLnJlc2V0KCk7XG4gIH1cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudCwgbWFpbjogSU1haW4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm1haW4gPSBtYWluID8/IG5ldyBTeXN0ZW1CYXNlKCk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgndnMtY29udGFpbmVyJyk7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIgPSBuZXcgRG9ja01hbmFnZXIodGhpcy5jb250YWluZXIsIHRoaXMubWFpbik7XG4gICAgdGhpcy4kZG9ja01hbmFnZXIucmVzZXQoKTtcbiAgfVxuICBvblNhZmUoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub25TYWZlKGV2ZW50LCBjYWxsYmFjayk7XG4gIH1cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIHRoaXMubWFpbj8ub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVMaXN0ZW5lcihldmVudDogc3RyaW5nLCBjYWxsYmFjazogYW55KSB7XG4gICAgdGhpcy5tYWluPy5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIGRpc3BhdGNoKGV2ZW50OiBzdHJpbmcsIGRldGFpbHM6IGFueSkge1xuICAgIHRoaXMubWFpbj8uZGlzcGF0Y2goZXZlbnQsIGRldGFpbHMpO1xuICB9XG4gIHB1YmxpYyBnZXRNYWluKCk6IElNYWluIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5tYWluO1xuICB9XG4gIG5ld1NvbHV0aW9uKCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ubmV3U29sdXRpb24oJG5hbWUpO1xuICB9XG4gIG9wZW5Tb2x1dGlvbigkZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm9wZW5Tb2x1dGlvbigkZGF0YSk7XG4gIH1cbiAgbmV3UHJvamVjdCgkbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/Lm5ld1Byb2plY3QoJG5hbWUpO1xuICB9XG4gIG9wZW5Qcm9qZWN0KCRuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8ub3BlblByb2plY3QoJG5hbWUpO1xuICB9XG4gIGdldFByb2plY3RBbGwoKTogYW55W10gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZ2V0UHJvamVjdEFsbCgpO1xuICB9XG4gIHNldFByb2plY3RPcGVuKCRkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmdldE1haW4oKT8uc2V0UHJvamVjdE9wZW4oJGRhdGEpO1xuICB9XG4gIGltcG9ydEpzb24oZGF0YTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5nZXRNYWluKCk/LmltcG9ydEpzb24oZGF0YSk7XG4gIH1cbiAgZXhwb3J0SnNvbigpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmdldE1haW4oKT8uZXhwb3J0SnNvbigpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiRXZlbnRFbnVtIiwiaW5pdCIsImRhdGFDaGFuZ2UiLCJzaG93UHJvcGVydHkiLCJvcGVuUHJvamVjdCIsIm5ld1Byb2plY3QiLCJjaGFuZ2VWYXJpYWJsZSIsImNoYW5nZSIsImRpc3Bvc2UiLCJncm91cENoYW5nZSIsIkRvY2tFbnVtIiwibGVmdCIsInRvcCIsInZpZXciLCJib3R0b20iLCJyaWdodCIsIlByb3BlcnR5RW51bSIsIm1haW4iLCJzb2x1dGlvbiIsImxpbmUiLCJ2YXJpYWJsZSIsImdyb3VwQ2F2YXMiLCJTY29wZVJvb3QiLCJFdmVudEZsb3ciLCJldmVudHMiLCJjb25zdHJ1Y3RvciIsIm9uU2FmZSIsImV2ZW50IiwiY2FsbGJhY2siLCJ0aGlzIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImNvbnNvbGUiLCJlcnJvciIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsInB1c2giLCJsaXN0ZW5lckluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiZGV0YWlscyIsImZvckVhY2giLCJsaXN0ZW5lciIsIkRhdGFGbG93IiwicHJvcGVydHkiLCJkYXRhIiwicHJvcGVydGllcyIsImdldFByb3BlcnRpZXMiLCJsb2FkIiwiSW5pdERhdGEiLCJldmVudERhdGFDaGFuZ2UiLCJrZXkiLCJrZXlDaGlsZCIsInZhbHVlQ2hpbGQiLCJzZW5kZXJDaGlsZCIsImluZGV4IiwidmFsdWUiLCJzZW5kZXIiLCJSZW1vdmVFdmVudERhdGEiLCJpdGVtIiwiT25FdmVudERhdGEiLCJCaW5kRXZlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJTZXQiLCJpc0Rpc3BhdGNoIiwiU2V0RGF0YSIsImlzQ2xlYXJEYXRhIiwiJGRhdGEiLCJPYmplY3QiLCJrZXlzIiwiR2V0IiwiQXBwZW5kIiwiUmVtb3ZlIiwiZ2V0UHJvcGVydHlCeUtleSIsImRlZmF1bHQiLCJtYXAiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0pzb24iLCJycyIsImRlbGV0ZSIsIkZsb3dDb3JlIiwiR2V0SWQiLCJTZXRJZCIsImlkIiwiZWxOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiQ2hlY2tFbGVtZW50Q2hpbGQiLCJlbCIsImNvbnRhaW5zIiwiU2V0RGF0YUZsb3ciLCJSZW1vdmVEYXRhRXZlbnQiLCJzZXRUaW1lb3V0IiwidHlwZSIsIkJhc2VGbG93IiwicGFyZW50Iiwic3VwZXIiLCJnZXREYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJjb21wYXJlU29ydCIsImEiLCJiIiwic29ydCIsImlzRnVuY3Rpb24iLCJmbiIsIkZ1bmN0aW9uIiwiVGFnVmlldyIsIkRhdGFWaWV3Iiwia2V5TmFtZSIsImVsU3VnZ2VzdGlvbnMiLCJlbFN1Z2dlc3Rpb25zQ29udGVudCIsIm5vZGVFZGl0b3IiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJlZGl0Iiwic2VsZWN0Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnRFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJzaG93U3VnZ2VzdGlvbnMiLCJiaW5kRGF0YSIsImNoZWNrU2hvd1N1Z2dlc3Rpb25zIiwiaW5uZXJIVE1MIiwiYXJyIiwiZ2V0VmFyaWFibGUiLCJlbFVsIiwiZWxMaSIsImVsTGluayIsImFkZEV2ZW50TGlzdGVuZXIiLCJhbGVydCIsInR4dCIsInNlbGVjdGlvblN0YXJ0Iiwic3RhcnRJbmRleCIsImxhc3RJbmRleE9mIiwiZmxnIiwicmVtb3ZlQXR0cmlidXRlIiwiYmluZElucHV0IiwiYmluZCIsImJpbmRFdmVudCIsImRhdGFTZWxlY3QiLCJvcHRpb25zIiwidGV4dCIsIm9wdGlvbiIsInNjcmlwdCIsInNldE5vZGVWYWx1ZSIsImluY2x1ZGVzIiwidGFnTmFtZSIsImlubmVyVGV4dCIsIkRlbGV0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGF0aWMiLCJjaGlsZEVsZW1lbnRDb3VudCIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiTW92ZVR5cGUiLCJzIiwiaGV4RGlnaXRzIiwiaSIsInN1YnN0ciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImpvaW4iLCJtZXNzYWdlIiwib3B0aW9uYWxQYXJhbXMiLCJsb2ciLCJMaW5lIiwiZnJvbUluZGV4IiwidG8iLCJ0b0luZGV4IiwiY3JlYXRlRWxlbWVudE5TIiwiZWxQYXRoIiwiY3VydmF0dXJlIiwidGVtcCIsIlN0YXJ0U2VsZWN0ZWQiLCJzZXRBdHRyaWJ1dGVOUyIsImVsQ2FudmFzIiwiQWRkTGluZSIsInVwZGF0ZVRvIiwidG9feCIsInRvX3kiLCJ4IiwiZnJvbV94IiwieSIsImZyb21feSIsImdldFBvc3Rpc2lvbkRvdCIsImxpbmVDdXJ2ZSIsImNyZWF0ZUN1cnZhdHVyZSIsIlVwZGF0ZVVJIiwiQWN0aXZlIiwicmVtb3ZlIiwic3RhcnRfcG9zX3giLCJzdGFydF9wb3NfeSIsImVuZF9wb3NfeCIsImVuZF9wb3NfeSIsImN1cnZhdHVyZV92YWx1ZSIsImxpbmVfeCIsImxpbmVfeSIsImh4MSIsImFicyIsImh4MiIsIm5vZGVUaGlzIiwiUmVtb3ZlTGluZSIsImUiLCJzZXRMaW5lQ2hvb3NlIiwic2V0Tm9kZVRvIiwibm9kZSIsIkNsb25lIiwiY2hlY2tMaW5lRXhpc3RzIiwiRGVzZ2luZXJWaWV3X0V2ZW50IiwidGltZUZhc3RDbGljayIsInRhZ0luZ29yZSIsIm1vdmVUeXBlIiwiTm9uZSIsImZsZ0RyYXAiLCJmbGdNb3ZlIiwiYXZfeCIsImF2X3kiLCJwb3NfeCIsInBvc195IiwibW91c2VfeCIsIm1vdXNlX3kiLCJ0ZW1wTGluZSIsIkVuZE1vdmUiLCJNb3ZlIiwiU3RhcnRNb3ZlIiwiY29udGV4dG1lbnUiLCJub2RlX2Ryb3BFbmQiLCJub2RlX2RyYWdvdmVyIiwiem9vbV9lbnRlciIsImtleWRvd24iLCJldiIsInByZXZlbnREZWZhdWx0IiwiJGxvY2siLCJrZXlOb2RlIiwiZ2V0Q29udHJvbENob29zZSIsImRhdGFUcmFuc2ZlciIsImdldERhdGEiLCJlX3Bvc194IiwiZV9wb3NfeSIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsIkNhbGNYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiQ2FsY1kiLCJjaGVja09ubHlOb2RlIiwiQWRkTm9kZSIsImdyb3VwIiwiQ3VycmVudEdyb3VwIiwidXBkYXRlUG9zaXRpb24iLCJjdHJsS2V5IiwiZGVsdGFZIiwiem9vbV9vdXQiLCJ6b29tX2luIiwidGFyZ2V0IiwidG9Mb3dlckNhc2UiLCJDYW52YXMiLCJub2RlQ2hvb3NlIiwiZ2V0Tm9kZUNob29zZSIsIk5vZGUiLCJzZXROb2RlQ2hvb3NlIiwiZ2V0WCIsImdldFkiLCJzZXRYIiwic2V0WSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJub2RlRWwiLCJjbG9zZXN0Iiwibm9kZUlkIiwibm9kZVRvIiwiR2V0Tm9kZUJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwibWV0YUtleSIsImdldExpbmVDaG9vc2UiLCJOb2RlSXRlbSIsImdldE5hbWUiLCJDaGVja0tleSIsImdldERhdGFMaW5lIiwiYXJyTGluZSIsImZpbHRlciIsImVsQ29udGVudCIsImFyckRhdGFWaWV3IiwiZ2V0Q29udHJvbE5vZGVCeUtleSIsIm5hbWUiLCJyZW5kZXJVSSIsImNsYXNzIiwiZ2V0T3B0aW9uIiwiZGV0YWlsIiwiYWN0aXZlRWxlbWVudCIsImhpZGVUaXRsZSIsImljb24iLCJhZGROb2RlRG90IiwibnVtIiwic3RhcnQiLCJxdWVyeSIsIm5vZGVRdWVyeSIsIm5vZGVEb3QiLCJkb3QiLCJyZW5kZXJIdG1sIiwiQmluZEVsZW1lbnQiLCJvcGVuR3JvdXAiLCJpQ2hlY2siLCJ0ZW1weCIsInRlbXB5IiwiZWxEb3QiLCJSZW1vdmVOb2RlIiwiUmVuZGVyTGluZSIsIlpvb20iLCJEZXNnaW5lclZpZXciLCJnZXRab29tIiwiZ2V0RGF0YUdyb3VwIiwic2V0Wm9vbSIsImdyb3VwRGF0YSIsImxhc3RHcm91cE5hbWUiLCJncm91cHMiLCJkYXRhR3JvdXAiLCJHZXREYXRhQnlJZCIsImNoYW5nZUdyb3VwIiwiR2V0R3JvdXBOYW1lIiwiQmFja0dyb3VwIiwiUmVuZGVyVUkiLCJDdXJyZW50R3JvdXBEYXRhIiwibGluZUNob29zZSIsIm5vZGVzIiwiQWRkTm9kZUl0ZW0iLCJJbnNlcnROb2RlIiwiQ2xlYXJOb2RlIiwiR2V0RGF0YUFsbE5vZGUiLCJHZXREYXRhTm9kZSIsInpvb21fbGFzdF92YWx1ZSIsInRhYkluZGV4IiwiT3BlbiIsInVwZGF0ZVZpZXciLCJ6b29tIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJHZXRBbGxOb2RlIiwibnVtYmVyIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDb250cm9sQnlLZXkiLCJ6b29tX3JlZnJlc2giLCJ0ZW1wX3pvb20iLCJ6b29tX3Jlc2V0IiwiVmFyaWFibGVWaWV3IiwidmFyaWFibGVzIiwiUmVuZGVyIiwiVmFyaWFibGVJdGVtIiwiUmVuZGVyU2NvcGUiLCJnZXRHcm91cEN1cnJlbnQiLCJuYW1lSW5wdXQiLCJ0eXBlSW5wdXQiLCJzY29wZUlucHV0IiwidmFsdWVEZWZhdWx0SW5wdXQiLCJuYW1lQ29sdW1uIiwidHlwZUNvbHVtbiIsInNjb3BlQ29sdW1uIiwidmFsdWVEZWZhdWx0Q29sdW1uIiwiYnV0dG9uUmVtb3ZlIiwicmVtb3ZlVmFyaWFibGUiLCJidXR0b25SZW1vdmVDb2x1bW4iLCJwcmVwZW5kIiwiVG9vbGJveFZpZXciLCJjb250cm9scyIsImdldENvbnRyb2xBbGwiLCJncm91cE5hbWUiLCJpdGVtQm94IiwiX2l0ZW0iLCJub2RlSXRlbSIsImRyYWdTdGFydCIsImRyYWdlbmQiLCJzZXRDb250cm9sQ2hvb3NlIiwic2V0RGF0YSIsIlByb2plY3RWaWV3IiwiZ2V0UHJvamVjdEFsbCIsImNoZWNrUHJvamVjdE9wZW4iLCJzZXRQcm9qZWN0T3BlbiIsIlRhYlByb2plY3RWaWV3IiwiJGVsQm9ieSIsIiRlbFdhcnAiLCIkYnRuTmV4dCIsIiRidG5CYWNrIiwiJGJ0bkFkZCIsInNjcm9sbExlZnRDYWNoZSIsInNjcm9sbExlZnQiLCJmblVwZGF0ZVNjcm9sbCIsInBhc3NpdmUiLCJpdGVtQWN0aXZlIiwicHJvamVjdHMiLCJwcm9qZWN0IiwicHJvamVjdEl0ZW0iLCJwcm9qZWN0TmFtZSIsInByb2plY3RCdXR0b24iLCJwcm9qZWN0QnV0dG9uUmVtb3ZlIiwicmVtb3ZlUHJvamVjdCIsIkRvY2tCYXNlIiwiY29udGFpbmVyIiwiQm94SW5mbyIsInRpdGxlIiwiJGNhbGxiYWNrIiwiQ29udHJvbERvY2siLCJWYXJpYWJsZURvY2siLCIkbm9kZVJpZ2h0IiwiYnV0dG9uTmV3IiwibmV3VmFyaWFibGUiLCJQcm9wZXJ0eURvY2siLCJsYXN0RGF0YSIsImhpZGVLZXlzIiwic29ydEtleXMiLCJwcm9wZXJ0eUl0ZW0iLCJwcm9wZXJ0eUxhYmVsIiwicHJvcGVydHlWYWx1ZSIsIlZpZXdEb2NrIiwiVGFiRG9jayIsIkRvY2tNYW5hZ2VyIiwiJGRvY2tNYW5hZ2VyIiwicmVzZXQiLCJhZGREb2NrIiwiJGtleSIsIiR2aWV3IiwiJGl0ZW0iLCJDb250cm9sIiwibm9kZV9iZWdpbiIsImh0bWwiLCJvbmx5Tm9kZSIsIm5vZGVfZW5kIiwibm9kZV9pZiIsImNvbmRpdGlvbiIsIm5vZGVfZ3JvdXAiLCJvdXRwdXQiLCJub2RlX29wdGlvbiIsIm5vZGVfcHJvamVjdCIsIlN5c3RlbUJhc2UiLCIkcHJvamVjdE9wZW4iLCIkcHJvcGVydGllcyIsIiRjb250cm9sIiwiJGNvbnRyb2xDaG9vc2UiLCIkY2hlY2tPcHRpb24iLCIkZ3JvdXAiLCIkaW5kZXhQcm9qZWN0Iiwic2NvcGUiLCJpbml0YWxWYWx1ZSIsIm5ld1NvbHV0aW9uIiwiJG5hbWUiLCJvcGVuU29sdXRpb24iLCJ2YXJpYmFsZSIsImFkZFZhcmlhYmxlIiwiZmluZEluZGV4IiwiX2dyb3VwIiwiZXhwb3J0SnNvbiIsImNoZWNrSW5pdE9wdGlvbiIsImluaXRPcHRpb24iLCJpc0RlZmF1bHQiLCJjb250cm9sIiwiY29udHJvbFRlbXAiLCJsaW5lcyIsImVsUGFyZW50IiwiaW1wb3J0SnNvbiIsIiRwcm9qZWN0IiwiZ2V0UHJvamVjdEJ5SWQiLCJwcm9qZWN0RGF0YSIsIiRpZCIsInJlbmRlciIsInBhcnNlSW50IiwidmVyc2lvbiIsIndyYXBwZXIiLCJoIiwicHJvcHMiLCJhcHBDb250ZXh0IiwiJG1vdW50IiwiJGVsIiwiYnV0dG9uRXhwb3J0IiwiZG93bmxvYWRPYmplY3RBc0pzb24iLCJleHBvcnRPYmoiLCJleHBvcnROYW1lIiwiZGF0YVN0ciIsImVuY29kZVVSSUNvbXBvbmVudCIsImRvd25sb2FkQW5jaG9yTm9kZSIsImJvZHkiLCJjbGljayIsImJ1dHRvbkltcG9ydCIsImlucHV0RWwiLCJwYXJzZSIsImZyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsImZpbGVzIiwicmVhZEFzVGV4dCIsIlZpc3VhbEZsb3ciLCJnZXREb2NrTWFuYWdlciIsInNldE9wdGlvbiIsImdldE1haW4iLCJDb3JlIiwiRG9jayIsIkRlc2dpbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7dUNBQU8sTUFBTUEsRUFBWSxDQUN2QkMsS0FBTSxPQUNOQyxXQUFZLGFBQ1pDLGFBQWMsZUFDZEMsWUFBYSxjQUNiQyxXQUFZLGFBQ1pDLGVBQWdCLGlCQUNoQkMsT0FBUSxTQUNSQyxRQUFTLFVBQ1RDLFlBQWEsZUFHRkMsRUFBVyxDQUN0QkMsS0FBTSxVQUNOQyxJQUFLLFNBQ0xDLEtBQU0sVUFDTkMsT0FBUSxZQUNSQyxNQUFPLFlBR0lDLEVBQWUsQ0FDMUJDLEtBQU0sZUFDTkMsU0FBVSxnQkFDVkMsS0FBTSxZQUNOQyxTQUFVLGdCQUNWQyxXQUFZLG1CQUdEQyxFQUFZLGFDMUJaQyxFQUNIQyxPQUFjLEdBQ3RCQyxlQUVPQyxPQUFPQyxFQUFlQyxHQUMzQkMsS0FBS0MsZUFBZUgsRUFBT0MsR0FDM0JDLEtBQUtFLEdBQUdKLEVBQU9DLEdBR1ZHLEdBQUdKLEVBQWVDLEdBRXZCLE1BQXdCLG1CQUFiQSxH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
