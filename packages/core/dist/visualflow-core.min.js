/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow_core.js v0.0.1-beta
   * Released under the MIT license.
   */
var visualflow_core=function(){"use strict";class e{key(){return this.constructor.name}checkKey(e){return this.key()==e}name(){return this.constructor.name}icon(){return'<i class="fas fa-play"></i>'}group(){return"Common"}html(e,t){return""}script({elNode:e,main:t,node:o}){}properties(){}option(){}execute(e,t,o,r){}nextNode(e,t,o,r=null){if(e?.lines)for(let n of e.lines)n.from!=o||null!=r&&n.fromIndex!=r||t(n.to)}}class t extends e{key(){return"core_alert"}name(){return"Alert"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:o}){return'<div class="p10"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}execute(e,t,o,r){alert(t?.message),this.nextNode(t,r,e)}}class o extends e{key(){return"core_assign"}name(){return"Assign"}icon(){return'<i class="fas fa-bolt"></i>'}execute(e,t,o,r){this.nextNode(t,r,e)}}const r="core_begin";class n extends e{key(){return r}name(){return"Begin"}option(){return{onlyNode:!0,sort:0,dot:{left:0,top:0,right:1,bottom:0}}}execute(e,t,o,r){this.nextNode(t,r,e)}}class s extends e{key(){return"core_console"}name(){return"Console"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:o}){return'<div class="p10"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}execute(e,t,o,r){console.log(t?.message),this.nextNode(t,r,e)}}class i extends e{key(){return"core_end"}name(){return"End"}icon(){return'<i class="fas fa-stop"></i>'}option(){return{onlyNode:!0,sort:0,dot:{left:1,top:0,right:0,bottom:0}}}}class a extends e{key(){return"core_group"}name(){return"Group"}icon(){return'<i class="far fa-object-group"></i>'}html(e,t){return'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go to Group</button></div>'}script({elNode:e,main:t,node:o}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{o.parent.openGroup(o.GetId())}))}execute(e,t,o,r){const n=o.getGroupCurrent();o.setGroup(t.id),o.excute(),o.setGroup(n),this.nextNode(t,r,e)}}class d extends e{key(){return"core_if"}name(){return"If"}icon(){return'<i class="fas fa-equals"></i>'}properties(){return{condition:{key:"condition",edit:!0,default:1},cond:{key:"cond",edit:!0,sub:!0,default:1}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:o}){console.log(o.data.Get("condition"));let r=o.data.Get("condition"),n="";for(let e=0;e<r;e++)n=`${n}<div class="node-content-row"><input type="text" class="node-form-control" node:model="cond${50001+e}"/> <span style="text-align:right">Then</span><span><span class="node-dot" node="${50001+e}"></span></span></div>`;return n=`${n}<div class="node-content-row"><span style="text-align:right">Else</span><span><span class="node-dot" node="50000"></span></span></div>`,n=`${n}<div><button class="btnAddCondition">Add</div></div>`,n}script({elNode:e,main:t,node:o}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{o.data.Increase("condition")}))}}class c extends e{key(){return"core_project"}name(){return"Project"}icon(){return'<i class="fas fa-project-diagram"></i>'}properties(){return{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:o})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")})))}}}html(e,t){return'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>'}script({elNode:e,main:t,node:o}){}execute(e,t,o,r){const n=o.getProjectCurrent(),s=o.getGroupCurrent();o.setProject(t.project),o.excute(),o.setProject(n),o.setGroup(s),this.nextNode(t,r,e)}}class u extends e{key(){return"core_switch"}name(){return"Switch"}}class l extends class{nodes(){return[]}newNodes(){return this.nodes().map((e=>new e))}}{nodes(){return[n,i,o,d,u,t,s,c,a]}}const p="main_project",h="main_solution";class m{$data;$nodes=[];$project;$group="root";constructor(e=null){this.LoadData(e)}setProject(e){this.$project=e,this.$group="root"}getProject(){return this.$data.key===h?this.$data?.projects?.find((e=>e.id==this.$project)):this.$data.key===p?this.$data:void 0}setGroup(e){this.$group=e}getGroupCurrent(){return this.$group}getProjectCurrent(){return this.$project}getNodeInGroup(e=null){let t=e??this.$group;return this.getProject()?.nodes?.filter((e=>e.group==t))}getNodeById(e){return this.getNodeInGroup()?.filter((t=>t.id==e))?.[0]}getNodeByKey(e){return this.getNodeInGroup()?.filter((t=>t.key==e))?.[0]}LoadData(e){return e?(this.$data="string"==typeof e?JSON.parse(e):e,this.$data.key===h&&(this.$project=this.$data.project),this.$project||(this.$project=this.$data.projects?.[0]?.id),this):this}newSetup(e){this.Setup(new e)}Setup(e){this.$nodes=[...this.$nodes,...e.newNodes()]}getControlNodes(){return this.$nodes.map((e=>({key:"",name:"",group:"",html:"",script:"",properties:"",dot:{left:1,top:0,right:1,bottom:0},...e.option()??{},key:e.key(),name:e.name(),icon:e.icon(),group:e.group(),html:e.html,script:e.script,properties:e.properties()??{}})))}getWorkerNode(e){return this.$nodes?.filter((t=>t.checkKey(e)))?.[0]}excuteNode(e){const t=this.getNodeById(e);this.excuteDataNode(t)}excuteDataNode(e){if(e){console.log(e);this.getWorkerNode(e.key)?.execute(e.id,e,this,this.excuteNode.bind(this))}}excute(){const e=this.getNodeByKey("core_begin");this.excuteDataNode(e)}}const g=new m;return g.newSetup(l),{CoreSetup:l,WorkerManager:m,workerManager:g}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
