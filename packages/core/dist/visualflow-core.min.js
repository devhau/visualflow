/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow_core.js v0.0.1-beta
   * Released under the MIT license.
   */
var visualflow_core=function(){"use strict";var e;!function(e){e[e.All=0]="All",e[e.Web=1]="Web",e[e.PC=2]="PC",e[e.Cloud=3]="Cloud",e[e.Mobile=4]="Mobile",e[e.IOS=5]="IOS",e[e.Android=6]="Android"}(e||(e={}));class t{env(){return[e.All,e.Cloud,e.PC,e.Web,e.Mobile,e.IOS,e.Android]}CheckEnv(e){return this.env().includes(e)}key(){return this.constructor.name}checkKey(e){return this.key()==e}name(){return this.constructor.name}icon(){return'<i class="fas fa-play"></i>'}group(){return"Common"}html({elNode:e,main:t,node:n}){return""}script({elNode:e,main:t,node:n}){}properties(){}option(){}async execute(e,t,n,o){}async nextNode(e,t,n,o=null){if(e?.lines)for(let s of e.lines)s.from!=n||null!=o&&s.fromIndex!=o||await t(s.to)}}class n extends t{key(){return"core_alert"}name(){return"Alert"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){alert(n.Val(t?.message)),await this.nextNode(t,o,e)}}class o extends t{key(){return"core_assign"}name(){return"Assign"}icon(){return'<i class="fas fa-bolt"></i>'}properties(){return{env_name:{key:"env_name",edit:!0,default:""},env_value:{key:"env_value",edit:!0,default:""}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){return'<div class="node-content-row">\n    <div class="pl10 pr0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_name"/> </div>\n    <div class="flex-none p2 text-center">=</div>\n    <div class="pr10 pl0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_value"/></div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>'}async execute(e,t,n,o){await this.nextNode(t,o,e)}}const s="core_begin";class r extends t{key(){return s}name(){return"Begin"}option(){return{onlyNode:!0,sort:0,dot:{left:0,top:0,right:1,bottom:0}}}async execute(e,t,n,o){await this.nextNode(t,o,e)}}class i extends t{key(){return"core_console"}name(){return"Console"}icon(){return'<i class="fas fa-terminal"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){console.log(n.Val(t?.message)),await this.nextNode(t,o,e)}}class a extends t{key(){return"core_delay"}name(){return"Delay"}icon(){return'<i class="fas fa-stopwatch"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4 display-flex"><input type="text" class="node-form-control" node:model="number_delay"/><span class="p4">ms</span></div>'}properties(){return{number_delay:{key:"number_delay",edit:!0,default:1e3}}}async execute(e,t,n,o){await n.delay(n.Val(t?.number_delay)),await this.nextNode(t,o,e)}}class d extends t{key(){return"core_end"}name(){return"End"}icon(){return'<i class="fas fa-stop"></i>'}option(){return{onlyNode:!0,sort:0,dot:{left:1,top:0,right:0,bottom:0}}}}class l extends t{key(){return"core_for"}name(){return"For"}icon(){return'<i class="fas fa-circle-notch"></i>'}properties(){return{number_start:{key:"number_start",edit:!0,default:1},number_end:{key:"number_end",edit:!0,default:1},number_step:{key:"number_step",edit:!0,default:1},env_name:{key:"env_name",edit:!0,default:"loop_index"}}}html({elNode:e,main:t,node:n}){return'\n      <div class="display-flex">\n        <div class="flex-none pl10 pr0 pt4 pb2 text-center" >For</div>\n        <div class="pl2 pr0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_start" /> </div>\n        <div class="flex-none pl2 pr0 pt4 pb2 text-center" >To </div>\n        <div class="pr2 pl0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_end" /></div>\n        <div class="flex-none pl2 pr0 pt42 pb2 text-center" >Step</div>\n        <div class="pr10 pl0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_step" /></div>\n      </div>\n      <div class="text-center p3">\n        <button class="btnGoGroup node-form-control">Go to Content</button>\n      </div>'}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}));const o=`temp_${n.GetId()}_env_name`,s=t.temp.Get(o);s?n.data.Get("env_name")!=s&&(t.changeVariableName(s,n.data.Get("env_name"),n.GetId()),t.temp.Set(o,n.data.Get("env_name"))):(t.temp.Set(o,n.data.Get("env_name")),t.newVariable(n.data.Get("env_name"),n.GetId()))}async execute(e,t,n,o){const s=n.getGroupCurrent();n.setGroup(t.id);for(let e=t.number_start;e<t.number_end&&!n.flgStopping;e+=t.number_step)await n.excuteAsync();n.setGroup(s),await this.nextNode(t,o,e)}}class c extends t{key(){return"core_group"}name(){return"Group"}icon(){return'<i class="far fa-object-group"></i>'}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go to Group</button></div>'}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}))}async execute(e,t,n,o){const s=n.getGroupCurrent();n.setGroup(t.id),await n.excuteAsync(),n.setGroup(s),await this.nextNode(t,o,e)}}class p extends t{key(){return"core_if"}name(){return"If"}icon(){return'<i class="fas fa-equals"></i>'}properties(){return{condition:{key:"condition",edit:!0,default:1},cond:{key:"cond",edit:!0,sub:!0,default:1}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){const o=n.data.Get("condition");let s="";for(let e=0;e<o;e++)s=`${s}<div class="node-content-row">\n      <div class="pl10 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="cond${50001+e}"/></div>\n      <div style="text-align:right" class="pl1 pr10 pt2 pb2">Then</div>\n      <div><span class="node-dot" node="${50001+e}"></span></div>\n      </div>`;return s=`${s}<div class="node-content-row">\n    <div class="pl10 pr1 pt2 pb2"><button class="btnAddCondition">Add</button></div>\n    <div style="text-align:right" class="pl1 pr10 pt2 pb2">Else</div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>`,s}script({elNode:e,main:t,node:n}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{n.data.Increase("condition")}))}async execute(e,t,n,o){const s=t.condition;for(let r=0;r<s&&!n.flgStopping;r++){let s=50001+r;const i=t[`cond${s}`];if(1==n.Val(i))return void await this.nextNode(t,o,e,s)}await this.nextNode(t,o,e,5e4)}}class u extends t{key(){return"core_project"}name(){return"Project"}icon(){return'<i class="fas fa-project-diagram"></i>'}properties(){return{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:n})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")})))}}}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>'}script({elNode:e,main:t,node:n}){}async execute(e,t,n,o){const s=n.getProjectCurrent(),r=n.getGroupCurrent();n.setProject(t.project),await n.excuteAsync(),n.setProject(s),n.setGroup(r),await this.nextNode(t,o,e)}}class m extends t{key(){return"core_switch"}name(){return"Switch"}icon(){return'<i class="fas fa-random"></i>'}properties(){return{condition:{key:"condition",edit:!0,default:1},case:{key:"case",edit:!0,sub:!0,default:1},case_input:{key:"case_input",edit:!0,default:""}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){const o=n.data.Get("condition");let s="";s=`${s}<div class="node-content-row">\n    <div style="text-align:right" class="pl10 pr1 pt2 pb2">Input</div>\n    <div class="pl2 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="case_input"/></div>\n    <div></div>\n    </div>`;for(let e=0;e<o;e++)s=`${s}<div class="node-content-row">\n      <div style="text-align:right" class="pl10 pr1 pt2 pb2">Case</div>\n      <div class="pl2 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="case${50001+e}"/></div>\n      <div><span class="node-dot" node="${50001+e}"></span></div>\n      </div>`;return s=`${s}<div class="node-content-row">\n    <div class="pl10 pr1 pt2 pb2"><button class="btnAddCondition">Add</button></div>\n    <div style="text-align:right" class="pl2 pr10 pt2 pb2">Default</div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>`,s}script({elNode:e,main:t,node:n}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{n.data.Increase("condition")}))}async execute(e,t,n,o){const s=t.condition,r=n.Val(t.case_input);for(let i=0;i<s&&!n.flgStopping;i++){let s=50001+i;const a=t[`case${s}`];if(n.Val(a)==r)return void await this.nextNode(t,o,e,s)}await this.nextNode(t,o,e,5e4)}}class h extends class{nodes(){return[]}newNodes(){return this.nodes().map((e=>new e))}}{nodes(){return[r,d,o,a,p,m,l,n,i,u,c]}}const v=eval,f="main_project",y="main_solution";class g{events={};onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const n=this.events[e].listeners,o=n.indexOf(t);o>-1&&n.splice(o,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}$data;$nodes=[];$project;$group="root";delay_time=100;constructor(e=null){this.LoadData(e)}setProject(e){this.$project=e,this.$group="root"}getProject(){return this.$data.key===y?this.$data?.projects?.find((e=>e.id==this.$project)):this.$data.key===f?this.$data:void 0}setGroup(e){this.$group=e}getGroupCurrent(){return this.$group}getProjectCurrent(){return this.$project}getNodeInGroup(e=null){let t=e??this.$group;return this.getProject()?.nodes?.filter((e=>e.group==t))}getNodeById(e){return this.getNodeInGroup()?.filter((t=>t.id==e))?.[0]}getNodeByKey(e){return this.getNodeInGroup()?.filter((t=>t.key==e))?.[0]}LoadData(e){return e?(this.$data="string"==typeof e?JSON.parse(e):e,this.$data.key===y&&(this.$project=this.$data.project),this.$project||(this.$project=this.$data.projects?.[0]?.id),this):this}newSetup(e){this.Setup(new e)}Setup(e){this.$nodes=[...this.$nodes,...e.newNodes()]}getControlNodes(){return this.$nodes.map((e=>({key:"",name:"",group:"",html:"",script:"",properties:"",dot:{left:1,top:0,right:1,bottom:0},...e.option()??{},key:e.key(),name:e.name(),icon:e.icon(),group:e.group(),html:e.html,script:e.script,properties:e.properties()??{}})))}getWorkerNode(e){return this.$nodes?.filter((t=>t.checkKey(e)))?.[0]}async excuteNode(e){const t=this.getNodeById(e);await this.excuteDataNode(t)}delay(e=100){return new Promise((t=>setTimeout(t,e)))}async excuteDataNode(e){if(this.flgStopping)this.dispatch("worker_stopping",{});else if(await this.delay(this.delay_time),e){this.dispatch("node_start",{node:e});const t=this.getWorkerNode(e.key);await(t?.execute(e.id,e,this,this.excuteNode.bind(this))),this.dispatch("node_end",{node:e})}}async excuteAsync(){const e=this.getNodeByKey("core_begin");await this.excuteDataNode(e)}excute(){setTimeout((async()=>{this.dispatch("worker_start",{});try{this.flgStopping=!1,await this.excuteAsync(),this.flgStopping=!1,this.dispatch("worker_end",{})}catch(e){console.log(e),this.dispatch("worker_end",{})}this.flgStopping=!1}))}flgStopping=null;stop(){this.flgStopping=!0}Val(e){let t=e;for(;`${t}`.indexOf("${")>=0;)t=v(t),console.log(t);return t=v(`${t}`),console.log(e,t),t}}const x=new g;return x.newSetup(h),{CoreSetup:h,WorkerManager:g,workerManager:x}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
