/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow_core.js v0.0.1
   * Released under the MIT license.
   */
var visualflow_core=function(){"use strict";var e;!function(e){e[e.All=0]="All",e[e.Web=1]="Web",e[e.PC=2]="PC",e[e.Cloud=3]="Cloud",e[e.Mobile=4]="Mobile",e[e.IOS=5]="IOS",e[e.Android=6]="Android"}(e||(e={}));class t{env(){return[e.All,e.Cloud,e.PC,e.Web,e.Mobile,e.IOS,e.Android]}CheckEnv(e){return this.env().includes(e)}key(){return this.constructor.name}checkKey(e){return this.key()==e}name(){return this.constructor.name}icon(){return'<i class="fas fa-play"></i>'}group(){return"Common"}html({elNode:e,main:t,node:n}){return""}script({elNode:e,main:t,node:n}){}properties(){}option(){}async execute(e,t,n,o){}async nextNode(e,t,n,o=null){if(e?.lines)for(let r of e.lines)r.from!=n||null!=o&&r.fromIndex!=o||await t(r.to)}}class n extends t{key(){return"core_alert"}name(){return"Alert"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){alert(n.getText(t?.message,e)),await this.nextNode(t,o,e)}}class o extends t{key(){return"core_assign"}name(){return"Assign"}icon(){return'<i class="fas fa-bolt"></i>'}properties(){return{env_name:{key:"env_name",text:"name",edit:!0,var:!0,default:""},env_value:{key:"env_value",text:"value",edit:!0,default:""},env_scorp:{key:"env_scorp",text:"scorp",edit:!0,select:!0,selectNone:"Select scorp",default:"",dataSelect:({elNode:e,main:t,node:n})=>t.getGroupCurrent().map((e=>({value:e.id,text:e.text})))}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){return'<div class="node-content-row">\n    <div class="pl10 pr0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_name"/> </div>\n    <div class="flex-none p2 text-center">=</div>\n    <div class="pr10 pl0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_value"/></div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>'}async execute(e,t,n,o){n.setVariableObject(t.env_name,n.runCode(t.env_value,e),t.env_scorp??e),await this.nextNode(t,o,e)}}const r="core_begin";class s extends t{key(){return r}name(){return"Begin"}option(){return{onlyNode:!0,sort:0,dot:{left:0,top:0,right:1,bottom:0}}}async execute(e,t,n,o){await this.nextNode(t,o,e)}}class i extends t{key(){return"core_console"}name(){return"Console"}icon(){return'<i class="fas fa-terminal"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){console.log(n.getText(t?.message,e)),await this.nextNode(t,o,e)}}class a extends t{key(){return"core_delay"}name(){return"Delay"}icon(){return'<i class="fas fa-stopwatch"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pr10 pl10 pb4 display-flex"><input type="text" class="node-form-control" node:model="number_delay"/><span class="p4">ms</span></div>'}properties(){return{number_delay:{key:"number_delay",edit:!0,default:1e3}}}async execute(e,t,n,o){await n.delay(n.runCode(t?.number_delay,e)),await this.nextNode(t,o,e)}}class d extends t{key(){return"core_end"}name(){return"End"}icon(){return'<i class="fas fa-stop"></i>'}option(){return{onlyNode:!0,sort:0,dot:{left:1,top:0,right:0,bottom:0}}}}class l extends t{key(){return"core_for"}name(){return"For"}icon(){return'<i class="fas fa-circle-notch"></i>'}properties(){return{number_start:{key:"number_start",edit:!0,default:1},number_end:{key:"number_end",edit:!0,default:10},number_step:{key:"number_step",edit:!0,default:1},env_name:{key:"env_name",edit:!0,default:"loop_index"}}}html({elNode:e,main:t,node:n}){return'\n      <div class="display-flex">\n        <div class="flex-none pl10 pr0 pt4 pb2 text-center" >For</div>\n        <div class="pl2 pr0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_start" /> </div>\n        <div class="flex-none pl2 pr0 pt4 pb2 text-center" >To </div>\n        <div class="pr2 pl0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_end" /></div>\n        <div class="flex-none pl2 pr0 pt42 pb2 text-center" >Step</div>\n        <div class="pr10 pl0 pt2 pb2" ><input type="text" class="node-form-control" node:model="number_step" /></div>\n      </div>\n      <div class="text-center p3">\n        <button class="btnGoGroupl">Go to Content</button>\n      </div>'}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}));const o=`temp_${n.GetId()}_env_name`,r=t.temp.Get(o);r?n.data.Get("env_name")!=r&&(t.changeVariableName(r,n.data.Get("env_name"),n.GetId()),t.temp.Set(o,n.data.Get("env_name"))):(t.temp.Set(o,n.data.Get("env_name")),t.newVariable(n.data.Get("env_name"),n.GetId()))}async execute(e,t,n,o){const r=n.getGroupCurrent();n.setGroup(t.id);const s=+n.getText(t.number_start,e),i=+n.getText(t.number_end,e),a=+n.getText(t.number_step,e);for(let o=s;o<=i&&!n.flgStopping;o+=a)n.setVariableObject(t.env_name,o,e),await n.excuteAsync();n.setGroup(r),await this.nextNode(t,o,e)}}class c extends t{key(){return"core_group"}name(){return"Group"}icon(){return'<i class="far fa-object-group"></i>'}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><button class="btnGoGroup">Go to Group</button></div>'}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}))}async execute(e,t,n,o){const r=n.getGroupCurrent();n.setGroup(t.id),await n.excuteAsync(),n.setGroup(r),await this.nextNode(t,o,e)}}class p extends t{key(){return"core_if"}name(){return"If"}icon(){return'<i class="fas fa-equals"></i>'}properties(){return{condition:{key:"condition",edit:!0,hide:!0,default:1},cond:{key:"cond",hide:!0,edit:!0,sub:!0,default:1}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){const o=n.data.Get("condition");let r="";for(let e=0;e<o;e++)r=`${r}<div class="node-content-row">\n      <div class="pl12 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="cond${50001+e}"/></div>\n      <div style="text-align:right" class="pl1 pr12 pt2 pb2">Then</div>\n      <div><span class="node-dot" node="${50001+e}"></span></div>\n      </div>`;return r=`${r}<div class="node-content-row">\n    <div class="pl10 pr1 pt2 pb2"><button class="btnAddCondition">Add</button></div>\n    <div style="text-align:right" class="pl1 pr12 pt2 pb2">Else</div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>`,r}script({elNode:e,main:t,node:n}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{n.data.Increase("condition")}))}async execute(e,t,n,o){const r=t.condition;for(let s=0;s<r&&!n.flgStopping;s++){let r=50001+s;const i=t[`cond${r}`];if(1==n.runCode(i,e))return void await this.nextNode(t,o,e,r)}await this.nextNode(t,o,e,5e4)}}class u extends t{key(){return"core_project"}name(){return"Project"}icon(){return'<i class="fas fa-project-diagram"></i>'}properties(){return{project:{key:"project",edit:!0,select:!0,selectNone:"Select project",default:"",dataSelect:({elNode:e,main:t,node:n})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")})))}}}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>'}script({elNode:e,main:t,node:n}){}async execute(e,t,n,o){const r=n.getProjectCurrent(),s=n.getGroupCurrent();n.setProject(t.project),await n.excuteAsync(),n.setProject(r),n.setGroup(s),await this.nextNode(t,o,e)}}class h extends t{key(){return"core_switch"}name(){return"Switch"}icon(){return'<i class="fas fa-random"></i>'}properties(){return{condition:{key:"condition",edit:!0,hide:!0,default:1},case:{key:"case",edit:!0,sub:!0,hide:!0,default:1},case_input:{key:"case_input",text:"Switch",edit:!0,default:""}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){const o=n.data.Get("condition");let r="";r=`${r}<div class="node-content-row">\n    <div style="text-align:right" class="pl10 pr1 pt2 pb2">Switch</div>\n    <div class="pl2 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="case_input"/></div>\n    <div></div>\n    </div>`;for(let e=0;e<o;e++)r=`${r}<div class="node-content-row">\n      <div style="text-align:right" class="pl12 pr10 pt2 pb2">Case</div>\n      <div class="pl2 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="case${50001+e}"/></div>\n      <div><span class="node-dot" node="${50001+e}"></span></div>\n      </div>`;return r=`${r}<div class="node-content-row">\n    <div class="pl12 pr1 pt2 pb2"><button class="btnAddCondition">Add</button></div>\n    <div style="text-align:right" class="pl2 pr10 pt2 pb2">Default</div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>`,r}script({elNode:e,main:t,node:n}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{n.data.Increase("condition")}))}async execute(e,t,n,o){const r=t.condition,s=n.getText(t.case_input,e);for(let i=0;i<r&&!n.flgStopping;i++){let r=50001+i;const a=t[`case${r}`];if(n.getText(a,e)==s)return void await this.nextNode(t,o,e,r)}await this.nextNode(t,o,e,5e4)}}class m extends t{key(){return"core_while"}name(){return"While"}icon(){return'<i class="fas fa-circle-notch"></i>'}html({elNode:e,main:t,node:n}){return'<div class="pl12 pr12 pt2 pb2"><input type="text" class="node-form-control" node:model="condition"/></div>\n      <div class="text-center p3" > <button class="btnGoGroup" > Go to Content </button></div > '}properties(){return{condition:{key:"condition",edit:!0,hide:!0,default:""}}}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}))}async execute(e,t,n,o){const r=n.getGroupCurrent();n.setGroup(t.id);const s=t.condition;for(;1==n.runCode(s,e)&&!n.flgStopping;)await n.excuteAsync();n.setGroup(r),await this.nextNode(t,o,e)}}class v extends class{nodes(){return[]}newNodes(){return this.nodes().map((e=>new e))}}{nodes(){return[s,d,o,a,p,h,l,m,n,i,u,c]}}class f{runCodeInBrowser(e,t){const n=this.GetTextInBrowser(e,t);try{return window.eval(n)}catch{}return n}GetTextInBrowser(e,t){let n="",o=[];t||(t={});for(let e of Object.keys(t))n=""!=n?`${n},${e}`:e,o=[...o,t[e]];return window.eval("(("+n+")=>(`"+e+"`))")(...o)}GetTextInNode(e,t){return""}runCodeInNode(e,t){const{VM:n}=require("vm2");return(new n).runInContext(e,t)}runCode(e,t){return null!=window&&null!=document?this.runCodeInBrowser(e,t):this.runCodeInNode(e,t)}getText(e,t){return null!=window&&null!=document?this.GetTextInBrowser(e,t):this.GetTextInNode(e,t)}}const y="main_project",g="main_solution";class x{events={};scriptCode=new f;variableValue={};onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const n=this.events[e].listeners,o=n.indexOf(t);o>-1&&n.splice(o,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}$data;$nodes=[];$project;$group="root";delay_time=100;constructor(e=null){this.LoadData(e)}setProject(e){if(this.$project=e,this.$group="root",void 0===this.variableValue[this.$project]){let e=this.getProjectById(this.$project);this.variableValue[this.$project]=e.variable.map((e=>({...e,value:e.initalValue})))}}getProjectById(e){return this.$data?.projects?.find((t=>t.id==e))}getProject(){return this.$data.key===g?this.getProjectById(this.$project):this.$data.key===y?this.$data:void 0}setGroup(e){this.$group=e}getGroupCurrent(){return this.$group}getProjectCurrent(){return this.$project}getNodeInGroup(e=null){let t=e??this.$group;return this.getProject()?.nodes?.filter((e=>e.group==t))}getNodeById(e){return this.getNodeInGroup()?.filter((t=>t.id==e))?.[0]}getNodeByKey(e){return this.getNodeInGroup()?.filter((t=>t.key==e))?.[0]}LoadData(e){return e?(this.variableValue={},this.$data="string"==typeof e?JSON.parse(e):e,this.$data.key===g&&(this.$project=this.$data.project),this.$project||(this.$project=this.$data.projects?.[0]?.id),this.setProject(this.$project),this):this}newSetup(e){this.Setup(new e)}Setup(e){this.$nodes=[...this.$nodes,...e.newNodes()]}getControlNodes(){return this.$nodes.map((e=>({key:"",name:"",group:"",html:"",script:"",properties:"",dot:{left:1,top:0,right:1,bottom:0},...e.option()??{},key:e.key(),name:e.name(),icon:e.icon(),group:e.group(),html:e.html,script:e.script,properties:e.properties()??{}})))}getWorkerNode(e){return this.$nodes?.filter((t=>t.checkKey(e)))?.[0]}async excuteNode(e){const t=this.getNodeById(e);await this.excuteDataNode(t)}delay(e=100){return new Promise((t=>setTimeout(t,e)))}async excuteDataNode(e){if(this.flgStopping)this.dispatch("worker_stopping",{});else if(await this.delay(this.delay_time),e){this.dispatch("node_start",{node:e});const t=this.getWorkerNode(e.key);await(t?.execute(e.id,e,this,this.excuteNode.bind(this))),this.dispatch("node_end",{node:e})}}async excuteAsync(){const e=this.getNodeByKey("core_begin");await this.excuteDataNode(e)}excute(){setTimeout((async()=>{this.dispatch("worker_start",{});try{this.flgStopping=!1,await this.excuteAsync(),this.flgStopping=!1,this.dispatch("worker_end",{})}catch(e){console.log(e),this.dispatch("worker_end",{})}this.flgStopping=!1}))}flgStopping=null;stop(){this.flgStopping=!0}setVariableObject(e,t,n,o=null){let r=[n];for(;"root"!=n;){let e=this.getNodeById(n);e?(n=e.group,r=[...r,n]):(n="root",r=[...r,n])}let s=this.variableValue[o??this.$project];const i=r.length-1;for(let n=0;n<=i;n++){let o=s.filter((t=>t.scope===r[n]&&t.name==e))?.[0];if(o)return void(o.value=t)}}getVariableObject(e,t=null){const n={};let o=[e];for(;"root"!=e;){let t=this.getNodeById(e);t?(e=t.group,o=[...o,e]):(e="root",o=[...o,e])}let r=this.variableValue[t??this.$project];for(let e=o.length-1;e>=0;e--)r.filter((t=>t.scope===o[e]))?.forEach((e=>{n[e.name]=e.value}));return n}runCode(e,t){const n=this.getVariableObject(t);return this.scriptCode.runCode(e,n)}getText(e,t){const n=this.getVariableObject(t);return this.scriptCode.getText(e,n)}}const b=new x;return b.newSetup(v),{CoreSetup:v,WorkerManager:x,workerManager:b}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
