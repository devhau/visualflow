/**
   * @license
   * author:nguyenvanhaudev@gmail.com (Nguyen Van Hau)
   * visualflow_core.js v0.0.1-beta
   * Released under the MIT license.
   */
var visualflow_core=function(){"use strict";var e;!function(e){e[e.All=0]="All",e[e.Web=1]="Web",e[e.PC=2]="PC",e[e.Cloud=3]="Cloud",e[e.Mobile=4]="Mobile",e[e.IOS=5]="IOS",e[e.Android=6]="Android"}(e||(e={}));class t{env(){return[e.All,e.Cloud,e.PC,e.Web,e.Mobile,e.IOS,e.Android]}CheckEnv(e){return this.env().includes(e)}key(){return this.constructor.name}checkKey(e){return this.key()==e}name(){return this.constructor.name}icon(){return'<i class="fas fa-play"></i>'}group(){return"Common"}html({elNode:e,main:t,node:n}){return""}script({elNode:e,main:t,node:n}){}properties(){}option(){}async execute(e,t,n,o){}async nextNode(e,t,n,o=null){if(e?.lines)for(let s of e.lines)s.from!=n||null!=o&&s.fromIndex!=o||await t(s.to)}}class n extends t{key(){return"core_alert"}name(){return"Alert"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:n}){return'<div class="p10"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){alert(t?.message),await this.nextNode(t,o,e)}}class o extends t{key(){return"core_assign"}name(){return"Assign"}icon(){return'<i class="fas fa-bolt"></i>'}properties(){return{env_name:{key:"env_name",edit:!0,default:""},env_value:{key:"env_value",edit:!0,default:""}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){return'<div class="node-content-row">\n    <div class="pl10 pr0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_name"/> </div>\n    <div class="flex-none p2 text-center">=</div>\n    <div class="pr10 pl0 pt2 pb2"><input type="text" class="node-form-control" node:model="env_value"/></div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>'}async execute(e,t,n,o){await this.nextNode(t,o,e)}}const s="core_begin";class r extends t{key(){return s}name(){return"Begin"}option(){return{onlyNode:!0,sort:0,dot:{left:0,top:0,right:1,bottom:0}}}async execute(e,t,n,o){await this.nextNode(t,o,e)}}class i extends t{key(){return"core_console"}name(){return"Console"}icon(){return'<i class="fas fa-bell"></i>'}html({elNode:e,main:t,node:n}){return'<div class="p10"><input type="text" class="node-form-control" node:model="message"/></div>'}properties(){return{message:{key:"message",edit:!0,default:""}}}async execute(e,t,n,o){console.log(t?.message),await this.nextNode(t,o,e)}}class a extends t{key(){return"core_end"}name(){return"End"}icon(){return'<i class="fas fa-stop"></i>'}option(){return{onlyNode:!0,sort:0,dot:{left:1,top:0,right:0,bottom:0}}}}class d extends t{key(){return"core_for"}name(){return"For"}icon(){return'<i class="fas fa-long-arrow-alt-right"></i>'}async execute(e,t,n,o){await this.nextNode(t,o,e)}}class c extends t{key(){return"core_group"}name(){return"Group"}icon(){return'<i class="far fa-object-group"></i>'}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><button class="btnGoGroup node-form-control">Go to Group</button></div>'}script({elNode:e,main:t,node:n}){e.querySelector(".btnGoGroup")?.addEventListener("click",(()=>{n.parent.openGroup(n.GetId())}))}async execute(e,t,n,o){const s=n.getGroupCurrent();n.setGroup(t.id),await n.excuteAsync(),n.setGroup(s),await this.nextNode(t,o,e)}}class l extends t{key(){return"core_if"}name(){return"If"}icon(){return'<i class="fas fa-equals"></i>'}properties(){return{condition:{key:"condition",edit:!0,default:1},cond:{key:"cond",edit:!0,sub:!0,default:1}}}option(){return{class:"",dot:{left:1,top:0,right:0,bottom:0}}}html({elNode:e,main:t,node:n}){let o=n.data.Get("condition"),s="";for(let e=0;e<o;e++)s=`${s}<div class="node-content-row">\n      <div class="pl10 pr1 pt2 pb2"><input type="text" class="node-form-control" node:model="cond${50001+e}"/></div>\n      <div style="text-align:right" class="p2">Then</div>\n      <div><span class="node-dot" node="${50001+e}"></span></div>\n      </div>`;return s=`${s}<div class="node-content-row">\n    <div class="pl10 pr1 pt2 pb2"><button class="btnAddCondition">Add</button></div>\n    <div style="text-align:right" class="p2">Else</div>\n    <div><span class="node-dot" node="50000"></span></div>\n    </div>`,s}script({elNode:e,main:t,node:n}){e.querySelector(".btnAddCondition")?.addEventListener("click",(()=>{n.data.Increase("condition")}))}}class u extends t{key(){return"core_project"}name(){return"Project"}icon(){return'<i class="fas fa-project-diagram"></i>'}properties(){return{project:{key:"project",edit:!0,select:!0,dataSelect:({elNode:e,main:t,node:n})=>t.getProjectAll().map((e=>({value:e.Get("id"),text:e.Get("name")})))}}}html({elNode:e,main:t,node:n}){return'<div class="text-center p3"><select class="node-form-control" node:model="project"></select></div>'}script({elNode:e,main:t,node:n}){}async execute(e,t,n,o){const s=n.getProjectCurrent(),r=n.getGroupCurrent();n.setProject(t.project),await n.excuteAsync(),n.setProject(s),n.setGroup(r),await this.nextNode(t,o,e)}}class p extends t{key(){return"core_switch"}name(){return"Switch"}}class h extends class{nodes(){return[]}newNodes(){return this.nodes().map((e=>new e))}}{nodes(){return[r,a,o,l,p,d,n,i,u,c]}}const m="main_project",g="main_solution";class y{events={};onSafe(e,t){this.removeListener(e,t),this.on(e,t)}on(e,t){return"function"!=typeof t?(console.error("The listener callback must be a function, the given type is "+typeof t),!1):"string"!=typeof e?(console.error("The event name must be a string, the given type is "+typeof e),!1):(void 0===this.events[e]&&(this.events[e]={listeners:[]}),void this.events[e].listeners.push(t))}removeListener(e,t){if(!this.events[e])return!1;const n=this.events[e].listeners,o=n.indexOf(t);o>-1&&n.splice(o,1)}dispatch(e,t){if(void 0===this.events[e])return!1;this.events[e].listeners.forEach((e=>{e(t)}))}$data;$nodes=[];$project;$group="root";delay_time=100;constructor(e=null){this.LoadData(e)}setProject(e){this.$project=e,this.$group="root"}getProject(){return this.$data.key===g?this.$data?.projects?.find((e=>e.id==this.$project)):this.$data.key===m?this.$data:void 0}setGroup(e){this.$group=e}getGroupCurrent(){return this.$group}getProjectCurrent(){return this.$project}getNodeInGroup(e=null){let t=e??this.$group;return this.getProject()?.nodes?.filter((e=>e.group==t))}getNodeById(e){return this.getNodeInGroup()?.filter((t=>t.id==e))?.[0]}getNodeByKey(e){return this.getNodeInGroup()?.filter((t=>t.key==e))?.[0]}LoadData(e){return e?(this.$data="string"==typeof e?JSON.parse(e):e,this.$data.key===g&&(this.$project=this.$data.project),this.$project||(this.$project=this.$data.projects?.[0]?.id),this):this}newSetup(e){this.Setup(new e)}Setup(e){this.$nodes=[...this.$nodes,...e.newNodes()]}getControlNodes(){return this.$nodes.map((e=>({key:"",name:"",group:"",html:"",script:"",properties:"",dot:{left:1,top:0,right:1,bottom:0},...e.option()??{},key:e.key(),name:e.name(),icon:e.icon(),group:e.group(),html:e.html,script:e.script,properties:e.properties()??{}})))}getWorkerNode(e){return this.$nodes?.filter((t=>t.checkKey(e)))?.[0]}async excuteNode(e){const t=this.getNodeById(e);await this.excuteDataNode(t)}delay(e=100){return new Promise((t=>setTimeout(t,e)))}async excuteDataNode(e){if(this.flgStopping)this.dispatch("worker_stopping",{});else if(await this.delay(this.delay_time),e){this.dispatch("node_start",{node:e});const t=this.getWorkerNode(e.key);await(t?.execute(e.id,e,this,this.excuteNode.bind(this))),this.dispatch("node_end",{node:e})}}async excuteAsync(){const e=this.getNodeByKey("core_begin");await this.excuteDataNode(e)}excute(){setTimeout((async()=>{this.dispatch("worker_start",{});try{this.flgStopping=!1,await this.excuteAsync(),this.flgStopping=!1,this.dispatch("worker_end",{})}catch(e){console.log(e),this.dispatch("worker_end",{})}this.flgStopping=!1}))}flgStopping=null;stop(){this.flgStopping=!0}}const f=new y;return f.newSetup(h),{CoreSetup:h,WorkerManager:y,workerManager:f}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsZmxvdy1jb3JlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3dvcmtlci9ub2RlLnRzIiwiLi4vc3JjL25vZGVzL2FsZXJ0LnRzIiwiLi4vc3JjL25vZGVzL2Fzc2lnbi50cyIsIi4uL3NyYy9ub2Rlcy9iZWdpbi50cyIsIi4uL3NyYy9ub2Rlcy9jb25zb2xlLnRzIiwiLi4vc3JjL25vZGVzL2VuZC50cyIsIi4uL3NyYy9ub2Rlcy9mb3IudHMiLCIuLi9zcmMvbm9kZXMvZ3JvdXAudHMiLCIuLi9zcmMvbm9kZXMvaWYudHMiLCIuLi9zcmMvbm9kZXMvcHJvamVjdC50cyIsIi4uL3NyYy9ub2Rlcy9zd2l0Y2gudHMiLCIuLi9zcmMvbm9kZXMvaW5kZXgudHMiLCIuLi9zcmMvd29ya2VyL3NldHVwLnRzIiwiLi4vc3JjL3dvcmtlci9tYW5hZ2VyLnRzIiwiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tIFwiLi9tYW5hZ2VyXCI7XG5cbmV4cG9ydCBlbnVtIEVudk5vZGUge1xuICBBbGwgPSAwLFxuICBXZWIgPSAxLFxuICBQQyA9IDIsXG4gIENsb3VkID0gMyxcbiAgTW9iaWxlID0gNCxcbiAgSU9TID0gNSxcbiAgQW5kcm9pZCA9IDZcbn1cbmV4cG9ydCB0eXBlIE9wdGlvbk5vZGUgPSB2b2lkICYge1xuICBrZXk6IFwiXCIsXG4gIG5hbWU6IFwiXCIsXG4gIGdyb3VwOiBcIlwiLFxuICBodG1sOiBcIlwiLFxuICBzY3JpcHQ6IFwiXCIsXG4gIHByb3BlcnRpZXM6IFwiXCIsXG4gIG9ubHlOb2RlOiBib29sZWFuLFxuICBkb3Q6IHtcbiAgICBsZWZ0OiAxLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogMSxcbiAgICBib3R0b206IDAsXG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBXb3JrZXJOb2RlIHtcbiAgZW52KCk6IGFueVtdIHtcbiAgICByZXR1cm4gW0Vudk5vZGUuQWxsLCBFbnZOb2RlLkNsb3VkLCBFbnZOb2RlLlBDLCBFbnZOb2RlLldlYiwgRW52Tm9kZS5Nb2JpbGUsIEVudk5vZGUuSU9TLCBFbnZOb2RlLkFuZHJvaWRdO1xuICB9XG4gIHB1YmxpYyBDaGVja0VudihlbnY6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmVudigpLmluY2x1ZGVzKGVudik7XG4gIH1cbiAga2V5KCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuICBwdWJsaWMgY2hlY2tLZXkoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5rZXkoKSA9PSBrZXk7XG4gIH1cbiAgbmFtZSgpOiBhbnkgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lOyB9XG4gIGljb24oKTogYW55IHsgcmV0dXJuICc8aSBjbGFzcz1cImZhcyBmYS1wbGF5XCI+PC9pPic7IH1cbiAgZ3JvdXAoKTogYW55IHtcbiAgICByZXR1cm4gXCJDb21tb25cIjtcbiAgfVxuICBodG1sKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkge1xuICAgIHJldHVybiBgYDtcbiAgfVxuICBzY3JpcHQoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KSB7IH1cbiAgcHJvcGVydGllcygpOiBhbnkgeyB9XG4gIG9wdGlvbigpOiBhbnkgeyB9XG4gIGFzeW5jIGV4ZWN1dGUobm9kZUlkOiBhbnksIGRhdGE6IGFueSwgbWFuYWdlcjogV29ya2VyTWFuYWdlciwgbmV4dDogYW55KSB7XG5cbiAgfVxuICBwcm90ZWN0ZWQgYXN5bmMgbmV4dE5vZGUoZGF0YTogYW55LCBuZXh0OiBhbnksIG5vZGVJZDogYW55LCBpbmRleDogYW55ID0gbnVsbCkge1xuICAgIGlmIChkYXRhPy5saW5lcykge1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiBkYXRhLmxpbmVzKSB7XG4gICAgICAgIGlmIChpdGVtLmZyb20gPT0gbm9kZUlkICYmIChpbmRleCA9PSBudWxsIHx8IGl0ZW0uZnJvbUluZGV4ID09IGluZGV4KSkge1xuICAgICAgICAgIGF3YWl0IG5leHQoaXRlbS50byk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tIFwiLi4vd29ya2VyL21hbmFnZXJcIjtcbmltcG9ydCB7IFdvcmtlck5vZGUgfSBmcm9tIFwiLi4vd29ya2VyL25vZGVcIjtcblxuZXhwb3J0IGNsYXNzIENvcmVBbGVydE5vZGUgZXh0ZW5kcyBXb3JrZXJOb2RlIHtcbiAga2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiY29yZV9hbGVydFwiO1xuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQWxlcnRcIjtcbiAgfVxuICBpY29uKCkge1xuICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtYmVsbFwiPjwvaT4nO1xuICB9XG4gIGh0bWwoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJwMTBcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cIm5vZGUtZm9ybS1jb250cm9sXCIgbm9kZTptb2RlbD1cIm1lc3NhZ2VcIi8+PC9kaXY+JztcbiAgfVxuICBwcm9wZXJ0aWVzKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAga2V5OiBcIm1lc3NhZ2VcIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogXCJcIlxuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBleGVjdXRlKG5vZGVJZDogYW55LCBkYXRhOiBhbnksIG1hbmFnZXI6IFdvcmtlck1hbmFnZXIsIG5leHQ6IGFueSkge1xuICAgIGFsZXJ0KGRhdGE/Lm1lc3NhZ2UpO1xuICAgIGF3YWl0IHRoaXMubmV4dE5vZGUoZGF0YSwgbmV4dCwgbm9kZUlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gXCIuLi93b3JrZXIvbWFuYWdlclwiO1xuaW1wb3J0IHsgV29ya2VyTm9kZSB9IGZyb20gXCIuLi93b3JrZXIvbm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29yZUFzc2lnbk5vZGUgZXh0ZW5kcyBXb3JrZXJOb2RlIHtcbiAga2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiY29yZV9hc3NpZ25cIjtcbiAgfVxuICBuYW1lKCkge1xuICAgIHJldHVybiBcIkFzc2lnblwiO1xuICB9XG4gIGljb24oKSB7XG4gICAgcmV0dXJuICc8aSBjbGFzcz1cImZhcyBmYS1ib2x0XCI+PC9pPic7XG4gIH1cbiAgcHJvcGVydGllcygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBlbnZfbmFtZToge1xuICAgICAgICBrZXk6IFwiZW52X25hbWVcIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogXCJcIlxuICAgICAgfSxcbiAgICAgIGVudl92YWx1ZToge1xuICAgICAgICBrZXk6IFwiZW52X3ZhbHVlXCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIGRlZmF1bHQ6IFwiXCJcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb3B0aW9uKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzOiAnJyxcbiAgICAgIGRvdDoge1xuICAgICAgICBsZWZ0OiAxLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaHRtbCh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwicGwxMCBwcjAgcHQyIHBiMlwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwibm9kZS1mb3JtLWNvbnRyb2xcIiBub2RlOm1vZGVsPVwiZW52X25hbWVcIi8+IDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmbGV4LW5vbmUgcDIgdGV4dC1jZW50ZXJcIj49PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInByMTAgcGwwIHB0MiBwYjJcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cIm5vZGUtZm9ybS1jb250cm9sXCIgbm9kZTptb2RlbD1cImVudl92YWx1ZVwiLz48L2Rpdj5cbiAgICA8ZGl2PjxzcGFuIGNsYXNzPVwibm9kZS1kb3RcIiBub2RlPVwiNTAwMDBcIj48L3NwYW4+PC9kaXY+XG4gICAgPC9kaXY+YDtcbiAgfVxuICBhc3luYyBleGVjdXRlKG5vZGVJZDogYW55LCBkYXRhOiBhbnksIG1hbmFnZXI6IFdvcmtlck1hbmFnZXIsIG5leHQ6IGFueSkge1xuICAgIGF3YWl0IHRoaXMubmV4dE5vZGUoZGF0YSwgbmV4dCwgbm9kZUlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gXCIuLi93b3JrZXIvbWFuYWdlclwiO1xuaW1wb3J0IHsgV29ya2VyTm9kZSB9IGZyb20gXCIuLi93b3JrZXIvbm9kZVwiO1xuZXhwb3J0IGNvbnN0IE5vZGVCZWdpbiA9IFwiY29yZV9iZWdpblwiO1xuZXhwb3J0IGNsYXNzIENvcmVCZWdpbk5vZGUgZXh0ZW5kcyBXb3JrZXJOb2RlIHtcblxuICBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gTm9kZUJlZ2luO1xuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQmVnaW5cIjtcbiAgfVxuICBvcHRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9ubHlOb2RlOiB0cnVlLFxuICAgICAgc29ydDogMCxcbiAgICAgIGRvdDoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAxLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBhc3luYyBleGVjdXRlKG5vZGVJZDogYW55LCBkYXRhOiBhbnksIG1hbmFnZXI6IFdvcmtlck1hbmFnZXIsIG5leHQ6IGFueSkge1xuICAgIGF3YWl0IHRoaXMubmV4dE5vZGUoZGF0YSwgbmV4dCwgbm9kZUlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gXCIuLi93b3JrZXIvbWFuYWdlclwiO1xuaW1wb3J0IHsgV29ya2VyTm9kZSB9IGZyb20gXCIuLi93b3JrZXIvbm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29yZUNvbnNvbGVOb2RlIGV4dGVuZHMgV29ya2VyTm9kZSB7XG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcImNvcmVfY29uc29sZVwiO1xuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQ29uc29sZVwiO1xuICB9XG4gIGljb24oKSB7XG4gICAgcmV0dXJuICc8aSBjbGFzcz1cImZhcyBmYS1iZWxsXCI+PC9pPic7XG4gIH1cbiAgaHRtbCh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiAnPGRpdiBjbGFzcz1cInAxMFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwibm9kZS1mb3JtLWNvbnRyb2xcIiBub2RlOm1vZGVsPVwibWVzc2FnZVwiLz48L2Rpdj4nO1xuICB9XG4gIHByb3BlcnRpZXMoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZToge1xuICAgICAgICBrZXk6IFwibWVzc2FnZVwiLFxuICAgICAgICBlZGl0OiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiBcIlwiXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFzeW5jIGV4ZWN1dGUobm9kZUlkOiBhbnksIGRhdGE6IGFueSwgbWFuYWdlcjogV29ya2VyTWFuYWdlciwgbmV4dDogYW55KSB7XG4gICAgY29uc29sZS5sb2coZGF0YT8ubWVzc2FnZSk7XG4gICAgYXdhaXQgdGhpcy5uZXh0Tm9kZShkYXRhLCBuZXh0LCBub2RlSWQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4uL3dvcmtlci9ub2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlRW5kTm9kZSBleHRlbmRzIFdvcmtlck5vZGUge1xuICBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJjb3JlX2VuZFwiO1xuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIFwiRW5kXCI7XG4gIH1cbiAgaWNvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtc3RvcFwiPjwvaT4nO1xuICB9XG4gIG9wdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25seU5vZGU6IHRydWUsXG4gICAgICBzb3J0OiAwLFxuICAgICAgZG90OiB7XG4gICAgICAgIGxlZnQ6IDEsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbn1cbiIsImltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tIFwiLi4vd29ya2VyL21hbmFnZXJcIjtcbmltcG9ydCB7IFdvcmtlck5vZGUgfSBmcm9tIFwiLi4vd29ya2VyL25vZGVcIjtcblxuZXhwb3J0IGNsYXNzIENvcmVGb3JOb2RlIGV4dGVuZHMgV29ya2VyTm9kZSB7XG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcImNvcmVfZm9yXCI7XG4gIH1cbiAgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJGb3JcIjtcbiAgfVxuICBpY29uKCkge1xuICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+JztcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGUobm9kZUlkOiBhbnksIGRhdGE6IGFueSwgbWFuYWdlcjogV29ya2VyTWFuYWdlciwgbmV4dDogYW55KSB7XG4gICAgYXdhaXQgdGhpcy5uZXh0Tm9kZShkYXRhLCBuZXh0LCBub2RlSWQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBXb3JrZXJNYW5hZ2VyIH0gZnJvbSBcIi4uL3dvcmtlci9tYW5hZ2VyXCI7XG5pbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4uL3dvcmtlci9ub2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlR3JvdXBOb2RlIGV4dGVuZHMgV29ya2VyTm9kZSB7XG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcImNvcmVfZ3JvdXBcIjtcbiAgfVxuICBuYW1lKCkge1xuICAgIHJldHVybiBcIkdyb3VwXCI7XG4gIH1cbiAgaWNvbigpIHtcbiAgICByZXR1cm4gJzxpIGNsYXNzPVwiZmFyIGZhLW9iamVjdC1ncm91cFwiPjwvaT4nO1xuICB9XG4gIGh0bWwoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBwM1wiPjxidXR0b24gY2xhc3M9XCJidG5Hb0dyb3VwIG5vZGUtZm9ybS1jb250cm9sXCI+R28gdG8gR3JvdXA8L2J1dHRvbj48L2Rpdj4nO1xuICB9XG4gIHNjcmlwdCh7IGVsTm9kZSwgbWFpbiwgbm9kZSB9OiBhbnkpOiB2b2lkIHtcbiAgICBlbE5vZGUucXVlcnlTZWxlY3RvcignLmJ0bkdvR3JvdXAnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBub2RlLnBhcmVudC5vcGVuR3JvdXAobm9kZS5HZXRJZCgpKTtcbiAgICB9KVxuICB9XG4gIGFzeW5jIGV4ZWN1dGUobm9kZUlkOiBhbnksIGRhdGE6IGFueSwgbWFuYWdlcjogV29ya2VyTWFuYWdlciwgbmV4dDogYW55KSB7XG4gICAgY29uc3QgZ3JvdXAgPSBtYW5hZ2VyLmdldEdyb3VwQ3VycmVudCgpO1xuICAgIG1hbmFnZXIuc2V0R3JvdXAoZGF0YS5pZCk7XG4gICAgYXdhaXQgbWFuYWdlci5leGN1dGVBc3luYygpO1xuICAgIG1hbmFnZXIuc2V0R3JvdXAoZ3JvdXApO1xuICAgIGF3YWl0IHRoaXMubmV4dE5vZGUoZGF0YSwgbmV4dCwgbm9kZUlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgV29ya2VyTm9kZSB9IGZyb20gXCIuLi93b3JrZXIvbm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29yZUlmTm9kZSBleHRlbmRzIFdvcmtlck5vZGUge1xuICBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJjb3JlX2lmXCI7XG4gIH1cbiAgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJJZlwiO1xuICB9XG4gIGljb24oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJzxpIGNsYXNzPVwiZmFzIGZhLWVxdWFsc1wiPjwvaT4nO1xuICB9XG4gIHByb3BlcnRpZXMoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgIGtleTogXCJjb25kaXRpb25cIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogMVxuICAgICAgfSxcbiAgICAgIGNvbmQ6IHtcbiAgICAgICAga2V5OiBcImNvbmRcIixcbiAgICAgICAgZWRpdDogdHJ1ZSxcbiAgICAgICAgc3ViOiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiAxXG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9wdGlvbigpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzczogJycsXG4gICAgICBkb3Q6IHtcbiAgICAgICAgbGVmdDogMSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgfVxuICAgIH1cbiAgfVxuICBodG1sKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IGNvbmRpdGlvbiA9IG5vZGUuZGF0YS5HZXQoJ2NvbmRpdGlvbicpO1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvbmRpdGlvbjsgaW5kZXgrKykge1xuICAgICAgaHRtbCA9IGAke2h0bWx9PGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwbDEwIHByMSBwdDIgcGIyXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJub2RlLWZvcm0tY29udHJvbFwiIG5vZGU6bW9kZWw9XCJjb25kJHs1MDAwMSArIGluZGV4fVwiLz48L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0XCIgY2xhc3M9XCJwMlwiPlRoZW48L2Rpdj5cbiAgICAgIDxkaXY+PHNwYW4gY2xhc3M9XCJub2RlLWRvdFwiIG5vZGU9XCIkezUwMDAxICsgaW5kZXh9XCI+PC9zcGFuPjwvZGl2PlxuICAgICAgPC9kaXY+YDtcbiAgICB9XG4gICAgaHRtbCA9IGAke2h0bWx9PGRpdiBjbGFzcz1cIm5vZGUtY29udGVudC1yb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwicGwxMCBwcjEgcHQyIHBiMlwiPjxidXR0b24gY2xhc3M9XCJidG5BZGRDb25kaXRpb25cIj5BZGQ8L2J1dHRvbj48L2Rpdj5cbiAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodFwiIGNsYXNzPVwicDJcIj5FbHNlPC9kaXY+XG4gICAgPGRpdj48c3BhbiBjbGFzcz1cIm5vZGUtZG90XCIgbm9kZT1cIjUwMDAwXCI+PC9zcGFuPjwvZGl2PlxuICAgIDwvZGl2PmA7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cbiAgc2NyaXB0KHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSk6IHZvaWQge1xuICAgIGVsTm9kZS5xdWVyeVNlbGVjdG9yKCcuYnRuQWRkQ29uZGl0aW9uJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgbm9kZS5kYXRhLkluY3JlYXNlKCdjb25kaXRpb24nKTtcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBXb3JrZXJNYW5hZ2VyIH0gZnJvbSBcIi4uL3dvcmtlci9tYW5hZ2VyXCI7XG5pbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4uL3dvcmtlci9ub2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlUHJvamVjdE5vZGUgZXh0ZW5kcyBXb3JrZXJOb2RlIHtcbiAga2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiY29yZV9wcm9qZWN0XCI7XG4gIH1cbiAgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJQcm9qZWN0XCI7XG4gIH1cbiAgaWNvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnPGkgY2xhc3M9XCJmYXMgZmEtcHJvamVjdC1kaWFncmFtXCI+PC9pPic7XG4gIH1cbiAgcHJvcGVydGllcygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGtleTogXCJwcm9qZWN0XCIsXG4gICAgICAgIGVkaXQ6IHRydWUsXG4gICAgICAgIHNlbGVjdDogdHJ1ZSxcbiAgICAgICAgZGF0YVNlbGVjdDogKHsgZWxOb2RlLCBtYWluLCBub2RlIH06IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBtYWluLmdldFByb2plY3RBbGwoKS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uR2V0KCdpZCcpLFxuICAgICAgICAgICAgICB0ZXh0OiBpdGVtLkdldCgnbmFtZScpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGh0bWwoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBwM1wiPjxzZWxlY3QgY2xhc3M9XCJub2RlLWZvcm0tY29udHJvbFwiIG5vZGU6bW9kZWw9XCJwcm9qZWN0XCI+PC9zZWxlY3Q+PC9kaXY+JztcbiAgfVxuICBzY3JpcHQoeyBlbE5vZGUsIG1haW4sIG5vZGUgfTogYW55KTogdm9pZCB7XG5cbiAgfVxuICBhc3luYyBleGVjdXRlKG5vZGVJZDogYW55LCBkYXRhOiBhbnksIG1hbmFnZXI6IFdvcmtlck1hbmFnZXIsIG5leHQ6IGFueSkge1xuICAgIGNvbnN0IHByb2plY3QgPSBtYW5hZ2VyLmdldFByb2plY3RDdXJyZW50KCk7XG4gICAgY29uc3QgZ3JvdXAgPSBtYW5hZ2VyLmdldEdyb3VwQ3VycmVudCgpO1xuICAgIG1hbmFnZXIuc2V0UHJvamVjdChkYXRhLnByb2plY3QpO1xuICAgIGF3YWl0IG1hbmFnZXIuZXhjdXRlQXN5bmMoKTtcbiAgICBtYW5hZ2VyLnNldFByb2plY3QocHJvamVjdCk7XG4gICAgbWFuYWdlci5zZXRHcm91cChncm91cCk7XG4gICAgYXdhaXQgdGhpcy5uZXh0Tm9kZShkYXRhLCBuZXh0LCBub2RlSWQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4uL3dvcmtlci9ub2RlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlU3dpdGNoTm9kZSBleHRlbmRzIFdvcmtlck5vZGUge1xuICBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJjb3JlX3N3aXRjaFwiO1xuICB9XG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIFwiU3dpdGNoXCI7XG4gIH1cbn1cbiIsImltcG9ydCB7IFdvcmtlclNldHVwIH0gZnJvbSBcIi4uL3dvcmtlci9zZXR1cFwiO1xuaW1wb3J0IHsgQ29yZUFsZXJ0Tm9kZSB9IGZyb20gXCIuL2FsZXJ0XCI7XG5pbXBvcnQgeyBDb3JlQXNzaWduTm9kZSB9IGZyb20gXCIuL2Fzc2lnblwiO1xuaW1wb3J0IHsgQ29yZUJlZ2luTm9kZSB9IGZyb20gXCIuL2JlZ2luXCI7XG5pbXBvcnQgeyBDb3JlQ29uc29sZU5vZGUgfSBmcm9tIFwiLi9jb25zb2xlXCI7XG5pbXBvcnQgeyBDb3JlRW5kTm9kZSB9IGZyb20gXCIuL2VuZFwiO1xuaW1wb3J0IHsgQ29yZUZvck5vZGUgfSBmcm9tIFwiLi9mb3JcIjtcbmltcG9ydCB7IENvcmVHcm91cE5vZGUgfSBmcm9tIFwiLi9ncm91cFwiO1xuaW1wb3J0IHsgQ29yZUlmTm9kZSB9IGZyb20gXCIuL2lmXCI7XG5pbXBvcnQgeyBDb3JlUHJvamVjdE5vZGUgfSBmcm9tIFwiLi9wcm9qZWN0XCI7XG5pbXBvcnQgeyBDb3JlU3dpdGNoTm9kZSB9IGZyb20gXCIuL3N3aXRjaFwiO1xuXG5leHBvcnQgY2xhc3MgQ29yZVNldHVwIGV4dGVuZHMgV29ya2VyU2V0dXAge1xuICBub2RlcygpOiBhbnlbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIENvcmVCZWdpbk5vZGUsXG4gICAgICBDb3JlRW5kTm9kZSxcbiAgICAgIENvcmVBc3NpZ25Ob2RlLFxuICAgICAgQ29yZUlmTm9kZSxcbiAgICAgIENvcmVTd2l0Y2hOb2RlLFxuICAgICAgQ29yZUZvck5vZGUsXG4gICAgICBDb3JlQWxlcnROb2RlLFxuICAgICAgQ29yZUNvbnNvbGVOb2RlLFxuICAgICAgQ29yZVByb2plY3ROb2RlLFxuICAgICAgQ29yZUdyb3VwTm9kZSxcbiAgICBdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4vbm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgV29ya2VyU2V0dXAge1xuICBub2RlcygpOiBhbnlbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG5ld05vZGVzKCk6IFdvcmtlck5vZGVbXSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMoKS5tYXAoKGl0ZW0pID0+IChuZXcgaXRlbSgpKSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgTm9kZUJlZ2luIH0gZnJvbSBcIi4uL25vZGVzL2JlZ2luXCI7XG5pbXBvcnQgeyBXb3JrZXJOb2RlIH0gZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHsgV29ya2VyU2V0dXAgfSBmcm9tIFwiLi9zZXR1cFwiO1xuXG5cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUVudW0gPSB7XG4gIG1haW46IFwibWFpbl9wcm9qZWN0XCIsXG4gIHNvbHV0aW9uOiAnbWFpbl9zb2x1dGlvbicsXG4gIGxpbmU6ICdtYWluX2xpbmUnLFxuICB2YXJpYWJsZTogJ21haW5fdmFyaWFibGUnLFxuICBncm91cENhdmFzOiBcIm1haW5fZ3JvdXBDYXZhc1wiLFxufTtcbmV4cG9ydCBjbGFzcyBXb3JrZXJNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBldmVudHM6IGFueSA9IHt9O1xuICBwdWJsaWMgb25TYWZlKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgdGhpcy5vbihldmVudCwgY2FsbGJhY2spO1xuICB9XG4gIC8qIEV2ZW50cyAqL1xuICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIC8vIENoZWNrIGlmIHRoZSBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBsaXN0ZW5lciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24sIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGNhbGxiYWNrfWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiB0aGUgZXZlbnQgaXMgbm90IGEgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRoZSBldmVudCBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIHRoZSBnaXZlbiB0eXBlIGlzICR7dHlwZW9mIGV2ZW50fWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IHtcbiAgICAgICAgbGlzdGVuZXJzOiBbXVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmV2ZW50c1tldmVudF0ubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcblxuICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSByZXR1cm4gZmFsc2VcblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZXZlbnRzW2V2ZW50XS5saXN0ZW5lcnNcbiAgICBjb25zdCBsaXN0ZW5lckluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spXG4gICAgY29uc3QgaGFzTGlzdGVuZXIgPSBsaXN0ZW5lckluZGV4ID4gLTFcbiAgICBpZiAoaGFzTGlzdGVuZXIpIGxpc3RlbmVycy5zcGxpY2UobGlzdGVuZXJJbmRleCwgMSlcbiAgfVxuXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcbiAgICAvLyBDaGVjayBpZiB0aGlzIGV2ZW50IG5vdCBleGlzdHNcbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5ldmVudHNbZXZlbnRdLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiB7XG4gICAgICBsaXN0ZW5lcihkZXRhaWxzKTtcbiAgICB9KTtcbiAgfVxuICBwcml2YXRlICRkYXRhOiBhbnk7XG4gIHByaXZhdGUgJG5vZGVzOiBXb3JrZXJOb2RlW10gPSBbXTtcbiAgcHJpdmF0ZSAkcHJvamVjdDogYW55O1xuICBwcml2YXRlICRncm91cDogYW55ID0gXCJyb290XCI7XG4gIHByaXZhdGUgZGVsYXlfdGltZTogbnVtYmVyID0gMTAwO1xuICBwdWJsaWMgY29uc3RydWN0b3IoZGF0YTogYW55ID0gbnVsbCkge1xuICAgIHRoaXMuTG9hZERhdGEoZGF0YSk7XG4gIH1cbiAgcHVibGljIHNldFByb2plY3QocHJvamVjdDogYW55KSB7XG4gICAgdGhpcy4kcHJvamVjdCA9IHByb2plY3Q7XG4gICAgdGhpcy4kZ3JvdXAgPSBcInJvb3RcIjtcbiAgfVxuICBwdWJsaWMgZ2V0UHJvamVjdCgpIHtcbiAgICBpZiAodGhpcy4kZGF0YS5rZXkgPT09IFByb3BlcnR5RW51bS5zb2x1dGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMuJGRhdGE/LnByb2plY3RzPy5maW5kKChpdGVtOiBhbnkpID0+IGl0ZW0uaWQgPT0gdGhpcy4kcHJvamVjdCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiRkYXRhLmtleSA9PT0gUHJvcGVydHlFbnVtLm1haW4pIHtcbiAgICAgIHJldHVybiB0aGlzLiRkYXRhO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc2V0R3JvdXAoZ3JvdXA6IGFueSkge1xuICAgIHRoaXMuJGdyb3VwID0gZ3JvdXA7XG4gIH1cbiAgcHVibGljIGdldEdyb3VwQ3VycmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy4kZ3JvdXA7XG4gIH1cbiAgcHVibGljIGdldFByb2plY3RDdXJyZW50KCkge1xuICAgIHJldHVybiB0aGlzLiRwcm9qZWN0O1xuICB9XG4gIHB1YmxpYyBnZXROb2RlSW5Hcm91cChncm91cDogYW55ID0gbnVsbCkge1xuICAgIGxldCBfZ3JvdXAgPSBncm91cCA/PyB0aGlzLiRncm91cDtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9qZWN0KCk/Lm5vZGVzPy5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS5ncm91cCA9PSBfZ3JvdXApO1xuICB9XG4gIHB1YmxpYyBnZXROb2RlQnlJZChfaWQ6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmdldE5vZGVJbkdyb3VwKCk/LmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtLmlkID09IF9pZCk/LlswXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXROb2RlQnlLZXkoX2tleTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZUluR3JvdXAoKT8uZmlsdGVyKChpdGVtOiBhbnkpID0+IGl0ZW0ua2V5ID09IF9rZXkpPy5bMF07XG4gIH1cbiAgcHVibGljIExvYWREYXRhKGRhdGE6IGFueSk6IFdvcmtlck1hbmFnZXIge1xuICAgIGlmICghZGF0YSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy4kZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBpZiAodGhpcy4kZGF0YS5rZXkgPT09IFByb3BlcnR5RW51bS5zb2x1dGlvbikge1xuICAgICAgdGhpcy4kcHJvamVjdCA9IHRoaXMuJGRhdGEucHJvamVjdDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiRwcm9qZWN0KSB7XG4gICAgICB0aGlzLiRwcm9qZWN0ID0gdGhpcy4kZGF0YS5wcm9qZWN0cz8uWzBdPy5pZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcHVibGljIG5ld1NldHVwKHNldHVwOiBhbnkpIHtcbiAgICB0aGlzLlNldHVwKG5ldyBzZXR1cCgpKTtcbiAgfVxuICBwdWJsaWMgU2V0dXAoc2V0dXA6IFdvcmtlclNldHVwKSB7XG4gICAgdGhpcy4kbm9kZXMgPSBbLi4udGhpcy4kbm9kZXMsIC4uLnNldHVwLm5ld05vZGVzKCldO1xuICB9XG4gIHB1YmxpYyBnZXRDb250cm9sTm9kZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuJG5vZGVzLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi57XG4gICAgICAgICAga2V5OiBcIlwiLFxuICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgZ3JvdXA6IFwiXCIsXG4gICAgICAgICAgaHRtbDogXCJcIixcbiAgICAgICAgICBzY3JpcHQ6IFwiXCIsXG4gICAgICAgICAgcHJvcGVydGllczogXCJcIixcbiAgICAgICAgICBkb3Q6IHtcbiAgICAgICAgICAgIGxlZnQ6IDEsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogMSxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLml0ZW0ub3B0aW9uKCkgPz8ge30sXG4gICAgICAgIGtleTogaXRlbS5rZXkoKSxcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lKCksXG4gICAgICAgIGljb246IGl0ZW0uaWNvbigpLFxuICAgICAgICBncm91cDogaXRlbS5ncm91cCgpLFxuICAgICAgICBodG1sOiBpdGVtLmh0bWwsXG4gICAgICAgIHNjcmlwdDogaXRlbS5zY3JpcHQsXG4gICAgICAgIHByb3BlcnRpZXM6IGl0ZW0ucHJvcGVydGllcygpID8/IHt9LFxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgcHJpdmF0ZSBnZXRXb3JrZXJOb2RlKF9rZXk6IHN0cmluZyk6IFdvcmtlck5vZGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy4kbm9kZXM/LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5jaGVja0tleShfa2V5KSk/LlswXTtcbiAgfVxuICBwcml2YXRlIGFzeW5jIGV4Y3V0ZU5vZGUoJGlkOiBhbnkpIHtcbiAgICBjb25zdCBkYXRhTm9kZSA9IHRoaXMuZ2V0Tm9kZUJ5SWQoJGlkKTtcbiAgICBhd2FpdCB0aGlzLmV4Y3V0ZURhdGFOb2RlKGRhdGFOb2RlKTtcbiAgfVxuICBkZWxheSh0aW1lOiBudW1iZXIgPSAxMDApIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpKTtcbiAgfVxuICBwcml2YXRlIGFzeW5jIGV4Y3V0ZURhdGFOb2RlKGRhdGFOb2RlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5mbGdTdG9wcGluZykge1xuICAgICAgdGhpcy5kaXNwYXRjaCgnd29ya2VyX3N0b3BwaW5nJywge30pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmRlbGF5KHRoaXMuZGVsYXlfdGltZSk7XG4gICAgaWYgKGRhdGFOb2RlKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKCdub2RlX3N0YXJ0JywgeyBub2RlOiBkYXRhTm9kZSB9KTtcbiAgICAgIGNvbnN0IHdvcmtlck5vZGUgPSB0aGlzLmdldFdvcmtlck5vZGUoZGF0YU5vZGUua2V5KTtcbiAgICAgIGF3YWl0IHdvcmtlck5vZGU/LmV4ZWN1dGUoZGF0YU5vZGUuaWQsIGRhdGFOb2RlLCB0aGlzLCB0aGlzLmV4Y3V0ZU5vZGUuYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLmRpc3BhdGNoKCdub2RlX2VuZCcsIHsgbm9kZTogZGF0YU5vZGUgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBhc3luYyBleGN1dGVBc3luYygpIHtcbiAgICBjb25zdCBkYXRhTm9kZSA9IHRoaXMuZ2V0Tm9kZUJ5S2V5KGAke05vZGVCZWdpbn1gKTtcbiAgICBhd2FpdCB0aGlzLmV4Y3V0ZURhdGFOb2RlKGRhdGFOb2RlKTtcbiAgfVxuICBwdWJsaWMgZXhjdXRlKCkge1xuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaCgnd29ya2VyX3N0YXJ0Jywge30pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5mbGdTdG9wcGluZyA9IGZhbHNlO1xuICAgICAgICBhd2FpdCB0aGlzLmV4Y3V0ZUFzeW5jKCk7XG4gICAgICAgIHRoaXMuZmxnU3RvcHBpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnd29ya2VyX2VuZCcsIHt9KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGV4KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnd29ya2VyX2VuZCcsIHt9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmxnU3RvcHBpbmcgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBmbGdTdG9wcGluZzogYW55ID0gbnVsbDtcbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5mbGdTdG9wcGluZyA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCB3b3JrZXJNYW5hZ2VyID0gbmV3IFdvcmtlck1hbmFnZXIoKTtcbiIsImltcG9ydCB7IENvcmVTZXR1cCB9IGZyb20gJy4vbm9kZXMvaW5kZXgnO1xuaW1wb3J0IHsgd29ya2VyTWFuYWdlciwgV29ya2VyTWFuYWdlciB9IGZyb20gJy4vd29ya2VyL2luZGV4Jztcblxud29ya2VyTWFuYWdlci5uZXdTZXR1cChDb3JlU2V0dXApO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIENvcmVTZXR1cCxcbiAgV29ya2VyTWFuYWdlcixcbiAgd29ya2VyTWFuYWdlclxufTtcbiJdLCJuYW1lcyI6WyJFbnZOb2RlIiwiV29ya2VyTm9kZSIsImVudiIsIkFsbCIsIkNsb3VkIiwiUEMiLCJXZWIiLCJNb2JpbGUiLCJJT1MiLCJBbmRyb2lkIiwiQ2hlY2tFbnYiLCJ0aGlzIiwiaW5jbHVkZXMiLCJrZXkiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjaGVja0tleSIsImljb24iLCJncm91cCIsImh0bWwiLCJlbE5vZGUiLCJtYWluIiwibm9kZSIsInNjcmlwdCIsInByb3BlcnRpZXMiLCJvcHRpb24iLCJhc3luYyIsIm5vZGVJZCIsImRhdGEiLCJtYW5hZ2VyIiwibmV4dCIsImluZGV4IiwibGluZXMiLCJpdGVtIiwiZnJvbSIsImZyb21JbmRleCIsInRvIiwiQ29yZUFsZXJ0Tm9kZSIsIm1lc3NhZ2UiLCJlZGl0IiwiZGVmYXVsdCIsImFsZXJ0IiwibmV4dE5vZGUiLCJDb3JlQXNzaWduTm9kZSIsImVudl9uYW1lIiwiZW52X3ZhbHVlIiwiY2xhc3MiLCJkb3QiLCJsZWZ0IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJOb2RlQmVnaW4iLCJDb3JlQmVnaW5Ob2RlIiwib25seU5vZGUiLCJzb3J0IiwiQ29yZUNvbnNvbGVOb2RlIiwiY29uc29sZSIsImxvZyIsIkNvcmVFbmROb2RlIiwiQ29yZUZvck5vZGUiLCJDb3JlR3JvdXBOb2RlIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJlbnQiLCJvcGVuR3JvdXAiLCJHZXRJZCIsImdldEdyb3VwQ3VycmVudCIsInNldEdyb3VwIiwiaWQiLCJleGN1dGVBc3luYyIsIkNvcmVJZk5vZGUiLCJjb25kaXRpb24iLCJjb25kIiwic3ViIiwiR2V0IiwiSW5jcmVhc2UiLCJDb3JlUHJvamVjdE5vZGUiLCJwcm9qZWN0Iiwic2VsZWN0IiwiZGF0YVNlbGVjdCIsImdldFByb2plY3RBbGwiLCJtYXAiLCJ2YWx1ZSIsInRleHQiLCJnZXRQcm9qZWN0Q3VycmVudCIsInNldFByb2plY3QiLCJDb3JlU3dpdGNoTm9kZSIsIkNvcmVTZXR1cCIsIm5vZGVzIiwibmV3Tm9kZXMiLCJQcm9wZXJ0eUVudW0iLCJXb3JrZXJNYW5hZ2VyIiwiZXZlbnRzIiwib25TYWZlIiwiZXZlbnQiLCJjYWxsYmFjayIsInJlbW92ZUxpc3RlbmVyIiwib24iLCJlcnJvciIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsInB1c2giLCJsaXN0ZW5lckluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImRpc3BhdGNoIiwiZGV0YWlscyIsImZvckVhY2giLCJsaXN0ZW5lciIsIiRkYXRhIiwiJG5vZGVzIiwiJHByb2plY3QiLCIkZ3JvdXAiLCJkZWxheV90aW1lIiwiTG9hZERhdGEiLCJnZXRQcm9qZWN0IiwicHJvamVjdHMiLCJmaW5kIiwiZ2V0Tm9kZUluR3JvdXAiLCJfZ3JvdXAiLCJmaWx0ZXIiLCJnZXROb2RlQnlJZCIsIl9pZCIsImdldE5vZGVCeUtleSIsIl9rZXkiLCJKU09OIiwicGFyc2UiLCJuZXdTZXR1cCIsInNldHVwIiwiU2V0dXAiLCJnZXRDb250cm9sTm9kZXMiLCJnZXRXb3JrZXJOb2RlIiwiJGlkIiwiZGF0YU5vZGUiLCJleGN1dGVEYXRhTm9kZSIsImRlbGF5IiwidGltZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImZsZ1N0b3BwaW5nIiwid29ya2VyTm9kZSIsImV4ZWN1dGUiLCJleGN1dGVOb2RlIiwiYmluZCIsImV4Y3V0ZSIsImV4Iiwic3RvcCIsIndvcmtlck1hbmFnZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs0Q0FFQSxJQUFZQSxHQUFaLFNBQVlBLEdBQ1ZBLEVBQUFBLEVBQUEsSUFBQSxHQUFBLE1BQ0FBLEVBQUFBLEVBQUEsSUFBQSxHQUFBLE1BQ0FBLEVBQUFBLEVBQUEsR0FBQSxHQUFBLEtBQ0FBLEVBQUFBLEVBQUEsTUFBQSxHQUFBLFFBQ0FBLEVBQUFBLEVBQUEsT0FBQSxHQUFBLFNBQ0FBLEVBQUFBLEVBQUEsSUFBQSxHQUFBLE1BQ0FBLEVBQUFBLEVBQUEsUUFBQSxHQUFBLFVBUEYsQ0FBWUEsSUFBQUEsRUFRWCxXQWdCWUMsRUFDWEMsTUFDRSxNQUFPLENBQUNGLEVBQVFHLElBQUtILEVBQVFJLE1BQU9KLEVBQVFLLEdBQUlMLEVBQVFNLElBQUtOLEVBQVFPLE9BQVFQLEVBQVFRLElBQUtSLEVBQVFTLFNBRTdGQyxTQUFTUixHQUNkLE9BQU9TLEtBQUtULE1BQU1VLFNBQVNWLEdBRTdCVyxNQUNFLE9BQU9GLEtBQUtHLFlBQVlDLEtBRW5CQyxTQUFTSCxHQUNkLE9BQU9GLEtBQUtFLE9BQVNBLEVBRXZCRSxPQUFjLE9BQU9KLEtBQUtHLFlBQVlDLEtBQ3RDRSxPQUFjLE1BQU8sOEJBQ3JCQyxRQUNFLE1BQU8sU0FFVEMsTUFBS0MsT0FBRUEsRUFBTUMsS0FBRUEsRUFBSUMsS0FBRUEsSUFDbkIsTUFBTyxHQUVUQyxRQUFPSCxPQUFFQSxFQUFNQyxLQUFFQSxFQUFJQyxLQUFFQSxLQUN2QkUsY0FDQUMsVUFDQUMsY0FBY0MsRUFBYUMsRUFBV0MsRUFBd0JDLElBR3BESixlQUFlRSxFQUFXRSxFQUFXSCxFQUFhSSxFQUFhLE1BQ3ZFLEdBQUlILEdBQU1JLE1BQ1IsSUFBSyxJQUFJQyxLQUFRTCxFQUFLSSxNQUNoQkMsRUFBS0MsTUFBUVAsR0FBb0IsTUFBVEksR0FBaUJFLEVBQUtFLFdBQWFKLFNBQ3ZERCxFQUFLRyxFQUFLRyxLQ3REcEIsTUFBT0MsVUFBc0JwQyxFQUNqQ1ksTUFDRSxNQUFPLGFBRVRFLE9BQ0UsTUFBTyxRQUVURSxPQUNFLE1BQU8sOEJBRVRFLE1BQUtDLE9BQUVBLEVBQU1DLEtBQUVBLEVBQUlDLEtBQUVBLElBQ25CLE1BQU8sNkZBRVRFLGFBQ0UsTUFBTyxDQUNMYyxRQUFTLENBQ1B6QixJQUFLLFVBQ0wwQixNQUFNLEVBQ05DLFFBQVMsS0FJZmQsY0FBY0MsRUFBYUMsRUFBV0MsRUFBd0JDLEdBQzVEVyxNQUFNYixHQUFNVSxlQUNOM0IsS0FBSytCLFNBQVNkLEVBQU1FLEVBQU1ILElDeEI5QixNQUFPZ0IsVUFBdUIxQyxFQUNsQ1ksTUFDRSxNQUFPLGNBRVRFLE9BQ0UsTUFBTyxTQUVURSxPQUNFLE1BQU8sOEJBRVRPLGFBQ0UsTUFBTyxDQUNMb0IsU0FBVSxDQUNSL0IsSUFBSyxXQUNMMEIsTUFBTSxFQUNOQyxRQUFTLElBRVhLLFVBQVcsQ0FDVGhDLElBQUssWUFDTDBCLE1BQU0sRUFDTkMsUUFBUyxLQUlmZixTQUNFLE1BQU8sQ0FDTHFCLE1BQU8sR0FDUEMsSUFBSyxDQUNIQyxLQUFNLEVBQ05DLElBQUssRUFDTEMsTUFBTyxFQUNQQyxPQUFRLElBS2RoQyxNQUFLQyxPQUFFQSxFQUFNQyxLQUFFQSxFQUFJQyxLQUFFQSxJQUNuQixNQUFPLDBYQU9USSxjQUFjQyxFQUFhQyxFQUFXQyxFQUF3QkMsU0FDdERuQixLQUFLK0IsU0FBU2QsRUFBTUUsRUFBTUgsSUM5QzdCLE1BQU15QixFQUFZLGFBQ25CLE1BQU9DLFVBQXNCcEQsRUFFakNZLE1BQ0UsT0FBT3VDLEVBRVRyQyxPQUNFLE1BQU8sUUFFVFUsU0FDRSxNQUFPLENBQ0w2QixVQUFVLEVBQ1ZDLEtBQU0sRUFDTlIsSUFBSyxDQUNIQyxLQUFNLEVBQ05DLElBQUssRUFDTEMsTUFBTyxFQUNQQyxPQUFRLElBSWR6QixjQUFjQyxFQUFhQyxFQUFXQyxFQUF3QkMsU0FDdERuQixLQUFLK0IsU0FBU2QsRUFBTUUsRUFBTUgsSUNyQjlCLE1BQU82QixVQUF3QnZELEVBQ25DWSxNQUNFLE1BQU8sZUFFVEUsT0FDRSxNQUFPLFVBRVRFLE9BQ0UsTUFBTyw4QkFFVEUsTUFBS0MsT0FBRUEsRUFBTUMsS0FBRUEsRUFBSUMsS0FBRUEsSUFDbkIsTUFBTyw2RkFFVEUsYUFDRSxNQUFPLENBQ0xjLFFBQVMsQ0FDUHpCLElBQUssVUFDTDBCLE1BQU0sRUFDTkMsUUFBUyxLQUlmZCxjQUFjQyxFQUFhQyxFQUFXQyxFQUF3QkMsR0FDNUQyQixRQUFRQyxJQUFJOUIsR0FBTVUsZUFDWjNCLEtBQUsrQixTQUFTZCxFQUFNRSxFQUFNSCxJQ3pCOUIsTUFBT2dDLFVBQW9CMUQsRUFDL0JZLE1BQ0UsTUFBTyxXQUVURSxPQUNFLE1BQU8sTUFFVEUsT0FDRSxNQUFPLDhCQUVUUSxTQUNFLE1BQU8sQ0FDTDZCLFVBQVUsRUFDVkMsS0FBTSxFQUNOUixJQUFLLENBQ0hDLEtBQU0sRUFDTkMsSUFBSyxFQUNMQyxNQUFPLEVBQ1BDLE9BQVEsS0NqQlYsTUFBT1MsVUFBb0IzRCxFQUMvQlksTUFDRSxNQUFPLFdBRVRFLE9BQ0UsTUFBTyxNQUVURSxPQUNFLE1BQU8sOENBR1RTLGNBQWNDLEVBQWFDLEVBQVdDLEVBQXdCQyxTQUN0RG5CLEtBQUsrQixTQUFTZCxFQUFNRSxFQUFNSCxJQ1o5QixNQUFPa0MsVUFBc0I1RCxFQUNqQ1ksTUFDRSxNQUFPLGFBRVRFLE9BQ0UsTUFBTyxRQUVURSxPQUNFLE1BQU8sc0NBRVRFLE1BQUtDLE9BQUVBLEVBQU1DLEtBQUVBLEVBQUlDLEtBQUVBLElBQ25CLE1BQU8sc0dBRVRDLFFBQU9ILE9BQUVBLEVBQU1DLEtBQUVBLEVBQUlDLEtBQUVBLElBQ3JCRixFQUFPMEMsY0FBYyxnQkFBZ0JDLGlCQUFpQixTQUFTLEtBQzdEekMsRUFBSzBDLE9BQU9DLFVBQVUzQyxFQUFLNEMsWUFHL0J4QyxjQUFjQyxFQUFhQyxFQUFXQyxFQUF3QkMsR0FDNUQsTUFBTVosRUFBUVcsRUFBUXNDLGtCQUN0QnRDLEVBQVF1QyxTQUFTeEMsRUFBS3lDLFVBQ2hCeEMsRUFBUXlDLGNBQ2R6QyxFQUFRdUMsU0FBU2xELFNBQ1hQLEtBQUsrQixTQUFTZCxFQUFNRSxFQUFNSCxJQ3hCOUIsTUFBTzRDLFVBQW1CdEUsRUFDOUJZLE1BQ0UsTUFBTyxVQUVURSxPQUNFLE1BQU8sS0FFVEUsT0FDRSxNQUFPLGdDQUVUTyxhQUNFLE1BQU8sQ0FDTGdELFVBQVcsQ0FDVDNELElBQUssWUFDTDBCLE1BQU0sRUFDTkMsUUFBUyxHQUVYaUMsS0FBTSxDQUNKNUQsSUFBSyxPQUNMMEIsTUFBTSxFQUNObUMsS0FBSyxFQUNMbEMsUUFBUyxJQUlmZixTQUNFLE1BQU8sQ0FDTHFCLE1BQU8sR0FDUEMsSUFBSyxDQUNIQyxLQUFNLEVBQ05DLElBQUssRUFDTEMsTUFBTyxFQUNQQyxPQUFRLElBSWRoQyxNQUFLQyxPQUFFQSxFQUFNQyxLQUFFQSxFQUFJQyxLQUFFQSxJQUNuQixJQUFJa0QsRUFBWWxELEVBQUtNLEtBQUsrQyxJQUFJLGFBQzFCeEQsRUFBTyxHQUNYLElBQUssSUFBSVksRUFBUSxFQUFHQSxFQUFReUMsRUFBV3pDLElBQ3JDWixFQUFPLEdBQUdBLHFJQUNtRixNQUFRWSxrSEFFakUsTUFBUUEsaUNBUTlDLE9BTEFaLEVBQU8sR0FBR0EseVBBS0hBLEVBRVRJLFFBQU9ILE9BQUVBLEVBQU1DLEtBQUVBLEVBQUlDLEtBQUVBLElBQ3JCRixFQUFPMEMsY0FBYyxxQkFBcUJDLGlCQUFpQixTQUFTLEtBQ2xFekMsRUFBS00sS0FBS2dELFNBQVMsaUJDdERuQixNQUFPQyxVQUF3QjVFLEVBQ25DWSxNQUNFLE1BQU8sZUFFVEUsT0FDRSxNQUFPLFVBRVRFLE9BQ0UsTUFBTyx5Q0FFVE8sYUFDRSxNQUFPLENBQ0xzRCxRQUFTLENBQ1BqRSxJQUFLLFVBQ0wwQixNQUFNLEVBQ053QyxRQUFRLEVBQ1JDLFdBQVksRUFBRzVELE9BQUFBLEVBQVFDLEtBQUFBLEVBQU1DLEtBQUFBLEtBQ3BCRCxFQUFLNEQsZ0JBQWdCQyxLQUFLakQsSUFDeEIsQ0FDTGtELE1BQU9sRCxFQUFLMEMsSUFBSSxNQUNoQlMsS0FBTW5ELEVBQUswQyxJQUFJLGNBTzNCeEQsTUFBS0MsT0FBRUEsRUFBTUMsS0FBRUEsRUFBSUMsS0FBRUEsSUFDbkIsTUFBTyxxR0FFVEMsUUFBT0gsT0FBRUEsRUFBTUMsS0FBRUEsRUFBSUMsS0FBRUEsS0FHdkJJLGNBQWNDLEVBQWFDLEVBQVdDLEVBQXdCQyxHQUM1RCxNQUFNZ0QsRUFBVWpELEVBQVF3RCxvQkFDbEJuRSxFQUFRVyxFQUFRc0Msa0JBQ3RCdEMsRUFBUXlELFdBQVcxRCxFQUFLa0QsZUFDbEJqRCxFQUFReUMsY0FDZHpDLEVBQVF5RCxXQUFXUixHQUNuQmpELEVBQVF1QyxTQUFTbEQsU0FDWFAsS0FBSytCLFNBQVNkLEVBQU1FLEVBQU1ILElDekM5QixNQUFPNEQsVUFBdUJ0RixFQUNsQ1ksTUFDRSxNQUFPLGNBRVRFLE9BQ0UsTUFBTyxVQ0tMLE1BQU95RSxnQkNUWEMsUUFDRSxNQUFPLEdBRVRDLFdBQ0UsT0FBTy9FLEtBQUs4RSxRQUFRUCxLQUFLakQsT0FBY0EsTURNekN3RCxRQUNFLE1BQU8sQ0FDTHBDLEVBQ0FNLEVBQ0FoQixFQUNBNEIsRUFDQWdCLEVBQ0EzQixFQUNBdkIsRUFDQW1CLEVBQ0FxQixFQUNBaEIsSUVuQkMsTUFBTThCLEVBQ0wsZUFES0EsRUFFRCxzQkFLQ0MsRUFDSEMsT0FBYyxHQUNmQyxPQUFPQyxFQUFlQyxHQUMzQnJGLEtBQUtzRixlQUFlRixFQUFPQyxHQUMzQnJGLEtBQUt1RixHQUFHSCxFQUFPQyxHQUdWRSxHQUFHSCxFQUFlQyxHQUV2QixNQUF3QixtQkFBYkEsR0FDVHZDLFFBQVEwQyxNQUFNLHNFQUFzRUgsSUFDN0UsR0FHWSxpQkFBVkQsR0FDVHRDLFFBQVEwQyxNQUFNLDZEQUE2REosSUFDcEUsU0FHa0JLLElBQXZCekYsS0FBS2tGLE9BQU9FLEtBQ2RwRixLQUFLa0YsT0FBT0UsR0FBUyxDQUNuQk0sVUFBVyxVQUdmMUYsS0FBS2tGLE9BQU9FLEdBQU9NLFVBQVVDLEtBQUtOLElBRzdCQyxlQUFlRixFQUFlQyxHQUduQyxJQUFLckYsS0FBS2tGLE9BQU9FLEdBQVEsT0FBTyxFQUVoQyxNQUFNTSxFQUFZMUYsS0FBS2tGLE9BQU9FLEdBQU9NLFVBQy9CRSxFQUFnQkYsRUFBVUcsUUFBUVIsR0FDcEJPLEdBQWlCLEdBQ3BCRixFQUFVSSxPQUFPRixFQUFlLEdBRzVDRyxTQUFTWCxFQUFlWSxHQUU3QixRQUEyQlAsSUFBdkJ6RixLQUFLa0YsT0FBT0UsR0FDZCxPQUFPLEVBRVRwRixLQUFLa0YsT0FBT0UsR0FBT00sVUFBVU8sU0FBU0MsSUFDcENBLEVBQVNGLE1BR0xHLE1BQ0FDLE9BQXVCLEdBQ3ZCQyxTQUNBQyxPQUFjLE9BQ2RDLFdBQXFCLElBQzdCcEcsWUFBbUJjLEVBQVksTUFDN0JqQixLQUFLd0csU0FBU3ZGLEdBRVQwRCxXQUFXUixHQUNoQm5FLEtBQUtxRyxTQUFXbEMsRUFDaEJuRSxLQUFLc0csT0FBUyxPQUVURyxhQUNMLE9BQUl6RyxLQUFLbUcsTUFBTWpHLE1BQVE4RSxFQUNkaEYsS0FBS21HLE9BQU9PLFVBQVVDLE1BQU1yRixHQUFjQSxFQUFLb0MsSUFBTTFELEtBQUtxRyxXQUUvRHJHLEtBQUttRyxNQUFNakcsTUFBUThFLEVBQ2RoRixLQUFLbUcsV0FEZCxFQUlLMUMsU0FBU2xELEdBQ2RQLEtBQUtzRyxPQUFTL0YsRUFFVGlELGtCQUNMLE9BQU94RCxLQUFLc0csT0FFUDVCLG9CQUNMLE9BQU8xRSxLQUFLcUcsU0FFUE8sZUFBZXJHLEVBQWEsTUFDakMsSUFBSXNHLEVBQVN0RyxHQUFTUCxLQUFLc0csT0FDM0IsT0FBT3RHLEtBQUt5RyxjQUFjM0IsT0FBT2dDLFFBQVF4RixHQUFjQSxFQUFLZixPQUFTc0csSUFFaEVFLFlBQVlDLEdBQ2pCLE9BQU9oSCxLQUFLNEcsa0JBQWtCRSxRQUFReEYsR0FBY0EsRUFBS29DLElBQU1zRCxNQUFPLEdBR2pFQyxhQUFhQyxHQUNsQixPQUFPbEgsS0FBSzRHLGtCQUFrQkUsUUFBUXhGLEdBQWNBLEVBQUtwQixLQUFPZ0gsTUFBUSxHQUVuRVYsU0FBU3ZGLEdBQ2QsT0FBS0EsR0FFSGpCLEtBQUttRyxNQURhLGlCQUFUbEYsRUFDSWtHLEtBQUtDLE1BQU1uRyxHQUVYQSxFQUVYakIsS0FBS21HLE1BQU1qRyxNQUFROEUsSUFDckJoRixLQUFLcUcsU0FBV3JHLEtBQUttRyxNQUFNaEMsU0FFeEJuRSxLQUFLcUcsV0FDUnJHLEtBQUtxRyxTQUFXckcsS0FBS21HLE1BQU1PLFdBQVcsSUFBSWhELElBRXJDMUQsTUFaV0EsS0FjYnFILFNBQVNDLEdBQ2R0SCxLQUFLdUgsTUFBTSxJQUFJRCxHQUVWQyxNQUFNRCxHQUNYdEgsS0FBS29HLE9BQVMsSUFBSXBHLEtBQUtvRyxVQUFXa0IsRUFBTXZDLFlBRW5DeUMsa0JBQ0wsT0FBT3hILEtBQUtvRyxPQUFPN0IsS0FBS2pELElBQ2YsQ0FFSHBCLElBQUssR0FDTEUsS0FBTSxHQUNORyxNQUFPLEdBQ1BDLEtBQU0sR0FDTkksT0FBUSxHQUNSQyxXQUFZLEdBQ1p1QixJQUFLLENBQ0hDLEtBQU0sRUFDTkMsSUFBSyxFQUNMQyxNQUFPLEVBQ1BDLE9BQVEsTUFHVGxCLEVBQUtSLFVBQVksR0FDcEJaLElBQUtvQixFQUFLcEIsTUFDVkUsS0FBTWtCLEVBQUtsQixPQUNYRSxLQUFNZ0IsRUFBS2hCLE9BQ1hDLE1BQU9lLEVBQUtmLFFBQ1pDLEtBQU1jLEVBQUtkLEtBQ1hJLE9BQVFVLEVBQUtWLE9BQ2JDLFdBQVlTLEVBQUtULGNBQWdCLE9BSS9CNEcsY0FBY1AsR0FDcEIsT0FBT2xILEtBQUtvRyxRQUFRVSxRQUFReEYsR0FBU0EsRUFBS2pCLFNBQVM2RyxPQUFTLEdBRXREbkcsaUJBQWlCMkcsR0FDdkIsTUFBTUMsRUFBVzNILEtBQUsrRyxZQUFZVyxTQUM1QjFILEtBQUs0SCxlQUFlRCxHQUU1QkUsTUFBTUMsRUFBZSxLQUNuQixPQUFPLElBQUlDLFNBQVFDLEdBQVdDLFdBQVdELEVBQVNGLEtBRTVDL0cscUJBQXFCNEcsR0FDM0IsR0FBSTNILEtBQUtrSSxZQUNQbEksS0FBSytGLFNBQVMsa0JBQW1CLFNBSW5DLFNBRE0vRixLQUFLNkgsTUFBTTdILEtBQUt1RyxZQUNsQm9CLEVBQVUsQ0FDWjNILEtBQUsrRixTQUFTLGFBQWMsQ0FBRXBGLEtBQU1nSCxJQUNwQyxNQUFNUSxFQUFhbkksS0FBS3lILGNBQWNFLEVBQVN6SCxXQUN6Q2lJLEdBQVlDLFFBQVFULEVBQVNqRSxHQUFJaUUsRUFBVTNILEtBQU1BLEtBQUtxSSxXQUFXQyxLQUFLdEksUUFDNUVBLEtBQUsrRixTQUFTLFdBQVksQ0FBRXBGLEtBQU1nSCxLQUcvQjVHLG9CQUNMLE1BQU00RyxFQUFXM0gsS0FBS2lILGFBQWEsb0JBQzdCakgsS0FBSzRILGVBQWVELEdBRXJCWSxTQUNMTixZQUFXbEgsVUFDVGYsS0FBSytGLFNBQVMsZUFBZ0IsSUFDOUIsSUFDRS9GLEtBQUtrSSxhQUFjLFFBQ2JsSSxLQUFLMkQsY0FDWDNELEtBQUtrSSxhQUFjLEVBQ25CbEksS0FBSytGLFNBQVMsYUFBYyxJQUM1QixNQUFPeUMsR0FDUDFGLFFBQVFDLElBQUl5RixHQUNaeEksS0FBSytGLFNBQVMsYUFBYyxJQUU5Qi9GLEtBQUtrSSxhQUFjLEtBR3ZCQSxZQUFtQixLQUNaTyxPQUNMekksS0FBS2tJLGFBQWMsR0FHaEIsTUFBTVEsRUFBZ0IsSUFBSXpELFNDaE1qQ3lELEVBQWNyQixTQUFTeEMsR0FFUixDQUNiQSxVQUFBQSxFQUNBSSxjQUFBQSxFQUNBeUQsY0FBQUEifQ==
